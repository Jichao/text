// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_343_000)
{
    // 3A4B 003F;	
    // (㩋) CJK UNIFIED IDEOGRAPH-3A4B	[FB80 BA4B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A4B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_001)
{
    // 3A4B 0061;	
    // (㩋) CJK UNIFIED IDEOGRAPH-3A4B	[FB80 BA4B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A4B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_002)
{
    // 3A4B 0041;	
    // (㩋) CJK UNIFIED IDEOGRAPH-3A4B	[FB80 BA4B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A4B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_003)
{
    // 3A4B 0062;	
    // (㩋) CJK UNIFIED IDEOGRAPH-3A4B	[FB80 BA4B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A4B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_004)
{
    // 3A4C 0021;	
    // (㩌) CJK UNIFIED IDEOGRAPH-3A4C	[FB80 BA4C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A4C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA4C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_005)
{
    // 3A4C 003F;	
    // (㩌) CJK UNIFIED IDEOGRAPH-3A4C	[FB80 BA4C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A4C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA4C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_006)
{
    // 3A4C 0061;	
    // (㩌) CJK UNIFIED IDEOGRAPH-3A4C	[FB80 BA4C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A4C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_007)
{
    // 3A4C 0041;	
    // (㩌) CJK UNIFIED IDEOGRAPH-3A4C	[FB80 BA4C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A4C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_008)
{
    // 3A4C 0062;	
    // (㩌) CJK UNIFIED IDEOGRAPH-3A4C	[FB80 BA4C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A4C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA4C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_009)
{
    // 3A4D 0021;	
    // (㩍) CJK UNIFIED IDEOGRAPH-3A4D	[FB80 BA4D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A4D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA4D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_010)
{
    // 3A4D 003F;	
    // (㩍) CJK UNIFIED IDEOGRAPH-3A4D	[FB80 BA4D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A4D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA4D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_011)
{
    // 3A4D 0061;	
    // (㩍) CJK UNIFIED IDEOGRAPH-3A4D	[FB80 BA4D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A4D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_012)
{
    // 3A4D 0041;	
    // (㩍) CJK UNIFIED IDEOGRAPH-3A4D	[FB80 BA4D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A4D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_013)
{
    // 3A4D 0062;	
    // (㩍) CJK UNIFIED IDEOGRAPH-3A4D	[FB80 BA4D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A4D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA4D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_014)
{
    // 3A4E 0021;	
    // (㩎) CJK UNIFIED IDEOGRAPH-3A4E	[FB80 BA4E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A4E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA4E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_015)
{
    // 3A4E 003F;	
    // (㩎) CJK UNIFIED IDEOGRAPH-3A4E	[FB80 BA4E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A4E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA4E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_016)
{
    // 3A4E 0061;	
    // (㩎) CJK UNIFIED IDEOGRAPH-3A4E	[FB80 BA4E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A4E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_017)
{
    // 3A4E 0041;	
    // (㩎) CJK UNIFIED IDEOGRAPH-3A4E	[FB80 BA4E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A4E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_018)
{
    // 3A4E 0062;	
    // (㩎) CJK UNIFIED IDEOGRAPH-3A4E	[FB80 BA4E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A4E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_019)
{
    // 3A4F 0021;	
    // (㩏) CJK UNIFIED IDEOGRAPH-3A4F	[FB80 BA4F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A4F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA4F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_020)
{
    // 3A4F 003F;	
    // (㩏) CJK UNIFIED IDEOGRAPH-3A4F	[FB80 BA4F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A4F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA4F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_021)
{
    // 3A4F 0061;	
    // (㩏) CJK UNIFIED IDEOGRAPH-3A4F	[FB80 BA4F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A4F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_022)
{
    // 3A4F 0041;	
    // (㩏) CJK UNIFIED IDEOGRAPH-3A4F	[FB80 BA4F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A4F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_023)
{
    // 3A4F 0062;	
    // (㩏) CJK UNIFIED IDEOGRAPH-3A4F	[FB80 BA4F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A4F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA4F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_024)
{
    // 3A50 0021;	
    // (㩐) CJK UNIFIED IDEOGRAPH-3A50	[FB80 BA50 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A50, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_025)
{
    // 3A50 003F;	
    // (㩐) CJK UNIFIED IDEOGRAPH-3A50	[FB80 BA50 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A50, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_026)
{
    // 3A50 0061;	
    // (㩐) CJK UNIFIED IDEOGRAPH-3A50	[FB80 BA50 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A50, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_027)
{
    // 3A50 0041;	
    // (㩐) CJK UNIFIED IDEOGRAPH-3A50	[FB80 BA50 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A50, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_028)
{
    // 3A50 0062;	
    // (㩐) CJK UNIFIED IDEOGRAPH-3A50	[FB80 BA50 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A50, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_029)
{
    // 3A51 0021;	
    // (㩑) CJK UNIFIED IDEOGRAPH-3A51	[FB80 BA51 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A51, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA51, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_030)
{
    // 3A51 003F;	
    // (㩑) CJK UNIFIED IDEOGRAPH-3A51	[FB80 BA51 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A51, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA51, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_031)
{
    // 3A51 0061;	
    // (㩑) CJK UNIFIED IDEOGRAPH-3A51	[FB80 BA51 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A51, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_032)
{
    // 3A51 0041;	
    // (㩑) CJK UNIFIED IDEOGRAPH-3A51	[FB80 BA51 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A51, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_033)
{
    // 3A51 0062;	
    // (㩑) CJK UNIFIED IDEOGRAPH-3A51	[FB80 BA51 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A51, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA51, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_034)
{
    // 3A52 0021;	
    // (㩒) CJK UNIFIED IDEOGRAPH-3A52	[FB80 BA52 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A52, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA52, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_035)
{
    // 3A52 003F;	
    // (㩒) CJK UNIFIED IDEOGRAPH-3A52	[FB80 BA52 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A52, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA52, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_036)
{
    // 3A52 0061;	
    // (㩒) CJK UNIFIED IDEOGRAPH-3A52	[FB80 BA52 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A52, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_037)
{
    // 3A52 0041;	
    // (㩒) CJK UNIFIED IDEOGRAPH-3A52	[FB80 BA52 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A52, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_038)
{
    // 3A52 0062;	
    // (㩒) CJK UNIFIED IDEOGRAPH-3A52	[FB80 BA52 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A52, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA52, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_039)
{
    // 3A53 0021;	
    // (㩓) CJK UNIFIED IDEOGRAPH-3A53	[FB80 BA53 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A53, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA53, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_040)
{
    // 3A53 003F;	
    // (㩓) CJK UNIFIED IDEOGRAPH-3A53	[FB80 BA53 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A53, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA53, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_041)
{
    // 3A53 0061;	
    // (㩓) CJK UNIFIED IDEOGRAPH-3A53	[FB80 BA53 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A53, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_042)
{
    // 3A53 0041;	
    // (㩓) CJK UNIFIED IDEOGRAPH-3A53	[FB80 BA53 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A53, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_043)
{
    // 3A53 0062;	
    // (㩓) CJK UNIFIED IDEOGRAPH-3A53	[FB80 BA53 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A53, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA53, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_044)
{
    // 3A54 0021;	
    // (㩔) CJK UNIFIED IDEOGRAPH-3A54	[FB80 BA54 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A54, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA54, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_045)
{
    // 3A54 003F;	
    // (㩔) CJK UNIFIED IDEOGRAPH-3A54	[FB80 BA54 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A54, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA54, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_046)
{
    // 3A54 0061;	
    // (㩔) CJK UNIFIED IDEOGRAPH-3A54	[FB80 BA54 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A54, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_047)
{
    // 3A54 0041;	
    // (㩔) CJK UNIFIED IDEOGRAPH-3A54	[FB80 BA54 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A54, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_048)
{
    // 3A54 0062;	
    // (㩔) CJK UNIFIED IDEOGRAPH-3A54	[FB80 BA54 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A54, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_049)
{
    // 3A55 0021;	
    // (㩕) CJK UNIFIED IDEOGRAPH-3A55	[FB80 BA55 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A55, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA55, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_050)
{
    // 3A55 003F;	
    // (㩕) CJK UNIFIED IDEOGRAPH-3A55	[FB80 BA55 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A55, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA55, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_051)
{
    // 3A55 0061;	
    // (㩕) CJK UNIFIED IDEOGRAPH-3A55	[FB80 BA55 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A55, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_052)
{
    // 3A55 0041;	
    // (㩕) CJK UNIFIED IDEOGRAPH-3A55	[FB80 BA55 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A55, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_053)
{
    // 3A55 0062;	
    // (㩕) CJK UNIFIED IDEOGRAPH-3A55	[FB80 BA55 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A55, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA55, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_054)
{
    // 3A56 0021;	
    // (㩖) CJK UNIFIED IDEOGRAPH-3A56	[FB80 BA56 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A56, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA56, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_055)
{
    // 3A56 003F;	
    // (㩖) CJK UNIFIED IDEOGRAPH-3A56	[FB80 BA56 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A56, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA56, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_056)
{
    // 3A56 0061;	
    // (㩖) CJK UNIFIED IDEOGRAPH-3A56	[FB80 BA56 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A56, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_057)
{
    // 3A56 0041;	
    // (㩖) CJK UNIFIED IDEOGRAPH-3A56	[FB80 BA56 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A56, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_058)
{
    // 3A56 0062;	
    // (㩖) CJK UNIFIED IDEOGRAPH-3A56	[FB80 BA56 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A56, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_059)
{
    // 3A57 0021;	
    // (㩗) CJK UNIFIED IDEOGRAPH-3A57	[FB80 BA57 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A57, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA57, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_060)
{
    // 3A57 003F;	
    // (㩗) CJK UNIFIED IDEOGRAPH-3A57	[FB80 BA57 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A57, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA57, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_061)
{
    // 3A57 0061;	
    // (㩗) CJK UNIFIED IDEOGRAPH-3A57	[FB80 BA57 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A57, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_062)
{
    // 3A57 0041;	
    // (㩗) CJK UNIFIED IDEOGRAPH-3A57	[FB80 BA57 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A57, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_063)
{
    // 3A57 0062;	
    // (㩗) CJK UNIFIED IDEOGRAPH-3A57	[FB80 BA57 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A57, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_064)
{
    // 3A58 0021;	
    // (㩘) CJK UNIFIED IDEOGRAPH-3A58	[FB80 BA58 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A58, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA58, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_065)
{
    // 3A58 003F;	
    // (㩘) CJK UNIFIED IDEOGRAPH-3A58	[FB80 BA58 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A58, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA58, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_066)
{
    // 3A58 0061;	
    // (㩘) CJK UNIFIED IDEOGRAPH-3A58	[FB80 BA58 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A58, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_067)
{
    // 3A58 0041;	
    // (㩘) CJK UNIFIED IDEOGRAPH-3A58	[FB80 BA58 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A58, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_068)
{
    // 3A58 0062;	
    // (㩘) CJK UNIFIED IDEOGRAPH-3A58	[FB80 BA58 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A58, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA58, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_069)
{
    // 3A59 0021;	
    // (㩙) CJK UNIFIED IDEOGRAPH-3A59	[FB80 BA59 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A59, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA59, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_070)
{
    // 3A59 003F;	
    // (㩙) CJK UNIFIED IDEOGRAPH-3A59	[FB80 BA59 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A59, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA59, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_071)
{
    // 3A59 0061;	
    // (㩙) CJK UNIFIED IDEOGRAPH-3A59	[FB80 BA59 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A59, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_072)
{
    // 3A59 0041;	
    // (㩙) CJK UNIFIED IDEOGRAPH-3A59	[FB80 BA59 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A59, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_073)
{
    // 3A59 0062;	
    // (㩙) CJK UNIFIED IDEOGRAPH-3A59	[FB80 BA59 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A59, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA59, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_074)
{
    // 3A5A 0021;	
    // (㩚) CJK UNIFIED IDEOGRAPH-3A5A	[FB80 BA5A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A5A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_075)
{
    // 3A5A 003F;	
    // (㩚) CJK UNIFIED IDEOGRAPH-3A5A	[FB80 BA5A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A5A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_076)
{
    // 3A5A 0061;	
    // (㩚) CJK UNIFIED IDEOGRAPH-3A5A	[FB80 BA5A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A5A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_077)
{
    // 3A5A 0041;	
    // (㩚) CJK UNIFIED IDEOGRAPH-3A5A	[FB80 BA5A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A5A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_078)
{
    // 3A5A 0062;	
    // (㩚) CJK UNIFIED IDEOGRAPH-3A5A	[FB80 BA5A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A5A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_079)
{
    // 3A5B 0021;	
    // (㩛) CJK UNIFIED IDEOGRAPH-3A5B	[FB80 BA5B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A5B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_080)
{
    // 3A5B 003F;	
    // (㩛) CJK UNIFIED IDEOGRAPH-3A5B	[FB80 BA5B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A5B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_081)
{
    // 3A5B 0061;	
    // (㩛) CJK UNIFIED IDEOGRAPH-3A5B	[FB80 BA5B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A5B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_082)
{
    // 3A5B 0041;	
    // (㩛) CJK UNIFIED IDEOGRAPH-3A5B	[FB80 BA5B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A5B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_083)
{
    // 3A5B 0062;	
    // (㩛) CJK UNIFIED IDEOGRAPH-3A5B	[FB80 BA5B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A5B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_084)
{
    // 3A5C 0021;	
    // (㩜) CJK UNIFIED IDEOGRAPH-3A5C	[FB80 BA5C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A5C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_085)
{
    // 3A5C 003F;	
    // (㩜) CJK UNIFIED IDEOGRAPH-3A5C	[FB80 BA5C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A5C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_086)
{
    // 3A5C 0061;	
    // (㩜) CJK UNIFIED IDEOGRAPH-3A5C	[FB80 BA5C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A5C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_087)
{
    // 3A5C 0041;	
    // (㩜) CJK UNIFIED IDEOGRAPH-3A5C	[FB80 BA5C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A5C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_088)
{
    // 3A5C 0062;	
    // (㩜) CJK UNIFIED IDEOGRAPH-3A5C	[FB80 BA5C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A5C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_089)
{
    // 3A5D 0021;	
    // (㩝) CJK UNIFIED IDEOGRAPH-3A5D	[FB80 BA5D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A5D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_090)
{
    // 3A5D 003F;	
    // (㩝) CJK UNIFIED IDEOGRAPH-3A5D	[FB80 BA5D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A5D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_091)
{
    // 3A5D 0061;	
    // (㩝) CJK UNIFIED IDEOGRAPH-3A5D	[FB80 BA5D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A5D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_092)
{
    // 3A5D 0041;	
    // (㩝) CJK UNIFIED IDEOGRAPH-3A5D	[FB80 BA5D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A5D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_093)
{
    // 3A5D 0062;	
    // (㩝) CJK UNIFIED IDEOGRAPH-3A5D	[FB80 BA5D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A5D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_094)
{
    // 3A5E 0021;	
    // (㩞) CJK UNIFIED IDEOGRAPH-3A5E	[FB80 BA5E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A5E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_095)
{
    // 3A5E 003F;	
    // (㩞) CJK UNIFIED IDEOGRAPH-3A5E	[FB80 BA5E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A5E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_096)
{
    // 3A5E 0061;	
    // (㩞) CJK UNIFIED IDEOGRAPH-3A5E	[FB80 BA5E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A5E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_097)
{
    // 3A5E 0041;	
    // (㩞) CJK UNIFIED IDEOGRAPH-3A5E	[FB80 BA5E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A5E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_098)
{
    // 3A5E 0062;	
    // (㩞) CJK UNIFIED IDEOGRAPH-3A5E	[FB80 BA5E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A5E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_099)
{
    // 3A5F 0021;	
    // (㩟) CJK UNIFIED IDEOGRAPH-3A5F	[FB80 BA5F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A5F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA5F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_100)
{
    // 3A5F 003F;	
    // (㩟) CJK UNIFIED IDEOGRAPH-3A5F	[FB80 BA5F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A5F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA5F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_101)
{
    // 3A5F 0061;	
    // (㩟) CJK UNIFIED IDEOGRAPH-3A5F	[FB80 BA5F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A5F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_102)
{
    // 3A5F 0041;	
    // (㩟) CJK UNIFIED IDEOGRAPH-3A5F	[FB80 BA5F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A5F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_103)
{
    // 3A5F 0062;	
    // (㩟) CJK UNIFIED IDEOGRAPH-3A5F	[FB80 BA5F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A5F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_104)
{
    // 3A60 0021;	
    // (㩠) CJK UNIFIED IDEOGRAPH-3A60	[FB80 BA60 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A60, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_105)
{
    // 3A60 003F;	
    // (㩠) CJK UNIFIED IDEOGRAPH-3A60	[FB80 BA60 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A60, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_106)
{
    // 3A60 0061;	
    // (㩠) CJK UNIFIED IDEOGRAPH-3A60	[FB80 BA60 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A60, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_107)
{
    // 3A60 0041;	
    // (㩠) CJK UNIFIED IDEOGRAPH-3A60	[FB80 BA60 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A60, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_108)
{
    // 3A60 0062;	
    // (㩠) CJK UNIFIED IDEOGRAPH-3A60	[FB80 BA60 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A60, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_109)
{
    // 3A61 0021;	
    // (㩡) CJK UNIFIED IDEOGRAPH-3A61	[FB80 BA61 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A61, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA61, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_110)
{
    // 3A61 003F;	
    // (㩡) CJK UNIFIED IDEOGRAPH-3A61	[FB80 BA61 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A61, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA61, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_111)
{
    // 3A61 0061;	
    // (㩡) CJK UNIFIED IDEOGRAPH-3A61	[FB80 BA61 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A61, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_112)
{
    // 3A61 0041;	
    // (㩡) CJK UNIFIED IDEOGRAPH-3A61	[FB80 BA61 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A61, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_113)
{
    // 3A61 0062;	
    // (㩡) CJK UNIFIED IDEOGRAPH-3A61	[FB80 BA61 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A61, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_114)
{
    // 3A62 0021;	
    // (㩢) CJK UNIFIED IDEOGRAPH-3A62	[FB80 BA62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A62, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_115)
{
    // 3A62 003F;	
    // (㩢) CJK UNIFIED IDEOGRAPH-3A62	[FB80 BA62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A62, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_116)
{
    // 3A62 0061;	
    // (㩢) CJK UNIFIED IDEOGRAPH-3A62	[FB80 BA62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A62, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_117)
{
    // 3A62 0041;	
    // (㩢) CJK UNIFIED IDEOGRAPH-3A62	[FB80 BA62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A62, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_118)
{
    // 3A62 0062;	
    // (㩢) CJK UNIFIED IDEOGRAPH-3A62	[FB80 BA62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A62, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_119)
{
    // 3A63 0021;	
    // (㩣) CJK UNIFIED IDEOGRAPH-3A63	[FB80 BA63 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A63, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_120)
{
    // 3A63 003F;	
    // (㩣) CJK UNIFIED IDEOGRAPH-3A63	[FB80 BA63 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A63, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_121)
{
    // 3A63 0061;	
    // (㩣) CJK UNIFIED IDEOGRAPH-3A63	[FB80 BA63 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A63, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_122)
{
    // 3A63 0041;	
    // (㩣) CJK UNIFIED IDEOGRAPH-3A63	[FB80 BA63 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A63, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_123)
{
    // 3A63 0062;	
    // (㩣) CJK UNIFIED IDEOGRAPH-3A63	[FB80 BA63 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A63, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_124)
{
    // 3A64 0021;	
    // (㩤) CJK UNIFIED IDEOGRAPH-3A64	[FB80 BA64 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A64, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA64, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_125)
{
    // 3A64 003F;	
    // (㩤) CJK UNIFIED IDEOGRAPH-3A64	[FB80 BA64 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A64, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA64, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_126)
{
    // 3A64 0061;	
    // (㩤) CJK UNIFIED IDEOGRAPH-3A64	[FB80 BA64 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A64, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_127)
{
    // 3A64 0041;	
    // (㩤) CJK UNIFIED IDEOGRAPH-3A64	[FB80 BA64 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A64, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_128)
{
    // 3A64 0062;	
    // (㩤) CJK UNIFIED IDEOGRAPH-3A64	[FB80 BA64 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A64, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA64, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_129)
{
    // 3A65 0021;	
    // (㩥) CJK UNIFIED IDEOGRAPH-3A65	[FB80 BA65 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A65, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_130)
{
    // 3A65 003F;	
    // (㩥) CJK UNIFIED IDEOGRAPH-3A65	[FB80 BA65 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A65, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_131)
{
    // 3A65 0061;	
    // (㩥) CJK UNIFIED IDEOGRAPH-3A65	[FB80 BA65 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A65, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_132)
{
    // 3A65 0041;	
    // (㩥) CJK UNIFIED IDEOGRAPH-3A65	[FB80 BA65 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A65, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_133)
{
    // 3A65 0062;	
    // (㩥) CJK UNIFIED IDEOGRAPH-3A65	[FB80 BA65 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A65, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_134)
{
    // 3A66 0021;	
    // (㩦) CJK UNIFIED IDEOGRAPH-3A66	[FB80 BA66 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A66, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA66, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_135)
{
    // 3A66 003F;	
    // (㩦) CJK UNIFIED IDEOGRAPH-3A66	[FB80 BA66 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A66, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA66, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_136)
{
    // 3A66 0061;	
    // (㩦) CJK UNIFIED IDEOGRAPH-3A66	[FB80 BA66 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A66, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_137)
{
    // 3A66 0041;	
    // (㩦) CJK UNIFIED IDEOGRAPH-3A66	[FB80 BA66 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A66, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_138)
{
    // 3A66 0062;	
    // (㩦) CJK UNIFIED IDEOGRAPH-3A66	[FB80 BA66 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A66, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_139)
{
    // 3A67 0021;	
    // (㩧) CJK UNIFIED IDEOGRAPH-3A67	[FB80 BA67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A67, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_140)
{
    // 3A67 003F;	
    // (㩧) CJK UNIFIED IDEOGRAPH-3A67	[FB80 BA67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A67, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_141)
{
    // 3A67 0061;	
    // (㩧) CJK UNIFIED IDEOGRAPH-3A67	[FB80 BA67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A67, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_142)
{
    // 3A67 0041;	
    // (㩧) CJK UNIFIED IDEOGRAPH-3A67	[FB80 BA67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A67, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_143)
{
    // 3A67 0062;	
    // (㩧) CJK UNIFIED IDEOGRAPH-3A67	[FB80 BA67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A67, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_144)
{
    // 3A68 0021;	
    // (㩨) CJK UNIFIED IDEOGRAPH-3A68	[FB80 BA68 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A68, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA68, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_145)
{
    // 3A68 003F;	
    // (㩨) CJK UNIFIED IDEOGRAPH-3A68	[FB80 BA68 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A68, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA68, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_146)
{
    // 3A68 0061;	
    // (㩨) CJK UNIFIED IDEOGRAPH-3A68	[FB80 BA68 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A68, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_147)
{
    // 3A68 0041;	
    // (㩨) CJK UNIFIED IDEOGRAPH-3A68	[FB80 BA68 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A68, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_148)
{
    // 3A68 0062;	
    // (㩨) CJK UNIFIED IDEOGRAPH-3A68	[FB80 BA68 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A68, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA68, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_149)
{
    // 3A69 0021;	
    // (㩩) CJK UNIFIED IDEOGRAPH-3A69	[FB80 BA69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A69, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_150)
{
    // 3A69 003F;	
    // (㩩) CJK UNIFIED IDEOGRAPH-3A69	[FB80 BA69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A69, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_151)
{
    // 3A69 0061;	
    // (㩩) CJK UNIFIED IDEOGRAPH-3A69	[FB80 BA69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A69, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_152)
{
    // 3A69 0041;	
    // (㩩) CJK UNIFIED IDEOGRAPH-3A69	[FB80 BA69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A69, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_153)
{
    // 3A69 0062;	
    // (㩩) CJK UNIFIED IDEOGRAPH-3A69	[FB80 BA69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A69, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_154)
{
    // 3A6A 0021;	
    // (㩪) CJK UNIFIED IDEOGRAPH-3A6A	[FB80 BA6A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A6A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA6A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_155)
{
    // 3A6A 003F;	
    // (㩪) CJK UNIFIED IDEOGRAPH-3A6A	[FB80 BA6A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A6A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA6A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_156)
{
    // 3A6A 0061;	
    // (㩪) CJK UNIFIED IDEOGRAPH-3A6A	[FB80 BA6A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A6A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_157)
{
    // 3A6A 0041;	
    // (㩪) CJK UNIFIED IDEOGRAPH-3A6A	[FB80 BA6A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A6A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_158)
{
    // 3A6A 0062;	
    // (㩪) CJK UNIFIED IDEOGRAPH-3A6A	[FB80 BA6A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A6A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_159)
{
    // 3A6B 0021;	
    // (㩫) CJK UNIFIED IDEOGRAPH-3A6B	[FB80 BA6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A6B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_160)
{
    // 3A6B 003F;	
    // (㩫) CJK UNIFIED IDEOGRAPH-3A6B	[FB80 BA6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A6B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_161)
{
    // 3A6B 0061;	
    // (㩫) CJK UNIFIED IDEOGRAPH-3A6B	[FB80 BA6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A6B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_162)
{
    // 3A6B 0041;	
    // (㩫) CJK UNIFIED IDEOGRAPH-3A6B	[FB80 BA6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A6B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_163)
{
    // 3A6B 0062;	
    // (㩫) CJK UNIFIED IDEOGRAPH-3A6B	[FB80 BA6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A6B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_164)
{
    // 3A6C 0021;	
    // (㩬) CJK UNIFIED IDEOGRAPH-3A6C	[FB80 BA6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A6C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_165)
{
    // 2F8C7 0021;	
    // (㩬) CJK COMPATIBILITY IDEOGRAPH-2F8C7	[FB80 BA6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_166)
{
    // 3A6C 003F;	
    // (㩬) CJK UNIFIED IDEOGRAPH-3A6C	[FB80 BA6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A6C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_167)
{
    // 2F8C7 003F;	
    // (㩬) CJK COMPATIBILITY IDEOGRAPH-2F8C7	[FB80 BA6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_168)
{
    // 3A6C 0061;	
    // (㩬) CJK UNIFIED IDEOGRAPH-3A6C	[FB80 BA6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A6C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_169)
{
    // 2F8C7 0061;	
    // (㩬) CJK COMPATIBILITY IDEOGRAPH-2F8C7	[FB80 BA6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_170)
{
    // 3A6C 0041;	
    // (㩬) CJK UNIFIED IDEOGRAPH-3A6C	[FB80 BA6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A6C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_171)
{
    // 2F8C7 0041;	
    // (㩬) CJK COMPATIBILITY IDEOGRAPH-2F8C7	[FB80 BA6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8C7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_172)
{
    // 3A6C 0062;	
    // (㩬) CJK UNIFIED IDEOGRAPH-3A6C	[FB80 BA6C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A6C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_173)
{
    // 2F8C7 0062;	
    // (㩬) CJK COMPATIBILITY IDEOGRAPH-2F8C7	[FB80 BA6C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8C7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_174)
{
    // 3A6D 0021;	
    // (㩭) CJK UNIFIED IDEOGRAPH-3A6D	[FB80 BA6D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A6D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_175)
{
    // 3A6D 003F;	
    // (㩭) CJK UNIFIED IDEOGRAPH-3A6D	[FB80 BA6D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A6D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_176)
{
    // 3A6D 0061;	
    // (㩭) CJK UNIFIED IDEOGRAPH-3A6D	[FB80 BA6D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A6D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_177)
{
    // 3A6D 0041;	
    // (㩭) CJK UNIFIED IDEOGRAPH-3A6D	[FB80 BA6D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A6D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_178)
{
    // 3A6D 0062;	
    // (㩭) CJK UNIFIED IDEOGRAPH-3A6D	[FB80 BA6D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A6D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_179)
{
    // 3A6E 0021;	
    // (㩮) CJK UNIFIED IDEOGRAPH-3A6E	[FB80 BA6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A6E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_180)
{
    // 3A6E 003F;	
    // (㩮) CJK UNIFIED IDEOGRAPH-3A6E	[FB80 BA6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A6E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_181)
{
    // 3A6E 0061;	
    // (㩮) CJK UNIFIED IDEOGRAPH-3A6E	[FB80 BA6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A6E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_182)
{
    // 3A6E 0041;	
    // (㩮) CJK UNIFIED IDEOGRAPH-3A6E	[FB80 BA6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A6E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_183)
{
    // 3A6E 0062;	
    // (㩮) CJK UNIFIED IDEOGRAPH-3A6E	[FB80 BA6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A6E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_184)
{
    // 3A6F 0021;	
    // (㩯) CJK UNIFIED IDEOGRAPH-3A6F	[FB80 BA6F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A6F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA6F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_185)
{
    // 3A6F 003F;	
    // (㩯) CJK UNIFIED IDEOGRAPH-3A6F	[FB80 BA6F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A6F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA6F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_186)
{
    // 3A6F 0061;	
    // (㩯) CJK UNIFIED IDEOGRAPH-3A6F	[FB80 BA6F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A6F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_187)
{
    // 3A6F 0041;	
    // (㩯) CJK UNIFIED IDEOGRAPH-3A6F	[FB80 BA6F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A6F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_188)
{
    // 3A6F 0062;	
    // (㩯) CJK UNIFIED IDEOGRAPH-3A6F	[FB80 BA6F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A6F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_189)
{
    // 3A70 0021;	
    // (㩰) CJK UNIFIED IDEOGRAPH-3A70	[FB80 BA70 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A70, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA70, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_190)
{
    // 3A70 003F;	
    // (㩰) CJK UNIFIED IDEOGRAPH-3A70	[FB80 BA70 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A70, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA70, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_191)
{
    // 3A70 0061;	
    // (㩰) CJK UNIFIED IDEOGRAPH-3A70	[FB80 BA70 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A70, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_192)
{
    // 3A70 0041;	
    // (㩰) CJK UNIFIED IDEOGRAPH-3A70	[FB80 BA70 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A70, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_193)
{
    // 3A70 0062;	
    // (㩰) CJK UNIFIED IDEOGRAPH-3A70	[FB80 BA70 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A70, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_194)
{
    // 3A71 0021;	
    // (㩱) CJK UNIFIED IDEOGRAPH-3A71	[FB80 BA71 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A71, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_195)
{
    // 3A71 003F;	
    // (㩱) CJK UNIFIED IDEOGRAPH-3A71	[FB80 BA71 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A71, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_196)
{
    // 3A71 0061;	
    // (㩱) CJK UNIFIED IDEOGRAPH-3A71	[FB80 BA71 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A71, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_197)
{
    // 3A71 0041;	
    // (㩱) CJK UNIFIED IDEOGRAPH-3A71	[FB80 BA71 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A71, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_198)
{
    // 3A71 0062;	
    // (㩱) CJK UNIFIED IDEOGRAPH-3A71	[FB80 BA71 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A71, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_199)
{
    // 3A72 0021;	
    // (㩲) CJK UNIFIED IDEOGRAPH-3A72	[FB80 BA72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A72, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_200)
{
    // 3A72 003F;	
    // (㩲) CJK UNIFIED IDEOGRAPH-3A72	[FB80 BA72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A72, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_201)
{
    // 3A72 0061;	
    // (㩲) CJK UNIFIED IDEOGRAPH-3A72	[FB80 BA72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A72, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_202)
{
    // 3A72 0041;	
    // (㩲) CJK UNIFIED IDEOGRAPH-3A72	[FB80 BA72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A72, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_203)
{
    // 3A72 0062;	
    // (㩲) CJK UNIFIED IDEOGRAPH-3A72	[FB80 BA72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A72, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_204)
{
    // 3A73 0021;	
    // (㩳) CJK UNIFIED IDEOGRAPH-3A73	[FB80 BA73 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A73, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_205)
{
    // 3A73 003F;	
    // (㩳) CJK UNIFIED IDEOGRAPH-3A73	[FB80 BA73 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A73, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_206)
{
    // 3A73 0061;	
    // (㩳) CJK UNIFIED IDEOGRAPH-3A73	[FB80 BA73 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A73, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_207)
{
    // 3A73 0041;	
    // (㩳) CJK UNIFIED IDEOGRAPH-3A73	[FB80 BA73 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A73, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_208)
{
    // 3A73 0062;	
    // (㩳) CJK UNIFIED IDEOGRAPH-3A73	[FB80 BA73 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A73, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_209)
{
    // 3A74 0021;	
    // (㩴) CJK UNIFIED IDEOGRAPH-3A74	[FB80 BA74 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A74, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_210)
{
    // 3A74 003F;	
    // (㩴) CJK UNIFIED IDEOGRAPH-3A74	[FB80 BA74 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A74, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_211)
{
    // 3A74 0061;	
    // (㩴) CJK UNIFIED IDEOGRAPH-3A74	[FB80 BA74 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A74, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_212)
{
    // 3A74 0041;	
    // (㩴) CJK UNIFIED IDEOGRAPH-3A74	[FB80 BA74 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A74, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_213)
{
    // 3A74 0062;	
    // (㩴) CJK UNIFIED IDEOGRAPH-3A74	[FB80 BA74 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A74, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_214)
{
    // 3A75 0021;	
    // (㩵) CJK UNIFIED IDEOGRAPH-3A75	[FB80 BA75 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A75, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_215)
{
    // 3A75 003F;	
    // (㩵) CJK UNIFIED IDEOGRAPH-3A75	[FB80 BA75 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A75, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_216)
{
    // 3A75 0061;	
    // (㩵) CJK UNIFIED IDEOGRAPH-3A75	[FB80 BA75 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A75, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_217)
{
    // 3A75 0041;	
    // (㩵) CJK UNIFIED IDEOGRAPH-3A75	[FB80 BA75 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A75, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_218)
{
    // 3A75 0062;	
    // (㩵) CJK UNIFIED IDEOGRAPH-3A75	[FB80 BA75 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A75, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_219)
{
    // 3A76 0021;	
    // (㩶) CJK UNIFIED IDEOGRAPH-3A76	[FB80 BA76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A76, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_220)
{
    // 3A76 003F;	
    // (㩶) CJK UNIFIED IDEOGRAPH-3A76	[FB80 BA76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A76, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_221)
{
    // 3A76 0061;	
    // (㩶) CJK UNIFIED IDEOGRAPH-3A76	[FB80 BA76 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A76, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_222)
{
    // 3A76 0041;	
    // (㩶) CJK UNIFIED IDEOGRAPH-3A76	[FB80 BA76 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A76, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_223)
{
    // 3A76 0062;	
    // (㩶) CJK UNIFIED IDEOGRAPH-3A76	[FB80 BA76 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A76, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_224)
{
    // 3A77 0021;	
    // (㩷) CJK UNIFIED IDEOGRAPH-3A77	[FB80 BA77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A77, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_225)
{
    // 3A77 003F;	
    // (㩷) CJK UNIFIED IDEOGRAPH-3A77	[FB80 BA77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A77, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_226)
{
    // 3A77 0061;	
    // (㩷) CJK UNIFIED IDEOGRAPH-3A77	[FB80 BA77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A77, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_227)
{
    // 3A77 0041;	
    // (㩷) CJK UNIFIED IDEOGRAPH-3A77	[FB80 BA77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A77, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_228)
{
    // 3A77 0062;	
    // (㩷) CJK UNIFIED IDEOGRAPH-3A77	[FB80 BA77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A77, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_229)
{
    // 3A78 0021;	
    // (㩸) CJK UNIFIED IDEOGRAPH-3A78	[FB80 BA78 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A78, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_230)
{
    // 3A78 003F;	
    // (㩸) CJK UNIFIED IDEOGRAPH-3A78	[FB80 BA78 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A78, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_231)
{
    // 3A78 0061;	
    // (㩸) CJK UNIFIED IDEOGRAPH-3A78	[FB80 BA78 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A78, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_232)
{
    // 3A78 0041;	
    // (㩸) CJK UNIFIED IDEOGRAPH-3A78	[FB80 BA78 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A78, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_233)
{
    // 3A78 0062;	
    // (㩸) CJK UNIFIED IDEOGRAPH-3A78	[FB80 BA78 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A78, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_234)
{
    // 3A79 0021;	
    // (㩹) CJK UNIFIED IDEOGRAPH-3A79	[FB80 BA79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A79, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_235)
{
    // 3A79 003F;	
    // (㩹) CJK UNIFIED IDEOGRAPH-3A79	[FB80 BA79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A79, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_236)
{
    // 3A79 0061;	
    // (㩹) CJK UNIFIED IDEOGRAPH-3A79	[FB80 BA79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A79, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_237)
{
    // 3A79 0041;	
    // (㩹) CJK UNIFIED IDEOGRAPH-3A79	[FB80 BA79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A79, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_238)
{
    // 3A79 0062;	
    // (㩹) CJK UNIFIED IDEOGRAPH-3A79	[FB80 BA79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A79, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_239)
{
    // 3A7A 0021;	
    // (㩺) CJK UNIFIED IDEOGRAPH-3A7A	[FB80 BA7A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A7A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_240)
{
    // 3A7A 003F;	
    // (㩺) CJK UNIFIED IDEOGRAPH-3A7A	[FB80 BA7A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A7A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_241)
{
    // 3A7A 0061;	
    // (㩺) CJK UNIFIED IDEOGRAPH-3A7A	[FB80 BA7A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A7A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_242)
{
    // 3A7A 0041;	
    // (㩺) CJK UNIFIED IDEOGRAPH-3A7A	[FB80 BA7A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A7A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_243)
{
    // 3A7A 0062;	
    // (㩺) CJK UNIFIED IDEOGRAPH-3A7A	[FB80 BA7A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A7A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_244)
{
    // 3A7B 0021;	
    // (㩻) CJK UNIFIED IDEOGRAPH-3A7B	[FB80 BA7B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A7B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_245)
{
    // 3A7B 003F;	
    // (㩻) CJK UNIFIED IDEOGRAPH-3A7B	[FB80 BA7B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A7B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_246)
{
    // 3A7B 0061;	
    // (㩻) CJK UNIFIED IDEOGRAPH-3A7B	[FB80 BA7B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A7B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_247)
{
    // 3A7B 0041;	
    // (㩻) CJK UNIFIED IDEOGRAPH-3A7B	[FB80 BA7B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A7B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_248)
{
    // 3A7B 0062;	
    // (㩻) CJK UNIFIED IDEOGRAPH-3A7B	[FB80 BA7B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A7B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_249)
{
    // 3A7C 0021;	
    // (㩼) CJK UNIFIED IDEOGRAPH-3A7C	[FB80 BA7C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A7C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_250)
{
    // 3A7C 003F;	
    // (㩼) CJK UNIFIED IDEOGRAPH-3A7C	[FB80 BA7C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A7C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_251)
{
    // 3A7C 0061;	
    // (㩼) CJK UNIFIED IDEOGRAPH-3A7C	[FB80 BA7C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A7C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_252)
{
    // 3A7C 0041;	
    // (㩼) CJK UNIFIED IDEOGRAPH-3A7C	[FB80 BA7C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A7C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_253)
{
    // 3A7C 0062;	
    // (㩼) CJK UNIFIED IDEOGRAPH-3A7C	[FB80 BA7C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A7C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_254)
{
    // 3A7D 0021;	
    // (㩽) CJK UNIFIED IDEOGRAPH-3A7D	[FB80 BA7D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A7D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_255)
{
    // 3A7D 003F;	
    // (㩽) CJK UNIFIED IDEOGRAPH-3A7D	[FB80 BA7D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A7D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_256)
{
    // 3A7D 0061;	
    // (㩽) CJK UNIFIED IDEOGRAPH-3A7D	[FB80 BA7D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A7D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_257)
{
    // 3A7D 0041;	
    // (㩽) CJK UNIFIED IDEOGRAPH-3A7D	[FB80 BA7D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A7D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_258)
{
    // 3A7D 0062;	
    // (㩽) CJK UNIFIED IDEOGRAPH-3A7D	[FB80 BA7D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A7D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_259)
{
    // 3A7E 0021;	
    // (㩾) CJK UNIFIED IDEOGRAPH-3A7E	[FB80 BA7E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A7E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_260)
{
    // 3A7E 003F;	
    // (㩾) CJK UNIFIED IDEOGRAPH-3A7E	[FB80 BA7E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A7E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_261)
{
    // 3A7E 0061;	
    // (㩾) CJK UNIFIED IDEOGRAPH-3A7E	[FB80 BA7E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A7E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_262)
{
    // 3A7E 0041;	
    // (㩾) CJK UNIFIED IDEOGRAPH-3A7E	[FB80 BA7E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A7E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_263)
{
    // 3A7E 0062;	
    // (㩾) CJK UNIFIED IDEOGRAPH-3A7E	[FB80 BA7E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A7E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_264)
{
    // 3A7F 0021;	
    // (㩿) CJK UNIFIED IDEOGRAPH-3A7F	[FB80 BA7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A7F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_265)
{
    // 3A7F 003F;	
    // (㩿) CJK UNIFIED IDEOGRAPH-3A7F	[FB80 BA7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A7F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_266)
{
    // 3A7F 0061;	
    // (㩿) CJK UNIFIED IDEOGRAPH-3A7F	[FB80 BA7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A7F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_267)
{
    // 3A7F 0041;	
    // (㩿) CJK UNIFIED IDEOGRAPH-3A7F	[FB80 BA7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A7F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_268)
{
    // 3A7F 0062;	
    // (㩿) CJK UNIFIED IDEOGRAPH-3A7F	[FB80 BA7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A7F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_269)
{
    // 3A80 0021;	
    // (㪀) CJK UNIFIED IDEOGRAPH-3A80	[FB80 BA80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A80, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_270)
{
    // 3A80 003F;	
    // (㪀) CJK UNIFIED IDEOGRAPH-3A80	[FB80 BA80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A80, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_271)
{
    // 3A80 0061;	
    // (㪀) CJK UNIFIED IDEOGRAPH-3A80	[FB80 BA80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A80, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_272)
{
    // 3A80 0041;	
    // (㪀) CJK UNIFIED IDEOGRAPH-3A80	[FB80 BA80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A80, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_273)
{
    // 3A80 0062;	
    // (㪀) CJK UNIFIED IDEOGRAPH-3A80	[FB80 BA80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A80, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_274)
{
    // 3A81 0021;	
    // (㪁) CJK UNIFIED IDEOGRAPH-3A81	[FB80 BA81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A81, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_275)
{
    // 3A81 003F;	
    // (㪁) CJK UNIFIED IDEOGRAPH-3A81	[FB80 BA81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A81, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_276)
{
    // 3A81 0061;	
    // (㪁) CJK UNIFIED IDEOGRAPH-3A81	[FB80 BA81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A81, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_277)
{
    // 3A81 0041;	
    // (㪁) CJK UNIFIED IDEOGRAPH-3A81	[FB80 BA81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A81, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_278)
{
    // 3A81 0062;	
    // (㪁) CJK UNIFIED IDEOGRAPH-3A81	[FB80 BA81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A81, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_279)
{
    // 3A82 0021;	
    // (㪂) CJK UNIFIED IDEOGRAPH-3A82	[FB80 BA82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A82, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_280)
{
    // 3A82 003F;	
    // (㪂) CJK UNIFIED IDEOGRAPH-3A82	[FB80 BA82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A82, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_281)
{
    // 3A82 0061;	
    // (㪂) CJK UNIFIED IDEOGRAPH-3A82	[FB80 BA82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A82, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_282)
{
    // 3A82 0041;	
    // (㪂) CJK UNIFIED IDEOGRAPH-3A82	[FB80 BA82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A82, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_283)
{
    // 3A82 0062;	
    // (㪂) CJK UNIFIED IDEOGRAPH-3A82	[FB80 BA82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A82, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_284)
{
    // 3A83 0021;	
    // (㪃) CJK UNIFIED IDEOGRAPH-3A83	[FB80 BA83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A83, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_285)
{
    // 3A83 003F;	
    // (㪃) CJK UNIFIED IDEOGRAPH-3A83	[FB80 BA83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A83, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_286)
{
    // 3A83 0061;	
    // (㪃) CJK UNIFIED IDEOGRAPH-3A83	[FB80 BA83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A83, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_287)
{
    // 3A83 0041;	
    // (㪃) CJK UNIFIED IDEOGRAPH-3A83	[FB80 BA83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A83, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_288)
{
    // 3A83 0062;	
    // (㪃) CJK UNIFIED IDEOGRAPH-3A83	[FB80 BA83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A83, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_289)
{
    // 3A84 0021;	
    // (㪄) CJK UNIFIED IDEOGRAPH-3A84	[FB80 BA84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A84, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_290)
{
    // 3A84 003F;	
    // (㪄) CJK UNIFIED IDEOGRAPH-3A84	[FB80 BA84 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A84, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_291)
{
    // 3A84 0061;	
    // (㪄) CJK UNIFIED IDEOGRAPH-3A84	[FB80 BA84 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A84, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_292)
{
    // 3A84 0041;	
    // (㪄) CJK UNIFIED IDEOGRAPH-3A84	[FB80 BA84 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A84, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_293)
{
    // 3A84 0062;	
    // (㪄) CJK UNIFIED IDEOGRAPH-3A84	[FB80 BA84 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A84, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_294)
{
    // 3A85 0021;	
    // (㪅) CJK UNIFIED IDEOGRAPH-3A85	[FB80 BA85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A85, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_295)
{
    // 3A85 003F;	
    // (㪅) CJK UNIFIED IDEOGRAPH-3A85	[FB80 BA85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A85, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_296)
{
    // 3A85 0061;	
    // (㪅) CJK UNIFIED IDEOGRAPH-3A85	[FB80 BA85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A85, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_297)
{
    // 3A85 0041;	
    // (㪅) CJK UNIFIED IDEOGRAPH-3A85	[FB80 BA85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A85, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_298)
{
    // 3A85 0062;	
    // (㪅) CJK UNIFIED IDEOGRAPH-3A85	[FB80 BA85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A85, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_299)
{
    // 3A86 0021;	
    // (㪆) CJK UNIFIED IDEOGRAPH-3A86	[FB80 BA86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A86, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_300)
{
    // 3A86 003F;	
    // (㪆) CJK UNIFIED IDEOGRAPH-3A86	[FB80 BA86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A86, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_301)
{
    // 3A86 0061;	
    // (㪆) CJK UNIFIED IDEOGRAPH-3A86	[FB80 BA86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A86, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_302)
{
    // 3A86 0041;	
    // (㪆) CJK UNIFIED IDEOGRAPH-3A86	[FB80 BA86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A86, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_303)
{
    // 3A86 0062;	
    // (㪆) CJK UNIFIED IDEOGRAPH-3A86	[FB80 BA86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A86, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_304)
{
    // 3A87 0021;	
    // (㪇) CJK UNIFIED IDEOGRAPH-3A87	[FB80 BA87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A87, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_305)
{
    // 3A87 003F;	
    // (㪇) CJK UNIFIED IDEOGRAPH-3A87	[FB80 BA87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A87, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_306)
{
    // 3A87 0061;	
    // (㪇) CJK UNIFIED IDEOGRAPH-3A87	[FB80 BA87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A87, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_307)
{
    // 3A87 0041;	
    // (㪇) CJK UNIFIED IDEOGRAPH-3A87	[FB80 BA87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A87, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_308)
{
    // 3A87 0062;	
    // (㪇) CJK UNIFIED IDEOGRAPH-3A87	[FB80 BA87 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A87, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_309)
{
    // 3A88 0021;	
    // (㪈) CJK UNIFIED IDEOGRAPH-3A88	[FB80 BA88 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A88, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_310)
{
    // 3A88 003F;	
    // (㪈) CJK UNIFIED IDEOGRAPH-3A88	[FB80 BA88 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A88, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_311)
{
    // 3A88 0061;	
    // (㪈) CJK UNIFIED IDEOGRAPH-3A88	[FB80 BA88 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A88, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_312)
{
    // 3A88 0041;	
    // (㪈) CJK UNIFIED IDEOGRAPH-3A88	[FB80 BA88 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A88, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_313)
{
    // 3A88 0062;	
    // (㪈) CJK UNIFIED IDEOGRAPH-3A88	[FB80 BA88 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A88, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_314)
{
    // 3A89 0021;	
    // (㪉) CJK UNIFIED IDEOGRAPH-3A89	[FB80 BA89 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A89, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_315)
{
    // 3A89 003F;	
    // (㪉) CJK UNIFIED IDEOGRAPH-3A89	[FB80 BA89 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A89, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_316)
{
    // 3A89 0061;	
    // (㪉) CJK UNIFIED IDEOGRAPH-3A89	[FB80 BA89 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A89, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_317)
{
    // 3A89 0041;	
    // (㪉) CJK UNIFIED IDEOGRAPH-3A89	[FB80 BA89 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A89, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_318)
{
    // 3A89 0062;	
    // (㪉) CJK UNIFIED IDEOGRAPH-3A89	[FB80 BA89 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A89, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_319)
{
    // 3A8A 0021;	
    // (㪊) CJK UNIFIED IDEOGRAPH-3A8A	[FB80 BA8A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A8A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_320)
{
    // 3A8A 003F;	
    // (㪊) CJK UNIFIED IDEOGRAPH-3A8A	[FB80 BA8A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A8A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_321)
{
    // 3A8A 0061;	
    // (㪊) CJK UNIFIED IDEOGRAPH-3A8A	[FB80 BA8A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A8A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_322)
{
    // 3A8A 0041;	
    // (㪊) CJK UNIFIED IDEOGRAPH-3A8A	[FB80 BA8A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A8A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_323)
{
    // 3A8A 0062;	
    // (㪊) CJK UNIFIED IDEOGRAPH-3A8A	[FB80 BA8A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A8A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_324)
{
    // 3A8B 0021;	
    // (㪋) CJK UNIFIED IDEOGRAPH-3A8B	[FB80 BA8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A8B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_325)
{
    // 3A8B 003F;	
    // (㪋) CJK UNIFIED IDEOGRAPH-3A8B	[FB80 BA8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A8B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_326)
{
    // 3A8B 0061;	
    // (㪋) CJK UNIFIED IDEOGRAPH-3A8B	[FB80 BA8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A8B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_327)
{
    // 3A8B 0041;	
    // (㪋) CJK UNIFIED IDEOGRAPH-3A8B	[FB80 BA8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A8B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_328)
{
    // 3A8B 0062;	
    // (㪋) CJK UNIFIED IDEOGRAPH-3A8B	[FB80 BA8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A8B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_329)
{
    // 3A8C 0021;	
    // (㪌) CJK UNIFIED IDEOGRAPH-3A8C	[FB80 BA8C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A8C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_330)
{
    // 3A8C 003F;	
    // (㪌) CJK UNIFIED IDEOGRAPH-3A8C	[FB80 BA8C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A8C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_331)
{
    // 3A8C 0061;	
    // (㪌) CJK UNIFIED IDEOGRAPH-3A8C	[FB80 BA8C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A8C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_332)
{
    // 3A8C 0041;	
    // (㪌) CJK UNIFIED IDEOGRAPH-3A8C	[FB80 BA8C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A8C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_333)
{
    // 3A8C 0062;	
    // (㪌) CJK UNIFIED IDEOGRAPH-3A8C	[FB80 BA8C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A8C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_334)
{
    // 3A8D 0021;	
    // (㪍) CJK UNIFIED IDEOGRAPH-3A8D	[FB80 BA8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A8D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_335)
{
    // 3A8D 003F;	
    // (㪍) CJK UNIFIED IDEOGRAPH-3A8D	[FB80 BA8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A8D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_336)
{
    // 3A8D 0061;	
    // (㪍) CJK UNIFIED IDEOGRAPH-3A8D	[FB80 BA8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A8D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_337)
{
    // 3A8D 0041;	
    // (㪍) CJK UNIFIED IDEOGRAPH-3A8D	[FB80 BA8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A8D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_338)
{
    // 3A8D 0062;	
    // (㪍) CJK UNIFIED IDEOGRAPH-3A8D	[FB80 BA8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A8D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_339)
{
    // 3A8E 0021;	
    // (㪎) CJK UNIFIED IDEOGRAPH-3A8E	[FB80 BA8E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A8E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_340)
{
    // 3A8E 003F;	
    // (㪎) CJK UNIFIED IDEOGRAPH-3A8E	[FB80 BA8E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A8E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_341)
{
    // 3A8E 0061;	
    // (㪎) CJK UNIFIED IDEOGRAPH-3A8E	[FB80 BA8E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A8E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_342)
{
    // 3A8E 0041;	
    // (㪎) CJK UNIFIED IDEOGRAPH-3A8E	[FB80 BA8E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A8E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_343)
{
    // 3A8E 0062;	
    // (㪎) CJK UNIFIED IDEOGRAPH-3A8E	[FB80 BA8E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A8E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_344)
{
    // 3A8F 0021;	
    // (㪏) CJK UNIFIED IDEOGRAPH-3A8F	[FB80 BA8F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A8F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_345)
{
    // 3A8F 003F;	
    // (㪏) CJK UNIFIED IDEOGRAPH-3A8F	[FB80 BA8F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A8F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_346)
{
    // 3A8F 0061;	
    // (㪏) CJK UNIFIED IDEOGRAPH-3A8F	[FB80 BA8F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A8F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_347)
{
    // 3A8F 0041;	
    // (㪏) CJK UNIFIED IDEOGRAPH-3A8F	[FB80 BA8F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A8F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_348)
{
    // 3A8F 0062;	
    // (㪏) CJK UNIFIED IDEOGRAPH-3A8F	[FB80 BA8F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A8F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_349)
{
    // 3A90 0021;	
    // (㪐) CJK UNIFIED IDEOGRAPH-3A90	[FB80 BA90 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A90, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_350)
{
    // 3A90 003F;	
    // (㪐) CJK UNIFIED IDEOGRAPH-3A90	[FB80 BA90 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A90, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_351)
{
    // 3A90 0061;	
    // (㪐) CJK UNIFIED IDEOGRAPH-3A90	[FB80 BA90 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A90, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_352)
{
    // 3A90 0041;	
    // (㪐) CJK UNIFIED IDEOGRAPH-3A90	[FB80 BA90 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A90, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_353)
{
    // 3A90 0062;	
    // (㪐) CJK UNIFIED IDEOGRAPH-3A90	[FB80 BA90 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A90, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_354)
{
    // 3A91 0021;	
    // (㪑) CJK UNIFIED IDEOGRAPH-3A91	[FB80 BA91 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A91, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_355)
{
    // 3A91 003F;	
    // (㪑) CJK UNIFIED IDEOGRAPH-3A91	[FB80 BA91 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A91, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_356)
{
    // 3A91 0061;	
    // (㪑) CJK UNIFIED IDEOGRAPH-3A91	[FB80 BA91 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A91, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_357)
{
    // 3A91 0041;	
    // (㪑) CJK UNIFIED IDEOGRAPH-3A91	[FB80 BA91 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A91, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_358)
{
    // 3A91 0062;	
    // (㪑) CJK UNIFIED IDEOGRAPH-3A91	[FB80 BA91 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A91, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_359)
{
    // 3A92 0021;	
    // (㪒) CJK UNIFIED IDEOGRAPH-3A92	[FB80 BA92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A92, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_360)
{
    // 3A92 003F;	
    // (㪒) CJK UNIFIED IDEOGRAPH-3A92	[FB80 BA92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A92, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_361)
{
    // 3A92 0061;	
    // (㪒) CJK UNIFIED IDEOGRAPH-3A92	[FB80 BA92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A92, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_362)
{
    // 3A92 0041;	
    // (㪒) CJK UNIFIED IDEOGRAPH-3A92	[FB80 BA92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A92, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_363)
{
    // 3A92 0062;	
    // (㪒) CJK UNIFIED IDEOGRAPH-3A92	[FB80 BA92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A92, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_364)
{
    // 3A93 0021;	
    // (㪓) CJK UNIFIED IDEOGRAPH-3A93	[FB80 BA93 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A93, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_365)
{
    // 3A93 003F;	
    // (㪓) CJK UNIFIED IDEOGRAPH-3A93	[FB80 BA93 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A93, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_366)
{
    // 3A93 0061;	
    // (㪓) CJK UNIFIED IDEOGRAPH-3A93	[FB80 BA93 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A93, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_367)
{
    // 3A93 0041;	
    // (㪓) CJK UNIFIED IDEOGRAPH-3A93	[FB80 BA93 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A93, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_368)
{
    // 3A93 0062;	
    // (㪓) CJK UNIFIED IDEOGRAPH-3A93	[FB80 BA93 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A93, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_369)
{
    // 3A94 0021;	
    // (㪔) CJK UNIFIED IDEOGRAPH-3A94	[FB80 BA94 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A94, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_370)
{
    // 3A94 003F;	
    // (㪔) CJK UNIFIED IDEOGRAPH-3A94	[FB80 BA94 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A94, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_371)
{
    // 3A94 0061;	
    // (㪔) CJK UNIFIED IDEOGRAPH-3A94	[FB80 BA94 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A94, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_372)
{
    // 3A94 0041;	
    // (㪔) CJK UNIFIED IDEOGRAPH-3A94	[FB80 BA94 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A94, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_373)
{
    // 3A94 0062;	
    // (㪔) CJK UNIFIED IDEOGRAPH-3A94	[FB80 BA94 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A94, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_374)
{
    // 3A95 0021;	
    // (㪕) CJK UNIFIED IDEOGRAPH-3A95	[FB80 BA95 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A95, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_375)
{
    // 3A95 003F;	
    // (㪕) CJK UNIFIED IDEOGRAPH-3A95	[FB80 BA95 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A95, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_376)
{
    // 3A95 0061;	
    // (㪕) CJK UNIFIED IDEOGRAPH-3A95	[FB80 BA95 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A95, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_377)
{
    // 3A95 0041;	
    // (㪕) CJK UNIFIED IDEOGRAPH-3A95	[FB80 BA95 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A95, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_378)
{
    // 3A95 0062;	
    // (㪕) CJK UNIFIED IDEOGRAPH-3A95	[FB80 BA95 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A95, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_379)
{
    // 3A96 0021;	
    // (㪖) CJK UNIFIED IDEOGRAPH-3A96	[FB80 BA96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A96, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_380)
{
    // 3A96 003F;	
    // (㪖) CJK UNIFIED IDEOGRAPH-3A96	[FB80 BA96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A96, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_381)
{
    // 3A96 0061;	
    // (㪖) CJK UNIFIED IDEOGRAPH-3A96	[FB80 BA96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A96, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_382)
{
    // 3A96 0041;	
    // (㪖) CJK UNIFIED IDEOGRAPH-3A96	[FB80 BA96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A96, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_383)
{
    // 3A96 0062;	
    // (㪖) CJK UNIFIED IDEOGRAPH-3A96	[FB80 BA96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A96, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_384)
{
    // 3A97 0021;	
    // (㪗) CJK UNIFIED IDEOGRAPH-3A97	[FB80 BA97 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A97, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_385)
{
    // 3A97 003F;	
    // (㪗) CJK UNIFIED IDEOGRAPH-3A97	[FB80 BA97 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A97, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_386)
{
    // 3A97 0061;	
    // (㪗) CJK UNIFIED IDEOGRAPH-3A97	[FB80 BA97 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A97, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_387)
{
    // 3A97 0041;	
    // (㪗) CJK UNIFIED IDEOGRAPH-3A97	[FB80 BA97 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A97, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_388)
{
    // 3A97 0062;	
    // (㪗) CJK UNIFIED IDEOGRAPH-3A97	[FB80 BA97 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A97, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_389)
{
    // 3A98 0021;	
    // (㪘) CJK UNIFIED IDEOGRAPH-3A98	[FB80 BA98 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A98, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_390)
{
    // 3A98 003F;	
    // (㪘) CJK UNIFIED IDEOGRAPH-3A98	[FB80 BA98 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A98, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_391)
{
    // 3A98 0061;	
    // (㪘) CJK UNIFIED IDEOGRAPH-3A98	[FB80 BA98 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A98, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_392)
{
    // 3A98 0041;	
    // (㪘) CJK UNIFIED IDEOGRAPH-3A98	[FB80 BA98 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A98, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_393)
{
    // 3A98 0062;	
    // (㪘) CJK UNIFIED IDEOGRAPH-3A98	[FB80 BA98 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A98, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_394)
{
    // 3A99 0021;	
    // (㪙) CJK UNIFIED IDEOGRAPH-3A99	[FB80 BA99 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A99, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_395)
{
    // 3A99 003F;	
    // (㪙) CJK UNIFIED IDEOGRAPH-3A99	[FB80 BA99 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A99, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_396)
{
    // 3A99 0061;	
    // (㪙) CJK UNIFIED IDEOGRAPH-3A99	[FB80 BA99 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A99, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_397)
{
    // 3A99 0041;	
    // (㪙) CJK UNIFIED IDEOGRAPH-3A99	[FB80 BA99 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A99, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_398)
{
    // 3A99 0062;	
    // (㪙) CJK UNIFIED IDEOGRAPH-3A99	[FB80 BA99 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A99, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_399)
{
    // 3A9A 0021;	
    // (㪚) CJK UNIFIED IDEOGRAPH-3A9A	[FB80 BA9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A9A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_400)
{
    // 3A9A 003F;	
    // (㪚) CJK UNIFIED IDEOGRAPH-3A9A	[FB80 BA9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A9A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_401)
{
    // 3A9A 0061;	
    // (㪚) CJK UNIFIED IDEOGRAPH-3A9A	[FB80 BA9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A9A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_402)
{
    // 3A9A 0041;	
    // (㪚) CJK UNIFIED IDEOGRAPH-3A9A	[FB80 BA9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A9A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_403)
{
    // 3A9A 0062;	
    // (㪚) CJK UNIFIED IDEOGRAPH-3A9A	[FB80 BA9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A9A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_404)
{
    // 3A9B 0021;	
    // (㪛) CJK UNIFIED IDEOGRAPH-3A9B	[FB80 BA9B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A9B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_405)
{
    // 3A9B 003F;	
    // (㪛) CJK UNIFIED IDEOGRAPH-3A9B	[FB80 BA9B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A9B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_406)
{
    // 3A9B 0061;	
    // (㪛) CJK UNIFIED IDEOGRAPH-3A9B	[FB80 BA9B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A9B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_407)
{
    // 3A9B 0041;	
    // (㪛) CJK UNIFIED IDEOGRAPH-3A9B	[FB80 BA9B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A9B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_408)
{
    // 3A9B 0062;	
    // (㪛) CJK UNIFIED IDEOGRAPH-3A9B	[FB80 BA9B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A9B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_409)
{
    // 3A9C 0021;	
    // (㪜) CJK UNIFIED IDEOGRAPH-3A9C	[FB80 BA9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A9C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_410)
{
    // 3A9C 003F;	
    // (㪜) CJK UNIFIED IDEOGRAPH-3A9C	[FB80 BA9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A9C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_411)
{
    // 3A9C 0061;	
    // (㪜) CJK UNIFIED IDEOGRAPH-3A9C	[FB80 BA9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A9C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_412)
{
    // 3A9C 0041;	
    // (㪜) CJK UNIFIED IDEOGRAPH-3A9C	[FB80 BA9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A9C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_413)
{
    // 3A9C 0062;	
    // (㪜) CJK UNIFIED IDEOGRAPH-3A9C	[FB80 BA9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A9C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_414)
{
    // 3A9D 0021;	
    // (㪝) CJK UNIFIED IDEOGRAPH-3A9D	[FB80 BA9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A9D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_415)
{
    // 3A9D 003F;	
    // (㪝) CJK UNIFIED IDEOGRAPH-3A9D	[FB80 BA9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A9D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_416)
{
    // 3A9D 0061;	
    // (㪝) CJK UNIFIED IDEOGRAPH-3A9D	[FB80 BA9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A9D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_417)
{
    // 3A9D 0041;	
    // (㪝) CJK UNIFIED IDEOGRAPH-3A9D	[FB80 BA9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A9D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_418)
{
    // 3A9D 0062;	
    // (㪝) CJK UNIFIED IDEOGRAPH-3A9D	[FB80 BA9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A9D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_419)
{
    // 3A9E 0021;	
    // (㪞) CJK UNIFIED IDEOGRAPH-3A9E	[FB80 BA9E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A9E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_420)
{
    // 3A9E 003F;	
    // (㪞) CJK UNIFIED IDEOGRAPH-3A9E	[FB80 BA9E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A9E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_421)
{
    // 3A9E 0061;	
    // (㪞) CJK UNIFIED IDEOGRAPH-3A9E	[FB80 BA9E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A9E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_422)
{
    // 3A9E 0041;	
    // (㪞) CJK UNIFIED IDEOGRAPH-3A9E	[FB80 BA9E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A9E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_423)
{
    // 3A9E 0062;	
    // (㪞) CJK UNIFIED IDEOGRAPH-3A9E	[FB80 BA9E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A9E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_424)
{
    // 3A9F 0021;	
    // (㪟) CJK UNIFIED IDEOGRAPH-3A9F	[FB80 BA9F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A9F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBA9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_425)
{
    // 3A9F 003F;	
    // (㪟) CJK UNIFIED IDEOGRAPH-3A9F	[FB80 BA9F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A9F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBA9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_426)
{
    // 3A9F 0061;	
    // (㪟) CJK UNIFIED IDEOGRAPH-3A9F	[FB80 BA9F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A9F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBA9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_427)
{
    // 3A9F 0041;	
    // (㪟) CJK UNIFIED IDEOGRAPH-3A9F	[FB80 BA9F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3A9F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBA9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_428)
{
    // 3A9F 0062;	
    // (㪟) CJK UNIFIED IDEOGRAPH-3A9F	[FB80 BA9F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3A9F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBA9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_429)
{
    // 3AA0 0021;	
    // (㪠) CJK UNIFIED IDEOGRAPH-3AA0	[FB80 BAA0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_430)
{
    // 3AA0 003F;	
    // (㪠) CJK UNIFIED IDEOGRAPH-3AA0	[FB80 BAA0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_431)
{
    // 3AA0 0061;	
    // (㪠) CJK UNIFIED IDEOGRAPH-3AA0	[FB80 BAA0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_432)
{
    // 3AA0 0041;	
    // (㪠) CJK UNIFIED IDEOGRAPH-3AA0	[FB80 BAA0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AA0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_433)
{
    // 3AA0 0062;	
    // (㪠) CJK UNIFIED IDEOGRAPH-3AA0	[FB80 BAA0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_434)
{
    // 3AA1 0021;	
    // (㪡) CJK UNIFIED IDEOGRAPH-3AA1	[FB80 BAA1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_435)
{
    // 3AA1 003F;	
    // (㪡) CJK UNIFIED IDEOGRAPH-3AA1	[FB80 BAA1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_436)
{
    // 3AA1 0061;	
    // (㪡) CJK UNIFIED IDEOGRAPH-3AA1	[FB80 BAA1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_437)
{
    // 3AA1 0041;	
    // (㪡) CJK UNIFIED IDEOGRAPH-3AA1	[FB80 BAA1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AA1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_438)
{
    // 3AA1 0062;	
    // (㪡) CJK UNIFIED IDEOGRAPH-3AA1	[FB80 BAA1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_439)
{
    // 3AA2 0021;	
    // (㪢) CJK UNIFIED IDEOGRAPH-3AA2	[FB80 BAA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_440)
{
    // 3AA2 003F;	
    // (㪢) CJK UNIFIED IDEOGRAPH-3AA2	[FB80 BAA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_441)
{
    // 3AA2 0061;	
    // (㪢) CJK UNIFIED IDEOGRAPH-3AA2	[FB80 BAA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_442)
{
    // 3AA2 0041;	
    // (㪢) CJK UNIFIED IDEOGRAPH-3AA2	[FB80 BAA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AA2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_443)
{
    // 3AA2 0062;	
    // (㪢) CJK UNIFIED IDEOGRAPH-3AA2	[FB80 BAA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_444)
{
    // 3AA3 0021;	
    // (㪣) CJK UNIFIED IDEOGRAPH-3AA3	[FB80 BAA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_445)
{
    // 3AA3 003F;	
    // (㪣) CJK UNIFIED IDEOGRAPH-3AA3	[FB80 BAA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_446)
{
    // 3AA3 0061;	
    // (㪣) CJK UNIFIED IDEOGRAPH-3AA3	[FB80 BAA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_447)
{
    // 3AA3 0041;	
    // (㪣) CJK UNIFIED IDEOGRAPH-3AA3	[FB80 BAA3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AA3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_448)
{
    // 3AA3 0062;	
    // (㪣) CJK UNIFIED IDEOGRAPH-3AA3	[FB80 BAA3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_449)
{
    // 3AA4 0021;	
    // (㪤) CJK UNIFIED IDEOGRAPH-3AA4	[FB80 BAA4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_450)
{
    // 3AA4 003F;	
    // (㪤) CJK UNIFIED IDEOGRAPH-3AA4	[FB80 BAA4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_451)
{
    // 3AA4 0061;	
    // (㪤) CJK UNIFIED IDEOGRAPH-3AA4	[FB80 BAA4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_452)
{
    // 3AA4 0041;	
    // (㪤) CJK UNIFIED IDEOGRAPH-3AA4	[FB80 BAA4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AA4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_453)
{
    // 3AA4 0062;	
    // (㪤) CJK UNIFIED IDEOGRAPH-3AA4	[FB80 BAA4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_454)
{
    // 3AA5 0021;	
    // (㪥) CJK UNIFIED IDEOGRAPH-3AA5	[FB80 BAA5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_455)
{
    // 3AA5 003F;	
    // (㪥) CJK UNIFIED IDEOGRAPH-3AA5	[FB80 BAA5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_456)
{
    // 3AA5 0061;	
    // (㪥) CJK UNIFIED IDEOGRAPH-3AA5	[FB80 BAA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_457)
{
    // 3AA5 0041;	
    // (㪥) CJK UNIFIED IDEOGRAPH-3AA5	[FB80 BAA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AA5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_458)
{
    // 3AA5 0062;	
    // (㪥) CJK UNIFIED IDEOGRAPH-3AA5	[FB80 BAA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_459)
{
    // 3AA6 0021;	
    // (㪦) CJK UNIFIED IDEOGRAPH-3AA6	[FB80 BAA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_460)
{
    // 3AA6 003F;	
    // (㪦) CJK UNIFIED IDEOGRAPH-3AA6	[FB80 BAA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_461)
{
    // 3AA6 0061;	
    // (㪦) CJK UNIFIED IDEOGRAPH-3AA6	[FB80 BAA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_462)
{
    // 3AA6 0041;	
    // (㪦) CJK UNIFIED IDEOGRAPH-3AA6	[FB80 BAA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AA6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_463)
{
    // 3AA6 0062;	
    // (㪦) CJK UNIFIED IDEOGRAPH-3AA6	[FB80 BAA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_464)
{
    // 3AA7 0021;	
    // (㪧) CJK UNIFIED IDEOGRAPH-3AA7	[FB80 BAA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_465)
{
    // 3AA7 003F;	
    // (㪧) CJK UNIFIED IDEOGRAPH-3AA7	[FB80 BAA7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_466)
{
    // 3AA7 0061;	
    // (㪧) CJK UNIFIED IDEOGRAPH-3AA7	[FB80 BAA7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_467)
{
    // 3AA7 0041;	
    // (㪧) CJK UNIFIED IDEOGRAPH-3AA7	[FB80 BAA7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AA7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_468)
{
    // 3AA7 0062;	
    // (㪧) CJK UNIFIED IDEOGRAPH-3AA7	[FB80 BAA7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_469)
{
    // 3AA8 0021;	
    // (㪨) CJK UNIFIED IDEOGRAPH-3AA8	[FB80 BAA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_470)
{
    // 3AA8 003F;	
    // (㪨) CJK UNIFIED IDEOGRAPH-3AA8	[FB80 BAA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_471)
{
    // 3AA8 0061;	
    // (㪨) CJK UNIFIED IDEOGRAPH-3AA8	[FB80 BAA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_472)
{
    // 3AA8 0041;	
    // (㪨) CJK UNIFIED IDEOGRAPH-3AA8	[FB80 BAA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AA8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_473)
{
    // 3AA8 0062;	
    // (㪨) CJK UNIFIED IDEOGRAPH-3AA8	[FB80 BAA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_474)
{
    // 3AA9 0021;	
    // (㪩) CJK UNIFIED IDEOGRAPH-3AA9	[FB80 BAA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_475)
{
    // 3AA9 003F;	
    // (㪩) CJK UNIFIED IDEOGRAPH-3AA9	[FB80 BAA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_476)
{
    // 3AA9 0061;	
    // (㪩) CJK UNIFIED IDEOGRAPH-3AA9	[FB80 BAA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_477)
{
    // 3AA9 0041;	
    // (㪩) CJK UNIFIED IDEOGRAPH-3AA9	[FB80 BAA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AA9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_478)
{
    // 3AA9 0062;	
    // (㪩) CJK UNIFIED IDEOGRAPH-3AA9	[FB80 BAA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AA9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_479)
{
    // 3AAA 0021;	
    // (㪪) CJK UNIFIED IDEOGRAPH-3AAA	[FB80 BAAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AAA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_480)
{
    // 3AAA 003F;	
    // (㪪) CJK UNIFIED IDEOGRAPH-3AAA	[FB80 BAAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AAA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_481)
{
    // 3AAA 0061;	
    // (㪪) CJK UNIFIED IDEOGRAPH-3AAA	[FB80 BAAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AAA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_482)
{
    // 3AAA 0041;	
    // (㪪) CJK UNIFIED IDEOGRAPH-3AAA	[FB80 BAAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AAA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_483)
{
    // 3AAA 0062;	
    // (㪪) CJK UNIFIED IDEOGRAPH-3AAA	[FB80 BAAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AAA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_484)
{
    // 3AAB 0021;	
    // (㪫) CJK UNIFIED IDEOGRAPH-3AAB	[FB80 BAAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AAB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_485)
{
    // 3AAB 003F;	
    // (㪫) CJK UNIFIED IDEOGRAPH-3AAB	[FB80 BAAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AAB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_486)
{
    // 3AAB 0061;	
    // (㪫) CJK UNIFIED IDEOGRAPH-3AAB	[FB80 BAAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AAB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_487)
{
    // 3AAB 0041;	
    // (㪫) CJK UNIFIED IDEOGRAPH-3AAB	[FB80 BAAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AAB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_488)
{
    // 3AAB 0062;	
    // (㪫) CJK UNIFIED IDEOGRAPH-3AAB	[FB80 BAAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AAB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_489)
{
    // 3AAC 0021;	
    // (㪬) CJK UNIFIED IDEOGRAPH-3AAC	[FB80 BAAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AAC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_490)
{
    // 3AAC 003F;	
    // (㪬) CJK UNIFIED IDEOGRAPH-3AAC	[FB80 BAAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AAC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_491)
{
    // 3AAC 0061;	
    // (㪬) CJK UNIFIED IDEOGRAPH-3AAC	[FB80 BAAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AAC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_492)
{
    // 3AAC 0041;	
    // (㪬) CJK UNIFIED IDEOGRAPH-3AAC	[FB80 BAAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AAC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_493)
{
    // 3AAC 0062;	
    // (㪬) CJK UNIFIED IDEOGRAPH-3AAC	[FB80 BAAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AAC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_494)
{
    // 3AAD 0021;	
    // (㪭) CJK UNIFIED IDEOGRAPH-3AAD	[FB80 BAAD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AAD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_495)
{
    // 3AAD 003F;	
    // (㪭) CJK UNIFIED IDEOGRAPH-3AAD	[FB80 BAAD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AAD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_496)
{
    // 3AAD 0061;	
    // (㪭) CJK UNIFIED IDEOGRAPH-3AAD	[FB80 BAAD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AAD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_497)
{
    // 3AAD 0041;	
    // (㪭) CJK UNIFIED IDEOGRAPH-3AAD	[FB80 BAAD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AAD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_498)
{
    // 3AAD 0062;	
    // (㪭) CJK UNIFIED IDEOGRAPH-3AAD	[FB80 BAAD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AAD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_343_499)
{
    // 3AAE 0021;	
    // (㪮) CJK UNIFIED IDEOGRAPH-3AAE	[FB80 BAAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AAE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

