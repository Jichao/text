// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_002_000)
{
    // 135F 0334;	
    // (·çü) ETHIOPIC COMBINING GEMINATION MARK	[| 004A 00B3 | 0002 0002 |]

    uint32_t cps[2] = { 0x135F, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00B3, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_001)
{
    // 0334 135E;	
    // (·çû) ETHIOPIC COMBINING VOWEL LENGTH MARK	[| 004A 00B4 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x135E };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00B4, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_002)
{
    // 135E 0334;	
    // (·çû) ETHIOPIC COMBINING VOWEL LENGTH MARK	[| 004A 00B4 | 0002 0002 |]

    uint32_t cps[2] = { 0x135E, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00B4, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_003)
{
    // 0334 135D;	
    // (·çù) ETHIOPIC COMBINING GEMINATION AND VOWEL LENGTH MARK	[| 004A 00B5 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x135D };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00B5, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_004)
{
    // 135D 0334;	
    // (·çù) ETHIOPIC COMBINING GEMINATION AND VOWEL LENGTH MARK	[| 004A 00B5 | 0002 0002 |]

    uint32_t cps[2] = { 0x135D, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00B5, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_005)
{
    // 0334 A6F0;	
    // (Íõ∞) BAMUM COMBINING MARK KOQNDON	[| 004A 00B6 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0xA6F0 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00B6, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_006)
{
    // A6F0 0334;	
    // (Íõ∞) BAMUM COMBINING MARK KOQNDON	[| 004A 00B6 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6F0, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00B6, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_007)
{
    // 0334 A6F1;	
    // (Íõ±) BAMUM COMBINING MARK TUKWENTIS	[| 004A 00B7 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0xA6F1 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00B7, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_008)
{
    // A6F1 0334;	
    // (Íõ±) BAMUM COMBINING MARK TUKWENTIS	[| 004A 00B7 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6F1, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00B7, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_009)
{
    // 0334 1E944;	
    // (û•Ñ) ADLAM ALIF LENGTHENER	[| 004A 00BD | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1E944 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00BD, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_010)
{
    // 1E944 0334;	
    // (û•Ñ) ADLAM ALIF LENGTHENER	[| 004A 00BD | 0002 0002 |]

    uint32_t cps[2] = { 0x1E944, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00BD, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_011)
{
    // 0334 1E945;	
    // (û•Ö) ADLAM VOWEL LENGTHENER	[| 004A 00BD | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1E945 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00BD, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_012)
{
    // 1E945 0334;	
    // (û•Ö) ADLAM VOWEL LENGTHENER	[| 004A 00BD | 0002 0002 |]

    uint32_t cps[2] = { 0x1E945, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00BD, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_013)
{
    // 0334 1E946;	
    // (û•Ü) ADLAM GEMINATION MARK	[| 004A 00BD | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1E946 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00BD, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_014)
{
    // 1E946 0334;	
    // (û•Ü) ADLAM GEMINATION MARK	[| 004A 00BD | 0002 0002 |]

    uint32_t cps[2] = { 0x1E946, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00BD, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_015)
{
    // 0334 1E94A;	
    // (û•ä) ADLAM NUKTA	[| 004A 00BE | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1E94A };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00BE, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_016)
{
    // 1E94A 0334;	
    // (û•ä) ADLAM NUKTA	[| 004A 00BE | 0002 0002 |]

    uint32_t cps[2] = { 0x1E94A, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00BE, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_017)
{
    // 0334 1E947;	
    // (û•á) ADLAM HAMZA	[| 004A 00BF | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1E947 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00BF, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_018)
{
    // 1E947 0334;	
    // (û•á) ADLAM HAMZA	[| 004A 00BF | 0002 0002 |]

    uint32_t cps[2] = { 0x1E947, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00BF, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_019)
{
    // 0334 1E948;	
    // (û•à) ADLAM CONSONANT MODIFIER	[| 004A 00C0 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1E948 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C0, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_020)
{
    // 1E948 0334;	
    // (û•à) ADLAM CONSONANT MODIFIER	[| 004A 00C0 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E948, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C0, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_021)
{
    // 0334 1E949;	
    // (û•â) ADLAM GEMINATE CONSONANT MODIFIER	[| 004A 00C1 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1E949 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C1, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_022)
{
    // 1E949 0334;	
    // (û•â) ADLAM GEMINATE CONSONANT MODIFIER	[| 004A 00C1 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E949, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C1, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_023)
{
    // 0334 093C;	
    // (‡§º) DEVANAGARI SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x093C };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_024)
{
    // 093C 0334;	
    // (‡§º) DEVANAGARI SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x093C, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_025)
{
    // 0334 09BC;	
    // (‡¶º) BENGALI SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x09BC };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_026)
{
    // 09BC 0334;	
    // (‡¶º) BENGALI SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x09BC, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_027)
{
    // 0334 0A3C;	
    // (‡®º) GURMUKHI SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0A3C };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_028)
{
    // 0A3C 0334;	
    // (‡®º) GURMUKHI SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A3C, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_029)
{
    // 0334 0ABC;	
    // (‡™º) GUJARATI SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0ABC };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_030)
{
    // 0ABC 0334;	
    // (‡™º) GUJARATI SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ABC, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_031)
{
    // 0334 0B3C;	
    // (‡¨º) ORIYA SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0B3C };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_032)
{
    // 0B3C 0334;	
    // (‡¨º) ORIYA SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B3C, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_033)
{
    // 0334 0CBC;	
    // (‡≤º) KANNADA SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0CBC };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_034)
{
    // 0CBC 0334;	
    // (‡≤º) KANNADA SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CBC, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_035)
{
    // 0334 1B34;	
    // (·¨¥) BALINESE SIGN REREKAN	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1B34 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_036)
{
    // 1B34 0334;	
    // (·¨¥) BALINESE SIGN REREKAN	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B34, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_037)
{
    // 0334 1BE6;	
    // (·Ø¶) BATAK SIGN TOMPI	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1BE6 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_038)
{
    // 1BE6 0334;	
    // (·Ø¶) BATAK SIGN TOMPI	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BE6, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_039)
{
    // 0334 1C37;	
    // (·∞∑) LEPCHA SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1C37 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_040)
{
    // 1C37 0334;	
    // (·∞∑) LEPCHA SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C37, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_041)
{
    // 0334 A9B3;	
    // (Í¶≥) JAVANESE SIGN CECAK TELU	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0xA9B3 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_042)
{
    // A9B3 0334;	
    // (Í¶≥) JAVANESE SIGN CECAK TELU	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9B3, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_043)
{
    // 0334 110BA;	
    // (ëÇ∫) KAITHI SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x110BA };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_044)
{
    // 110BA 0334;	
    // (ëÇ∫) KAITHI SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x110BA, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_045)
{
    // 0334 11173;	
    // (ëÖ≥) MAHAJANI SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x11173 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_046)
{
    // 11173 0334;	
    // (ëÖ≥) MAHAJANI SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x11173, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_047)
{
    // 0334 111CA;	
    // (ëáä) SHARADA SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x111CA };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_048)
{
    // 111CA 0334;	
    // (ëáä) SHARADA SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x111CA, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_049)
{
    // 0334 11236;	
    // (ëà∂) KHOJKI SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x11236 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_050)
{
    // 11236 0334;	
    // (ëà∂) KHOJKI SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x11236, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_051)
{
    // 0334 112E9;	
    // (ëã©) KHUDAWADI SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x112E9 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_052)
{
    // 112E9 0334;	
    // (ëã©) KHUDAWADI SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E9, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_053)
{
    // 0334 1133C;	
    // (ëåº) GRANTHA SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1133C };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_054)
{
    // 1133C 0334;	
    // (ëåº) GRANTHA SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x1133C, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_055)
{
    // 0334 11446;	
    // (ëëÜ) NEWA SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x11446 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_056)
{
    // 11446 0334;	
    // (ëëÜ) NEWA SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x11446, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_057)
{
    // 0334 114C3;	
    // (ëìÉ) TIRHUTA SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x114C3 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_058)
{
    // 114C3 0334;	
    // (ëìÉ) TIRHUTA SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C3, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_059)
{
    // 0334 115C0;	
    // (ëóÄ) SIDDHAM SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x115C0 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_060)
{
    // 115C0 0334;	
    // (ëóÄ) SIDDHAM SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C0, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_061)
{
    // 0334 116B7;	
    // (ëö∑) TAKRI SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x116B7 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_062)
{
    // 116B7 0334;	
    // (ëö∑) TAKRI SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B7, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_063)
{
    // 0334 11D42;	
    // (ëµÇ) MASARAM GONDI SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x11D42 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_064)
{
    // 11D42 0334;	
    // (ëµÇ) MASARAM GONDI SIGN NUKTA	[| 004A 00C2 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D42, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_065)
{
    // 0334 11100;	
    // (ëÑÄ) CHAKMA SIGN CANDRABINDU	[| 004A 00C3 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x11100 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C3, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_066)
{
    // 11100 0334;	
    // (ëÑÄ) CHAKMA SIGN CANDRABINDU	[| 004A 00C3 | 0002 0002 |]

    uint32_t cps[2] = { 0x11100, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C3, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_067)
{
    // 0334 1CED;	
    // (·≥≠) VEDIC SIGN TIRYAK	[| 004A 00C4 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1CED };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C4, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_068)
{
    // 1CED 0334;	
    // (·≥≠) VEDIC SIGN TIRYAK	[| 004A 00C4 | 0002 0002 |]

    uint32_t cps[2] = { 0x1CED, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C4, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_069)
{
    // 0334 11101;	
    // (ëÑÅ) CHAKMA SIGN ANUSVARA	[| 004A 00C4 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x11101 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C4, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_070)
{
    // 11101 0334;	
    // (ëÑÅ) CHAKMA SIGN ANUSVARA	[| 004A 00C4 | 0002 0002 |]

    uint32_t cps[2] = { 0x11101, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C4, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_071)
{
    // 0334 10A0F;	
    // (ê®è) KHAROSHTHI SIGN VISARGA	[| 004A 00C5 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x10A0F };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C5, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_072)
{
    // 10A0F 0334;	
    // (ê®è) KHAROSHTHI SIGN VISARGA	[| 004A 00C5 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A0F, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C5, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_073)
{
    // 0334 11102;	
    // (ëÑÇ) CHAKMA SIGN VISARGA	[| 004A 00C5 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x11102 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C5, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_074)
{
    // 11102 0334;	
    // (ëÑÇ) CHAKMA SIGN VISARGA	[| 004A 00C5 | 0002 0002 |]

    uint32_t cps[2] = { 0x11102, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00C5, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_075)
{
    // 0334 10A38;	
    // (ê®∏) KHAROSHTHI SIGN BAR ABOVE	[| 004A 00CC | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x10A38 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00CC, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_076)
{
    // 10A38 0334;	
    // (ê®∏) KHAROSHTHI SIGN BAR ABOVE	[| 004A 00CC | 0002 0002 |]

    uint32_t cps[2] = { 0x10A38, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00CC, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_077)
{
    // 0334 10A3A;	
    // (ê®∫) KHAROSHTHI SIGN DOT BELOW	[| 004A 00CE | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x10A3A };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00CE, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_078)
{
    // 10A3A 0334;	
    // (ê®∫) KHAROSHTHI SIGN DOT BELOW	[| 004A 00CE | 0002 0002 |]

    uint32_t cps[2] = { 0x10A3A, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00CE, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_079)
{
    // 0334 0E48;	
    // (‡πà) THAI CHARACTER MAI EK	[| 004A 00D4 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0E48 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00D4, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_080)
{
    // 0E48 0334;	
    // (‡πà) THAI CHARACTER MAI EK	[| 004A 00D4 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E48, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00D4, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_081)
{
    // 0334 0E49;	
    // (‡πâ) THAI CHARACTER MAI THO	[| 004A 00D5 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0E49 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00D5, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_082)
{
    // 0E49 0334;	
    // (‡πâ) THAI CHARACTER MAI THO	[| 004A 00D5 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E49, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00D5, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_083)
{
    // 0334 0E4A;	
    // (‡πä) THAI CHARACTER MAI TRI	[| 004A 00D6 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0E4A };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00D6, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_084)
{
    // 0E4A 0334;	
    // (‡πä) THAI CHARACTER MAI TRI	[| 004A 00D6 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E4A, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00D6, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_085)
{
    // 0334 0E4B;	
    // (‡πã) THAI CHARACTER MAI CHATTAWA	[| 004A 00D7 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0E4B };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00D7, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_086)
{
    // 0E4B 0334;	
    // (‡πã) THAI CHARACTER MAI CHATTAWA	[| 004A 00D7 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E4B, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00D7, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_087)
{
    // 0334 0EC8;	
    // (‡ªà) LAO TONE MAI EK	[| 004A 00DA | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0EC8 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00DA, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_088)
{
    // 0EC8 0334;	
    // (‡ªà) LAO TONE MAI EK	[| 004A 00DA | 0002 0002 |]

    uint32_t cps[2] = { 0x0EC8, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00DA, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_089)
{
    // 0334 0EC9;	
    // (‡ªâ) LAO TONE MAI THO	[| 004A 00DB | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0EC9 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00DB, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_090)
{
    // 0EC9 0334;	
    // (‡ªâ) LAO TONE MAI THO	[| 004A 00DB | 0002 0002 |]

    uint32_t cps[2] = { 0x0EC9, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00DB, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_091)
{
    // 0334 0ECA;	
    // (‡ªä) LAO TONE MAI TI	[| 004A 00DC | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0ECA };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00DC, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_092)
{
    // 0ECA 0334;	
    // (‡ªä) LAO TONE MAI TI	[| 004A 00DC | 0002 0002 |]

    uint32_t cps[2] = { 0x0ECA, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00DC, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_093)
{
    // 0334 0ECB;	
    // (‡ªã) LAO TONE MAI CATAWA	[| 004A 00DD | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0ECB };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00DD, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_094)
{
    // 0ECB 0334;	
    // (‡ªã) LAO TONE MAI CATAWA	[| 004A 00DD | 0002 0002 |]

    uint32_t cps[2] = { 0x0ECB, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00DD, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_095)
{
    // 0334 AABF;	
    // (Í™ø) TAI VIET TONE MAI EK	[| 004A 00E0 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0xAABF };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00E0, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_096)
{
    // AABF 0334;	
    // (Í™ø) TAI VIET TONE MAI EK	[| 004A 00E0 | 0002 0002 |]

    uint32_t cps[2] = { 0xAABF, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00E0, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_097)
{
    // 0334 AAC1;	
    // (Í´Å) TAI VIET TONE MAI THO	[| 004A 00E1 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0xAAC1 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00E1, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_098)
{
    // AAC1 0334;	
    // (Í´Å) TAI VIET TONE MAI THO	[| 004A 00E1 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAC1, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00E1, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_099)
{
    // 0334 0F39;	
    // (‡ºπ) TIBETAN MARK TSA -PHRU	[| 004A 00E2 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0F39 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00E2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_100)
{
    // 0F39 0334;	
    // (‡ºπ) TIBETAN MARK TSA -PHRU	[| 004A 00E2 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F39, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00E2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_101)
{
    // 0334 A92B;	
    // (Í§´) KAYAH LI TONE PLOPHU	[| 004A 00E3 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0xA92B };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00E3, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_102)
{
    // A92B 0334;	
    // (Í§´) KAYAH LI TONE PLOPHU	[| 004A 00E3 | 0002 0002 |]

    uint32_t cps[2] = { 0xA92B, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00E3, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_103)
{
    // 0334 A92C;	
    // (Í§¨) KAYAH LI TONE CALYA	[| 004A 00E4 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0xA92C };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00E4, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_104)
{
    // A92C 0334;	
    // (Í§¨) KAYAH LI TONE CALYA	[| 004A 00E4 | 0002 0002 |]

    uint32_t cps[2] = { 0xA92C, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00E4, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_105)
{
    // 0334 A92D;	
    // (Í§≠) KAYAH LI TONE CALYA PLOPHU	[| 004A 00E5 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0xA92D };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00E5, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_106)
{
    // A92D 0334;	
    // (Í§≠) KAYAH LI TONE CALYA PLOPHU	[| 004A 00E5 | 0002 0002 |]

    uint32_t cps[2] = { 0xA92D, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00E5, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_107)
{
    // 0334 1037;	
    // (·Ä∑) MYANMAR SIGN DOT BELOW	[| 004A 00E6 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1037 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00E6, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_108)
{
    // 1037 0334;	
    // (·Ä∑) MYANMAR SIGN DOT BELOW	[| 004A 00E6 | 0002 0002 |]

    uint32_t cps[2] = { 0x1037, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00E6, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_109)
{
    // 0334 1A75;	
    // (·©µ) TAI THAM SIGN TONE-1	[| 004A 00EA | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1A75 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00EA, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_110)
{
    // 1A75 0334;	
    // (·©µ) TAI THAM SIGN TONE-1	[| 004A 00EA | 0002 0002 |]

    uint32_t cps[2] = { 0x1A75, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00EA, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_111)
{
    // 0334 1A76;	
    // (·©∂) TAI THAM SIGN TONE-2	[| 004A 00EB | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1A76 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00EB, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_112)
{
    // 1A76 0334;	
    // (·©∂) TAI THAM SIGN TONE-2	[| 004A 00EB | 0002 0002 |]

    uint32_t cps[2] = { 0x1A76, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00EB, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_113)
{
    // 0334 1A77;	
    // (·©∑) TAI THAM SIGN KHUEN TONE-3	[| 004A 00EC | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1A77 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00EC, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_114)
{
    // 1A77 0334;	
    // (·©∑) TAI THAM SIGN KHUEN TONE-3	[| 004A 00EC | 0002 0002 |]

    uint32_t cps[2] = { 0x1A77, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00EC, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_115)
{
    // 0334 1A78;	
    // (·©∏) TAI THAM SIGN KHUEN TONE-4	[| 004A 00ED | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1A78 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00ED, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_116)
{
    // 1A78 0334;	
    // (·©∏) TAI THAM SIGN KHUEN TONE-4	[| 004A 00ED | 0002 0002 |]

    uint32_t cps[2] = { 0x1A78, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00ED, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_117)
{
    // 0334 1A79;	
    // (·©π) TAI THAM SIGN KHUEN TONE-5	[| 004A 00EE | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1A79 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00EE, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_118)
{
    // 1A79 0334;	
    // (·©π) TAI THAM SIGN KHUEN TONE-5	[| 004A 00EE | 0002 0002 |]

    uint32_t cps[2] = { 0x1A79, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00EE, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_119)
{
    // 0334 1A7A;	
    // (·©∫) TAI THAM SIGN RA HAAM	[| 004A 00EF | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1A7A };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00EF, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_120)
{
    // 1A7A 0334;	
    // (·©∫) TAI THAM SIGN RA HAAM	[| 004A 00EF | 0002 0002 |]

    uint32_t cps[2] = { 0x1A7A, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00EF, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_121)
{
    // 0334 1A7B;	
    // (·©ª) TAI THAM SIGN MAI SAM	[| 004A 00F0 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1A7B };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00F0, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_122)
{
    // 1A7B 0334;	
    // (·©ª) TAI THAM SIGN MAI SAM	[| 004A 00F0 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A7B, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00F0, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_123)
{
    // 0334 1A7C;	
    // (·©º) TAI THAM SIGN KHUEN-LUE KARAN	[| 004A 00F1 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1A7C };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00F1, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_124)
{
    // 1A7C 0334;	
    // (·©º) TAI THAM SIGN KHUEN-LUE KARAN	[| 004A 00F1 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A7C, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00F1, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_125)
{
    // 0334 1939;	
    // (·§π) LIMBU SIGN MUKPHRENG	[| 004A 00F2 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1939 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00F2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_126)
{
    // 1939 0334;	
    // (·§π) LIMBU SIGN MUKPHRENG	[| 004A 00F2 | 0002 0002 |]

    uint32_t cps[2] = { 0x1939, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00F2, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_127)
{
    // 0334 193A;	
    // (·§∫) LIMBU SIGN KEMPHRENG	[| 004A 00F3 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x193A };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00F3, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_128)
{
    // 193A 0334;	
    // (·§∫) LIMBU SIGN KEMPHRENG	[| 004A 00F3 | 0002 0002 |]

    uint32_t cps[2] = { 0x193A, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00F3, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_129)
{
    // 0334 193B;	
    // (·§ª) LIMBU SIGN SA-I	[| 004A 00F4 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x193B };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00F4, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_130)
{
    // 193B 0334;	
    // (·§ª) LIMBU SIGN SA-I	[| 004A 00F4 | 0002 0002 |]

    uint32_t cps[2] = { 0x193B, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00F4, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_131)
{
    // 0334 16B30;	
    // (ñ¨∞) PAHAWH HMONG MARK CIM TUB	[| 004A 00F5 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x16B30 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00F5, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_132)
{
    // 16B30 0334;	
    // (ñ¨∞) PAHAWH HMONG MARK CIM TUB	[| 004A 00F5 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B30, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00F5, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_133)
{
    // 0334 16B31;	
    // (ñ¨±) PAHAWH HMONG MARK CIM SO	[| 004A 00F6 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x16B31 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00F6, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_134)
{
    // 16B31 0334;	
    // (ñ¨±) PAHAWH HMONG MARK CIM SO	[| 004A 00F6 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B31, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00F6, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_135)
{
    // 0334 16B32;	
    // (ñ¨≤) PAHAWH HMONG MARK CIM KES	[| 004A 00F7 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x16B32 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00F7, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_136)
{
    // 16B32 0334;	
    // (ñ¨≤) PAHAWH HMONG MARK CIM KES	[| 004A 00F7 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B32, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00F7, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_137)
{
    // 0334 16B33;	
    // (ñ¨≥) PAHAWH HMONG MARK CIM KHAV	[| 004A 00F8 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x16B33 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00F8, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_138)
{
    // 16B33 0334;	
    // (ñ¨≥) PAHAWH HMONG MARK CIM KHAV	[| 004A 00F8 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B33, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00F8, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_139)
{
    // 0334 16B34;	
    // (ñ¨¥) PAHAWH HMONG MARK CIM SUAM	[| 004A 00F9 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x16B34 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00F9, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_140)
{
    // 16B34 0334;	
    // (ñ¨¥) PAHAWH HMONG MARK CIM SUAM	[| 004A 00F9 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B34, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00F9, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_141)
{
    // 0334 16B35;	
    // (ñ¨µ) PAHAWH HMONG MARK CIM HOM	[| 004A 00FA | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x16B35 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00FA, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_142)
{
    // 16B35 0334;	
    // (ñ¨µ) PAHAWH HMONG MARK CIM HOM	[| 004A 00FA | 0002 0002 |]

    uint32_t cps[2] = { 0x16B35, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00FA, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_143)
{
    // 0334 16B36;	
    // (ñ¨∂) PAHAWH HMONG MARK CIM TAUM	[| 004A 00FB | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x16B36 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00FB, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_144)
{
    // 16B36 0334;	
    // (ñ¨∂) PAHAWH HMONG MARK CIM TAUM	[| 004A 00FB | 0002 0002 |]

    uint32_t cps[2] = { 0x16B36, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00FB, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_145)
{
    // 0334 302A;	
    // („Ä™) IDEOGRAPHIC LEVEL TONE MARK	[| 004A 00FC | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x302A };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00FC, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_146)
{
    // 302A 0334;	
    // („Ä™) IDEOGRAPHIC LEVEL TONE MARK	[| 004A 00FC | 0002 0002 |]

    uint32_t cps[2] = { 0x302A, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00FC, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_147)
{
    // 0334 302B;	
    // („Ä´) IDEOGRAPHIC RISING TONE MARK	[| 004A 00FD | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x302B };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00FD, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_148)
{
    // 302B 0334;	
    // („Ä´) IDEOGRAPHIC RISING TONE MARK	[| 004A 00FD | 0002 0002 |]

    uint32_t cps[2] = { 0x302B, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00FD, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_149)
{
    // 0334 302C;	
    // („Ä¨) IDEOGRAPHIC DEPARTING TONE MARK	[| 004A 00FE | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x302C };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00FE, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_150)
{
    // 302C 0334;	
    // („Ä¨) IDEOGRAPHIC DEPARTING TONE MARK	[| 004A 00FE | 0002 0002 |]

    uint32_t cps[2] = { 0x302C, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00FE, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_151)
{
    // 0334 302D;	
    // („Ä≠) IDEOGRAPHIC ENTERING TONE MARK	[| 004A 00FF | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x302D };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00FF, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_152)
{
    // 302D 0334;	
    // („Ä≠) IDEOGRAPHIC ENTERING TONE MARK	[| 004A 00FF | 0002 0002 |]

    uint32_t cps[2] = { 0x302D, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x00FF, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_153)
{
    // 0334 302E;	
    // („ÄÆ) HANGUL SINGLE DOT TONE MARK	[| 004A 0100 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x302E };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0100, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_154)
{
    // 302E 0334;	
    // („ÄÆ) HANGUL SINGLE DOT TONE MARK	[| 004A 0100 | 0002 0002 |]

    uint32_t cps[2] = { 0x302E, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0100, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_155)
{
    // 0334 302F;	
    // („ÄØ) HANGUL DOUBLE DOT TONE MARK	[| 004A 0101 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x302F };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0101, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_156)
{
    // 302F 0334;	
    // („ÄØ) HANGUL DOUBLE DOT TONE MARK	[| 004A 0101 | 0002 0002 |]

    uint32_t cps[2] = { 0x302F, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0101, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_157)
{
    // 0334 20D0;	
    // (‚Éê) COMBINING LEFT HARPOON ABOVE	[| 004A 0102 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x20D0 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0102, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_158)
{
    // 20D0 0334;	
    // (‚Éê) COMBINING LEFT HARPOON ABOVE	[| 004A 0102 | 0002 0002 |]

    uint32_t cps[2] = { 0x20D0, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0102, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_159)
{
    // 0334 20D1;	
    // (‚Éë) COMBINING RIGHT HARPOON ABOVE	[| 004A 0103 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x20D1 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0103, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_160)
{
    // 20D1 0334;	
    // (‚Éë) COMBINING RIGHT HARPOON ABOVE	[| 004A 0103 | 0002 0002 |]

    uint32_t cps[2] = { 0x20D1, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0103, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_161)
{
    // 0334 20D4;	
    // (‚Éî) COMBINING ANTICLOCKWISE ARROW ABOVE	[| 004A 0105 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x20D4 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0105, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_162)
{
    // 20D4 0334;	
    // (‚Éî) COMBINING ANTICLOCKWISE ARROW ABOVE	[| 004A 0105 | 0002 0002 |]

    uint32_t cps[2] = { 0x20D4, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0105, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_163)
{
    // 0334 20D5;	
    // (‚Éï) COMBINING CLOCKWISE ARROW ABOVE	[| 004A 0106 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x20D5 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0106, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_164)
{
    // 20D5 0334;	
    // (‚Éï) COMBINING CLOCKWISE ARROW ABOVE	[| 004A 0106 | 0002 0002 |]

    uint32_t cps[2] = { 0x20D5, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0106, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_165)
{
    // 0334 20D6;	
    // (‚Éñ) COMBINING LEFT ARROW ABOVE	[| 004A 0107 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x20D6 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0107, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_166)
{
    // 20D6 0334;	
    // (‚Éñ) COMBINING LEFT ARROW ABOVE	[| 004A 0107 | 0002 0002 |]

    uint32_t cps[2] = { 0x20D6, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0107, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_167)
{
    // 0334 20D7;	
    // (‚Éó) COMBINING RIGHT ARROW ABOVE	[| 004A 0108 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x20D7 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0108, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_168)
{
    // 20D7 0334;	
    // (‚Éó) COMBINING RIGHT ARROW ABOVE	[| 004A 0108 | 0002 0002 |]

    uint32_t cps[2] = { 0x20D7, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0108, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_169)
{
    // 0334 20DB;	
    // (‚Éõ) COMBINING THREE DOTS ABOVE	[| 004A 0109 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x20DB };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0109, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_170)
{
    // 20DB 0334;	
    // (‚Éõ) COMBINING THREE DOTS ABOVE	[| 004A 0109 | 0002 0002 |]

    uint32_t cps[2] = { 0x20DB, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0109, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_171)
{
    // 0334 20DC;	
    // (‚Éú) COMBINING FOUR DOTS ABOVE	[| 004A 010A | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x20DC };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x010A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_172)
{
    // 20DC 0334;	
    // (‚Éú) COMBINING FOUR DOTS ABOVE	[| 004A 010A | 0002 0002 |]

    uint32_t cps[2] = { 0x20DC, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x010A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_173)
{
    // 0334 20E1;	
    // (‚É°) COMBINING LEFT RIGHT ARROW ABOVE	[| 004A 010B | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x20E1 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x010B, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_174)
{
    // 20E1 0334;	
    // (‚É°) COMBINING LEFT RIGHT ARROW ABOVE	[| 004A 010B | 0002 0002 |]

    uint32_t cps[2] = { 0x20E1, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x010B, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_175)
{
    // 0334 20E7;	
    // (‚Éß) COMBINING ANNUITY SYMBOL	[| 004A 010D | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x20E7 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x010D, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_176)
{
    // 20E7 0334;	
    // (‚Éß) COMBINING ANNUITY SYMBOL	[| 004A 010D | 0002 0002 |]

    uint32_t cps[2] = { 0x20E7, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x010D, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_177)
{
    // 0334 20E8;	
    // (‚É®) COMBINING TRIPLE UNDERDOT	[| 004A 010E | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x20E8 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x010E, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_178)
{
    // 20E8 0334;	
    // (‚É®) COMBINING TRIPLE UNDERDOT	[| 004A 010E | 0002 0002 |]

    uint32_t cps[2] = { 0x20E8, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x010E, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_179)
{
    // 0334 20E9;	
    // (‚É©) COMBINING WIDE BRIDGE ABOVE	[| 004A 010F | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x20E9 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x010F, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_180)
{
    // 20E9 0334;	
    // (‚É©) COMBINING WIDE BRIDGE ABOVE	[| 004A 010F | 0002 0002 |]

    uint32_t cps[2] = { 0x20E9, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x010F, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_181)
{
    // 0334 101FD;	
    // (êáΩ) PHAISTOS DISC SIGN COMBINING OBLIQUE STROKE	[| 004A 0110 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x101FD };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0110, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_182)
{
    // 101FD 0334;	
    // (êáΩ) PHAISTOS DISC SIGN COMBINING OBLIQUE STROKE	[| 004A 0110 | 0002 0002 |]

    uint32_t cps[2] = { 0x101FD, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x004A, 0x0110, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_183)
{
    // 16AF0 0334;	
    // (ñ´∞) BASSA VAH COMBINING HIGH TONE	[| 00B8 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x16AF0, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x00B8, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_184)
{
    // 16AF1 0334;	
    // (ñ´±) BASSA VAH COMBINING LOW TONE	[| 00B9 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x16AF1, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x00B9, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_185)
{
    // 16AF2 0334;	
    // (ñ´≤) BASSA VAH COMBINING MID TONE	[| 00BA 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x16AF2, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x00BA, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_186)
{
    // 16AF3 0334;	
    // (ñ´≥) BASSA VAH COMBINING LOW-MID TONE	[| 00BB 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x16AF3, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x00BB, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_187)
{
    // 16AF4 0334;	
    // (ñ´¥) BASSA VAH COMBINING HIGH-LOW TONE	[| 00BC 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x16AF4, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x00BC, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_188)
{
    // 10A39 0334;	
    // (ê®π) KHAROSHTHI SIGN CAUDA	[| 00CD 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x10A39, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x00CD, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_189)
{
    // 20D2 0334;	
    // (‚Éí) COMBINING LONG VERTICAL LINE OVERLAY	[| 0104 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x20D2, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x0104, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_190)
{
    // 20D3 0334;	
    // (‚Éì) COMBINING SHORT VERTICAL LINE OVERLAY	[| 0104 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x20D3, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x0104, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_191)
{
    // 20E6 0334;	
    // (‚É¶) COMBINING DOUBLE VERTICAL STROKE OVERLAY	[| 010C 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x20E6, 0x0334 };
    uint32_t const ces[7] = { 0x0000, 0x010C, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_192)
{
    // 0009 0021;	
    // ('\u0009') <CHARACTER TABULATION>	[0201 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0009, 0x0021 };
    uint32_t const ces[9] = { 0x0201, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_193)
{
    // 0009 003F;	
    // ('\u0009') <CHARACTER TABULATION>	[0201 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0009, 0x003F };
    uint32_t const ces[9] = { 0x0201, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_194)
{
    // 0009 0061;	
    // ('\u0009') <CHARACTER TABULATION>	[0201 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0009, 0x0061 };
    uint32_t const ces[9] = { 0x0201, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_195)
{
    // 0009 0041;	
    // ('\u0009') <CHARACTER TABULATION>	[0201 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0009, 0x0041 };
    uint32_t const ces[9] = { 0x0201, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_196)
{
    // 0009 0062;	
    // ('\u0009') <CHARACTER TABULATION>	[0201 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0009, 0x0062 };
    uint32_t const ces[9] = { 0x0201, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_197)
{
    // 000A 0021;	
    // ('\u000A') <LINE FEED (LF)>	[0202 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x000A, 0x0021 };
    uint32_t const ces[9] = { 0x0202, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_198)
{
    // 000A 003F;	
    // ('\u000A') <LINE FEED (LF)>	[0202 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x000A, 0x003F };
    uint32_t const ces[9] = { 0x0202, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_199)
{
    // 000A 0061;	
    // ('\u000A') <LINE FEED (LF)>	[0202 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x000A, 0x0061 };
    uint32_t const ces[9] = { 0x0202, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_200)
{
    // 000A 0041;	
    // ('\u000A') <LINE FEED (LF)>	[0202 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x000A, 0x0041 };
    uint32_t const ces[9] = { 0x0202, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_201)
{
    // 000A 0062;	
    // ('\u000A') <LINE FEED (LF)>	[0202 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x000A, 0x0062 };
    uint32_t const ces[9] = { 0x0202, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_202)
{
    // 000B 0021;	
    // ('\u000B') <LINE TABULATION>	[0203 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x000B, 0x0021 };
    uint32_t const ces[9] = { 0x0203, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_203)
{
    // 000B 003F;	
    // ('\u000B') <LINE TABULATION>	[0203 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x000B, 0x003F };
    uint32_t const ces[9] = { 0x0203, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_204)
{
    // 000B 0061;	
    // ('\u000B') <LINE TABULATION>	[0203 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x000B, 0x0061 };
    uint32_t const ces[9] = { 0x0203, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_205)
{
    // 000B 0041;	
    // ('\u000B') <LINE TABULATION>	[0203 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x000B, 0x0041 };
    uint32_t const ces[9] = { 0x0203, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_206)
{
    // 000B 0062;	
    // ('\u000B') <LINE TABULATION>	[0203 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x000B, 0x0062 };
    uint32_t const ces[9] = { 0x0203, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_207)
{
    // 000C 0021;	
    // ('\u000C') <FORM FEED (FF)>	[0204 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x000C, 0x0021 };
    uint32_t const ces[9] = { 0x0204, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_208)
{
    // 000C 003F;	
    // ('\u000C') <FORM FEED (FF)>	[0204 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x000C, 0x003F };
    uint32_t const ces[9] = { 0x0204, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_209)
{
    // 000C 0061;	
    // ('\u000C') <FORM FEED (FF)>	[0204 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x000C, 0x0061 };
    uint32_t const ces[9] = { 0x0204, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_210)
{
    // 000C 0041;	
    // ('\u000C') <FORM FEED (FF)>	[0204 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x000C, 0x0041 };
    uint32_t const ces[9] = { 0x0204, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_211)
{
    // 000C 0062;	
    // ('\u000C') <FORM FEED (FF)>	[0204 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x000C, 0x0062 };
    uint32_t const ces[9] = { 0x0204, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_212)
{
    // 000D 0021;	
    // ('\u000D') <CARRIAGE RETURN (CR)>	[0205 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x000D, 0x0021 };
    uint32_t const ces[9] = { 0x0205, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_213)
{
    // 000D 003F;	
    // ('\u000D') <CARRIAGE RETURN (CR)>	[0205 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x000D, 0x003F };
    uint32_t const ces[9] = { 0x0205, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_214)
{
    // 000D 0061;	
    // ('\u000D') <CARRIAGE RETURN (CR)>	[0205 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x000D, 0x0061 };
    uint32_t const ces[9] = { 0x0205, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_215)
{
    // 000D 0041;	
    // ('\u000D') <CARRIAGE RETURN (CR)>	[0205 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x000D, 0x0041 };
    uint32_t const ces[9] = { 0x0205, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_216)
{
    // 000D 0062;	
    // ('\u000D') <CARRIAGE RETURN (CR)>	[0205 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x000D, 0x0062 };
    uint32_t const ces[9] = { 0x0205, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_217)
{
    // 0085 0021;	
    // ('\u0085') <NEXT LINE (NEL)>	[0206 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0085, 0x0021 };
    uint32_t const ces[9] = { 0x0206, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_218)
{
    // 0085 003F;	
    // ('\u0085') <NEXT LINE (NEL)>	[0206 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0085, 0x003F };
    uint32_t const ces[9] = { 0x0206, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_219)
{
    // 0085 0061;	
    // ('\u0085') <NEXT LINE (NEL)>	[0206 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0085, 0x0061 };
    uint32_t const ces[9] = { 0x0206, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_220)
{
    // 0085 0041;	
    // ('\u0085') <NEXT LINE (NEL)>	[0206 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0085, 0x0041 };
    uint32_t const ces[9] = { 0x0206, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_221)
{
    // 0085 0062;	
    // ('\u0085') <NEXT LINE (NEL)>	[0206 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0085, 0x0062 };
    uint32_t const ces[9] = { 0x0206, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_222)
{
    // 2028 0021;	
    // ('\u2028') LINE SEPARATOR	[0207 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2028, 0x0021 };
    uint32_t const ces[9] = { 0x0207, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_223)
{
    // 2028 003F;	
    // ('\u2028') LINE SEPARATOR	[0207 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2028, 0x003F };
    uint32_t const ces[9] = { 0x0207, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_224)
{
    // 2028 0061;	
    // ('\u2028') LINE SEPARATOR	[0207 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2028, 0x0061 };
    uint32_t const ces[9] = { 0x0207, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_225)
{
    // 2028 0041;	
    // ('\u2028') LINE SEPARATOR	[0207 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2028, 0x0041 };
    uint32_t const ces[9] = { 0x0207, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_226)
{
    // 2028 0062;	
    // ('\u2028') LINE SEPARATOR	[0207 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2028, 0x0062 };
    uint32_t const ces[9] = { 0x0207, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_227)
{
    // 2029 0021;	
    // ('\u2029') PARAGRAPH SEPARATOR	[0208 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2029, 0x0021 };
    uint32_t const ces[9] = { 0x0208, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_228)
{
    // 2029 003F;	
    // ('\u2029') PARAGRAPH SEPARATOR	[0208 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2029, 0x003F };
    uint32_t const ces[9] = { 0x0208, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_229)
{
    // 2029 0061;	
    // ('\u2029') PARAGRAPH SEPARATOR	[0208 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2029, 0x0061 };
    uint32_t const ces[9] = { 0x0208, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_230)
{
    // 2029 0041;	
    // ('\u2029') PARAGRAPH SEPARATOR	[0208 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2029, 0x0041 };
    uint32_t const ces[9] = { 0x0208, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_231)
{
    // 2029 0062;	
    // ('\u2029') PARAGRAPH SEPARATOR	[0208 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2029, 0x0062 };
    uint32_t const ces[9] = { 0x0208, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_232)
{
    // 0020 0021;	
    // (' ') SPACE	[0209 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0020, 0x0021 };
    uint32_t const ces[9] = { 0x0209, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_233)
{
    // 3000 0021;	
    // ('„ÄÄ') IDEOGRAPHIC SPACE	[0209 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0x3000, 0x0021 };
    uint32_t const ces[9] = { 0x0209, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_234)
{
    // 1680 0021;	
    // ('·öÄ') OGHAM SPACE MARK	[0209 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1680, 0x0021 };
    uint32_t const ces[9] = { 0x0209, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_235)
{
    // 2000 0021;	
    // ('‚ÄÇ') EN QUAD	[0209 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2000, 0x0021 };
    uint32_t const ces[9] = { 0x0209, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_236)
{
    // 2002 0021;	
    // ('‚ÄÇ') EN SPACE	[0209 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2002, 0x0021 };
    uint32_t const ces[9] = { 0x0209, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_237)
{
    // 2001 0021;	
    // ('‚ÄÉ') EM QUAD	[0209 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2001, 0x0021 };
    uint32_t const ces[9] = { 0x0209, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_238)
{
    // 2003 0021;	
    // ('‚ÄÉ') EM SPACE	[0209 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2003, 0x0021 };
    uint32_t const ces[9] = { 0x0209, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_239)
{
    // 2004 0021;	
    // ('‚ÄÑ') THREE-PER-EM SPACE	[0209 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2004, 0x0021 };
    uint32_t const ces[9] = { 0x0209, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_240)
{
    // 2005 0021;	
    // ('‚ÄÖ') FOUR-PER-EM SPACE	[0209 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2005, 0x0021 };
    uint32_t const ces[9] = { 0x0209, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_241)
{
    // 2006 0021;	
    // ('‚ÄÜ') SIX-PER-EM SPACE	[0209 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2006, 0x0021 };
    uint32_t const ces[9] = { 0x0209, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_242)
{
    // 2008 0021;	
    // ('‚Äà') PUNCTUATION SPACE	[0209 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2008, 0x0021 };
    uint32_t const ces[9] = { 0x0209, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_243)
{
    // 2009 0021;	
    // ('‚Äâ') THIN SPACE	[0209 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2009, 0x0021 };
    uint32_t const ces[9] = { 0x0209, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_244)
{
    // 200A 0021;	
    // ('‚Ää') HAIR SPACE	[0209 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x200A, 0x0021 };
    uint32_t const ces[9] = { 0x0209, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_245)
{
    // 205F 0021;	
    // ('‚Åü') MEDIUM MATHEMATICAL SPACE	[0209 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x205F, 0x0021 };
    uint32_t const ces[9] = { 0x0209, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_246)
{
    // 00A0 0021;	
    // ('¬†') NO-BREAK SPACE	[0209 0261 | 0020 0020 | 001B 0002 |]

    uint32_t cps[2] = { 0x00A0, 0x0021 };
    uint32_t const ces[9] = { 0x0209, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_247)
{
    // 2007 0021;	
    // ('‚Äá') FIGURE SPACE	[0209 0261 | 0020 0020 | 001B 0002 |]

    uint32_t cps[2] = { 0x2007, 0x0021 };
    uint32_t const ces[9] = { 0x0209, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_248)
{
    // 202F 0021;	
    // ('‚ÄØ') NARROW NO-BREAK SPACE	[0209 0261 | 0020 0020 | 001B 0002 |]

    uint32_t cps[2] = { 0x202F, 0x0021 };
    uint32_t const ces[9] = { 0x0209, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_249)
{
    // 0020 003F;	
    // (' ') SPACE	[0209 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0020, 0x003F };
    uint32_t const ces[9] = { 0x0209, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_250)
{
    // 3000 003F;	
    // ('„ÄÄ') IDEOGRAPHIC SPACE	[0209 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0x3000, 0x003F };
    uint32_t const ces[9] = { 0x0209, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_251)
{
    // 1680 003F;	
    // ('·öÄ') OGHAM SPACE MARK	[0209 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1680, 0x003F };
    uint32_t const ces[9] = { 0x0209, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_252)
{
    // 2000 003F;	
    // ('‚ÄÇ') EN QUAD	[0209 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2000, 0x003F };
    uint32_t const ces[9] = { 0x0209, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_253)
{
    // 2002 003F;	
    // ('‚ÄÇ') EN SPACE	[0209 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2002, 0x003F };
    uint32_t const ces[9] = { 0x0209, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_254)
{
    // 2001 003F;	
    // ('‚ÄÉ') EM QUAD	[0209 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2001, 0x003F };
    uint32_t const ces[9] = { 0x0209, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_255)
{
    // 2003 003F;	
    // ('‚ÄÉ') EM SPACE	[0209 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2003, 0x003F };
    uint32_t const ces[9] = { 0x0209, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_256)
{
    // 2004 003F;	
    // ('‚ÄÑ') THREE-PER-EM SPACE	[0209 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2004, 0x003F };
    uint32_t const ces[9] = { 0x0209, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_257)
{
    // 2005 003F;	
    // ('‚ÄÖ') FOUR-PER-EM SPACE	[0209 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2005, 0x003F };
    uint32_t const ces[9] = { 0x0209, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_258)
{
    // 2006 003F;	
    // ('‚ÄÜ') SIX-PER-EM SPACE	[0209 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2006, 0x003F };
    uint32_t const ces[9] = { 0x0209, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_259)
{
    // 2008 003F;	
    // ('‚Äà') PUNCTUATION SPACE	[0209 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2008, 0x003F };
    uint32_t const ces[9] = { 0x0209, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_260)
{
    // 2009 003F;	
    // ('‚Äâ') THIN SPACE	[0209 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2009, 0x003F };
    uint32_t const ces[9] = { 0x0209, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_261)
{
    // 200A 003F;	
    // ('‚Ää') HAIR SPACE	[0209 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x200A, 0x003F };
    uint32_t const ces[9] = { 0x0209, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_262)
{
    // 205F 003F;	
    // ('‚Åü') MEDIUM MATHEMATICAL SPACE	[0209 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x205F, 0x003F };
    uint32_t const ces[9] = { 0x0209, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_263)
{
    // 00A0 003F;	
    // ('¬†') NO-BREAK SPACE	[0209 0267 | 0020 0020 | 001B 0002 |]

    uint32_t cps[2] = { 0x00A0, 0x003F };
    uint32_t const ces[9] = { 0x0209, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_264)
{
    // 2007 003F;	
    // ('‚Äá') FIGURE SPACE	[0209 0267 | 0020 0020 | 001B 0002 |]

    uint32_t cps[2] = { 0x2007, 0x003F };
    uint32_t const ces[9] = { 0x0209, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_265)
{
    // 202F 003F;	
    // ('‚ÄØ') NARROW NO-BREAK SPACE	[0209 0267 | 0020 0020 | 001B 0002 |]

    uint32_t cps[2] = { 0x202F, 0x003F };
    uint32_t const ces[9] = { 0x0209, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_266)
{
    // 0020 0061;	
    // (' ') SPACE	[0209 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0020, 0x0061 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_267)
{
    // 0020 0041;	
    // (' ') SPACE	[0209 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0020, 0x0041 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_268)
{
    // 3000 0061;	
    // ('„ÄÄ') IDEOGRAPHIC SPACE	[0209 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0x3000, 0x0061 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_269)
{
    // 3000 0041;	
    // ('„ÄÄ') IDEOGRAPHIC SPACE	[0209 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0x3000, 0x0041 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_270)
{
    // 1680 0061;	
    // ('·öÄ') OGHAM SPACE MARK	[0209 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1680, 0x0061 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_271)
{
    // 2000 0061;	
    // ('‚ÄÇ') EN QUAD	[0209 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2000, 0x0061 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_272)
{
    // 2002 0061;	
    // ('‚ÄÇ') EN SPACE	[0209 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2002, 0x0061 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_273)
{
    // 2001 0061;	
    // ('‚ÄÉ') EM QUAD	[0209 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2001, 0x0061 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_274)
{
    // 2003 0061;	
    // ('‚ÄÉ') EM SPACE	[0209 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2003, 0x0061 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_275)
{
    // 2004 0061;	
    // ('‚ÄÑ') THREE-PER-EM SPACE	[0209 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2004, 0x0061 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_276)
{
    // 2005 0061;	
    // ('‚ÄÖ') FOUR-PER-EM SPACE	[0209 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2005, 0x0061 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_277)
{
    // 2006 0061;	
    // ('‚ÄÜ') SIX-PER-EM SPACE	[0209 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2006, 0x0061 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_278)
{
    // 2008 0061;	
    // ('‚Äà') PUNCTUATION SPACE	[0209 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2008, 0x0061 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_279)
{
    // 2009 0061;	
    // ('‚Äâ') THIN SPACE	[0209 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2009, 0x0061 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_280)
{
    // 200A 0061;	
    // ('‚Ää') HAIR SPACE	[0209 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x200A, 0x0061 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_281)
{
    // 205F 0061;	
    // ('‚Åü') MEDIUM MATHEMATICAL SPACE	[0209 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x205F, 0x0061 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_282)
{
    // 1680 0041;	
    // ('·öÄ') OGHAM SPACE MARK	[0209 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1680, 0x0041 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_283)
{
    // 2000 0041;	
    // ('‚ÄÇ') EN QUAD	[0209 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2000, 0x0041 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_284)
{
    // 2002 0041;	
    // ('‚ÄÇ') EN SPACE	[0209 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2002, 0x0041 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_285)
{
    // 2001 0041;	
    // ('‚ÄÉ') EM QUAD	[0209 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2001, 0x0041 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_286)
{
    // 2003 0041;	
    // ('‚ÄÉ') EM SPACE	[0209 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2003, 0x0041 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_287)
{
    // 2004 0041;	
    // ('‚ÄÑ') THREE-PER-EM SPACE	[0209 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2004, 0x0041 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_288)
{
    // 2005 0041;	
    // ('‚ÄÖ') FOUR-PER-EM SPACE	[0209 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2005, 0x0041 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_289)
{
    // 2006 0041;	
    // ('‚ÄÜ') SIX-PER-EM SPACE	[0209 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2006, 0x0041 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_290)
{
    // 2008 0041;	
    // ('‚Äà') PUNCTUATION SPACE	[0209 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2008, 0x0041 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_291)
{
    // 2009 0041;	
    // ('‚Äâ') THIN SPACE	[0209 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2009, 0x0041 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_292)
{
    // 200A 0041;	
    // ('‚Ää') HAIR SPACE	[0209 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x200A, 0x0041 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_293)
{
    // 205F 0041;	
    // ('‚Åü') MEDIUM MATHEMATICAL SPACE	[0209 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x205F, 0x0041 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_294)
{
    // 00A0 0061;	
    // ('¬†') NO-BREAK SPACE	[0209 1CAD | 0020 0020 | 001B 0002 |]

    uint32_t cps[2] = { 0x00A0, 0x0061 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_295)
{
    // 2007 0061;	
    // ('‚Äá') FIGURE SPACE	[0209 1CAD | 0020 0020 | 001B 0002 |]

    uint32_t cps[2] = { 0x2007, 0x0061 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_296)
{
    // 202F 0061;	
    // ('‚ÄØ') NARROW NO-BREAK SPACE	[0209 1CAD | 0020 0020 | 001B 0002 |]

    uint32_t cps[2] = { 0x202F, 0x0061 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_297)
{
    // 00A0 0041;	
    // ('¬†') NO-BREAK SPACE	[0209 1CAD | 0020 0020 | 001B 0008 |]

    uint32_t cps[2] = { 0x00A0, 0x0041 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_298)
{
    // 2007 0041;	
    // ('‚Äá') FIGURE SPACE	[0209 1CAD | 0020 0020 | 001B 0008 |]

    uint32_t cps[2] = { 0x2007, 0x0041 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_299)
{
    // 202F 0041;	
    // ('‚ÄØ') NARROW NO-BREAK SPACE	[0209 1CAD | 0020 0020 | 001B 0008 |]

    uint32_t cps[2] = { 0x202F, 0x0041 };
    uint32_t const ces[9] = { 0x0209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_300)
{
    // 0020 0062;	
    // (' ') SPACE	[0209 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0020, 0x0062 };
    uint32_t const ces[9] = { 0x0209, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_301)
{
    // 3000 0062;	
    // ('„ÄÄ') IDEOGRAPHIC SPACE	[0209 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0x3000, 0x0062 };
    uint32_t const ces[9] = { 0x0209, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_302)
{
    // 1680 0062;	
    // ('·öÄ') OGHAM SPACE MARK	[0209 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1680, 0x0062 };
    uint32_t const ces[9] = { 0x0209, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_303)
{
    // 2000 0062;	
    // ('‚ÄÇ') EN QUAD	[0209 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2000, 0x0062 };
    uint32_t const ces[9] = { 0x0209, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_304)
{
    // 2002 0062;	
    // ('‚ÄÇ') EN SPACE	[0209 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2002, 0x0062 };
    uint32_t const ces[9] = { 0x0209, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_305)
{
    // 2001 0062;	
    // ('‚ÄÉ') EM QUAD	[0209 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2001, 0x0062 };
    uint32_t const ces[9] = { 0x0209, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_306)
{
    // 2003 0062;	
    // ('‚ÄÉ') EM SPACE	[0209 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2003, 0x0062 };
    uint32_t const ces[9] = { 0x0209, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_307)
{
    // 2004 0062;	
    // ('‚ÄÑ') THREE-PER-EM SPACE	[0209 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2004, 0x0062 };
    uint32_t const ces[9] = { 0x0209, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_308)
{
    // 2005 0062;	
    // ('‚ÄÖ') FOUR-PER-EM SPACE	[0209 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2005, 0x0062 };
    uint32_t const ces[9] = { 0x0209, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_309)
{
    // 2006 0062;	
    // ('‚ÄÜ') SIX-PER-EM SPACE	[0209 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2006, 0x0062 };
    uint32_t const ces[9] = { 0x0209, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_310)
{
    // 2008 0062;	
    // ('‚Äà') PUNCTUATION SPACE	[0209 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2008, 0x0062 };
    uint32_t const ces[9] = { 0x0209, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_311)
{
    // 2009 0062;	
    // ('‚Äâ') THIN SPACE	[0209 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2009, 0x0062 };
    uint32_t const ces[9] = { 0x0209, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_312)
{
    // 200A 0062;	
    // ('‚Ää') HAIR SPACE	[0209 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x200A, 0x0062 };
    uint32_t const ces[9] = { 0x0209, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_313)
{
    // 205F 0062;	
    // ('‚Åü') MEDIUM MATHEMATICAL SPACE	[0209 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x205F, 0x0062 };
    uint32_t const ces[9] = { 0x0209, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_314)
{
    // 00A0 0062;	
    // ('¬†') NO-BREAK SPACE	[0209 1CC6 | 0020 0020 | 001B 0002 |]

    uint32_t cps[2] = { 0x00A0, 0x0062 };
    uint32_t const ces[9] = { 0x0209, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_315)
{
    // 2007 0062;	
    // ('‚Äá') FIGURE SPACE	[0209 1CC6 | 0020 0020 | 001B 0002 |]

    uint32_t cps[2] = { 0x2007, 0x0062 };
    uint32_t const ces[9] = { 0x0209, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_316)
{
    // 202F 0062;	
    // ('‚ÄØ') NARROW NO-BREAK SPACE	[0209 1CC6 | 0020 0020 | 001B 0002 |]

    uint32_t cps[2] = { 0x202F, 0x0062 };
    uint32_t const ces[9] = { 0x0209, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_317)
{
    // 203E 0021;	
    // (‚Äæ) OVERLINE	[020A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x203E, 0x0021 };
    uint32_t const ces[9] = { 0x020A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_318)
{
    // FE49 0021;	
    // (Ôπâ) DASHED OVERLINE	[020A 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xFE49, 0x0021 };
    uint32_t const ces[9] = { 0x020A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_319)
{
    // FE4A 0021;	
    // (Ôπä) CENTRELINE OVERLINE	[020A 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xFE4A, 0x0021 };
    uint32_t const ces[9] = { 0x020A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_320)
{
    // FE4B 0021;	
    // (Ôπã) WAVY OVERLINE	[020A 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xFE4B, 0x0021 };
    uint32_t const ces[9] = { 0x020A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_321)
{
    // FE4C 0021;	
    // (Ôπå) DOUBLE WAVY OVERLINE	[020A 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xFE4C, 0x0021 };
    uint32_t const ces[9] = { 0x020A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_322)
{
    // 203E 003F;	
    // (‚Äæ) OVERLINE	[020A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x203E, 0x003F };
    uint32_t const ces[9] = { 0x020A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_323)
{
    // FE49 003F;	
    // (Ôπâ) DASHED OVERLINE	[020A 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xFE49, 0x003F };
    uint32_t const ces[9] = { 0x020A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_324)
{
    // FE4A 003F;	
    // (Ôπä) CENTRELINE OVERLINE	[020A 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xFE4A, 0x003F };
    uint32_t const ces[9] = { 0x020A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_325)
{
    // FE4B 003F;	
    // (Ôπã) WAVY OVERLINE	[020A 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xFE4B, 0x003F };
    uint32_t const ces[9] = { 0x020A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_326)
{
    // FE4C 003F;	
    // (Ôπå) DOUBLE WAVY OVERLINE	[020A 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xFE4C, 0x003F };
    uint32_t const ces[9] = { 0x020A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_327)
{
    // 203E 0061;	
    // (‚Äæ) OVERLINE	[020A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x203E, 0x0061 };
    uint32_t const ces[9] = { 0x020A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_328)
{
    // 203E 0041;	
    // (‚Äæ) OVERLINE	[020A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x203E, 0x0041 };
    uint32_t const ces[9] = { 0x020A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_329)
{
    // FE49 0061;	
    // (Ôπâ) DASHED OVERLINE	[020A 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xFE49, 0x0061 };
    uint32_t const ces[9] = { 0x020A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_330)
{
    // FE4A 0061;	
    // (Ôπä) CENTRELINE OVERLINE	[020A 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xFE4A, 0x0061 };
    uint32_t const ces[9] = { 0x020A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_331)
{
    // FE4B 0061;	
    // (Ôπã) WAVY OVERLINE	[020A 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xFE4B, 0x0061 };
    uint32_t const ces[9] = { 0x020A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_332)
{
    // FE4C 0061;	
    // (Ôπå) DOUBLE WAVY OVERLINE	[020A 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xFE4C, 0x0061 };
    uint32_t const ces[9] = { 0x020A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_333)
{
    // FE49 0041;	
    // (Ôπâ) DASHED OVERLINE	[020A 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0xFE49, 0x0041 };
    uint32_t const ces[9] = { 0x020A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_334)
{
    // FE4A 0041;	
    // (Ôπä) CENTRELINE OVERLINE	[020A 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0xFE4A, 0x0041 };
    uint32_t const ces[9] = { 0x020A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_335)
{
    // FE4B 0041;	
    // (Ôπã) WAVY OVERLINE	[020A 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0xFE4B, 0x0041 };
    uint32_t const ces[9] = { 0x020A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_336)
{
    // FE4C 0041;	
    // (Ôπå) DOUBLE WAVY OVERLINE	[020A 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0xFE4C, 0x0041 };
    uint32_t const ces[9] = { 0x020A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_337)
{
    // 203E 0062;	
    // (‚Äæ) OVERLINE	[020A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x203E, 0x0062 };
    uint32_t const ces[9] = { 0x020A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_338)
{
    // FE49 0062;	
    // (Ôπâ) DASHED OVERLINE	[020A 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xFE49, 0x0062 };
    uint32_t const ces[9] = { 0x020A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_339)
{
    // FE4A 0062;	
    // (Ôπä) CENTRELINE OVERLINE	[020A 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xFE4A, 0x0062 };
    uint32_t const ces[9] = { 0x020A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_340)
{
    // FE4B 0062;	
    // (Ôπã) WAVY OVERLINE	[020A 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xFE4B, 0x0062 };
    uint32_t const ces[9] = { 0x020A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_341)
{
    // FE4C 0062;	
    // (Ôπå) DOUBLE WAVY OVERLINE	[020A 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xFE4C, 0x0062 };
    uint32_t const ces[9] = { 0x020A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_342)
{
    // 005F 0021;	
    // ('_') LOW LINE	[020B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x005F, 0x0021 };
    uint32_t const ces[9] = { 0x020B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_343)
{
    // FF3F 0021;	
    // (Ôºø) FULLWIDTH LOW LINE	[020B 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF3F, 0x0021 };
    uint32_t const ces[9] = { 0x020B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_344)
{
    // FE4D 0021;	
    // (Ôπç) DASHED LOW LINE	[020B 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xFE4D, 0x0021 };
    uint32_t const ces[9] = { 0x020B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_345)
{
    // FE4E 0021;	
    // (Ôπé) CENTRELINE LOW LINE	[020B 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xFE4E, 0x0021 };
    uint32_t const ces[9] = { 0x020B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_346)
{
    // FE4F 0021;	
    // (Ôπè) WAVY LOW LINE	[020B 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xFE4F, 0x0021 };
    uint32_t const ces[9] = { 0x020B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_347)
{
    // FE33 0021;	
    // (Ô∏≥) PRESENTATION FORM FOR VERTICAL LOW LINE	[020B 0261 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE33, 0x0021 };
    uint32_t const ces[9] = { 0x020B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_348)
{
    // FE34 0021;	
    // (Ô∏¥) PRESENTATION FORM FOR VERTICAL WAVY LOW LINE	[020B 0261 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE34, 0x0021 };
    uint32_t const ces[9] = { 0x020B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_349)
{
    // 005F 003F;	
    // ('_') LOW LINE	[020B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x005F, 0x003F };
    uint32_t const ces[9] = { 0x020B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_350)
{
    // FF3F 003F;	
    // (Ôºø) FULLWIDTH LOW LINE	[020B 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF3F, 0x003F };
    uint32_t const ces[9] = { 0x020B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_351)
{
    // FE4D 003F;	
    // (Ôπç) DASHED LOW LINE	[020B 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xFE4D, 0x003F };
    uint32_t const ces[9] = { 0x020B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_352)
{
    // FE4E 003F;	
    // (Ôπé) CENTRELINE LOW LINE	[020B 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xFE4E, 0x003F };
    uint32_t const ces[9] = { 0x020B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_353)
{
    // FE4F 003F;	
    // (Ôπè) WAVY LOW LINE	[020B 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xFE4F, 0x003F };
    uint32_t const ces[9] = { 0x020B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_354)
{
    // FE33 003F;	
    // (Ô∏≥) PRESENTATION FORM FOR VERTICAL LOW LINE	[020B 0267 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE33, 0x003F };
    uint32_t const ces[9] = { 0x020B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_355)
{
    // FE34 003F;	
    // (Ô∏¥) PRESENTATION FORM FOR VERTICAL WAVY LOW LINE	[020B 0267 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE34, 0x003F };
    uint32_t const ces[9] = { 0x020B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_356)
{
    // 005F 0061;	
    // ('_') LOW LINE	[020B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x005F, 0x0061 };
    uint32_t const ces[9] = { 0x020B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_357)
{
    // 005F 0041;	
    // ('_') LOW LINE	[020B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x005F, 0x0041 };
    uint32_t const ces[9] = { 0x020B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_358)
{
    // FF3F 0061;	
    // (Ôºø) FULLWIDTH LOW LINE	[020B 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF3F, 0x0061 };
    uint32_t const ces[9] = { 0x020B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_359)
{
    // FF3F 0041;	
    // (Ôºø) FULLWIDTH LOW LINE	[020B 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF3F, 0x0041 };
    uint32_t const ces[9] = { 0x020B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_360)
{
    // FE4D 0061;	
    // (Ôπç) DASHED LOW LINE	[020B 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xFE4D, 0x0061 };
    uint32_t const ces[9] = { 0x020B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_361)
{
    // FE4E 0061;	
    // (Ôπé) CENTRELINE LOW LINE	[020B 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xFE4E, 0x0061 };
    uint32_t const ces[9] = { 0x020B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_362)
{
    // FE4F 0061;	
    // (Ôπè) WAVY LOW LINE	[020B 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xFE4F, 0x0061 };
    uint32_t const ces[9] = { 0x020B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_363)
{
    // FE4D 0041;	
    // (Ôπç) DASHED LOW LINE	[020B 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0xFE4D, 0x0041 };
    uint32_t const ces[9] = { 0x020B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_364)
{
    // FE4E 0041;	
    // (Ôπé) CENTRELINE LOW LINE	[020B 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0xFE4E, 0x0041 };
    uint32_t const ces[9] = { 0x020B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_365)
{
    // FE4F 0041;	
    // (Ôπè) WAVY LOW LINE	[020B 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0xFE4F, 0x0041 };
    uint32_t const ces[9] = { 0x020B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_366)
{
    // FE33 0061;	
    // (Ô∏≥) PRESENTATION FORM FOR VERTICAL LOW LINE	[020B 1CAD | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE33, 0x0061 };
    uint32_t const ces[9] = { 0x020B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_367)
{
    // FE34 0061;	
    // (Ô∏¥) PRESENTATION FORM FOR VERTICAL WAVY LOW LINE	[020B 1CAD | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE34, 0x0061 };
    uint32_t const ces[9] = { 0x020B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_368)
{
    // FE33 0041;	
    // (Ô∏≥) PRESENTATION FORM FOR VERTICAL LOW LINE	[020B 1CAD | 0020 0020 | 0016 0008 |]

    uint32_t cps[2] = { 0xFE33, 0x0041 };
    uint32_t const ces[9] = { 0x020B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_369)
{
    // FE34 0041;	
    // (Ô∏¥) PRESENTATION FORM FOR VERTICAL WAVY LOW LINE	[020B 1CAD | 0020 0020 | 0016 0008 |]

    uint32_t cps[2] = { 0xFE34, 0x0041 };
    uint32_t const ces[9] = { 0x020B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_370)
{
    // 005F 0062;	
    // ('_') LOW LINE	[020B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x005F, 0x0062 };
    uint32_t const ces[9] = { 0x020B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_371)
{
    // FF3F 0062;	
    // (Ôºø) FULLWIDTH LOW LINE	[020B 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF3F, 0x0062 };
    uint32_t const ces[9] = { 0x020B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_372)
{
    // FE4D 0062;	
    // (Ôπç) DASHED LOW LINE	[020B 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xFE4D, 0x0062 };
    uint32_t const ces[9] = { 0x020B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_373)
{
    // FE4E 0062;	
    // (Ôπé) CENTRELINE LOW LINE	[020B 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xFE4E, 0x0062 };
    uint32_t const ces[9] = { 0x020B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_374)
{
    // FE4F 0062;	
    // (Ôπè) WAVY LOW LINE	[020B 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xFE4F, 0x0062 };
    uint32_t const ces[9] = { 0x020B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_375)
{
    // FE33 0062;	
    // (Ô∏≥) PRESENTATION FORM FOR VERTICAL LOW LINE	[020B 1CC6 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE33, 0x0062 };
    uint32_t const ces[9] = { 0x020B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_376)
{
    // FE34 0062;	
    // (Ô∏¥) PRESENTATION FORM FOR VERTICAL WAVY LOW LINE	[020B 1CC6 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE34, 0x0062 };
    uint32_t const ces[9] = { 0x020B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_377)
{
    // 2017 0021;	
    // (‚Äó) DOUBLE LOW LINE	[020C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2017, 0x0021 };
    uint32_t const ces[9] = { 0x020C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_378)
{
    // 2017 003F;	
    // (‚Äó) DOUBLE LOW LINE	[020C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2017, 0x003F };
    uint32_t const ces[9] = { 0x020C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_379)
{
    // 2017 0061;	
    // (‚Äó) DOUBLE LOW LINE	[020C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2017, 0x0061 };
    uint32_t const ces[9] = { 0x020C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_380)
{
    // 2017 0041;	
    // (‚Äó) DOUBLE LOW LINE	[020C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2017, 0x0041 };
    uint32_t const ces[9] = { 0x020C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_381)
{
    // 2017 0062;	
    // (‚Äó) DOUBLE LOW LINE	[020C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2017, 0x0062 };
    uint32_t const ces[9] = { 0x020C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_382)
{
    // 002D 0021;	
    // ('-') HYPHEN-MINUS	[020D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x002D, 0x0021 };
    uint32_t const ces[9] = { 0x020D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_383)
{
    // FF0D 0021;	
    // (Ôºç) FULLWIDTH HYPHEN-MINUS	[020D 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF0D, 0x0021 };
    uint32_t const ces[9] = { 0x020D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_384)
{
    // FE63 0021;	
    // (Ôπ£) SMALL HYPHEN-MINUS	[020D 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE63, 0x0021 };
    uint32_t const ces[9] = { 0x020D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_385)
{
    // 002D 003F;	
    // ('-') HYPHEN-MINUS	[020D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x002D, 0x003F };
    uint32_t const ces[9] = { 0x020D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_386)
{
    // FF0D 003F;	
    // (Ôºç) FULLWIDTH HYPHEN-MINUS	[020D 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF0D, 0x003F };
    uint32_t const ces[9] = { 0x020D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_387)
{
    // FE63 003F;	
    // (Ôπ£) SMALL HYPHEN-MINUS	[020D 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE63, 0x003F };
    uint32_t const ces[9] = { 0x020D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_388)
{
    // 002D 0061;	
    // ('-') HYPHEN-MINUS	[020D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x002D, 0x0061 };
    uint32_t const ces[9] = { 0x020D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_389)
{
    // 002D 0041;	
    // ('-') HYPHEN-MINUS	[020D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x002D, 0x0041 };
    uint32_t const ces[9] = { 0x020D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_390)
{
    // FF0D 0061;	
    // (Ôºç) FULLWIDTH HYPHEN-MINUS	[020D 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF0D, 0x0061 };
    uint32_t const ces[9] = { 0x020D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_391)
{
    // FF0D 0041;	
    // (Ôºç) FULLWIDTH HYPHEN-MINUS	[020D 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF0D, 0x0041 };
    uint32_t const ces[9] = { 0x020D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_392)
{
    // FE63 0061;	
    // (Ôπ£) SMALL HYPHEN-MINUS	[020D 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE63, 0x0061 };
    uint32_t const ces[9] = { 0x020D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_393)
{
    // FE63 0041;	
    // (Ôπ£) SMALL HYPHEN-MINUS	[020D 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0xFE63, 0x0041 };
    uint32_t const ces[9] = { 0x020D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_394)
{
    // 002D 0062;	
    // ('-') HYPHEN-MINUS	[020D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x002D, 0x0062 };
    uint32_t const ces[9] = { 0x020D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_395)
{
    // FF0D 0062;	
    // (Ôºç) FULLWIDTH HYPHEN-MINUS	[020D 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF0D, 0x0062 };
    uint32_t const ces[9] = { 0x020D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_396)
{
    // FE63 0062;	
    // (Ôπ£) SMALL HYPHEN-MINUS	[020D 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE63, 0x0062 };
    uint32_t const ces[9] = { 0x020D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_397)
{
    // 058A 0021;	
    // (÷ä) ARMENIAN HYPHEN	[020E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x058A, 0x0021 };
    uint32_t const ces[9] = { 0x020E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_398)
{
    // 058A 003F;	
    // (÷ä) ARMENIAN HYPHEN	[020E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x058A, 0x003F };
    uint32_t const ces[9] = { 0x020E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_399)
{
    // 058A 0061;	
    // (÷ä) ARMENIAN HYPHEN	[020E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x058A, 0x0061 };
    uint32_t const ces[9] = { 0x020E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_400)
{
    // 058A 0041;	
    // (÷ä) ARMENIAN HYPHEN	[020E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x058A, 0x0041 };
    uint32_t const ces[9] = { 0x020E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_401)
{
    // 058A 0062;	
    // (÷ä) ARMENIAN HYPHEN	[020E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x058A, 0x0062 };
    uint32_t const ces[9] = { 0x020E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_402)
{
    // 1400 0021;	
    // (·êÄ) CANADIAN SYLLABICS HYPHEN	[020F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1400, 0x0021 };
    uint32_t const ces[9] = { 0x020F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_403)
{
    // 1400 003F;	
    // (·êÄ) CANADIAN SYLLABICS HYPHEN	[020F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1400, 0x003F };
    uint32_t const ces[9] = { 0x020F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_404)
{
    // 1400 0061;	
    // (·êÄ) CANADIAN SYLLABICS HYPHEN	[020F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1400, 0x0061 };
    uint32_t const ces[9] = { 0x020F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_405)
{
    // 1400 0041;	
    // (·êÄ) CANADIAN SYLLABICS HYPHEN	[020F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1400, 0x0041 };
    uint32_t const ces[9] = { 0x020F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_406)
{
    // 1400 0062;	
    // (·êÄ) CANADIAN SYLLABICS HYPHEN	[020F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1400, 0x0062 };
    uint32_t const ces[9] = { 0x020F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_407)
{
    // 1B60 0021;	
    // (·≠†) BALINESE PAMENENG	[0210 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B60, 0x0021 };
    uint32_t const ces[9] = { 0x0210, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_408)
{
    // 1B60 003F;	
    // (·≠†) BALINESE PAMENENG	[0210 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B60, 0x003F };
    uint32_t const ces[9] = { 0x0210, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_409)
{
    // 1B60 0061;	
    // (·≠†) BALINESE PAMENENG	[0210 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B60, 0x0061 };
    uint32_t const ces[9] = { 0x0210, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_410)
{
    // 1B60 0041;	
    // (·≠†) BALINESE PAMENENG	[0210 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B60, 0x0041 };
    uint32_t const ces[9] = { 0x0210, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_411)
{
    // 1B60 0062;	
    // (·≠†) BALINESE PAMENENG	[0210 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B60, 0x0062 };
    uint32_t const ces[9] = { 0x0210, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_412)
{
    // 1806 0021;	
    // (·†Ü) MONGOLIAN TODO SOFT HYPHEN	[0211 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1806, 0x0021 };
    uint32_t const ces[9] = { 0x0211, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_413)
{
    // 1806 003F;	
    // (·†Ü) MONGOLIAN TODO SOFT HYPHEN	[0211 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1806, 0x003F };
    uint32_t const ces[9] = { 0x0211, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_414)
{
    // 1806 0061;	
    // (·†Ü) MONGOLIAN TODO SOFT HYPHEN	[0211 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1806, 0x0061 };
    uint32_t const ces[9] = { 0x0211, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_415)
{
    // 1806 0041;	
    // (·†Ü) MONGOLIAN TODO SOFT HYPHEN	[0211 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1806, 0x0041 };
    uint32_t const ces[9] = { 0x0211, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_416)
{
    // 1806 0062;	
    // (·†Ü) MONGOLIAN TODO SOFT HYPHEN	[0211 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1806, 0x0062 };
    uint32_t const ces[9] = { 0x0211, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_417)
{
    // 1807 0021;	
    // (·†á) MONGOLIAN SIBE SYLLABLE BOUNDARY MARKER	[0212 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1807, 0x0021 };
    uint32_t const ces[9] = { 0x0212, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_418)
{
    // 1807 003F;	
    // (·†á) MONGOLIAN SIBE SYLLABLE BOUNDARY MARKER	[0212 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1807, 0x003F };
    uint32_t const ces[9] = { 0x0212, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_419)
{
    // 1807 0061;	
    // (·†á) MONGOLIAN SIBE SYLLABLE BOUNDARY MARKER	[0212 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1807, 0x0061 };
    uint32_t const ces[9] = { 0x0212, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_420)
{
    // 1807 0041;	
    // (·†á) MONGOLIAN SIBE SYLLABLE BOUNDARY MARKER	[0212 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1807, 0x0041 };
    uint32_t const ces[9] = { 0x0212, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_421)
{
    // 1807 0062;	
    // (·†á) MONGOLIAN SIBE SYLLABLE BOUNDARY MARKER	[0212 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1807, 0x0062 };
    uint32_t const ces[9] = { 0x0212, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_422)
{
    // 2010 0021;	
    // (‚Äê) HYPHEN	[0213 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2010, 0x0021 };
    uint32_t const ces[9] = { 0x0213, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_423)
{
    // 2011 0021;	
    // (‚Äë) NON-BREAKING HYPHEN	[0213 0261 | 0020 0020 | 001B 0002 |]

    uint32_t cps[2] = { 0x2011, 0x0021 };
    uint32_t const ces[9] = { 0x0213, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_424)
{
    // 2010 003F;	
    // (‚Äê) HYPHEN	[0213 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2010, 0x003F };
    uint32_t const ces[9] = { 0x0213, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_425)
{
    // 2011 003F;	
    // (‚Äë) NON-BREAKING HYPHEN	[0213 0267 | 0020 0020 | 001B 0002 |]

    uint32_t cps[2] = { 0x2011, 0x003F };
    uint32_t const ces[9] = { 0x0213, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_426)
{
    // 2010 0061;	
    // (‚Äê) HYPHEN	[0213 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2010, 0x0061 };
    uint32_t const ces[9] = { 0x0213, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_427)
{
    // 2010 0041;	
    // (‚Äê) HYPHEN	[0213 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2010, 0x0041 };
    uint32_t const ces[9] = { 0x0213, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_428)
{
    // 2011 0061;	
    // (‚Äë) NON-BREAKING HYPHEN	[0213 1CAD | 0020 0020 | 001B 0002 |]

    uint32_t cps[2] = { 0x2011, 0x0061 };
    uint32_t const ces[9] = { 0x0213, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_429)
{
    // 2011 0041;	
    // (‚Äë) NON-BREAKING HYPHEN	[0213 1CAD | 0020 0020 | 001B 0008 |]

    uint32_t cps[2] = { 0x2011, 0x0041 };
    uint32_t const ces[9] = { 0x0213, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_430)
{
    // 2010 0062;	
    // (‚Äê) HYPHEN	[0213 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2010, 0x0062 };
    uint32_t const ces[9] = { 0x0213, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_431)
{
    // 2011 0062;	
    // (‚Äë) NON-BREAKING HYPHEN	[0213 1CC6 | 0020 0020 | 001B 0002 |]

    uint32_t cps[2] = { 0x2011, 0x0062 };
    uint32_t const ces[9] = { 0x0213, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_432)
{
    // 2012 0021;	
    // (‚Äí) FIGURE DASH	[0214 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2012, 0x0021 };
    uint32_t const ces[9] = { 0x0214, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_433)
{
    // 2012 003F;	
    // (‚Äí) FIGURE DASH	[0214 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2012, 0x003F };
    uint32_t const ces[9] = { 0x0214, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_434)
{
    // 2012 0061;	
    // (‚Äí) FIGURE DASH	[0214 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2012, 0x0061 };
    uint32_t const ces[9] = { 0x0214, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_435)
{
    // 2012 0041;	
    // (‚Äí) FIGURE DASH	[0214 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2012, 0x0041 };
    uint32_t const ces[9] = { 0x0214, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_436)
{
    // 2012 0062;	
    // (‚Äí) FIGURE DASH	[0214 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2012, 0x0062 };
    uint32_t const ces[9] = { 0x0214, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_437)
{
    // 2013 0021;	
    // (‚Äì) EN DASH	[0215 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2013, 0x0021 };
    uint32_t const ces[9] = { 0x0215, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_438)
{
    // FE32 0021;	
    // (Ô∏≤) PRESENTATION FORM FOR VERTICAL EN DASH	[0215 0261 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE32, 0x0021 };
    uint32_t const ces[9] = { 0x0215, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_439)
{
    // 2013 003F;	
    // (‚Äì) EN DASH	[0215 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2013, 0x003F };
    uint32_t const ces[9] = { 0x0215, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_440)
{
    // FE32 003F;	
    // (Ô∏≤) PRESENTATION FORM FOR VERTICAL EN DASH	[0215 0267 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE32, 0x003F };
    uint32_t const ces[9] = { 0x0215, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_441)
{
    // 2013 0061;	
    // (‚Äì) EN DASH	[0215 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2013, 0x0061 };
    uint32_t const ces[9] = { 0x0215, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_442)
{
    // 2013 0041;	
    // (‚Äì) EN DASH	[0215 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2013, 0x0041 };
    uint32_t const ces[9] = { 0x0215, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_443)
{
    // FE32 0061;	
    // (Ô∏≤) PRESENTATION FORM FOR VERTICAL EN DASH	[0215 1CAD | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE32, 0x0061 };
    uint32_t const ces[9] = { 0x0215, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_444)
{
    // FE32 0041;	
    // (Ô∏≤) PRESENTATION FORM FOR VERTICAL EN DASH	[0215 1CAD | 0020 0020 | 0016 0008 |]

    uint32_t cps[2] = { 0xFE32, 0x0041 };
    uint32_t const ces[9] = { 0x0215, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_445)
{
    // 2013 0062;	
    // (‚Äì) EN DASH	[0215 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2013, 0x0062 };
    uint32_t const ces[9] = { 0x0215, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_446)
{
    // FE32 0062;	
    // (Ô∏≤) PRESENTATION FORM FOR VERTICAL EN DASH	[0215 1CC6 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE32, 0x0062 };
    uint32_t const ces[9] = { 0x0215, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_447)
{
    // 2014 0021;	
    // (‚Äî) EM DASH	[0216 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2014, 0x0021 };
    uint32_t const ces[9] = { 0x0216, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_448)
{
    // FE58 0021;	
    // (Ôπò) SMALL EM DASH	[0216 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE58, 0x0021 };
    uint32_t const ces[9] = { 0x0216, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_449)
{
    // FE31 0021;	
    // (Ô∏±) PRESENTATION FORM FOR VERTICAL EM DASH	[0216 0261 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE31, 0x0021 };
    uint32_t const ces[9] = { 0x0216, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_450)
{
    // 2014 003F;	
    // (‚Äî) EM DASH	[0216 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2014, 0x003F };
    uint32_t const ces[9] = { 0x0216, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_451)
{
    // FE58 003F;	
    // (Ôπò) SMALL EM DASH	[0216 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE58, 0x003F };
    uint32_t const ces[9] = { 0x0216, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_452)
{
    // FE31 003F;	
    // (Ô∏±) PRESENTATION FORM FOR VERTICAL EM DASH	[0216 0267 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE31, 0x003F };
    uint32_t const ces[9] = { 0x0216, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_453)
{
    // 2014 0061;	
    // (‚Äî) EM DASH	[0216 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2014, 0x0061 };
    uint32_t const ces[9] = { 0x0216, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_454)
{
    // 2014 0041;	
    // (‚Äî) EM DASH	[0216 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2014, 0x0041 };
    uint32_t const ces[9] = { 0x0216, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_455)
{
    // FE58 0061;	
    // (Ôπò) SMALL EM DASH	[0216 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE58, 0x0061 };
    uint32_t const ces[9] = { 0x0216, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_456)
{
    // FE58 0041;	
    // (Ôπò) SMALL EM DASH	[0216 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0xFE58, 0x0041 };
    uint32_t const ces[9] = { 0x0216, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_457)
{
    // FE31 0061;	
    // (Ô∏±) PRESENTATION FORM FOR VERTICAL EM DASH	[0216 1CAD | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE31, 0x0061 };
    uint32_t const ces[9] = { 0x0216, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_458)
{
    // FE31 0041;	
    // (Ô∏±) PRESENTATION FORM FOR VERTICAL EM DASH	[0216 1CAD | 0020 0020 | 0016 0008 |]

    uint32_t cps[2] = { 0xFE31, 0x0041 };
    uint32_t const ces[9] = { 0x0216, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_459)
{
    // 2014 0062;	
    // (‚Äî) EM DASH	[0216 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2014, 0x0062 };
    uint32_t const ces[9] = { 0x0216, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_460)
{
    // FE58 0062;	
    // (Ôπò) SMALL EM DASH	[0216 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE58, 0x0062 };
    uint32_t const ces[9] = { 0x0216, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_461)
{
    // FE31 0062;	
    // (Ô∏±) PRESENTATION FORM FOR VERTICAL EM DASH	[0216 1CC6 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE31, 0x0062 };
    uint32_t const ces[9] = { 0x0216, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_462)
{
    // 2015 0021;	
    // (‚Äï) HORIZONTAL BAR	[0217 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2015, 0x0021 };
    uint32_t const ces[9] = { 0x0217, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_463)
{
    // 2015 003F;	
    // (‚Äï) HORIZONTAL BAR	[0217 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2015, 0x003F };
    uint32_t const ces[9] = { 0x0217, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_464)
{
    // 2015 0061;	
    // (‚Äï) HORIZONTAL BAR	[0217 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2015, 0x0061 };
    uint32_t const ces[9] = { 0x0217, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_465)
{
    // 2015 0041;	
    // (‚Äï) HORIZONTAL BAR	[0217 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2015, 0x0041 };
    uint32_t const ces[9] = { 0x0217, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_466)
{
    // 2015 0062;	
    // (‚Äï) HORIZONTAL BAR	[0217 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2015, 0x0062 };
    uint32_t const ces[9] = { 0x0217, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_467)
{
    // 2E3A 0021;	
    // (‚∏∫) TWO-EM DASH	[0218 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E3A, 0x0021 };
    uint32_t const ces[9] = { 0x0218, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_468)
{
    // 2E3A 003F;	
    // (‚∏∫) TWO-EM DASH	[0218 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E3A, 0x003F };
    uint32_t const ces[9] = { 0x0218, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_469)
{
    // 2E3A 0061;	
    // (‚∏∫) TWO-EM DASH	[0218 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E3A, 0x0061 };
    uint32_t const ces[9] = { 0x0218, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_470)
{
    // 2E3A 0041;	
    // (‚∏∫) TWO-EM DASH	[0218 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E3A, 0x0041 };
    uint32_t const ces[9] = { 0x0218, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_471)
{
    // 2E3A 0062;	
    // (‚∏∫) TWO-EM DASH	[0218 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E3A, 0x0062 };
    uint32_t const ces[9] = { 0x0218, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_472)
{
    // 2E3B 0021;	
    // (‚∏ª) THREE-EM DASH	[0219 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E3B, 0x0021 };
    uint32_t const ces[9] = { 0x0219, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_473)
{
    // 2E3B 003F;	
    // (‚∏ª) THREE-EM DASH	[0219 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E3B, 0x003F };
    uint32_t const ces[9] = { 0x0219, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_474)
{
    // 2E3B 0061;	
    // (‚∏ª) THREE-EM DASH	[0219 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E3B, 0x0061 };
    uint32_t const ces[9] = { 0x0219, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_475)
{
    // 2E3B 0041;	
    // (‚∏ª) THREE-EM DASH	[0219 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E3B, 0x0041 };
    uint32_t const ces[9] = { 0x0219, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_476)
{
    // 2E3B 0062;	
    // (‚∏ª) THREE-EM DASH	[0219 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E3B, 0x0062 };
    uint32_t const ces[9] = { 0x0219, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_477)
{
    // 2053 0021;	
    // (‚Åì) SWUNG DASH	[021A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2053, 0x0021 };
    uint32_t const ces[9] = { 0x021A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_478)
{
    // 2053 003F;	
    // (‚Åì) SWUNG DASH	[021A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2053, 0x003F };
    uint32_t const ces[9] = { 0x021A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_479)
{
    // 2053 0061;	
    // (‚Åì) SWUNG DASH	[021A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2053, 0x0061 };
    uint32_t const ces[9] = { 0x021A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_480)
{
    // 2053 0041;	
    // (‚Åì) SWUNG DASH	[021A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2053, 0x0041 };
    uint32_t const ces[9] = { 0x021A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_481)
{
    // 2053 0062;	
    // (‚Åì) SWUNG DASH	[021A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2053, 0x0062 };
    uint32_t const ces[9] = { 0x021A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_482)
{
    // 2E43 0021;	
    // (‚πÉ) DASH WITH LEFT UPTURN	[021B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E43, 0x0021 };
    uint32_t const ces[9] = { 0x021B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_483)
{
    // 2E43 003F;	
    // (‚πÉ) DASH WITH LEFT UPTURN	[021B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E43, 0x003F };
    uint32_t const ces[9] = { 0x021B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_484)
{
    // 2E43 0061;	
    // (‚πÉ) DASH WITH LEFT UPTURN	[021B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E43, 0x0061 };
    uint32_t const ces[9] = { 0x021B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_485)
{
    // 2E43 0041;	
    // (‚πÉ) DASH WITH LEFT UPTURN	[021B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E43, 0x0041 };
    uint32_t const ces[9] = { 0x021B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_486)
{
    // 2E43 0062;	
    // (‚πÉ) DASH WITH LEFT UPTURN	[021B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E43, 0x0062 };
    uint32_t const ces[9] = { 0x021B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_487)
{
    // 2E17 0021;	
    // (‚∏ó) DOUBLE OBLIQUE HYPHEN	[021C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E17, 0x0021 };
    uint32_t const ces[9] = { 0x021C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_488)
{
    // 2E17 003F;	
    // (‚∏ó) DOUBLE OBLIQUE HYPHEN	[021C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E17, 0x003F };
    uint32_t const ces[9] = { 0x021C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_489)
{
    // 2E17 0061;	
    // (‚∏ó) DOUBLE OBLIQUE HYPHEN	[021C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E17, 0x0061 };
    uint32_t const ces[9] = { 0x021C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_490)
{
    // 2E17 0041;	
    // (‚∏ó) DOUBLE OBLIQUE HYPHEN	[021C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E17, 0x0041 };
    uint32_t const ces[9] = { 0x021C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_491)
{
    // 2E17 0062;	
    // (‚∏ó) DOUBLE OBLIQUE HYPHEN	[021C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E17, 0x0062 };
    uint32_t const ces[9] = { 0x021C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_492)
{
    // 2E40 0021;	
    // (‚πÄ) DOUBLE HYPHEN	[021D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E40, 0x0021 };
    uint32_t const ces[9] = { 0x021D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_493)
{
    // 2E40 003F;	
    // (‚πÄ) DOUBLE HYPHEN	[021D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E40, 0x003F };
    uint32_t const ces[9] = { 0x021D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_494)
{
    // 2E40 0061;	
    // (‚πÄ) DOUBLE HYPHEN	[021D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E40, 0x0061 };
    uint32_t const ces[9] = { 0x021D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_495)
{
    // 2E40 0041;	
    // (‚πÄ) DOUBLE HYPHEN	[021D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E40, 0x0041 };
    uint32_t const ces[9] = { 0x021D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_496)
{
    // 2E40 0062;	
    // (‚πÄ) DOUBLE HYPHEN	[021D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E40, 0x0062 };
    uint32_t const ces[9] = { 0x021D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_497)
{
    // 301C 0021;	
    // („Äú) WAVE DASH	[021E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x301C, 0x0021 };
    uint32_t const ces[9] = { 0x021E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_498)
{
    // 301C 003F;	
    // („Äú) WAVE DASH	[021E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x301C, 0x003F };
    uint32_t const ces[9] = { 0x021E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_002_499)
{
    // 301C 0061;	
    // („Äú) WAVE DASH	[021E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x301C, 0x0061 };
    uint32_t const ces[9] = { 0x021E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

