// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_021_000)
{
    // 21C1 0021;	
    // (⇁) RIGHTWARDS HARPOON WITH BARB DOWNWARDS	[05E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C1, 0x0021 };
    uint32_t const ces[9] = { 0x05E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_001)
{
    // 21C1 003F;	
    // (⇁) RIGHTWARDS HARPOON WITH BARB DOWNWARDS	[05E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C1, 0x003F };
    uint32_t const ces[9] = { 0x05E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_002)
{
    // 21C1 0061;	
    // (⇁) RIGHTWARDS HARPOON WITH BARB DOWNWARDS	[05E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C1, 0x0061 };
    uint32_t const ces[9] = { 0x05E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_003)
{
    // 21C1 0041;	
    // (⇁) RIGHTWARDS HARPOON WITH BARB DOWNWARDS	[05E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21C1, 0x0041 };
    uint32_t const ces[9] = { 0x05E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_004)
{
    // 21C1 0062;	
    // (⇁) RIGHTWARDS HARPOON WITH BARB DOWNWARDS	[05E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C1, 0x0062 };
    uint32_t const ces[9] = { 0x05E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_005)
{
    // 21C2 0021;	
    // (⇂) DOWNWARDS HARPOON WITH BARB RIGHTWARDS	[05E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C2, 0x0021 };
    uint32_t const ces[9] = { 0x05E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_006)
{
    // 21C2 003F;	
    // (⇂) DOWNWARDS HARPOON WITH BARB RIGHTWARDS	[05E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C2, 0x003F };
    uint32_t const ces[9] = { 0x05E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_007)
{
    // 21C2 0061;	
    // (⇂) DOWNWARDS HARPOON WITH BARB RIGHTWARDS	[05E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C2, 0x0061 };
    uint32_t const ces[9] = { 0x05E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_008)
{
    // 21C2 0041;	
    // (⇂) DOWNWARDS HARPOON WITH BARB RIGHTWARDS	[05E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21C2, 0x0041 };
    uint32_t const ces[9] = { 0x05E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_009)
{
    // 21C2 0062;	
    // (⇂) DOWNWARDS HARPOON WITH BARB RIGHTWARDS	[05E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C2, 0x0062 };
    uint32_t const ces[9] = { 0x05E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_010)
{
    // 21C3 0021;	
    // (⇃) DOWNWARDS HARPOON WITH BARB LEFTWARDS	[05E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C3, 0x0021 };
    uint32_t const ces[9] = { 0x05E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_011)
{
    // 21C3 003F;	
    // (⇃) DOWNWARDS HARPOON WITH BARB LEFTWARDS	[05E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C3, 0x003F };
    uint32_t const ces[9] = { 0x05E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_012)
{
    // 21C3 0061;	
    // (⇃) DOWNWARDS HARPOON WITH BARB LEFTWARDS	[05E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C3, 0x0061 };
    uint32_t const ces[9] = { 0x05E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_013)
{
    // 21C3 0041;	
    // (⇃) DOWNWARDS HARPOON WITH BARB LEFTWARDS	[05E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21C3, 0x0041 };
    uint32_t const ces[9] = { 0x05E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_014)
{
    // 21C3 0062;	
    // (⇃) DOWNWARDS HARPOON WITH BARB LEFTWARDS	[05E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C3, 0x0062 };
    uint32_t const ces[9] = { 0x05E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_015)
{
    // 21C4 0021;	
    // (⇄) RIGHTWARDS ARROW OVER LEFTWARDS ARROW	[05E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C4, 0x0021 };
    uint32_t const ces[9] = { 0x05E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_016)
{
    // 21C4 003F;	
    // (⇄) RIGHTWARDS ARROW OVER LEFTWARDS ARROW	[05E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C4, 0x003F };
    uint32_t const ces[9] = { 0x05E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_017)
{
    // 21C4 0061;	
    // (⇄) RIGHTWARDS ARROW OVER LEFTWARDS ARROW	[05E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C4, 0x0061 };
    uint32_t const ces[9] = { 0x05E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_018)
{
    // 21C4 0041;	
    // (⇄) RIGHTWARDS ARROW OVER LEFTWARDS ARROW	[05E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21C4, 0x0041 };
    uint32_t const ces[9] = { 0x05E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_019)
{
    // 21C4 0062;	
    // (⇄) RIGHTWARDS ARROW OVER LEFTWARDS ARROW	[05E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C4, 0x0062 };
    uint32_t const ces[9] = { 0x05E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_020)
{
    // 21C5 0021;	
    // (⇅) UPWARDS ARROW LEFTWARDS OF DOWNWARDS ARROW	[05E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C5, 0x0021 };
    uint32_t const ces[9] = { 0x05E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_021)
{
    // 21C5 003F;	
    // (⇅) UPWARDS ARROW LEFTWARDS OF DOWNWARDS ARROW	[05E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C5, 0x003F };
    uint32_t const ces[9] = { 0x05E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_022)
{
    // 21C5 0061;	
    // (⇅) UPWARDS ARROW LEFTWARDS OF DOWNWARDS ARROW	[05E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C5, 0x0061 };
    uint32_t const ces[9] = { 0x05E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_023)
{
    // 21C5 0041;	
    // (⇅) UPWARDS ARROW LEFTWARDS OF DOWNWARDS ARROW	[05E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21C5, 0x0041 };
    uint32_t const ces[9] = { 0x05E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_024)
{
    // 21C5 0062;	
    // (⇅) UPWARDS ARROW LEFTWARDS OF DOWNWARDS ARROW	[05E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C5, 0x0062 };
    uint32_t const ces[9] = { 0x05E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_025)
{
    // 21C6 0021;	
    // (⇆) LEFTWARDS ARROW OVER RIGHTWARDS ARROW	[05E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C6, 0x0021 };
    uint32_t const ces[9] = { 0x05E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_026)
{
    // 21C6 003F;	
    // (⇆) LEFTWARDS ARROW OVER RIGHTWARDS ARROW	[05E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C6, 0x003F };
    uint32_t const ces[9] = { 0x05E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_027)
{
    // 21C6 0061;	
    // (⇆) LEFTWARDS ARROW OVER RIGHTWARDS ARROW	[05E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C6, 0x0061 };
    uint32_t const ces[9] = { 0x05E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_028)
{
    // 21C6 0041;	
    // (⇆) LEFTWARDS ARROW OVER RIGHTWARDS ARROW	[05E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21C6, 0x0041 };
    uint32_t const ces[9] = { 0x05E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_029)
{
    // 21C6 0062;	
    // (⇆) LEFTWARDS ARROW OVER RIGHTWARDS ARROW	[05E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C6, 0x0062 };
    uint32_t const ces[9] = { 0x05E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_030)
{
    // 21C7 0021;	
    // (⇇) LEFTWARDS PAIRED ARROWS	[05E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C7, 0x0021 };
    uint32_t const ces[9] = { 0x05E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_031)
{
    // 21C7 003F;	
    // (⇇) LEFTWARDS PAIRED ARROWS	[05E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C7, 0x003F };
    uint32_t const ces[9] = { 0x05E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_032)
{
    // 21C7 0061;	
    // (⇇) LEFTWARDS PAIRED ARROWS	[05E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C7, 0x0061 };
    uint32_t const ces[9] = { 0x05E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_033)
{
    // 21C7 0041;	
    // (⇇) LEFTWARDS PAIRED ARROWS	[05E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21C7, 0x0041 };
    uint32_t const ces[9] = { 0x05E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_034)
{
    // 21C7 0062;	
    // (⇇) LEFTWARDS PAIRED ARROWS	[05E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C7, 0x0062 };
    uint32_t const ces[9] = { 0x05E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_035)
{
    // 21C8 0021;	
    // (⇈) UPWARDS PAIRED ARROWS	[05E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C8, 0x0021 };
    uint32_t const ces[9] = { 0x05E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_036)
{
    // 21C8 003F;	
    // (⇈) UPWARDS PAIRED ARROWS	[05E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C8, 0x003F };
    uint32_t const ces[9] = { 0x05E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_037)
{
    // 21C8 0061;	
    // (⇈) UPWARDS PAIRED ARROWS	[05E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C8, 0x0061 };
    uint32_t const ces[9] = { 0x05E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_038)
{
    // 21C8 0041;	
    // (⇈) UPWARDS PAIRED ARROWS	[05E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21C8, 0x0041 };
    uint32_t const ces[9] = { 0x05E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_039)
{
    // 21C8 0062;	
    // (⇈) UPWARDS PAIRED ARROWS	[05E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C8, 0x0062 };
    uint32_t const ces[9] = { 0x05E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_040)
{
    // 21C9 0021;	
    // (⇉) RIGHTWARDS PAIRED ARROWS	[05E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C9, 0x0021 };
    uint32_t const ces[9] = { 0x05E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_041)
{
    // 21C9 003F;	
    // (⇉) RIGHTWARDS PAIRED ARROWS	[05E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C9, 0x003F };
    uint32_t const ces[9] = { 0x05E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_042)
{
    // 21C9 0061;	
    // (⇉) RIGHTWARDS PAIRED ARROWS	[05E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C9, 0x0061 };
    uint32_t const ces[9] = { 0x05E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_043)
{
    // 21C9 0041;	
    // (⇉) RIGHTWARDS PAIRED ARROWS	[05E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21C9, 0x0041 };
    uint32_t const ces[9] = { 0x05E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_044)
{
    // 21C9 0062;	
    // (⇉) RIGHTWARDS PAIRED ARROWS	[05E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C9, 0x0062 };
    uint32_t const ces[9] = { 0x05E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_045)
{
    // 21CA 0021;	
    // (⇊) DOWNWARDS PAIRED ARROWS	[05E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21CA, 0x0021 };
    uint32_t const ces[9] = { 0x05E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_046)
{
    // 21CA 003F;	
    // (⇊) DOWNWARDS PAIRED ARROWS	[05E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21CA, 0x003F };
    uint32_t const ces[9] = { 0x05E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_047)
{
    // 21CA 0061;	
    // (⇊) DOWNWARDS PAIRED ARROWS	[05E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21CA, 0x0061 };
    uint32_t const ces[9] = { 0x05E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_048)
{
    // 21CA 0041;	
    // (⇊) DOWNWARDS PAIRED ARROWS	[05E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21CA, 0x0041 };
    uint32_t const ces[9] = { 0x05E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_049)
{
    // 21CA 0062;	
    // (⇊) DOWNWARDS PAIRED ARROWS	[05E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21CA, 0x0062 };
    uint32_t const ces[9] = { 0x05E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_050)
{
    // 21CB 0021;	
    // (⇋) LEFTWARDS HARPOON OVER RIGHTWARDS HARPOON	[05EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21CB, 0x0021 };
    uint32_t const ces[9] = { 0x05EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_051)
{
    // 21CB 003F;	
    // (⇋) LEFTWARDS HARPOON OVER RIGHTWARDS HARPOON	[05EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21CB, 0x003F };
    uint32_t const ces[9] = { 0x05EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_052)
{
    // 21CB 0061;	
    // (⇋) LEFTWARDS HARPOON OVER RIGHTWARDS HARPOON	[05EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21CB, 0x0061 };
    uint32_t const ces[9] = { 0x05EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_053)
{
    // 21CB 0041;	
    // (⇋) LEFTWARDS HARPOON OVER RIGHTWARDS HARPOON	[05EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21CB, 0x0041 };
    uint32_t const ces[9] = { 0x05EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_054)
{
    // 21CB 0062;	
    // (⇋) LEFTWARDS HARPOON OVER RIGHTWARDS HARPOON	[05EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21CB, 0x0062 };
    uint32_t const ces[9] = { 0x05EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_055)
{
    // 21CC 0021;	
    // (⇌) RIGHTWARDS HARPOON OVER LEFTWARDS HARPOON	[05EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21CC, 0x0021 };
    uint32_t const ces[9] = { 0x05EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_056)
{
    // 21CC 003F;	
    // (⇌) RIGHTWARDS HARPOON OVER LEFTWARDS HARPOON	[05EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21CC, 0x003F };
    uint32_t const ces[9] = { 0x05EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_057)
{
    // 21CC 0061;	
    // (⇌) RIGHTWARDS HARPOON OVER LEFTWARDS HARPOON	[05EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21CC, 0x0061 };
    uint32_t const ces[9] = { 0x05EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_058)
{
    // 21CC 0041;	
    // (⇌) RIGHTWARDS HARPOON OVER LEFTWARDS HARPOON	[05EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21CC, 0x0041 };
    uint32_t const ces[9] = { 0x05EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_059)
{
    // 21CC 0062;	
    // (⇌) RIGHTWARDS HARPOON OVER LEFTWARDS HARPOON	[05EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21CC, 0x0062 };
    uint32_t const ces[9] = { 0x05EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_060)
{
    // 21CD 0334;	
    // (⇍) LEFTWARDS DOUBLE ARROW WITH STROKE	[05EC | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x21CD, 0x0334 };
    uint32_t const ces[10] = { 0x05EC, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_061)
{
    // 21D0 0338 0334;	
    // (⇍) LEFTWARDS DOUBLE ARROW, COMBINING LONG SOLIDUS OVERLAY	[05EC | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x21D0, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x05EC, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_062)
{
    // 21D0 0021;	
    // (⇐) LEFTWARDS DOUBLE ARROW	[05EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D0, 0x0021 };
    uint32_t const ces[9] = { 0x05EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_063)
{
    // 21CD 0021;	
    // (⇍) LEFTWARDS DOUBLE ARROW WITH STROKE	[05EC 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x21CD, 0x0021 };
    uint32_t const ces[11] = { 0x05EC, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_064)
{
    // 21D0 003F;	
    // (⇐) LEFTWARDS DOUBLE ARROW	[05EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D0, 0x003F };
    uint32_t const ces[9] = { 0x05EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_065)
{
    // 21CD 003F;	
    // (⇍) LEFTWARDS DOUBLE ARROW WITH STROKE	[05EC 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x21CD, 0x003F };
    uint32_t const ces[11] = { 0x05EC, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_066)
{
    // 21D0 0061;	
    // (⇐) LEFTWARDS DOUBLE ARROW	[05EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D0, 0x0061 };
    uint32_t const ces[9] = { 0x05EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_067)
{
    // 21D0 0041;	
    // (⇐) LEFTWARDS DOUBLE ARROW	[05EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21D0, 0x0041 };
    uint32_t const ces[9] = { 0x05EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_068)
{
    // 21CD 0061;	
    // (⇍) LEFTWARDS DOUBLE ARROW WITH STROKE	[05EC 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x21CD, 0x0061 };
    uint32_t const ces[11] = { 0x05EC, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_069)
{
    // 21CD 0041;	
    // (⇍) LEFTWARDS DOUBLE ARROW WITH STROKE	[05EC 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x21CD, 0x0041 };
    uint32_t const ces[11] = { 0x05EC, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_070)
{
    // 21D0 0062;	
    // (⇐) LEFTWARDS DOUBLE ARROW	[05EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D0, 0x0062 };
    uint32_t const ces[9] = { 0x05EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_071)
{
    // 21CD 0062;	
    // (⇍) LEFTWARDS DOUBLE ARROW WITH STROKE	[05EC 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x21CD, 0x0062 };
    uint32_t const ces[11] = { 0x05EC, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_072)
{
    // 21D1 0021;	
    // (⇑) UPWARDS DOUBLE ARROW	[05ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D1, 0x0021 };
    uint32_t const ces[9] = { 0x05ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_073)
{
    // 21D1 003F;	
    // (⇑) UPWARDS DOUBLE ARROW	[05ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D1, 0x003F };
    uint32_t const ces[9] = { 0x05ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_074)
{
    // 21D1 0061;	
    // (⇑) UPWARDS DOUBLE ARROW	[05ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D1, 0x0061 };
    uint32_t const ces[9] = { 0x05ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_075)
{
    // 21D1 0041;	
    // (⇑) UPWARDS DOUBLE ARROW	[05ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21D1, 0x0041 };
    uint32_t const ces[9] = { 0x05ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_076)
{
    // 21D1 0062;	
    // (⇑) UPWARDS DOUBLE ARROW	[05ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D1, 0x0062 };
    uint32_t const ces[9] = { 0x05ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_077)
{
    // 21CF 0334;	
    // (⇏) RIGHTWARDS DOUBLE ARROW WITH STROKE	[05EE | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x21CF, 0x0334 };
    uint32_t const ces[10] = { 0x05EE, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_078)
{
    // 21D2 0338 0334;	
    // (⇏) RIGHTWARDS DOUBLE ARROW, COMBINING LONG SOLIDUS OVERLAY	[05EE | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x21D2, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x05EE, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_079)
{
    // 21D2 0021;	
    // (⇒) RIGHTWARDS DOUBLE ARROW	[05EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D2, 0x0021 };
    uint32_t const ces[9] = { 0x05EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_080)
{
    // 21CF 0021;	
    // (⇏) RIGHTWARDS DOUBLE ARROW WITH STROKE	[05EE 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x21CF, 0x0021 };
    uint32_t const ces[11] = { 0x05EE, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_081)
{
    // 21D2 003F;	
    // (⇒) RIGHTWARDS DOUBLE ARROW	[05EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D2, 0x003F };
    uint32_t const ces[9] = { 0x05EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_082)
{
    // 21CF 003F;	
    // (⇏) RIGHTWARDS DOUBLE ARROW WITH STROKE	[05EE 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x21CF, 0x003F };
    uint32_t const ces[11] = { 0x05EE, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_083)
{
    // 21D2 0061;	
    // (⇒) RIGHTWARDS DOUBLE ARROW	[05EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D2, 0x0061 };
    uint32_t const ces[9] = { 0x05EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_084)
{
    // 21D2 0041;	
    // (⇒) RIGHTWARDS DOUBLE ARROW	[05EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21D2, 0x0041 };
    uint32_t const ces[9] = { 0x05EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_085)
{
    // 21CF 0061;	
    // (⇏) RIGHTWARDS DOUBLE ARROW WITH STROKE	[05EE 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x21CF, 0x0061 };
    uint32_t const ces[11] = { 0x05EE, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_086)
{
    // 21CF 0041;	
    // (⇏) RIGHTWARDS DOUBLE ARROW WITH STROKE	[05EE 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x21CF, 0x0041 };
    uint32_t const ces[11] = { 0x05EE, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_087)
{
    // 21D2 0062;	
    // (⇒) RIGHTWARDS DOUBLE ARROW	[05EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D2, 0x0062 };
    uint32_t const ces[9] = { 0x05EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_088)
{
    // 21CF 0062;	
    // (⇏) RIGHTWARDS DOUBLE ARROW WITH STROKE	[05EE 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x21CF, 0x0062 };
    uint32_t const ces[11] = { 0x05EE, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_089)
{
    // 21D3 0021;	
    // (⇓) DOWNWARDS DOUBLE ARROW	[05EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D3, 0x0021 };
    uint32_t const ces[9] = { 0x05EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_090)
{
    // 21D3 003F;	
    // (⇓) DOWNWARDS DOUBLE ARROW	[05EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D3, 0x003F };
    uint32_t const ces[9] = { 0x05EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_091)
{
    // 21D3 0061;	
    // (⇓) DOWNWARDS DOUBLE ARROW	[05EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D3, 0x0061 };
    uint32_t const ces[9] = { 0x05EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_092)
{
    // 21D3 0041;	
    // (⇓) DOWNWARDS DOUBLE ARROW	[05EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21D3, 0x0041 };
    uint32_t const ces[9] = { 0x05EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_093)
{
    // 21D3 0062;	
    // (⇓) DOWNWARDS DOUBLE ARROW	[05EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D3, 0x0062 };
    uint32_t const ces[9] = { 0x05EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_094)
{
    // 21CE 0334;	
    // (⇎) LEFT RIGHT DOUBLE ARROW WITH STROKE	[05F0 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x21CE, 0x0334 };
    uint32_t const ces[10] = { 0x05F0, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_095)
{
    // 21D4 0338 0334;	
    // (⇎) LEFT RIGHT DOUBLE ARROW, COMBINING LONG SOLIDUS OVERLAY	[05F0 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x21D4, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x05F0, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_096)
{
    // 21D4 0021;	
    // (⇔) LEFT RIGHT DOUBLE ARROW	[05F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D4, 0x0021 };
    uint32_t const ces[9] = { 0x05F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_097)
{
    // 21CE 0021;	
    // (⇎) LEFT RIGHT DOUBLE ARROW WITH STROKE	[05F0 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x21CE, 0x0021 };
    uint32_t const ces[11] = { 0x05F0, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_098)
{
    // 21D4 003F;	
    // (⇔) LEFT RIGHT DOUBLE ARROW	[05F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D4, 0x003F };
    uint32_t const ces[9] = { 0x05F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_099)
{
    // 21CE 003F;	
    // (⇎) LEFT RIGHT DOUBLE ARROW WITH STROKE	[05F0 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x21CE, 0x003F };
    uint32_t const ces[11] = { 0x05F0, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_100)
{
    // 21D4 0061;	
    // (⇔) LEFT RIGHT DOUBLE ARROW	[05F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D4, 0x0061 };
    uint32_t const ces[9] = { 0x05F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_101)
{
    // 21D4 0041;	
    // (⇔) LEFT RIGHT DOUBLE ARROW	[05F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21D4, 0x0041 };
    uint32_t const ces[9] = { 0x05F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_102)
{
    // 21CE 0061;	
    // (⇎) LEFT RIGHT DOUBLE ARROW WITH STROKE	[05F0 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x21CE, 0x0061 };
    uint32_t const ces[11] = { 0x05F0, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_103)
{
    // 21CE 0041;	
    // (⇎) LEFT RIGHT DOUBLE ARROW WITH STROKE	[05F0 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x21CE, 0x0041 };
    uint32_t const ces[11] = { 0x05F0, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_104)
{
    // 21D4 0062;	
    // (⇔) LEFT RIGHT DOUBLE ARROW	[05F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D4, 0x0062 };
    uint32_t const ces[9] = { 0x05F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_105)
{
    // 21CE 0062;	
    // (⇎) LEFT RIGHT DOUBLE ARROW WITH STROKE	[05F0 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x21CE, 0x0062 };
    uint32_t const ces[11] = { 0x05F0, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_106)
{
    // 21D5 0021;	
    // (⇕) UP DOWN DOUBLE ARROW	[05F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D5, 0x0021 };
    uint32_t const ces[9] = { 0x05F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_107)
{
    // 21D5 003F;	
    // (⇕) UP DOWN DOUBLE ARROW	[05F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D5, 0x003F };
    uint32_t const ces[9] = { 0x05F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_108)
{
    // 21D5 0061;	
    // (⇕) UP DOWN DOUBLE ARROW	[05F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D5, 0x0061 };
    uint32_t const ces[9] = { 0x05F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_109)
{
    // 21D5 0041;	
    // (⇕) UP DOWN DOUBLE ARROW	[05F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21D5, 0x0041 };
    uint32_t const ces[9] = { 0x05F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_110)
{
    // 21D5 0062;	
    // (⇕) UP DOWN DOUBLE ARROW	[05F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D5, 0x0062 };
    uint32_t const ces[9] = { 0x05F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_111)
{
    // 21D6 0021;	
    // (⇖) NORTH WEST DOUBLE ARROW	[05F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D6, 0x0021 };
    uint32_t const ces[9] = { 0x05F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_112)
{
    // 21D6 003F;	
    // (⇖) NORTH WEST DOUBLE ARROW	[05F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D6, 0x003F };
    uint32_t const ces[9] = { 0x05F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_113)
{
    // 21D6 0061;	
    // (⇖) NORTH WEST DOUBLE ARROW	[05F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D6, 0x0061 };
    uint32_t const ces[9] = { 0x05F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_114)
{
    // 21D6 0041;	
    // (⇖) NORTH WEST DOUBLE ARROW	[05F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21D6, 0x0041 };
    uint32_t const ces[9] = { 0x05F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_115)
{
    // 21D6 0062;	
    // (⇖) NORTH WEST DOUBLE ARROW	[05F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D6, 0x0062 };
    uint32_t const ces[9] = { 0x05F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_116)
{
    // 21D7 0021;	
    // (⇗) NORTH EAST DOUBLE ARROW	[05F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D7, 0x0021 };
    uint32_t const ces[9] = { 0x05F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_117)
{
    // 21D7 003F;	
    // (⇗) NORTH EAST DOUBLE ARROW	[05F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D7, 0x003F };
    uint32_t const ces[9] = { 0x05F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_118)
{
    // 21D7 0061;	
    // (⇗) NORTH EAST DOUBLE ARROW	[05F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D7, 0x0061 };
    uint32_t const ces[9] = { 0x05F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_119)
{
    // 21D7 0041;	
    // (⇗) NORTH EAST DOUBLE ARROW	[05F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21D7, 0x0041 };
    uint32_t const ces[9] = { 0x05F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_120)
{
    // 21D7 0062;	
    // (⇗) NORTH EAST DOUBLE ARROW	[05F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D7, 0x0062 };
    uint32_t const ces[9] = { 0x05F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_121)
{
    // 21D8 0021;	
    // (⇘) SOUTH EAST DOUBLE ARROW	[05F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D8, 0x0021 };
    uint32_t const ces[9] = { 0x05F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_122)
{
    // 21D8 003F;	
    // (⇘) SOUTH EAST DOUBLE ARROW	[05F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D8, 0x003F };
    uint32_t const ces[9] = { 0x05F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_123)
{
    // 21D8 0061;	
    // (⇘) SOUTH EAST DOUBLE ARROW	[05F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D8, 0x0061 };
    uint32_t const ces[9] = { 0x05F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_124)
{
    // 21D8 0041;	
    // (⇘) SOUTH EAST DOUBLE ARROW	[05F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21D8, 0x0041 };
    uint32_t const ces[9] = { 0x05F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_125)
{
    // 21D8 0062;	
    // (⇘) SOUTH EAST DOUBLE ARROW	[05F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D8, 0x0062 };
    uint32_t const ces[9] = { 0x05F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_126)
{
    // 21D9 0021;	
    // (⇙) SOUTH WEST DOUBLE ARROW	[05F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D9, 0x0021 };
    uint32_t const ces[9] = { 0x05F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_127)
{
    // 21D9 003F;	
    // (⇙) SOUTH WEST DOUBLE ARROW	[05F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D9, 0x003F };
    uint32_t const ces[9] = { 0x05F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_128)
{
    // 21D9 0061;	
    // (⇙) SOUTH WEST DOUBLE ARROW	[05F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D9, 0x0061 };
    uint32_t const ces[9] = { 0x05F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_129)
{
    // 21D9 0041;	
    // (⇙) SOUTH WEST DOUBLE ARROW	[05F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21D9, 0x0041 };
    uint32_t const ces[9] = { 0x05F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_130)
{
    // 21D9 0062;	
    // (⇙) SOUTH WEST DOUBLE ARROW	[05F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21D9, 0x0062 };
    uint32_t const ces[9] = { 0x05F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_131)
{
    // 21DA 0021;	
    // (⇚) LEFTWARDS TRIPLE ARROW	[05F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21DA, 0x0021 };
    uint32_t const ces[9] = { 0x05F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_132)
{
    // 21DA 003F;	
    // (⇚) LEFTWARDS TRIPLE ARROW	[05F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21DA, 0x003F };
    uint32_t const ces[9] = { 0x05F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_133)
{
    // 21DA 0061;	
    // (⇚) LEFTWARDS TRIPLE ARROW	[05F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21DA, 0x0061 };
    uint32_t const ces[9] = { 0x05F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_134)
{
    // 21DA 0041;	
    // (⇚) LEFTWARDS TRIPLE ARROW	[05F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21DA, 0x0041 };
    uint32_t const ces[9] = { 0x05F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_135)
{
    // 21DA 0062;	
    // (⇚) LEFTWARDS TRIPLE ARROW	[05F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21DA, 0x0062 };
    uint32_t const ces[9] = { 0x05F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_136)
{
    // 21DB 0021;	
    // (⇛) RIGHTWARDS TRIPLE ARROW	[05F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21DB, 0x0021 };
    uint32_t const ces[9] = { 0x05F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_137)
{
    // 21DB 003F;	
    // (⇛) RIGHTWARDS TRIPLE ARROW	[05F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21DB, 0x003F };
    uint32_t const ces[9] = { 0x05F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_138)
{
    // 21DB 0061;	
    // (⇛) RIGHTWARDS TRIPLE ARROW	[05F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21DB, 0x0061 };
    uint32_t const ces[9] = { 0x05F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_139)
{
    // 21DB 0041;	
    // (⇛) RIGHTWARDS TRIPLE ARROW	[05F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21DB, 0x0041 };
    uint32_t const ces[9] = { 0x05F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_140)
{
    // 21DB 0062;	
    // (⇛) RIGHTWARDS TRIPLE ARROW	[05F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21DB, 0x0062 };
    uint32_t const ces[9] = { 0x05F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_141)
{
    // 21DC 0021;	
    // (⇜) LEFTWARDS SQUIGGLE ARROW	[05F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21DC, 0x0021 };
    uint32_t const ces[9] = { 0x05F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_142)
{
    // 21DC 003F;	
    // (⇜) LEFTWARDS SQUIGGLE ARROW	[05F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21DC, 0x003F };
    uint32_t const ces[9] = { 0x05F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_143)
{
    // 21DC 0061;	
    // (⇜) LEFTWARDS SQUIGGLE ARROW	[05F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21DC, 0x0061 };
    uint32_t const ces[9] = { 0x05F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_144)
{
    // 21DC 0041;	
    // (⇜) LEFTWARDS SQUIGGLE ARROW	[05F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21DC, 0x0041 };
    uint32_t const ces[9] = { 0x05F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_145)
{
    // 21DC 0062;	
    // (⇜) LEFTWARDS SQUIGGLE ARROW	[05F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21DC, 0x0062 };
    uint32_t const ces[9] = { 0x05F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_146)
{
    // 21DD 0021;	
    // (⇝) RIGHTWARDS SQUIGGLE ARROW	[05F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21DD, 0x0021 };
    uint32_t const ces[9] = { 0x05F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_147)
{
    // 21DD 003F;	
    // (⇝) RIGHTWARDS SQUIGGLE ARROW	[05F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21DD, 0x003F };
    uint32_t const ces[9] = { 0x05F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_148)
{
    // 21DD 0061;	
    // (⇝) RIGHTWARDS SQUIGGLE ARROW	[05F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21DD, 0x0061 };
    uint32_t const ces[9] = { 0x05F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_149)
{
    // 21DD 0041;	
    // (⇝) RIGHTWARDS SQUIGGLE ARROW	[05F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21DD, 0x0041 };
    uint32_t const ces[9] = { 0x05F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_150)
{
    // 21DD 0062;	
    // (⇝) RIGHTWARDS SQUIGGLE ARROW	[05F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21DD, 0x0062 };
    uint32_t const ces[9] = { 0x05F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_151)
{
    // 21DE 0021;	
    // (⇞) UPWARDS ARROW WITH DOUBLE STROKE	[05FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21DE, 0x0021 };
    uint32_t const ces[9] = { 0x05FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_152)
{
    // 21DE 003F;	
    // (⇞) UPWARDS ARROW WITH DOUBLE STROKE	[05FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21DE, 0x003F };
    uint32_t const ces[9] = { 0x05FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_153)
{
    // 21DE 0061;	
    // (⇞) UPWARDS ARROW WITH DOUBLE STROKE	[05FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21DE, 0x0061 };
    uint32_t const ces[9] = { 0x05FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_154)
{
    // 21DE 0041;	
    // (⇞) UPWARDS ARROW WITH DOUBLE STROKE	[05FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21DE, 0x0041 };
    uint32_t const ces[9] = { 0x05FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_155)
{
    // 21DE 0062;	
    // (⇞) UPWARDS ARROW WITH DOUBLE STROKE	[05FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21DE, 0x0062 };
    uint32_t const ces[9] = { 0x05FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_156)
{
    // 21DF 0021;	
    // (⇟) DOWNWARDS ARROW WITH DOUBLE STROKE	[05FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21DF, 0x0021 };
    uint32_t const ces[9] = { 0x05FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_157)
{
    // 21DF 003F;	
    // (⇟) DOWNWARDS ARROW WITH DOUBLE STROKE	[05FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21DF, 0x003F };
    uint32_t const ces[9] = { 0x05FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_158)
{
    // 21DF 0061;	
    // (⇟) DOWNWARDS ARROW WITH DOUBLE STROKE	[05FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21DF, 0x0061 };
    uint32_t const ces[9] = { 0x05FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_159)
{
    // 21DF 0041;	
    // (⇟) DOWNWARDS ARROW WITH DOUBLE STROKE	[05FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21DF, 0x0041 };
    uint32_t const ces[9] = { 0x05FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_160)
{
    // 21DF 0062;	
    // (⇟) DOWNWARDS ARROW WITH DOUBLE STROKE	[05FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21DF, 0x0062 };
    uint32_t const ces[9] = { 0x05FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_161)
{
    // 21E0 0021;	
    // (⇠) LEFTWARDS DASHED ARROW	[05FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E0, 0x0021 };
    uint32_t const ces[9] = { 0x05FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_162)
{
    // 21E0 003F;	
    // (⇠) LEFTWARDS DASHED ARROW	[05FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E0, 0x003F };
    uint32_t const ces[9] = { 0x05FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_163)
{
    // 21E0 0061;	
    // (⇠) LEFTWARDS DASHED ARROW	[05FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E0, 0x0061 };
    uint32_t const ces[9] = { 0x05FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_164)
{
    // 21E0 0041;	
    // (⇠) LEFTWARDS DASHED ARROW	[05FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21E0, 0x0041 };
    uint32_t const ces[9] = { 0x05FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_165)
{
    // 21E0 0062;	
    // (⇠) LEFTWARDS DASHED ARROW	[05FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E0, 0x0062 };
    uint32_t const ces[9] = { 0x05FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_166)
{
    // 21E1 0021;	
    // (⇡) UPWARDS DASHED ARROW	[05FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E1, 0x0021 };
    uint32_t const ces[9] = { 0x05FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_167)
{
    // 21E1 003F;	
    // (⇡) UPWARDS DASHED ARROW	[05FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E1, 0x003F };
    uint32_t const ces[9] = { 0x05FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_168)
{
    // 21E1 0061;	
    // (⇡) UPWARDS DASHED ARROW	[05FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E1, 0x0061 };
    uint32_t const ces[9] = { 0x05FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_169)
{
    // 21E1 0041;	
    // (⇡) UPWARDS DASHED ARROW	[05FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21E1, 0x0041 };
    uint32_t const ces[9] = { 0x05FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_170)
{
    // 21E1 0062;	
    // (⇡) UPWARDS DASHED ARROW	[05FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E1, 0x0062 };
    uint32_t const ces[9] = { 0x05FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_171)
{
    // 21E2 0021;	
    // (⇢) RIGHTWARDS DASHED ARROW	[05FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E2, 0x0021 };
    uint32_t const ces[9] = { 0x05FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_172)
{
    // 21E2 003F;	
    // (⇢) RIGHTWARDS DASHED ARROW	[05FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E2, 0x003F };
    uint32_t const ces[9] = { 0x05FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_173)
{
    // 21E2 0061;	
    // (⇢) RIGHTWARDS DASHED ARROW	[05FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E2, 0x0061 };
    uint32_t const ces[9] = { 0x05FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_174)
{
    // 21E2 0041;	
    // (⇢) RIGHTWARDS DASHED ARROW	[05FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21E2, 0x0041 };
    uint32_t const ces[9] = { 0x05FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_175)
{
    // 21E2 0062;	
    // (⇢) RIGHTWARDS DASHED ARROW	[05FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E2, 0x0062 };
    uint32_t const ces[9] = { 0x05FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_176)
{
    // 21E3 0021;	
    // (⇣) DOWNWARDS DASHED ARROW	[05FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E3, 0x0021 };
    uint32_t const ces[9] = { 0x05FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_177)
{
    // 21E3 003F;	
    // (⇣) DOWNWARDS DASHED ARROW	[05FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E3, 0x003F };
    uint32_t const ces[9] = { 0x05FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_178)
{
    // 21E3 0061;	
    // (⇣) DOWNWARDS DASHED ARROW	[05FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E3, 0x0061 };
    uint32_t const ces[9] = { 0x05FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_179)
{
    // 21E3 0041;	
    // (⇣) DOWNWARDS DASHED ARROW	[05FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21E3, 0x0041 };
    uint32_t const ces[9] = { 0x05FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_180)
{
    // 21E3 0062;	
    // (⇣) DOWNWARDS DASHED ARROW	[05FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E3, 0x0062 };
    uint32_t const ces[9] = { 0x05FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_181)
{
    // 21E4 0021;	
    // (⇤) LEFTWARDS ARROW TO BAR	[0600 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E4, 0x0021 };
    uint32_t const ces[9] = { 0x0600, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_182)
{
    // 21E4 003F;	
    // (⇤) LEFTWARDS ARROW TO BAR	[0600 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E4, 0x003F };
    uint32_t const ces[9] = { 0x0600, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_183)
{
    // 21E4 0061;	
    // (⇤) LEFTWARDS ARROW TO BAR	[0600 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E4, 0x0061 };
    uint32_t const ces[9] = { 0x0600, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_184)
{
    // 21E4 0041;	
    // (⇤) LEFTWARDS ARROW TO BAR	[0600 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21E4, 0x0041 };
    uint32_t const ces[9] = { 0x0600, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_185)
{
    // 21E4 0062;	
    // (⇤) LEFTWARDS ARROW TO BAR	[0600 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E4, 0x0062 };
    uint32_t const ces[9] = { 0x0600, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_186)
{
    // 21E5 0021;	
    // (⇥) RIGHTWARDS ARROW TO BAR	[0601 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E5, 0x0021 };
    uint32_t const ces[9] = { 0x0601, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_187)
{
    // 21E5 003F;	
    // (⇥) RIGHTWARDS ARROW TO BAR	[0601 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E5, 0x003F };
    uint32_t const ces[9] = { 0x0601, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_188)
{
    // 21E5 0061;	
    // (⇥) RIGHTWARDS ARROW TO BAR	[0601 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E5, 0x0061 };
    uint32_t const ces[9] = { 0x0601, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_189)
{
    // 21E5 0041;	
    // (⇥) RIGHTWARDS ARROW TO BAR	[0601 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21E5, 0x0041 };
    uint32_t const ces[9] = { 0x0601, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_190)
{
    // 21E5 0062;	
    // (⇥) RIGHTWARDS ARROW TO BAR	[0601 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E5, 0x0062 };
    uint32_t const ces[9] = { 0x0601, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_191)
{
    // 21E6 0021;	
    // (⇦) LEFTWARDS WHITE ARROW	[0602 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E6, 0x0021 };
    uint32_t const ces[9] = { 0x0602, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_192)
{
    // 21E6 003F;	
    // (⇦) LEFTWARDS WHITE ARROW	[0602 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E6, 0x003F };
    uint32_t const ces[9] = { 0x0602, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_193)
{
    // 21E6 0061;	
    // (⇦) LEFTWARDS WHITE ARROW	[0602 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E6, 0x0061 };
    uint32_t const ces[9] = { 0x0602, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_194)
{
    // 21E6 0041;	
    // (⇦) LEFTWARDS WHITE ARROW	[0602 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21E6, 0x0041 };
    uint32_t const ces[9] = { 0x0602, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_195)
{
    // 21E6 0062;	
    // (⇦) LEFTWARDS WHITE ARROW	[0602 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E6, 0x0062 };
    uint32_t const ces[9] = { 0x0602, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_196)
{
    // 21E7 0021;	
    // (⇧) UPWARDS WHITE ARROW	[0603 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E7, 0x0021 };
    uint32_t const ces[9] = { 0x0603, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_197)
{
    // 21E7 003F;	
    // (⇧) UPWARDS WHITE ARROW	[0603 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E7, 0x003F };
    uint32_t const ces[9] = { 0x0603, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_198)
{
    // 21E7 0061;	
    // (⇧) UPWARDS WHITE ARROW	[0603 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E7, 0x0061 };
    uint32_t const ces[9] = { 0x0603, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_199)
{
    // 21E7 0041;	
    // (⇧) UPWARDS WHITE ARROW	[0603 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21E7, 0x0041 };
    uint32_t const ces[9] = { 0x0603, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_200)
{
    // 21E7 0062;	
    // (⇧) UPWARDS WHITE ARROW	[0603 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E7, 0x0062 };
    uint32_t const ces[9] = { 0x0603, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_201)
{
    // 21E8 0021;	
    // (⇨) RIGHTWARDS WHITE ARROW	[0604 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E8, 0x0021 };
    uint32_t const ces[9] = { 0x0604, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_202)
{
    // 21E8 003F;	
    // (⇨) RIGHTWARDS WHITE ARROW	[0604 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E8, 0x003F };
    uint32_t const ces[9] = { 0x0604, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_203)
{
    // 21E8 0061;	
    // (⇨) RIGHTWARDS WHITE ARROW	[0604 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E8, 0x0061 };
    uint32_t const ces[9] = { 0x0604, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_204)
{
    // 21E8 0041;	
    // (⇨) RIGHTWARDS WHITE ARROW	[0604 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21E8, 0x0041 };
    uint32_t const ces[9] = { 0x0604, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_205)
{
    // 21E8 0062;	
    // (⇨) RIGHTWARDS WHITE ARROW	[0604 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E8, 0x0062 };
    uint32_t const ces[9] = { 0x0604, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_206)
{
    // 21E9 0021;	
    // (⇩) DOWNWARDS WHITE ARROW	[0605 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E9, 0x0021 };
    uint32_t const ces[9] = { 0x0605, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_207)
{
    // 21E9 003F;	
    // (⇩) DOWNWARDS WHITE ARROW	[0605 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E9, 0x003F };
    uint32_t const ces[9] = { 0x0605, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_208)
{
    // 21E9 0061;	
    // (⇩) DOWNWARDS WHITE ARROW	[0605 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E9, 0x0061 };
    uint32_t const ces[9] = { 0x0605, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_209)
{
    // 21E9 0041;	
    // (⇩) DOWNWARDS WHITE ARROW	[0605 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21E9, 0x0041 };
    uint32_t const ces[9] = { 0x0605, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_210)
{
    // 21E9 0062;	
    // (⇩) DOWNWARDS WHITE ARROW	[0605 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21E9, 0x0062 };
    uint32_t const ces[9] = { 0x0605, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_211)
{
    // 21EA 0021;	
    // (⇪) UPWARDS WHITE ARROW FROM BAR	[0606 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21EA, 0x0021 };
    uint32_t const ces[9] = { 0x0606, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_212)
{
    // 21EA 003F;	
    // (⇪) UPWARDS WHITE ARROW FROM BAR	[0606 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21EA, 0x003F };
    uint32_t const ces[9] = { 0x0606, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_213)
{
    // 21EA 0061;	
    // (⇪) UPWARDS WHITE ARROW FROM BAR	[0606 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21EA, 0x0061 };
    uint32_t const ces[9] = { 0x0606, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_214)
{
    // 21EA 0041;	
    // (⇪) UPWARDS WHITE ARROW FROM BAR	[0606 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21EA, 0x0041 };
    uint32_t const ces[9] = { 0x0606, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_215)
{
    // 21EA 0062;	
    // (⇪) UPWARDS WHITE ARROW FROM BAR	[0606 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21EA, 0x0062 };
    uint32_t const ces[9] = { 0x0606, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_216)
{
    // 21EB 0021;	
    // (⇫) UPWARDS WHITE ARROW ON PEDESTAL	[0607 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21EB, 0x0021 };
    uint32_t const ces[9] = { 0x0607, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_217)
{
    // 21EB 003F;	
    // (⇫) UPWARDS WHITE ARROW ON PEDESTAL	[0607 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21EB, 0x003F };
    uint32_t const ces[9] = { 0x0607, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_218)
{
    // 21EB 0061;	
    // (⇫) UPWARDS WHITE ARROW ON PEDESTAL	[0607 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21EB, 0x0061 };
    uint32_t const ces[9] = { 0x0607, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_219)
{
    // 21EB 0041;	
    // (⇫) UPWARDS WHITE ARROW ON PEDESTAL	[0607 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21EB, 0x0041 };
    uint32_t const ces[9] = { 0x0607, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_220)
{
    // 21EB 0062;	
    // (⇫) UPWARDS WHITE ARROW ON PEDESTAL	[0607 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21EB, 0x0062 };
    uint32_t const ces[9] = { 0x0607, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_221)
{
    // 21EC 0021;	
    // (⇬) UPWARDS WHITE ARROW ON PEDESTAL WITH HORIZONTAL BAR	[0608 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21EC, 0x0021 };
    uint32_t const ces[9] = { 0x0608, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_222)
{
    // 21EC 003F;	
    // (⇬) UPWARDS WHITE ARROW ON PEDESTAL WITH HORIZONTAL BAR	[0608 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21EC, 0x003F };
    uint32_t const ces[9] = { 0x0608, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_223)
{
    // 21EC 0061;	
    // (⇬) UPWARDS WHITE ARROW ON PEDESTAL WITH HORIZONTAL BAR	[0608 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21EC, 0x0061 };
    uint32_t const ces[9] = { 0x0608, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_224)
{
    // 21EC 0041;	
    // (⇬) UPWARDS WHITE ARROW ON PEDESTAL WITH HORIZONTAL BAR	[0608 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21EC, 0x0041 };
    uint32_t const ces[9] = { 0x0608, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_225)
{
    // 21EC 0062;	
    // (⇬) UPWARDS WHITE ARROW ON PEDESTAL WITH HORIZONTAL BAR	[0608 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21EC, 0x0062 };
    uint32_t const ces[9] = { 0x0608, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_226)
{
    // 21ED 0021;	
    // (⇭) UPWARDS WHITE ARROW ON PEDESTAL WITH VERTICAL BAR	[0609 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21ED, 0x0021 };
    uint32_t const ces[9] = { 0x0609, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_227)
{
    // 21ED 003F;	
    // (⇭) UPWARDS WHITE ARROW ON PEDESTAL WITH VERTICAL BAR	[0609 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21ED, 0x003F };
    uint32_t const ces[9] = { 0x0609, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_228)
{
    // 21ED 0061;	
    // (⇭) UPWARDS WHITE ARROW ON PEDESTAL WITH VERTICAL BAR	[0609 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21ED, 0x0061 };
    uint32_t const ces[9] = { 0x0609, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_229)
{
    // 21ED 0041;	
    // (⇭) UPWARDS WHITE ARROW ON PEDESTAL WITH VERTICAL BAR	[0609 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21ED, 0x0041 };
    uint32_t const ces[9] = { 0x0609, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_230)
{
    // 21ED 0062;	
    // (⇭) UPWARDS WHITE ARROW ON PEDESTAL WITH VERTICAL BAR	[0609 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21ED, 0x0062 };
    uint32_t const ces[9] = { 0x0609, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_231)
{
    // 21EE 0021;	
    // (⇮) UPWARDS WHITE DOUBLE ARROW	[060A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21EE, 0x0021 };
    uint32_t const ces[9] = { 0x060A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_232)
{
    // 21EE 003F;	
    // (⇮) UPWARDS WHITE DOUBLE ARROW	[060A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21EE, 0x003F };
    uint32_t const ces[9] = { 0x060A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_233)
{
    // 21EE 0061;	
    // (⇮) UPWARDS WHITE DOUBLE ARROW	[060A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21EE, 0x0061 };
    uint32_t const ces[9] = { 0x060A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_234)
{
    // 21EE 0041;	
    // (⇮) UPWARDS WHITE DOUBLE ARROW	[060A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21EE, 0x0041 };
    uint32_t const ces[9] = { 0x060A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_235)
{
    // 21EE 0062;	
    // (⇮) UPWARDS WHITE DOUBLE ARROW	[060A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21EE, 0x0062 };
    uint32_t const ces[9] = { 0x060A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_236)
{
    // 21EF 0021;	
    // (⇯) UPWARDS WHITE DOUBLE ARROW ON PEDESTAL	[060B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21EF, 0x0021 };
    uint32_t const ces[9] = { 0x060B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_237)
{
    // 21EF 003F;	
    // (⇯) UPWARDS WHITE DOUBLE ARROW ON PEDESTAL	[060B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21EF, 0x003F };
    uint32_t const ces[9] = { 0x060B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_238)
{
    // 21EF 0061;	
    // (⇯) UPWARDS WHITE DOUBLE ARROW ON PEDESTAL	[060B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21EF, 0x0061 };
    uint32_t const ces[9] = { 0x060B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_239)
{
    // 21EF 0041;	
    // (⇯) UPWARDS WHITE DOUBLE ARROW ON PEDESTAL	[060B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21EF, 0x0041 };
    uint32_t const ces[9] = { 0x060B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_240)
{
    // 21EF 0062;	
    // (⇯) UPWARDS WHITE DOUBLE ARROW ON PEDESTAL	[060B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21EF, 0x0062 };
    uint32_t const ces[9] = { 0x060B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_241)
{
    // 21F0 0021;	
    // (⇰) RIGHTWARDS WHITE ARROW FROM WALL	[060C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F0, 0x0021 };
    uint32_t const ces[9] = { 0x060C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_242)
{
    // 21F0 003F;	
    // (⇰) RIGHTWARDS WHITE ARROW FROM WALL	[060C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F0, 0x003F };
    uint32_t const ces[9] = { 0x060C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_243)
{
    // 21F0 0061;	
    // (⇰) RIGHTWARDS WHITE ARROW FROM WALL	[060C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F0, 0x0061 };
    uint32_t const ces[9] = { 0x060C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_244)
{
    // 21F0 0041;	
    // (⇰) RIGHTWARDS WHITE ARROW FROM WALL	[060C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21F0, 0x0041 };
    uint32_t const ces[9] = { 0x060C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_245)
{
    // 21F0 0062;	
    // (⇰) RIGHTWARDS WHITE ARROW FROM WALL	[060C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F0, 0x0062 };
    uint32_t const ces[9] = { 0x060C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_246)
{
    // 21F1 0021;	
    // (⇱) NORTH WEST ARROW TO CORNER	[060D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F1, 0x0021 };
    uint32_t const ces[9] = { 0x060D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_247)
{
    // 21F1 003F;	
    // (⇱) NORTH WEST ARROW TO CORNER	[060D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F1, 0x003F };
    uint32_t const ces[9] = { 0x060D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_248)
{
    // 21F1 0061;	
    // (⇱) NORTH WEST ARROW TO CORNER	[060D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F1, 0x0061 };
    uint32_t const ces[9] = { 0x060D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_249)
{
    // 21F1 0041;	
    // (⇱) NORTH WEST ARROW TO CORNER	[060D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21F1, 0x0041 };
    uint32_t const ces[9] = { 0x060D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_250)
{
    // 21F1 0062;	
    // (⇱) NORTH WEST ARROW TO CORNER	[060D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F1, 0x0062 };
    uint32_t const ces[9] = { 0x060D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_251)
{
    // 21F2 0021;	
    // (⇲) SOUTH EAST ARROW TO CORNER	[060E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F2, 0x0021 };
    uint32_t const ces[9] = { 0x060E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_252)
{
    // 21F2 003F;	
    // (⇲) SOUTH EAST ARROW TO CORNER	[060E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F2, 0x003F };
    uint32_t const ces[9] = { 0x060E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_253)
{
    // 21F2 0061;	
    // (⇲) SOUTH EAST ARROW TO CORNER	[060E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F2, 0x0061 };
    uint32_t const ces[9] = { 0x060E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_254)
{
    // 21F2 0041;	
    // (⇲) SOUTH EAST ARROW TO CORNER	[060E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21F2, 0x0041 };
    uint32_t const ces[9] = { 0x060E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_255)
{
    // 21F2 0062;	
    // (⇲) SOUTH EAST ARROW TO CORNER	[060E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F2, 0x0062 };
    uint32_t const ces[9] = { 0x060E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_256)
{
    // 21F3 0021;	
    // (⇳) UP DOWN WHITE ARROW	[060F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F3, 0x0021 };
    uint32_t const ces[9] = { 0x060F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_257)
{
    // 21F3 003F;	
    // (⇳) UP DOWN WHITE ARROW	[060F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F3, 0x003F };
    uint32_t const ces[9] = { 0x060F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_258)
{
    // 21F3 0061;	
    // (⇳) UP DOWN WHITE ARROW	[060F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F3, 0x0061 };
    uint32_t const ces[9] = { 0x060F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_259)
{
    // 21F3 0041;	
    // (⇳) UP DOWN WHITE ARROW	[060F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21F3, 0x0041 };
    uint32_t const ces[9] = { 0x060F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_260)
{
    // 21F3 0062;	
    // (⇳) UP DOWN WHITE ARROW	[060F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F3, 0x0062 };
    uint32_t const ces[9] = { 0x060F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_261)
{
    // 21F4 0021;	
    // (⇴) RIGHT ARROW WITH SMALL CIRCLE	[0610 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F4, 0x0021 };
    uint32_t const ces[9] = { 0x0610, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_262)
{
    // 21F4 003F;	
    // (⇴) RIGHT ARROW WITH SMALL CIRCLE	[0610 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F4, 0x003F };
    uint32_t const ces[9] = { 0x0610, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_263)
{
    // 21F4 0061;	
    // (⇴) RIGHT ARROW WITH SMALL CIRCLE	[0610 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F4, 0x0061 };
    uint32_t const ces[9] = { 0x0610, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_264)
{
    // 21F4 0041;	
    // (⇴) RIGHT ARROW WITH SMALL CIRCLE	[0610 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21F4, 0x0041 };
    uint32_t const ces[9] = { 0x0610, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_265)
{
    // 21F4 0062;	
    // (⇴) RIGHT ARROW WITH SMALL CIRCLE	[0610 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F4, 0x0062 };
    uint32_t const ces[9] = { 0x0610, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_266)
{
    // 21F5 0021;	
    // (⇵) DOWNWARDS ARROW LEFTWARDS OF UPWARDS ARROW	[0611 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F5, 0x0021 };
    uint32_t const ces[9] = { 0x0611, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_267)
{
    // 21F5 003F;	
    // (⇵) DOWNWARDS ARROW LEFTWARDS OF UPWARDS ARROW	[0611 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F5, 0x003F };
    uint32_t const ces[9] = { 0x0611, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_268)
{
    // 21F5 0061;	
    // (⇵) DOWNWARDS ARROW LEFTWARDS OF UPWARDS ARROW	[0611 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F5, 0x0061 };
    uint32_t const ces[9] = { 0x0611, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_269)
{
    // 21F5 0041;	
    // (⇵) DOWNWARDS ARROW LEFTWARDS OF UPWARDS ARROW	[0611 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21F5, 0x0041 };
    uint32_t const ces[9] = { 0x0611, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_270)
{
    // 21F5 0062;	
    // (⇵) DOWNWARDS ARROW LEFTWARDS OF UPWARDS ARROW	[0611 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F5, 0x0062 };
    uint32_t const ces[9] = { 0x0611, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_271)
{
    // 21F6 0021;	
    // (⇶) THREE RIGHTWARDS ARROWS	[0612 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F6, 0x0021 };
    uint32_t const ces[9] = { 0x0612, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_272)
{
    // 21F6 003F;	
    // (⇶) THREE RIGHTWARDS ARROWS	[0612 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F6, 0x003F };
    uint32_t const ces[9] = { 0x0612, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_273)
{
    // 21F6 0061;	
    // (⇶) THREE RIGHTWARDS ARROWS	[0612 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F6, 0x0061 };
    uint32_t const ces[9] = { 0x0612, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_274)
{
    // 21F6 0041;	
    // (⇶) THREE RIGHTWARDS ARROWS	[0612 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21F6, 0x0041 };
    uint32_t const ces[9] = { 0x0612, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_275)
{
    // 21F6 0062;	
    // (⇶) THREE RIGHTWARDS ARROWS	[0612 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F6, 0x0062 };
    uint32_t const ces[9] = { 0x0612, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_276)
{
    // 21F7 0021;	
    // (⇷) LEFTWARDS ARROW WITH VERTICAL STROKE	[0613 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F7, 0x0021 };
    uint32_t const ces[9] = { 0x0613, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_277)
{
    // 21F7 003F;	
    // (⇷) LEFTWARDS ARROW WITH VERTICAL STROKE	[0613 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F7, 0x003F };
    uint32_t const ces[9] = { 0x0613, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_278)
{
    // 21F7 0061;	
    // (⇷) LEFTWARDS ARROW WITH VERTICAL STROKE	[0613 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F7, 0x0061 };
    uint32_t const ces[9] = { 0x0613, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_279)
{
    // 21F7 0041;	
    // (⇷) LEFTWARDS ARROW WITH VERTICAL STROKE	[0613 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21F7, 0x0041 };
    uint32_t const ces[9] = { 0x0613, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_280)
{
    // 21F7 0062;	
    // (⇷) LEFTWARDS ARROW WITH VERTICAL STROKE	[0613 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F7, 0x0062 };
    uint32_t const ces[9] = { 0x0613, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_281)
{
    // 21F8 0021;	
    // (⇸) RIGHTWARDS ARROW WITH VERTICAL STROKE	[0614 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F8, 0x0021 };
    uint32_t const ces[9] = { 0x0614, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_282)
{
    // 21F8 003F;	
    // (⇸) RIGHTWARDS ARROW WITH VERTICAL STROKE	[0614 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F8, 0x003F };
    uint32_t const ces[9] = { 0x0614, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_283)
{
    // 21F8 0061;	
    // (⇸) RIGHTWARDS ARROW WITH VERTICAL STROKE	[0614 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F8, 0x0061 };
    uint32_t const ces[9] = { 0x0614, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_284)
{
    // 21F8 0041;	
    // (⇸) RIGHTWARDS ARROW WITH VERTICAL STROKE	[0614 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21F8, 0x0041 };
    uint32_t const ces[9] = { 0x0614, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_285)
{
    // 21F8 0062;	
    // (⇸) RIGHTWARDS ARROW WITH VERTICAL STROKE	[0614 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F8, 0x0062 };
    uint32_t const ces[9] = { 0x0614, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_286)
{
    // 21F9 0021;	
    // (⇹) LEFT RIGHT ARROW WITH VERTICAL STROKE	[0615 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F9, 0x0021 };
    uint32_t const ces[9] = { 0x0615, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_287)
{
    // 21F9 003F;	
    // (⇹) LEFT RIGHT ARROW WITH VERTICAL STROKE	[0615 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F9, 0x003F };
    uint32_t const ces[9] = { 0x0615, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_288)
{
    // 21F9 0061;	
    // (⇹) LEFT RIGHT ARROW WITH VERTICAL STROKE	[0615 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F9, 0x0061 };
    uint32_t const ces[9] = { 0x0615, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_289)
{
    // 21F9 0041;	
    // (⇹) LEFT RIGHT ARROW WITH VERTICAL STROKE	[0615 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21F9, 0x0041 };
    uint32_t const ces[9] = { 0x0615, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_290)
{
    // 21F9 0062;	
    // (⇹) LEFT RIGHT ARROW WITH VERTICAL STROKE	[0615 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21F9, 0x0062 };
    uint32_t const ces[9] = { 0x0615, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_291)
{
    // 21FA 0021;	
    // (⇺) LEFTWARDS ARROW WITH DOUBLE VERTICAL STROKE	[0616 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21FA, 0x0021 };
    uint32_t const ces[9] = { 0x0616, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_292)
{
    // 21FA 003F;	
    // (⇺) LEFTWARDS ARROW WITH DOUBLE VERTICAL STROKE	[0616 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21FA, 0x003F };
    uint32_t const ces[9] = { 0x0616, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_293)
{
    // 21FA 0061;	
    // (⇺) LEFTWARDS ARROW WITH DOUBLE VERTICAL STROKE	[0616 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21FA, 0x0061 };
    uint32_t const ces[9] = { 0x0616, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_294)
{
    // 21FA 0041;	
    // (⇺) LEFTWARDS ARROW WITH DOUBLE VERTICAL STROKE	[0616 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21FA, 0x0041 };
    uint32_t const ces[9] = { 0x0616, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_295)
{
    // 21FA 0062;	
    // (⇺) LEFTWARDS ARROW WITH DOUBLE VERTICAL STROKE	[0616 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21FA, 0x0062 };
    uint32_t const ces[9] = { 0x0616, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_296)
{
    // 21FB 0021;	
    // (⇻) RIGHTWARDS ARROW WITH DOUBLE VERTICAL STROKE	[0617 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21FB, 0x0021 };
    uint32_t const ces[9] = { 0x0617, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_297)
{
    // 21FB 003F;	
    // (⇻) RIGHTWARDS ARROW WITH DOUBLE VERTICAL STROKE	[0617 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21FB, 0x003F };
    uint32_t const ces[9] = { 0x0617, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_298)
{
    // 21FB 0061;	
    // (⇻) RIGHTWARDS ARROW WITH DOUBLE VERTICAL STROKE	[0617 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21FB, 0x0061 };
    uint32_t const ces[9] = { 0x0617, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_299)
{
    // 21FB 0041;	
    // (⇻) RIGHTWARDS ARROW WITH DOUBLE VERTICAL STROKE	[0617 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21FB, 0x0041 };
    uint32_t const ces[9] = { 0x0617, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_300)
{
    // 21FB 0062;	
    // (⇻) RIGHTWARDS ARROW WITH DOUBLE VERTICAL STROKE	[0617 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21FB, 0x0062 };
    uint32_t const ces[9] = { 0x0617, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_301)
{
    // 21FC 0021;	
    // (⇼) LEFT RIGHT ARROW WITH DOUBLE VERTICAL STROKE	[0618 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21FC, 0x0021 };
    uint32_t const ces[9] = { 0x0618, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_302)
{
    // 21FC 003F;	
    // (⇼) LEFT RIGHT ARROW WITH DOUBLE VERTICAL STROKE	[0618 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21FC, 0x003F };
    uint32_t const ces[9] = { 0x0618, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_303)
{
    // 21FC 0061;	
    // (⇼) LEFT RIGHT ARROW WITH DOUBLE VERTICAL STROKE	[0618 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21FC, 0x0061 };
    uint32_t const ces[9] = { 0x0618, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_304)
{
    // 21FC 0041;	
    // (⇼) LEFT RIGHT ARROW WITH DOUBLE VERTICAL STROKE	[0618 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21FC, 0x0041 };
    uint32_t const ces[9] = { 0x0618, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_305)
{
    // 21FC 0062;	
    // (⇼) LEFT RIGHT ARROW WITH DOUBLE VERTICAL STROKE	[0618 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21FC, 0x0062 };
    uint32_t const ces[9] = { 0x0618, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_306)
{
    // 21FD 0021;	
    // (⇽) LEFTWARDS OPEN-HEADED ARROW	[0619 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21FD, 0x0021 };
    uint32_t const ces[9] = { 0x0619, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_307)
{
    // 21FD 003F;	
    // (⇽) LEFTWARDS OPEN-HEADED ARROW	[0619 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21FD, 0x003F };
    uint32_t const ces[9] = { 0x0619, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_308)
{
    // 21FD 0061;	
    // (⇽) LEFTWARDS OPEN-HEADED ARROW	[0619 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21FD, 0x0061 };
    uint32_t const ces[9] = { 0x0619, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_309)
{
    // 21FD 0041;	
    // (⇽) LEFTWARDS OPEN-HEADED ARROW	[0619 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21FD, 0x0041 };
    uint32_t const ces[9] = { 0x0619, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_310)
{
    // 21FD 0062;	
    // (⇽) LEFTWARDS OPEN-HEADED ARROW	[0619 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21FD, 0x0062 };
    uint32_t const ces[9] = { 0x0619, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_311)
{
    // 21FE 0021;	
    // (⇾) RIGHTWARDS OPEN-HEADED ARROW	[061A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21FE, 0x0021 };
    uint32_t const ces[9] = { 0x061A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_312)
{
    // 21FE 003F;	
    // (⇾) RIGHTWARDS OPEN-HEADED ARROW	[061A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21FE, 0x003F };
    uint32_t const ces[9] = { 0x061A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_313)
{
    // 21FE 0061;	
    // (⇾) RIGHTWARDS OPEN-HEADED ARROW	[061A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21FE, 0x0061 };
    uint32_t const ces[9] = { 0x061A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_314)
{
    // 21FE 0041;	
    // (⇾) RIGHTWARDS OPEN-HEADED ARROW	[061A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21FE, 0x0041 };
    uint32_t const ces[9] = { 0x061A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_315)
{
    // 21FE 0062;	
    // (⇾) RIGHTWARDS OPEN-HEADED ARROW	[061A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21FE, 0x0062 };
    uint32_t const ces[9] = { 0x061A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_316)
{
    // 21FF 0021;	
    // (⇿) LEFT RIGHT OPEN-HEADED ARROW	[061B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21FF, 0x0021 };
    uint32_t const ces[9] = { 0x061B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_317)
{
    // 21FF 003F;	
    // (⇿) LEFT RIGHT OPEN-HEADED ARROW	[061B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21FF, 0x003F };
    uint32_t const ces[9] = { 0x061B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_318)
{
    // 21FF 0061;	
    // (⇿) LEFT RIGHT OPEN-HEADED ARROW	[061B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21FF, 0x0061 };
    uint32_t const ces[9] = { 0x061B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_319)
{
    // 21FF 0041;	
    // (⇿) LEFT RIGHT OPEN-HEADED ARROW	[061B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21FF, 0x0041 };
    uint32_t const ces[9] = { 0x061B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_320)
{
    // 21FF 0062;	
    // (⇿) LEFT RIGHT OPEN-HEADED ARROW	[061B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21FF, 0x0062 };
    uint32_t const ces[9] = { 0x061B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_321)
{
    // 2200 0021;	
    // (∀) FOR ALL	[061C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2200, 0x0021 };
    uint32_t const ces[9] = { 0x061C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_322)
{
    // 2200 003F;	
    // (∀) FOR ALL	[061C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2200, 0x003F };
    uint32_t const ces[9] = { 0x061C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_323)
{
    // 2200 0061;	
    // (∀) FOR ALL	[061C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2200, 0x0061 };
    uint32_t const ces[9] = { 0x061C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_324)
{
    // 2200 0041;	
    // (∀) FOR ALL	[061C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2200, 0x0041 };
    uint32_t const ces[9] = { 0x061C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_325)
{
    // 2200 0062;	
    // (∀) FOR ALL	[061C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2200, 0x0062 };
    uint32_t const ces[9] = { 0x061C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_326)
{
    // 2201 0021;	
    // (∁) COMPLEMENT	[061D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2201, 0x0021 };
    uint32_t const ces[9] = { 0x061D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_327)
{
    // 2201 003F;	
    // (∁) COMPLEMENT	[061D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2201, 0x003F };
    uint32_t const ces[9] = { 0x061D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_328)
{
    // 2201 0061;	
    // (∁) COMPLEMENT	[061D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2201, 0x0061 };
    uint32_t const ces[9] = { 0x061D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_329)
{
    // 2201 0041;	
    // (∁) COMPLEMENT	[061D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2201, 0x0041 };
    uint32_t const ces[9] = { 0x061D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_330)
{
    // 2201 0062;	
    // (∁) COMPLEMENT	[061D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2201, 0x0062 };
    uint32_t const ces[9] = { 0x061D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_331)
{
    // 2202 0021;	
    // (∂) PARTIAL DIFFERENTIAL	[061E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2202, 0x0021 };
    uint32_t const ces[9] = { 0x061E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_332)
{
    // 1D6DB 0021;	
    // (𝛛) MATHEMATICAL BOLD PARTIAL DIFFERENTIAL	[061E 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6DB, 0x0021 };
    uint32_t const ces[9] = { 0x061E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_333)
{
    // 1D715 0021;	
    // (𝜕) MATHEMATICAL ITALIC PARTIAL DIFFERENTIAL	[061E 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D715, 0x0021 };
    uint32_t const ces[9] = { 0x061E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_334)
{
    // 1D74F 0021;	
    // (𝝏) MATHEMATICAL BOLD ITALIC PARTIAL DIFFERENTIAL	[061E 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D74F, 0x0021 };
    uint32_t const ces[9] = { 0x061E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_335)
{
    // 1D789 0021;	
    // (𝞉) MATHEMATICAL SANS-SERIF BOLD PARTIAL DIFFERENTIAL	[061E 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D789, 0x0021 };
    uint32_t const ces[9] = { 0x061E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_336)
{
    // 1D7C3 0021;	
    // (𝟃) MATHEMATICAL SANS-SERIF BOLD ITALIC PARTIAL DIFFERENTIAL	[061E 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C3, 0x0021 };
    uint32_t const ces[9] = { 0x061E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_337)
{
    // 2202 003F;	
    // (∂) PARTIAL DIFFERENTIAL	[061E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2202, 0x003F };
    uint32_t const ces[9] = { 0x061E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_338)
{
    // 1D6DB 003F;	
    // (𝛛) MATHEMATICAL BOLD PARTIAL DIFFERENTIAL	[061E 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6DB, 0x003F };
    uint32_t const ces[9] = { 0x061E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_339)
{
    // 1D715 003F;	
    // (𝜕) MATHEMATICAL ITALIC PARTIAL DIFFERENTIAL	[061E 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D715, 0x003F };
    uint32_t const ces[9] = { 0x061E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_340)
{
    // 1D74F 003F;	
    // (𝝏) MATHEMATICAL BOLD ITALIC PARTIAL DIFFERENTIAL	[061E 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D74F, 0x003F };
    uint32_t const ces[9] = { 0x061E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_341)
{
    // 1D789 003F;	
    // (𝞉) MATHEMATICAL SANS-SERIF BOLD PARTIAL DIFFERENTIAL	[061E 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D789, 0x003F };
    uint32_t const ces[9] = { 0x061E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_342)
{
    // 1D7C3 003F;	
    // (𝟃) MATHEMATICAL SANS-SERIF BOLD ITALIC PARTIAL DIFFERENTIAL	[061E 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C3, 0x003F };
    uint32_t const ces[9] = { 0x061E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_343)
{
    // 2202 0061;	
    // (∂) PARTIAL DIFFERENTIAL	[061E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2202, 0x0061 };
    uint32_t const ces[9] = { 0x061E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_344)
{
    // 2202 0041;	
    // (∂) PARTIAL DIFFERENTIAL	[061E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2202, 0x0041 };
    uint32_t const ces[9] = { 0x061E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_345)
{
    // 1D6DB 0061;	
    // (𝛛) MATHEMATICAL BOLD PARTIAL DIFFERENTIAL	[061E 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6DB, 0x0061 };
    uint32_t const ces[9] = { 0x061E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_346)
{
    // 1D715 0061;	
    // (𝜕) MATHEMATICAL ITALIC PARTIAL DIFFERENTIAL	[061E 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D715, 0x0061 };
    uint32_t const ces[9] = { 0x061E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_347)
{
    // 1D74F 0061;	
    // (𝝏) MATHEMATICAL BOLD ITALIC PARTIAL DIFFERENTIAL	[061E 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D74F, 0x0061 };
    uint32_t const ces[9] = { 0x061E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_348)
{
    // 1D789 0061;	
    // (𝞉) MATHEMATICAL SANS-SERIF BOLD PARTIAL DIFFERENTIAL	[061E 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D789, 0x0061 };
    uint32_t const ces[9] = { 0x061E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_349)
{
    // 1D7C3 0061;	
    // (𝟃) MATHEMATICAL SANS-SERIF BOLD ITALIC PARTIAL DIFFERENTIAL	[061E 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C3, 0x0061 };
    uint32_t const ces[9] = { 0x061E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_350)
{
    // 1D6DB 0041;	
    // (𝛛) MATHEMATICAL BOLD PARTIAL DIFFERENTIAL	[061E 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D6DB, 0x0041 };
    uint32_t const ces[9] = { 0x061E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_351)
{
    // 1D715 0041;	
    // (𝜕) MATHEMATICAL ITALIC PARTIAL DIFFERENTIAL	[061E 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D715, 0x0041 };
    uint32_t const ces[9] = { 0x061E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_352)
{
    // 1D74F 0041;	
    // (𝝏) MATHEMATICAL BOLD ITALIC PARTIAL DIFFERENTIAL	[061E 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D74F, 0x0041 };
    uint32_t const ces[9] = { 0x061E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_353)
{
    // 1D789 0041;	
    // (𝞉) MATHEMATICAL SANS-SERIF BOLD PARTIAL DIFFERENTIAL	[061E 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D789, 0x0041 };
    uint32_t const ces[9] = { 0x061E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_354)
{
    // 1D7C3 0041;	
    // (𝟃) MATHEMATICAL SANS-SERIF BOLD ITALIC PARTIAL DIFFERENTIAL	[061E 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7C3, 0x0041 };
    uint32_t const ces[9] = { 0x061E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_355)
{
    // 2202 0062;	
    // (∂) PARTIAL DIFFERENTIAL	[061E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2202, 0x0062 };
    uint32_t const ces[9] = { 0x061E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_356)
{
    // 1D6DB 0062;	
    // (𝛛) MATHEMATICAL BOLD PARTIAL DIFFERENTIAL	[061E 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6DB, 0x0062 };
    uint32_t const ces[9] = { 0x061E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_357)
{
    // 1D715 0062;	
    // (𝜕) MATHEMATICAL ITALIC PARTIAL DIFFERENTIAL	[061E 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D715, 0x0062 };
    uint32_t const ces[9] = { 0x061E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_358)
{
    // 1D74F 0062;	
    // (𝝏) MATHEMATICAL BOLD ITALIC PARTIAL DIFFERENTIAL	[061E 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D74F, 0x0062 };
    uint32_t const ces[9] = { 0x061E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_359)
{
    // 1D789 0062;	
    // (𝞉) MATHEMATICAL SANS-SERIF BOLD PARTIAL DIFFERENTIAL	[061E 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D789, 0x0062 };
    uint32_t const ces[9] = { 0x061E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_360)
{
    // 1D7C3 0062;	
    // (𝟃) MATHEMATICAL SANS-SERIF BOLD ITALIC PARTIAL DIFFERENTIAL	[061E 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C3, 0x0062 };
    uint32_t const ces[9] = { 0x061E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_361)
{
    // 2203 0338 0334;	
    // (∄) THERE EXISTS, COMBINING LONG SOLIDUS OVERLAY	[061F | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x2203, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x061F, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_362)
{
    // 2204 0334;	
    // (∄) THERE DOES NOT EXIST	[061F | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2204, 0x0334 };
    uint32_t const ces[10] = { 0x061F, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_363)
{
    // 2203 0021;	
    // (∃) THERE EXISTS	[061F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2203, 0x0021 };
    uint32_t const ces[9] = { 0x061F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_364)
{
    // 2204 0021;	
    // (∄) THERE DOES NOT EXIST	[061F 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2204, 0x0021 };
    uint32_t const ces[11] = { 0x061F, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_365)
{
    // 2203 003F;	
    // (∃) THERE EXISTS	[061F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2203, 0x003F };
    uint32_t const ces[9] = { 0x061F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_366)
{
    // 2204 003F;	
    // (∄) THERE DOES NOT EXIST	[061F 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2204, 0x003F };
    uint32_t const ces[11] = { 0x061F, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_367)
{
    // 2203 0061;	
    // (∃) THERE EXISTS	[061F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2203, 0x0061 };
    uint32_t const ces[9] = { 0x061F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_368)
{
    // 2203 0041;	
    // (∃) THERE EXISTS	[061F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2203, 0x0041 };
    uint32_t const ces[9] = { 0x061F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_369)
{
    // 2204 0061;	
    // (∄) THERE DOES NOT EXIST	[061F 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2204, 0x0061 };
    uint32_t const ces[11] = { 0x061F, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_370)
{
    // 2204 0041;	
    // (∄) THERE DOES NOT EXIST	[061F 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x2204, 0x0041 };
    uint32_t const ces[11] = { 0x061F, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_371)
{
    // 2203 0062;	
    // (∃) THERE EXISTS	[061F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2203, 0x0062 };
    uint32_t const ces[9] = { 0x061F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_372)
{
    // 2204 0062;	
    // (∄) THERE DOES NOT EXIST	[061F 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2204, 0x0062 };
    uint32_t const ces[11] = { 0x061F, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_373)
{
    // 2205 0021;	
    // (∅) EMPTY SET	[0620 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2205, 0x0021 };
    uint32_t const ces[9] = { 0x0620, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_374)
{
    // 2205 003F;	
    // (∅) EMPTY SET	[0620 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2205, 0x003F };
    uint32_t const ces[9] = { 0x0620, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_375)
{
    // 2205 0061;	
    // (∅) EMPTY SET	[0620 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2205, 0x0061 };
    uint32_t const ces[9] = { 0x0620, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_376)
{
    // 2205 0041;	
    // (∅) EMPTY SET	[0620 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2205, 0x0041 };
    uint32_t const ces[9] = { 0x0620, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_377)
{
    // 2205 0062;	
    // (∅) EMPTY SET	[0620 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2205, 0x0062 };
    uint32_t const ces[9] = { 0x0620, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_378)
{
    // 2206 0021;	
    // (∆) INCREMENT	[0621 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2206, 0x0021 };
    uint32_t const ces[9] = { 0x0621, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_379)
{
    // 2206 003F;	
    // (∆) INCREMENT	[0621 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2206, 0x003F };
    uint32_t const ces[9] = { 0x0621, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_380)
{
    // 2206 0061;	
    // (∆) INCREMENT	[0621 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2206, 0x0061 };
    uint32_t const ces[9] = { 0x0621, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_381)
{
    // 2206 0041;	
    // (∆) INCREMENT	[0621 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2206, 0x0041 };
    uint32_t const ces[9] = { 0x0621, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_382)
{
    // 2206 0062;	
    // (∆) INCREMENT	[0621 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2206, 0x0062 };
    uint32_t const ces[9] = { 0x0621, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_383)
{
    // 2207 0021;	
    // (∇) NABLA	[0622 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2207, 0x0021 };
    uint32_t const ces[9] = { 0x0622, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_384)
{
    // 1D6C1 0021;	
    // (𝛁) MATHEMATICAL BOLD NABLA	[0622 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6C1, 0x0021 };
    uint32_t const ces[9] = { 0x0622, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_385)
{
    // 1D6FB 0021;	
    // (𝛻) MATHEMATICAL ITALIC NABLA	[0622 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6FB, 0x0021 };
    uint32_t const ces[9] = { 0x0622, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_386)
{
    // 1D735 0021;	
    // (𝜵) MATHEMATICAL BOLD ITALIC NABLA	[0622 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D735, 0x0021 };
    uint32_t const ces[9] = { 0x0622, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_387)
{
    // 1D76F 0021;	
    // (𝝯) MATHEMATICAL SANS-SERIF BOLD NABLA	[0622 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D76F, 0x0021 };
    uint32_t const ces[9] = { 0x0622, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_388)
{
    // 1D7A9 0021;	
    // (𝞩) MATHEMATICAL SANS-SERIF BOLD ITALIC NABLA	[0622 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7A9, 0x0021 };
    uint32_t const ces[9] = { 0x0622, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_389)
{
    // 2207 003F;	
    // (∇) NABLA	[0622 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2207, 0x003F };
    uint32_t const ces[9] = { 0x0622, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_390)
{
    // 1D6C1 003F;	
    // (𝛁) MATHEMATICAL BOLD NABLA	[0622 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6C1, 0x003F };
    uint32_t const ces[9] = { 0x0622, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_391)
{
    // 1D6FB 003F;	
    // (𝛻) MATHEMATICAL ITALIC NABLA	[0622 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6FB, 0x003F };
    uint32_t const ces[9] = { 0x0622, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_392)
{
    // 1D735 003F;	
    // (𝜵) MATHEMATICAL BOLD ITALIC NABLA	[0622 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D735, 0x003F };
    uint32_t const ces[9] = { 0x0622, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_393)
{
    // 1D76F 003F;	
    // (𝝯) MATHEMATICAL SANS-SERIF BOLD NABLA	[0622 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D76F, 0x003F };
    uint32_t const ces[9] = { 0x0622, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_394)
{
    // 1D7A9 003F;	
    // (𝞩) MATHEMATICAL SANS-SERIF BOLD ITALIC NABLA	[0622 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7A9, 0x003F };
    uint32_t const ces[9] = { 0x0622, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_395)
{
    // 2207 0061;	
    // (∇) NABLA	[0622 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2207, 0x0061 };
    uint32_t const ces[9] = { 0x0622, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_396)
{
    // 2207 0041;	
    // (∇) NABLA	[0622 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2207, 0x0041 };
    uint32_t const ces[9] = { 0x0622, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_397)
{
    // 1D6C1 0061;	
    // (𝛁) MATHEMATICAL BOLD NABLA	[0622 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6C1, 0x0061 };
    uint32_t const ces[9] = { 0x0622, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_398)
{
    // 1D6FB 0061;	
    // (𝛻) MATHEMATICAL ITALIC NABLA	[0622 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6FB, 0x0061 };
    uint32_t const ces[9] = { 0x0622, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_399)
{
    // 1D735 0061;	
    // (𝜵) MATHEMATICAL BOLD ITALIC NABLA	[0622 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D735, 0x0061 };
    uint32_t const ces[9] = { 0x0622, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_400)
{
    // 1D76F 0061;	
    // (𝝯) MATHEMATICAL SANS-SERIF BOLD NABLA	[0622 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D76F, 0x0061 };
    uint32_t const ces[9] = { 0x0622, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_401)
{
    // 1D7A9 0061;	
    // (𝞩) MATHEMATICAL SANS-SERIF BOLD ITALIC NABLA	[0622 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7A9, 0x0061 };
    uint32_t const ces[9] = { 0x0622, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_402)
{
    // 1D6C1 0041;	
    // (𝛁) MATHEMATICAL BOLD NABLA	[0622 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D6C1, 0x0041 };
    uint32_t const ces[9] = { 0x0622, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_403)
{
    // 1D6FB 0041;	
    // (𝛻) MATHEMATICAL ITALIC NABLA	[0622 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D6FB, 0x0041 };
    uint32_t const ces[9] = { 0x0622, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_404)
{
    // 1D735 0041;	
    // (𝜵) MATHEMATICAL BOLD ITALIC NABLA	[0622 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D735, 0x0041 };
    uint32_t const ces[9] = { 0x0622, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_405)
{
    // 1D76F 0041;	
    // (𝝯) MATHEMATICAL SANS-SERIF BOLD NABLA	[0622 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D76F, 0x0041 };
    uint32_t const ces[9] = { 0x0622, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_406)
{
    // 1D7A9 0041;	
    // (𝞩) MATHEMATICAL SANS-SERIF BOLD ITALIC NABLA	[0622 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7A9, 0x0041 };
    uint32_t const ces[9] = { 0x0622, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_407)
{
    // 2207 0062;	
    // (∇) NABLA	[0622 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2207, 0x0062 };
    uint32_t const ces[9] = { 0x0622, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_408)
{
    // 1D6C1 0062;	
    // (𝛁) MATHEMATICAL BOLD NABLA	[0622 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6C1, 0x0062 };
    uint32_t const ces[9] = { 0x0622, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_409)
{
    // 1D6FB 0062;	
    // (𝛻) MATHEMATICAL ITALIC NABLA	[0622 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6FB, 0x0062 };
    uint32_t const ces[9] = { 0x0622, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_410)
{
    // 1D735 0062;	
    // (𝜵) MATHEMATICAL BOLD ITALIC NABLA	[0622 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D735, 0x0062 };
    uint32_t const ces[9] = { 0x0622, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_411)
{
    // 1D76F 0062;	
    // (𝝯) MATHEMATICAL SANS-SERIF BOLD NABLA	[0622 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D76F, 0x0062 };
    uint32_t const ces[9] = { 0x0622, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_412)
{
    // 1D7A9 0062;	
    // (𝞩) MATHEMATICAL SANS-SERIF BOLD ITALIC NABLA	[0622 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7A9, 0x0062 };
    uint32_t const ces[9] = { 0x0622, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_413)
{
    // 2208 0338 0334;	
    // (∉) ELEMENT OF, COMBINING LONG SOLIDUS OVERLAY	[0623 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x2208, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x0623, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_414)
{
    // 2209 0334;	
    // (∉) NOT AN ELEMENT OF	[0623 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2209, 0x0334 };
    uint32_t const ces[10] = { 0x0623, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_415)
{
    // 2208 0021;	
    // (∈) ELEMENT OF	[0623 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2208, 0x0021 };
    uint32_t const ces[9] = { 0x0623, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_416)
{
    // 2209 0021;	
    // (∉) NOT AN ELEMENT OF	[0623 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2209, 0x0021 };
    uint32_t const ces[11] = { 0x0623, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_417)
{
    // 2208 003F;	
    // (∈) ELEMENT OF	[0623 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2208, 0x003F };
    uint32_t const ces[9] = { 0x0623, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_418)
{
    // 2209 003F;	
    // (∉) NOT AN ELEMENT OF	[0623 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2209, 0x003F };
    uint32_t const ces[11] = { 0x0623, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_419)
{
    // 2208 0061;	
    // (∈) ELEMENT OF	[0623 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2208, 0x0061 };
    uint32_t const ces[9] = { 0x0623, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_420)
{
    // 2208 0041;	
    // (∈) ELEMENT OF	[0623 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2208, 0x0041 };
    uint32_t const ces[9] = { 0x0623, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_421)
{
    // 2209 0061;	
    // (∉) NOT AN ELEMENT OF	[0623 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2209, 0x0061 };
    uint32_t const ces[11] = { 0x0623, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_422)
{
    // 2209 0041;	
    // (∉) NOT AN ELEMENT OF	[0623 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x2209, 0x0041 };
    uint32_t const ces[11] = { 0x0623, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_423)
{
    // 2208 0062;	
    // (∈) ELEMENT OF	[0623 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2208, 0x0062 };
    uint32_t const ces[9] = { 0x0623, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_424)
{
    // 2209 0062;	
    // (∉) NOT AN ELEMENT OF	[0623 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x2209, 0x0062 };
    uint32_t const ces[11] = { 0x0623, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_425)
{
    // 220A 0021;	
    // (∊) SMALL ELEMENT OF	[0624 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x220A, 0x0021 };
    uint32_t const ces[9] = { 0x0624, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_426)
{
    // 220A 003F;	
    // (∊) SMALL ELEMENT OF	[0624 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x220A, 0x003F };
    uint32_t const ces[9] = { 0x0624, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_427)
{
    // 220A 0061;	
    // (∊) SMALL ELEMENT OF	[0624 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x220A, 0x0061 };
    uint32_t const ces[9] = { 0x0624, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_428)
{
    // 220A 0041;	
    // (∊) SMALL ELEMENT OF	[0624 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x220A, 0x0041 };
    uint32_t const ces[9] = { 0x0624, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_429)
{
    // 220A 0062;	
    // (∊) SMALL ELEMENT OF	[0624 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x220A, 0x0062 };
    uint32_t const ces[9] = { 0x0624, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_430)
{
    // 220B 0338 0334;	
    // (∌) CONTAINS AS MEMBER, COMBINING LONG SOLIDUS OVERLAY	[0625 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x220B, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x0625, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_431)
{
    // 220C 0334;	
    // (∌) DOES NOT CONTAIN AS MEMBER	[0625 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x220C, 0x0334 };
    uint32_t const ces[10] = { 0x0625, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_432)
{
    // 220B 0021;	
    // (∋) CONTAINS AS MEMBER	[0625 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x220B, 0x0021 };
    uint32_t const ces[9] = { 0x0625, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_433)
{
    // 220C 0021;	
    // (∌) DOES NOT CONTAIN AS MEMBER	[0625 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x220C, 0x0021 };
    uint32_t const ces[11] = { 0x0625, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_434)
{
    // 220B 003F;	
    // (∋) CONTAINS AS MEMBER	[0625 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x220B, 0x003F };
    uint32_t const ces[9] = { 0x0625, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_435)
{
    // 220C 003F;	
    // (∌) DOES NOT CONTAIN AS MEMBER	[0625 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x220C, 0x003F };
    uint32_t const ces[11] = { 0x0625, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_436)
{
    // 220B 0061;	
    // (∋) CONTAINS AS MEMBER	[0625 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x220B, 0x0061 };
    uint32_t const ces[9] = { 0x0625, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_437)
{
    // 220B 0041;	
    // (∋) CONTAINS AS MEMBER	[0625 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x220B, 0x0041 };
    uint32_t const ces[9] = { 0x0625, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_438)
{
    // 220C 0061;	
    // (∌) DOES NOT CONTAIN AS MEMBER	[0625 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x220C, 0x0061 };
    uint32_t const ces[11] = { 0x0625, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_439)
{
    // 220C 0041;	
    // (∌) DOES NOT CONTAIN AS MEMBER	[0625 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x220C, 0x0041 };
    uint32_t const ces[11] = { 0x0625, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_440)
{
    // 220B 0062;	
    // (∋) CONTAINS AS MEMBER	[0625 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x220B, 0x0062 };
    uint32_t const ces[9] = { 0x0625, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_441)
{
    // 220C 0062;	
    // (∌) DOES NOT CONTAIN AS MEMBER	[0625 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x220C, 0x0062 };
    uint32_t const ces[11] = { 0x0625, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_442)
{
    // 220D 0021;	
    // (∍) SMALL CONTAINS AS MEMBER	[0626 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x220D, 0x0021 };
    uint32_t const ces[9] = { 0x0626, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_443)
{
    // 220D 003F;	
    // (∍) SMALL CONTAINS AS MEMBER	[0626 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x220D, 0x003F };
    uint32_t const ces[9] = { 0x0626, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_444)
{
    // 220D 0061;	
    // (∍) SMALL CONTAINS AS MEMBER	[0626 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x220D, 0x0061 };
    uint32_t const ces[9] = { 0x0626, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_445)
{
    // 220D 0041;	
    // (∍) SMALL CONTAINS AS MEMBER	[0626 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x220D, 0x0041 };
    uint32_t const ces[9] = { 0x0626, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_446)
{
    // 220D 0062;	
    // (∍) SMALL CONTAINS AS MEMBER	[0626 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x220D, 0x0062 };
    uint32_t const ces[9] = { 0x0626, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_447)
{
    // 03F6 0021;	
    // (϶) GREEK REVERSED LUNATE EPSILON SYMBOL	[0627 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03F6, 0x0021 };
    uint32_t const ces[9] = { 0x0627, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_448)
{
    // 03F6 003F;	
    // (϶) GREEK REVERSED LUNATE EPSILON SYMBOL	[0627 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03F6, 0x003F };
    uint32_t const ces[9] = { 0x0627, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_449)
{
    // 03F6 0061;	
    // (϶) GREEK REVERSED LUNATE EPSILON SYMBOL	[0627 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03F6, 0x0061 };
    uint32_t const ces[9] = { 0x0627, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_450)
{
    // 03F6 0041;	
    // (϶) GREEK REVERSED LUNATE EPSILON SYMBOL	[0627 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x03F6, 0x0041 };
    uint32_t const ces[9] = { 0x0627, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_451)
{
    // 03F6 0062;	
    // (϶) GREEK REVERSED LUNATE EPSILON SYMBOL	[0627 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03F6, 0x0062 };
    uint32_t const ces[9] = { 0x0627, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_452)
{
    // 220E 0021;	
    // (∎) END OF PROOF	[0628 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x220E, 0x0021 };
    uint32_t const ces[9] = { 0x0628, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_453)
{
    // 220E 003F;	
    // (∎) END OF PROOF	[0628 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x220E, 0x003F };
    uint32_t const ces[9] = { 0x0628, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_454)
{
    // 220E 0061;	
    // (∎) END OF PROOF	[0628 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x220E, 0x0061 };
    uint32_t const ces[9] = { 0x0628, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_455)
{
    // 220E 0041;	
    // (∎) END OF PROOF	[0628 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x220E, 0x0041 };
    uint32_t const ces[9] = { 0x0628, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_456)
{
    // 220E 0062;	
    // (∎) END OF PROOF	[0628 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x220E, 0x0062 };
    uint32_t const ces[9] = { 0x0628, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_457)
{
    // 220F 0021;	
    // (∏) N-ARY PRODUCT	[0629 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x220F, 0x0021 };
    uint32_t const ces[9] = { 0x0629, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_458)
{
    // 220F 003F;	
    // (∏) N-ARY PRODUCT	[0629 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x220F, 0x003F };
    uint32_t const ces[9] = { 0x0629, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_459)
{
    // 220F 0061;	
    // (∏) N-ARY PRODUCT	[0629 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x220F, 0x0061 };
    uint32_t const ces[9] = { 0x0629, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_460)
{
    // 220F 0041;	
    // (∏) N-ARY PRODUCT	[0629 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x220F, 0x0041 };
    uint32_t const ces[9] = { 0x0629, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_461)
{
    // 220F 0062;	
    // (∏) N-ARY PRODUCT	[0629 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x220F, 0x0062 };
    uint32_t const ces[9] = { 0x0629, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_462)
{
    // 2210 0021;	
    // (∐) N-ARY COPRODUCT	[062A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2210, 0x0021 };
    uint32_t const ces[9] = { 0x062A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_463)
{
    // 2210 003F;	
    // (∐) N-ARY COPRODUCT	[062A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2210, 0x003F };
    uint32_t const ces[9] = { 0x062A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_464)
{
    // 2210 0061;	
    // (∐) N-ARY COPRODUCT	[062A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2210, 0x0061 };
    uint32_t const ces[9] = { 0x062A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_465)
{
    // 2210 0041;	
    // (∐) N-ARY COPRODUCT	[062A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2210, 0x0041 };
    uint32_t const ces[9] = { 0x062A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_466)
{
    // 2210 0062;	
    // (∐) N-ARY COPRODUCT	[062A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2210, 0x0062 };
    uint32_t const ces[9] = { 0x062A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_467)
{
    // 2211 0021;	
    // (∑) N-ARY SUMMATION	[062B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2211, 0x0021 };
    uint32_t const ces[9] = { 0x062B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_468)
{
    // 2140 0021;	
    // (⅀) DOUBLE-STRUCK N-ARY SUMMATION	[062B 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x2140, 0x0021 };
    uint32_t const ces[9] = { 0x062B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_469)
{
    // 2211 003F;	
    // (∑) N-ARY SUMMATION	[062B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2211, 0x003F };
    uint32_t const ces[9] = { 0x062B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_470)
{
    // 2140 003F;	
    // (⅀) DOUBLE-STRUCK N-ARY SUMMATION	[062B 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x2140, 0x003F };
    uint32_t const ces[9] = { 0x062B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_471)
{
    // 2211 0061;	
    // (∑) N-ARY SUMMATION	[062B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2211, 0x0061 };
    uint32_t const ces[9] = { 0x062B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_472)
{
    // 2211 0041;	
    // (∑) N-ARY SUMMATION	[062B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2211, 0x0041 };
    uint32_t const ces[9] = { 0x062B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_473)
{
    // 2140 0061;	
    // (⅀) DOUBLE-STRUCK N-ARY SUMMATION	[062B 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x2140, 0x0061 };
    uint32_t const ces[9] = { 0x062B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_474)
{
    // 2140 0041;	
    // (⅀) DOUBLE-STRUCK N-ARY SUMMATION	[062B 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x2140, 0x0041 };
    uint32_t const ces[9] = { 0x062B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_475)
{
    // 2211 0062;	
    // (∑) N-ARY SUMMATION	[062B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2211, 0x0062 };
    uint32_t const ces[9] = { 0x062B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_476)
{
    // 2140 0062;	
    // (⅀) DOUBLE-STRUCK N-ARY SUMMATION	[062B 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x2140, 0x0062 };
    uint32_t const ces[9] = { 0x062B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_477)
{
    // 002B 0021;	
    // ('+') PLUS SIGN	[062C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x002B, 0x0021 };
    uint32_t const ces[9] = { 0x062C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_478)
{
    // FF0B 0021;	
    // (＋) FULLWIDTH PLUS SIGN	[062C 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF0B, 0x0021 };
    uint32_t const ces[9] = { 0x062C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_479)
{
    // FB29 0021;	
    // (﬩) HEBREW LETTER ALTERNATIVE PLUS SIGN	[062C 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB29, 0x0021 };
    uint32_t const ces[9] = { 0x062C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_480)
{
    // FE62 0021;	
    // (﹢) SMALL PLUS SIGN	[062C 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE62, 0x0021 };
    uint32_t const ces[9] = { 0x062C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_481)
{
    // 207A 0021;	
    // (⁺) SUPERSCRIPT PLUS SIGN	[062C 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x207A, 0x0021 };
    uint32_t const ces[9] = { 0x062C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_482)
{
    // 208A 0021;	
    // (₊) SUBSCRIPT PLUS SIGN	[062C 0261 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x208A, 0x0021 };
    uint32_t const ces[9] = { 0x062C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_483)
{
    // 002B 003F;	
    // ('+') PLUS SIGN	[062C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x002B, 0x003F };
    uint32_t const ces[9] = { 0x062C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_484)
{
    // FF0B 003F;	
    // (＋) FULLWIDTH PLUS SIGN	[062C 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF0B, 0x003F };
    uint32_t const ces[9] = { 0x062C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_485)
{
    // FB29 003F;	
    // (﬩) HEBREW LETTER ALTERNATIVE PLUS SIGN	[062C 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB29, 0x003F };
    uint32_t const ces[9] = { 0x062C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_486)
{
    // FE62 003F;	
    // (﹢) SMALL PLUS SIGN	[062C 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE62, 0x003F };
    uint32_t const ces[9] = { 0x062C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_487)
{
    // 207A 003F;	
    // (⁺) SUPERSCRIPT PLUS SIGN	[062C 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x207A, 0x003F };
    uint32_t const ces[9] = { 0x062C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_488)
{
    // 208A 003F;	
    // (₊) SUBSCRIPT PLUS SIGN	[062C 0267 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x208A, 0x003F };
    uint32_t const ces[9] = { 0x062C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_489)
{
    // 002B 0061;	
    // ('+') PLUS SIGN	[062C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x002B, 0x0061 };
    uint32_t const ces[9] = { 0x062C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_490)
{
    // 002B 0041;	
    // ('+') PLUS SIGN	[062C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x002B, 0x0041 };
    uint32_t const ces[9] = { 0x062C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_491)
{
    // FF0B 0061;	
    // (＋) FULLWIDTH PLUS SIGN	[062C 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF0B, 0x0061 };
    uint32_t const ces[9] = { 0x062C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_492)
{
    // FF0B 0041;	
    // (＋) FULLWIDTH PLUS SIGN	[062C 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF0B, 0x0041 };
    uint32_t const ces[9] = { 0x062C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_493)
{
    // FB29 0061;	
    // (﬩) HEBREW LETTER ALTERNATIVE PLUS SIGN	[062C 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0xFB29, 0x0061 };
    uint32_t const ces[9] = { 0x062C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_494)
{
    // FB29 0041;	
    // (﬩) HEBREW LETTER ALTERNATIVE PLUS SIGN	[062C 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0xFB29, 0x0041 };
    uint32_t const ces[9] = { 0x062C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_495)
{
    // FE62 0061;	
    // (﹢) SMALL PLUS SIGN	[062C 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE62, 0x0061 };
    uint32_t const ces[9] = { 0x062C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_496)
{
    // FE62 0041;	
    // (﹢) SMALL PLUS SIGN	[062C 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0xFE62, 0x0041 };
    uint32_t const ces[9] = { 0x062C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_497)
{
    // 207A 0061;	
    // (⁺) SUPERSCRIPT PLUS SIGN	[062C 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x207A, 0x0061 };
    uint32_t const ces[9] = { 0x062C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_498)
{
    // 207A 0041;	
    // (⁺) SUPERSCRIPT PLUS SIGN	[062C 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x207A, 0x0041 };
    uint32_t const ces[9] = { 0x062C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_021_499)
{
    // 208A 0061;	
    // (₊) SUBSCRIPT PLUS SIGN	[062C 1CAD | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x208A, 0x0061 };
    uint32_t const ces[9] = { 0x062C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

