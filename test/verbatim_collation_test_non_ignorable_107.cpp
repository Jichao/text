// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_107_000)
{
    // 3399 0041;	
    // (㎙) SQUARE FM	[1D4B 1E10 1CAD | 0020 0020 0020 | 001C 001C 0008 |]

    uint32_t cps[2] = { 0x3399, 0x0041 };
    uint32_t const ces[12] = { 0x1D4B, 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_001)
{
    // 3399 0062;	
    // (㎙) SQUARE FM	[1D4B 1E10 1CC6 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3399, 0x0062 };
    uint32_t const ces[12] = { 0x1D4B, 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_002)
{
    // 02A9 0021;	
    // (ʩ) LATIN SMALL LETTER FENG DIGRAPH	[1D4B 1E3E 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x02A9, 0x0021 };
    uint32_t const ces[12] = { 0x1D4B, 0x1E3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_003)
{
    // 02A9 003F;	
    // (ʩ) LATIN SMALL LETTER FENG DIGRAPH	[1D4B 1E3E 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x02A9, 0x003F };
    uint32_t const ces[12] = { 0x1D4B, 0x1E3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_004)
{
    // 02A9 0061;	
    // (ʩ) LATIN SMALL LETTER FENG DIGRAPH	[1D4B 1E3E 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x02A9, 0x0061 };
    uint32_t const ces[12] = { 0x1D4B, 0x1E3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_005)
{
    // 02A9 0041;	
    // (ʩ) LATIN SMALL LETTER FENG DIGRAPH	[1D4B 1E3E 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x02A9, 0x0041 };
    uint32_t const ces[12] = { 0x1D4B, 0x1E3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_006)
{
    // 02A9 0062;	
    // (ʩ) LATIN SMALL LETTER FENG DIGRAPH	[1D4B 1E3E 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x02A9, 0x0062 };
    uint32_t const ces[12] = { 0x1D4B, 0x1E3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_007)
{
    // 1F193 0021;	
    // (🆓) SQUARED FREE	[1D4B 1E99 1D10 1D10 0261 | 0020 0020 0020 0020 0020 | 001D 001D 001D 001D 0002 |]

    uint32_t cps[2] = { 0x1F193, 0x0021 };
    uint32_t const ces[18] = { 0x1D4B, 0x1E99, 0x1D10, 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_008)
{
    // 1F193 003F;	
    // (🆓) SQUARED FREE	[1D4B 1E99 1D10 1D10 0267 | 0020 0020 0020 0020 0020 | 001D 001D 001D 001D 0002 |]

    uint32_t cps[2] = { 0x1F193, 0x003F };
    uint32_t const ces[18] = { 0x1D4B, 0x1E99, 0x1D10, 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_009)
{
    // 1F193 0061;	
    // (🆓) SQUARED FREE	[1D4B 1E99 1D10 1D10 1CAD | 0020 0020 0020 0020 0020 | 001D 001D 001D 001D 0002 |]

    uint32_t cps[2] = { 0x1F193, 0x0061 };
    uint32_t const ces[18] = { 0x1D4B, 0x1E99, 0x1D10, 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_010)
{
    // 1F193 0041;	
    // (🆓) SQUARED FREE	[1D4B 1E99 1D10 1D10 1CAD | 0020 0020 0020 0020 0020 | 001D 001D 001D 001D 0008 |]

    uint32_t cps[2] = { 0x1F193, 0x0041 };
    uint32_t const ces[18] = { 0x1D4B, 0x1E99, 0x1D10, 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_011)
{
    // 1F193 0062;	
    // (🆓) SQUARED FREE	[1D4B 1E99 1D10 1D10 1CC6 | 0020 0020 0020 0020 0020 | 001D 001D 001D 001D 0002 |]

    uint32_t cps[2] = { 0x1F193, 0x0062 };
    uint32_t const ces[18] = { 0x1D4B, 0x1E99, 0x1D10, 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_012)
{
    // A730 0021;	
    // (ꜰ) LATIN LETTER SMALL CAPITAL F	[1D4F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA730, 0x0021 };
    uint32_t const ces[9] = { 0x1D4F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_013)
{
    // A730 003F;	
    // (ꜰ) LATIN LETTER SMALL CAPITAL F	[1D4F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA730, 0x003F };
    uint32_t const ces[9] = { 0x1D4F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_014)
{
    // A730 0061;	
    // (ꜰ) LATIN LETTER SMALL CAPITAL F	[1D4F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA730, 0x0061 };
    uint32_t const ces[9] = { 0x1D4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_015)
{
    // A730 0041;	
    // (ꜰ) LATIN LETTER SMALL CAPITAL F	[1D4F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA730, 0x0041 };
    uint32_t const ces[9] = { 0x1D4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_016)
{
    // A730 0062;	
    // (ꜰ) LATIN LETTER SMALL CAPITAL F	[1D4F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA730, 0x0062 };
    uint32_t const ces[9] = { 0x1D4F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_017)
{
    // AB35 0021;	
    // (ꬵ) LATIN SMALL LETTER LENIS F	[1D50 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB35, 0x0021 };
    uint32_t const ces[9] = { 0x1D50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_018)
{
    // AB35 003F;	
    // (ꬵ) LATIN SMALL LETTER LENIS F	[1D50 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB35, 0x003F };
    uint32_t const ces[9] = { 0x1D50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_019)
{
    // AB35 0061;	
    // (ꬵ) LATIN SMALL LETTER LENIS F	[1D50 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB35, 0x0061 };
    uint32_t const ces[9] = { 0x1D50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_020)
{
    // AB35 0041;	
    // (ꬵ) LATIN SMALL LETTER LENIS F	[1D50 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB35, 0x0041 };
    uint32_t const ces[9] = { 0x1D50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_021)
{
    // AB35 0062;	
    // (ꬵ) LATIN SMALL LETTER LENIS F	[1D50 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB35, 0x0062 };
    uint32_t const ces[9] = { 0x1D50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_022)
{
    // A799 0021;	
    // (ꞙ) LATIN SMALL LETTER F WITH STROKE	[1D51 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA799, 0x0021 };
    uint32_t const ces[9] = { 0x1D51, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_023)
{
    // A798 0021;	
    // (Ꞙ) LATIN CAPITAL LETTER F WITH STROKE	[1D51 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA798, 0x0021 };
    uint32_t const ces[9] = { 0x1D51, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_024)
{
    // A799 003F;	
    // (ꞙ) LATIN SMALL LETTER F WITH STROKE	[1D51 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA799, 0x003F };
    uint32_t const ces[9] = { 0x1D51, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_025)
{
    // A798 003F;	
    // (Ꞙ) LATIN CAPITAL LETTER F WITH STROKE	[1D51 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA798, 0x003F };
    uint32_t const ces[9] = { 0x1D51, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_026)
{
    // A799 0061;	
    // (ꞙ) LATIN SMALL LETTER F WITH STROKE	[1D51 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA799, 0x0061 };
    uint32_t const ces[9] = { 0x1D51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_027)
{
    // A799 0041;	
    // (ꞙ) LATIN SMALL LETTER F WITH STROKE	[1D51 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA799, 0x0041 };
    uint32_t const ces[9] = { 0x1D51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_028)
{
    // A798 0061;	
    // (Ꞙ) LATIN CAPITAL LETTER F WITH STROKE	[1D51 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA798, 0x0061 };
    uint32_t const ces[9] = { 0x1D51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_029)
{
    // A798 0041;	
    // (Ꞙ) LATIN CAPITAL LETTER F WITH STROKE	[1D51 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA798, 0x0041 };
    uint32_t const ces[9] = { 0x1D51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_030)
{
    // A799 0062;	
    // (ꞙ) LATIN SMALL LETTER F WITH STROKE	[1D51 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA799, 0x0062 };
    uint32_t const ces[9] = { 0x1D51, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_031)
{
    // A798 0062;	
    // (Ꞙ) LATIN CAPITAL LETTER F WITH STROKE	[1D51 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA798, 0x0062 };
    uint32_t const ces[9] = { 0x1D51, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_032)
{
    // 1D6E 0021;	
    // (ᵮ) LATIN SMALL LETTER F WITH MIDDLE TILDE	[1D52 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D6E, 0x0021 };
    uint32_t const ces[9] = { 0x1D52, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_033)
{
    // 1D6E 003F;	
    // (ᵮ) LATIN SMALL LETTER F WITH MIDDLE TILDE	[1D52 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D6E, 0x003F };
    uint32_t const ces[9] = { 0x1D52, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_034)
{
    // 1D6E 0061;	
    // (ᵮ) LATIN SMALL LETTER F WITH MIDDLE TILDE	[1D52 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D6E, 0x0061 };
    uint32_t const ces[9] = { 0x1D52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_035)
{
    // 1D6E 0041;	
    // (ᵮ) LATIN SMALL LETTER F WITH MIDDLE TILDE	[1D52 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D6E, 0x0041 };
    uint32_t const ces[9] = { 0x1D52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_036)
{
    // 1D6E 0062;	
    // (ᵮ) LATIN SMALL LETTER F WITH MIDDLE TILDE	[1D52 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D6E, 0x0062 };
    uint32_t const ces[9] = { 0x1D52, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_037)
{
    // 1D82 0021;	
    // (ᶂ) LATIN SMALL LETTER F WITH PALATAL HOOK	[1D53 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D82, 0x0021 };
    uint32_t const ces[9] = { 0x1D53, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_038)
{
    // 1D82 003F;	
    // (ᶂ) LATIN SMALL LETTER F WITH PALATAL HOOK	[1D53 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D82, 0x003F };
    uint32_t const ces[9] = { 0x1D53, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_039)
{
    // 1D82 0061;	
    // (ᶂ) LATIN SMALL LETTER F WITH PALATAL HOOK	[1D53 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D82, 0x0061 };
    uint32_t const ces[9] = { 0x1D53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_040)
{
    // 1D82 0041;	
    // (ᶂ) LATIN SMALL LETTER F WITH PALATAL HOOK	[1D53 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D82, 0x0041 };
    uint32_t const ces[9] = { 0x1D53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_041)
{
    // 1D82 0062;	
    // (ᶂ) LATIN SMALL LETTER F WITH PALATAL HOOK	[1D53 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D82, 0x0062 };
    uint32_t const ces[9] = { 0x1D53, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_042)
{
    // 0192 0021;	
    // (ƒ) LATIN SMALL LETTER F WITH HOOK	[1D54 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0192, 0x0021 };
    uint32_t const ces[9] = { 0x1D54, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_043)
{
    // 0191 0021;	
    // (Ƒ) LATIN CAPITAL LETTER F WITH HOOK	[1D54 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0191, 0x0021 };
    uint32_t const ces[9] = { 0x1D54, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_044)
{
    // 0192 003F;	
    // (ƒ) LATIN SMALL LETTER F WITH HOOK	[1D54 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0192, 0x003F };
    uint32_t const ces[9] = { 0x1D54, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_045)
{
    // 0191 003F;	
    // (Ƒ) LATIN CAPITAL LETTER F WITH HOOK	[1D54 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0191, 0x003F };
    uint32_t const ces[9] = { 0x1D54, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_046)
{
    // 0192 0061;	
    // (ƒ) LATIN SMALL LETTER F WITH HOOK	[1D54 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0192, 0x0061 };
    uint32_t const ces[9] = { 0x1D54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_047)
{
    // 0192 0041;	
    // (ƒ) LATIN SMALL LETTER F WITH HOOK	[1D54 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0192, 0x0041 };
    uint32_t const ces[9] = { 0x1D54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_048)
{
    // 0191 0061;	
    // (Ƒ) LATIN CAPITAL LETTER F WITH HOOK	[1D54 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0191, 0x0061 };
    uint32_t const ces[9] = { 0x1D54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_049)
{
    // 0191 0041;	
    // (Ƒ) LATIN CAPITAL LETTER F WITH HOOK	[1D54 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0191, 0x0041 };
    uint32_t const ces[9] = { 0x1D54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_050)
{
    // 0192 0062;	
    // (ƒ) LATIN SMALL LETTER F WITH HOOK	[1D54 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0192, 0x0062 };
    uint32_t const ces[9] = { 0x1D54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_051)
{
    // 0191 0062;	
    // (Ƒ) LATIN CAPITAL LETTER F WITH HOOK	[1D54 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0191, 0x0062 };
    uint32_t const ces[9] = { 0x1D54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_052)
{
    // 214E 0021;	
    // (ⅎ) TURNED SMALL F	[1D58 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x214E, 0x0021 };
    uint32_t const ces[9] = { 0x1D58, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_053)
{
    // 2132 0021;	
    // (Ⅎ) TURNED CAPITAL F	[1D58 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2132, 0x0021 };
    uint32_t const ces[9] = { 0x1D58, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_054)
{
    // 214E 003F;	
    // (ⅎ) TURNED SMALL F	[1D58 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x214E, 0x003F };
    uint32_t const ces[9] = { 0x1D58, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_055)
{
    // 2132 003F;	
    // (Ⅎ) TURNED CAPITAL F	[1D58 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2132, 0x003F };
    uint32_t const ces[9] = { 0x1D58, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_056)
{
    // 214E 0061;	
    // (ⅎ) TURNED SMALL F	[1D58 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x214E, 0x0061 };
    uint32_t const ces[9] = { 0x1D58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_057)
{
    // 214E 0041;	
    // (ⅎ) TURNED SMALL F	[1D58 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x214E, 0x0041 };
    uint32_t const ces[9] = { 0x1D58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_058)
{
    // 2132 0061;	
    // (Ⅎ) TURNED CAPITAL F	[1D58 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2132, 0x0061 };
    uint32_t const ces[9] = { 0x1D58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_059)
{
    // 2132 0041;	
    // (Ⅎ) TURNED CAPITAL F	[1D58 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x2132, 0x0041 };
    uint32_t const ces[9] = { 0x1D58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_060)
{
    // 214E 0062;	
    // (ⅎ) TURNED SMALL F	[1D58 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x214E, 0x0062 };
    uint32_t const ces[9] = { 0x1D58, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_061)
{
    // 2132 0062;	
    // (Ⅎ) TURNED CAPITAL F	[1D58 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2132, 0x0062 };
    uint32_t const ces[9] = { 0x1D58, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_062)
{
    // A7FB 0021;	
    // (ꟻ) LATIN EPIGRAPHIC LETTER REVERSED F	[1D59 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA7FB, 0x0021 };
    uint32_t const ces[9] = { 0x1D59, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_063)
{
    // A7FB 003F;	
    // (ꟻ) LATIN EPIGRAPHIC LETTER REVERSED F	[1D59 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA7FB, 0x003F };
    uint32_t const ces[9] = { 0x1D59, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_064)
{
    // A7FB 0061;	
    // (ꟻ) LATIN EPIGRAPHIC LETTER REVERSED F	[1D59 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA7FB, 0x0061 };
    uint32_t const ces[9] = { 0x1D59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_065)
{
    // A7FB 0041;	
    // (ꟻ) LATIN EPIGRAPHIC LETTER REVERSED F	[1D59 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA7FB, 0x0041 };
    uint32_t const ces[9] = { 0x1D59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_066)
{
    // A7FB 0062;	
    // (ꟻ) LATIN EPIGRAPHIC LETTER REVERSED F	[1D59 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA7FB, 0x0062 };
    uint32_t const ces[9] = { 0x1D59, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_067)
{
    // 0067 0301 0334;	
    // (ǵ) LATIN SMALL LETTER G, COMBINING ACUTE ACCENT	[1D5A | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0067, 0x0301, 0x0334 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_068)
{
    // 0067 0334 0301;	
    // (g̴) LATIN SMALL LETTER G, COMBINING TILDE OVERLAY	[1D5A | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0067, 0x0334, 0x0301 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_069)
{
    // 0067 0334 0341;	
    // (g̴) LATIN SMALL LETTER G, COMBINING TILDE OVERLAY	[1D5A | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0067, 0x0334, 0x0341 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_070)
{
    // 0067 0341 0334;	
    // (ǵ) LATIN SMALL LETTER G, COMBINING ACUTE TONE MARK	[1D5A | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0067, 0x0341, 0x0334 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_071)
{
    // 0047 0301 0334;	
    // (Ǵ) LATIN CAPITAL LETTER G, COMBINING ACUTE ACCENT	[1D5A | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0047, 0x0301, 0x0334 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_072)
{
    // 0047 0334 0301;	
    // (G̴) LATIN CAPITAL LETTER G, COMBINING TILDE OVERLAY	[1D5A | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0047, 0x0334, 0x0301 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_073)
{
    // 0047 0334 0341;	
    // (G̴) LATIN CAPITAL LETTER G, COMBINING TILDE OVERLAY	[1D5A | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0047, 0x0334, 0x0341 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_074)
{
    // 01F4 0334;	
    // (Ǵ) LATIN CAPITAL LETTER G WITH ACUTE	[1D5A | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01F4, 0x0334 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_075)
{
    // 0067 0306 0334;	
    // (ğ) LATIN SMALL LETTER G, COMBINING BREVE	[1D5A | 0020 004A 0026 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0067, 0x0306, 0x0334 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_076)
{
    // 0067 0334 0306;	
    // (g̴) LATIN SMALL LETTER G, COMBINING TILDE OVERLAY	[1D5A | 0020 004A 0026 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0067, 0x0334, 0x0306 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_077)
{
    // 011F 0334;	
    // (ğ) LATIN SMALL LETTER G WITH BREVE	[1D5A | 0020 004A 0026 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x011F, 0x0334 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_078)
{
    // 0047 0306 0334;	
    // (Ğ) LATIN CAPITAL LETTER G, COMBINING BREVE	[1D5A | 0020 004A 0026 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0047, 0x0306, 0x0334 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_079)
{
    // 0047 0334 0306;	
    // (G̴) LATIN CAPITAL LETTER G, COMBINING TILDE OVERLAY	[1D5A | 0020 004A 0026 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0047, 0x0334, 0x0306 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_080)
{
    // 011E 0334;	
    // (Ğ) LATIN CAPITAL LETTER G WITH BREVE	[1D5A | 0020 004A 0026 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x011E, 0x0334 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_081)
{
    // 0067 0302 0334;	
    // (ĝ) LATIN SMALL LETTER G, COMBINING CIRCUMFLEX ACCENT	[1D5A | 0020 004A 0027 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0067, 0x0302, 0x0334 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_082)
{
    // 0067 0334 0302;	
    // (g̴) LATIN SMALL LETTER G, COMBINING TILDE OVERLAY	[1D5A | 0020 004A 0027 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0067, 0x0334, 0x0302 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_083)
{
    // 011D 0334;	
    // (ĝ) LATIN SMALL LETTER G WITH CIRCUMFLEX	[1D5A | 0020 004A 0027 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x011D, 0x0334 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_084)
{
    // 0047 0302 0334;	
    // (Ĝ) LATIN CAPITAL LETTER G, COMBINING CIRCUMFLEX ACCENT	[1D5A | 0020 004A 0027 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0047, 0x0302, 0x0334 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_085)
{
    // 0047 0334 0302;	
    // (G̴) LATIN CAPITAL LETTER G, COMBINING TILDE OVERLAY	[1D5A | 0020 004A 0027 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0047, 0x0334, 0x0302 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_086)
{
    // 011C 0334;	
    // (Ĝ) LATIN CAPITAL LETTER G WITH CIRCUMFLEX	[1D5A | 0020 004A 0027 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x011C, 0x0334 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_087)
{
    // 0067 030C 0334;	
    // (ǧ) LATIN SMALL LETTER G, COMBINING CARON	[1D5A | 0020 004A 0028 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0067, 0x030C, 0x0334 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_088)
{
    // 0067 0334 030C;	
    // (g̴) LATIN SMALL LETTER G, COMBINING TILDE OVERLAY	[1D5A | 0020 004A 0028 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0067, 0x0334, 0x030C };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_089)
{
    // 01E7 0334;	
    // (ǧ) LATIN SMALL LETTER G WITH CARON	[1D5A | 0020 004A 0028 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01E7, 0x0334 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_090)
{
    // 0047 030C 0334;	
    // (Ǧ) LATIN CAPITAL LETTER G, COMBINING CARON	[1D5A | 0020 004A 0028 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0047, 0x030C, 0x0334 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_091)
{
    // 0047 0334 030C;	
    // (G̴) LATIN CAPITAL LETTER G, COMBINING TILDE OVERLAY	[1D5A | 0020 004A 0028 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0047, 0x0334, 0x030C };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_092)
{
    // 01E6 0334;	
    // (Ǧ) LATIN CAPITAL LETTER G WITH CARON	[1D5A | 0020 004A 0028 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01E6, 0x0334 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_093)
{
    // 0067 0307 0334;	
    // (ġ) LATIN SMALL LETTER G, COMBINING DOT ABOVE	[1D5A | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0067, 0x0307, 0x0334 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_094)
{
    // 0067 0334 0307;	
    // (g̴) LATIN SMALL LETTER G, COMBINING TILDE OVERLAY	[1D5A | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0067, 0x0334, 0x0307 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_095)
{
    // 0121 0334;	
    // (ġ) LATIN SMALL LETTER G WITH DOT ABOVE	[1D5A | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0121, 0x0334 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_096)
{
    // 0047 0307 0334;	
    // (Ġ) LATIN CAPITAL LETTER G, COMBINING DOT ABOVE	[1D5A | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0047, 0x0307, 0x0334 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_097)
{
    // 0047 0334 0307;	
    // (G̴) LATIN CAPITAL LETTER G, COMBINING TILDE OVERLAY	[1D5A | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0047, 0x0334, 0x0307 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_098)
{
    // 0120 0334;	
    // (Ġ) LATIN CAPITAL LETTER G WITH DOT ABOVE	[1D5A | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0120, 0x0334 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_099)
{
    // 0067 0327 0334;	
    // (ģ) LATIN SMALL LETTER G, COMBINING CEDILLA	[1D5A | 0020 004A 0030 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0067, 0x0327, 0x0334 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0030, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_100)
{
    // 0067 0334 0327;	
    // (g̴) LATIN SMALL LETTER G, COMBINING TILDE OVERLAY	[1D5A | 0020 004A 0030 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0067, 0x0334, 0x0327 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0030, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_101)
{
    // 0123 0334;	
    // (ģ) LATIN SMALL LETTER G WITH CEDILLA	[1D5A | 0020 004A 0030 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0123, 0x0334 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0030, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_102)
{
    // 0047 0327 0334;	
    // (Ģ) LATIN CAPITAL LETTER G, COMBINING CEDILLA	[1D5A | 0020 004A 0030 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0047, 0x0327, 0x0334 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0030, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_103)
{
    // 0047 0334 0327;	
    // (G̴) LATIN CAPITAL LETTER G, COMBINING TILDE OVERLAY	[1D5A | 0020 004A 0030 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0047, 0x0334, 0x0327 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0030, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_104)
{
    // 0122 0334;	
    // (Ģ) LATIN CAPITAL LETTER G WITH CEDILLA	[1D5A | 0020 004A 0030 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0122, 0x0334 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0030, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_105)
{
    // 0067 0304 0334;	
    // (ḡ) LATIN SMALL LETTER G, COMBINING MACRON	[1D5A | 0020 004A 0032 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0067, 0x0304, 0x0334 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_106)
{
    // 0067 0334 0304;	
    // (g̴) LATIN SMALL LETTER G, COMBINING TILDE OVERLAY	[1D5A | 0020 004A 0032 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0067, 0x0334, 0x0304 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_107)
{
    // 1E21 0334;	
    // (ḡ) LATIN SMALL LETTER G WITH MACRON	[1D5A | 0020 004A 0032 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E21, 0x0334 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_108)
{
    // 0047 0304 0334;	
    // (Ḡ) LATIN CAPITAL LETTER G, COMBINING MACRON	[1D5A | 0020 004A 0032 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0047, 0x0304, 0x0334 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_109)
{
    // 0047 0334 0304;	
    // (G̴) LATIN CAPITAL LETTER G, COMBINING TILDE OVERLAY	[1D5A | 0020 004A 0032 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0047, 0x0334, 0x0304 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_110)
{
    // 1E20 0334;	
    // (Ḡ) LATIN CAPITAL LETTER G WITH MACRON	[1D5A | 0020 004A 0032 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E20, 0x0334 };
    uint32_t const ces[10] = { 0x1D5A, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_111)
{
    // 0334 1DDA;	
    // (ᷚ) COMBINING LATIN SMALL LETTER G	[1D5A | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x1DDA };
    uint32_t const ces[8] = { 0x1D5A, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_112)
{
    // 1DDA 0334;	
    // (ᷚ) COMBINING LATIN SMALL LETTER G	[1D5A | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x1DDA, 0x0334 };
    uint32_t const ces[8] = { 0x1D5A, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_113)
{
    // 0067 0021;	
    // (g) LATIN SMALL LETTER G	[1D5A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0067, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_114)
{
    // FF47 0021;	
    // (ｇ) FULLWIDTH LATIN SMALL LETTER G	[1D5A 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF47, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_115)
{
    // 1DDA 0021;	
    // (ᷚ) COMBINING LATIN SMALL LETTER G	[1D5A 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DDA, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_116)
{
    // 210A 0021;	
    // (ℊ) SCRIPT SMALL G	[1D5A 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x210A, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_117)
{
    // 1D420 0021;	
    // (𝐠) MATHEMATICAL BOLD SMALL G	[1D5A 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D420, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_118)
{
    // 1D454 0021;	
    // (𝑔) MATHEMATICAL ITALIC SMALL G	[1D5A 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D454, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_119)
{
    // 1D488 0021;	
    // (𝒈) MATHEMATICAL BOLD ITALIC SMALL G	[1D5A 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D488, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_120)
{
    // 1D4F0 0021;	
    // (𝓰) MATHEMATICAL BOLD SCRIPT SMALL G	[1D5A 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4F0, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_121)
{
    // 1D524 0021;	
    // (𝔤) MATHEMATICAL FRAKTUR SMALL G	[1D5A 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D524, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_122)
{
    // 1D558 0021;	
    // (𝕘) MATHEMATICAL DOUBLE-STRUCK SMALL G	[1D5A 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D558, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_123)
{
    // 1D58C 0021;	
    // (𝖌) MATHEMATICAL BOLD FRAKTUR SMALL G	[1D5A 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D58C, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_124)
{
    // 1D5C0 0021;	
    // (𝗀) MATHEMATICAL SANS-SERIF SMALL G	[1D5A 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5C0, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_125)
{
    // 1D5F4 0021;	
    // (𝗴) MATHEMATICAL SANS-SERIF BOLD SMALL G	[1D5A 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5F4, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_126)
{
    // 1D628 0021;	
    // (𝘨) MATHEMATICAL SANS-SERIF ITALIC SMALL G	[1D5A 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D628, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_127)
{
    // 1D65C 0021;	
    // (𝙜) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL G	[1D5A 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D65C, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_128)
{
    // 1D690 0021;	
    // (𝚐) MATHEMATICAL MONOSPACE SMALL G	[1D5A 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D690, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_129)
{
    // 24D6 0021;	
    // (ⓖ) CIRCLED LATIN SMALL LETTER G	[1D5A 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24D6, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_130)
{
    // 0047 0021;	
    // (G) LATIN CAPITAL LETTER G	[1D5A 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0047, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_131)
{
    // FF27 0021;	
    // (Ｇ) FULLWIDTH LATIN CAPITAL LETTER G	[1D5A 0261 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF27, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_132)
{
    // 1D406 0021;	
    // (𝐆) MATHEMATICAL BOLD CAPITAL G	[1D5A 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D406, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_133)
{
    // 1D43A 0021;	
    // (𝐺) MATHEMATICAL ITALIC CAPITAL G	[1D5A 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D43A, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_134)
{
    // 1D46E 0021;	
    // (𝑮) MATHEMATICAL BOLD ITALIC CAPITAL G	[1D5A 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D46E, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_135)
{
    // 1D4A2 0021;	
    // (𝒢) MATHEMATICAL SCRIPT CAPITAL G	[1D5A 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4A2, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_136)
{
    // 1D4D6 0021;	
    // (𝓖) MATHEMATICAL BOLD SCRIPT CAPITAL G	[1D5A 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4D6, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_137)
{
    // 1D50A 0021;	
    // (𝔊) MATHEMATICAL FRAKTUR CAPITAL G	[1D5A 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D50A, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_138)
{
    // 1D53E 0021;	
    // (𝔾) MATHEMATICAL DOUBLE-STRUCK CAPITAL G	[1D5A 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D53E, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_139)
{
    // 1D572 0021;	
    // (𝕲) MATHEMATICAL BOLD FRAKTUR CAPITAL G	[1D5A 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D572, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_140)
{
    // 1D5A6 0021;	
    // (𝖦) MATHEMATICAL SANS-SERIF CAPITAL G	[1D5A 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5A6, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_141)
{
    // 1D5DA 0021;	
    // (𝗚) MATHEMATICAL SANS-SERIF BOLD CAPITAL G	[1D5A 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5DA, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_142)
{
    // 1D60E 0021;	
    // (𝘎) MATHEMATICAL SANS-SERIF ITALIC CAPITAL G	[1D5A 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D60E, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_143)
{
    // 1D642 0021;	
    // (𝙂) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL G	[1D5A 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D642, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_144)
{
    // 1D676 0021;	
    // (𝙶) MATHEMATICAL MONOSPACE CAPITAL G	[1D5A 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D676, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_145)
{
    // 24BC 0021;	
    // (Ⓖ) CIRCLED LATIN CAPITAL LETTER G	[1D5A 0261 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24BC, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_146)
{
    // 1F156 0021;	
    // (🅖) NEGATIVE CIRCLED LATIN CAPITAL LETTER G	[1D5A 0261 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F156, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_147)
{
    // 1D4D 0021;	
    // (ᵍ) MODIFIER LETTER SMALL G	[1D5A 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D4D, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_148)
{
    // 1D33 0021;	
    // (ᴳ) MODIFIER LETTER CAPITAL G	[1D5A 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D33, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_149)
{
    // 1F136 0021;	
    // (🄶) SQUARED LATIN CAPITAL LETTER G	[1D5A 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F136, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_150)
{
    // 1F176 0021;	
    // (🅶) NEGATIVE SQUARED LATIN CAPITAL LETTER G	[1D5A 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F176, 0x0021 };
    uint32_t const ces[9] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_151)
{
    // 01F5 0021;	
    // (ǵ) LATIN SMALL LETTER G WITH ACUTE	[1D5A 0261 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01F5, 0x0021 };
    uint32_t const ces[11] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_152)
{
    // 01F4 0021;	
    // (Ǵ) LATIN CAPITAL LETTER G WITH ACUTE	[1D5A 0261 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01F4, 0x0021 };
    uint32_t const ces[11] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_153)
{
    // 011F 0021;	
    // (ğ) LATIN SMALL LETTER G WITH BREVE	[1D5A 0261 | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x011F, 0x0021 };
    uint32_t const ces[11] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_154)
{
    // 011E 0021;	
    // (Ğ) LATIN CAPITAL LETTER G WITH BREVE	[1D5A 0261 | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x011E, 0x0021 };
    uint32_t const ces[11] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_155)
{
    // 011D 0021;	
    // (ĝ) LATIN SMALL LETTER G WITH CIRCUMFLEX	[1D5A 0261 | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x011D, 0x0021 };
    uint32_t const ces[11] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_156)
{
    // 011C 0021;	
    // (Ĝ) LATIN CAPITAL LETTER G WITH CIRCUMFLEX	[1D5A 0261 | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x011C, 0x0021 };
    uint32_t const ces[11] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_157)
{
    // 01E7 0021;	
    // (ǧ) LATIN SMALL LETTER G WITH CARON	[1D5A 0261 | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01E7, 0x0021 };
    uint32_t const ces[11] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_158)
{
    // 01E6 0021;	
    // (Ǧ) LATIN CAPITAL LETTER G WITH CARON	[1D5A 0261 | 0020 0028 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01E6, 0x0021 };
    uint32_t const ces[11] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_159)
{
    // 0121 0021;	
    // (ġ) LATIN SMALL LETTER G WITH DOT ABOVE	[1D5A 0261 | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0121, 0x0021 };
    uint32_t const ces[11] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_160)
{
    // 0120 0021;	
    // (Ġ) LATIN CAPITAL LETTER G WITH DOT ABOVE	[1D5A 0261 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0120, 0x0021 };
    uint32_t const ces[11] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_161)
{
    // 0123 0021;	
    // (ģ) LATIN SMALL LETTER G WITH CEDILLA	[1D5A 0261 | 0020 0030 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0123, 0x0021 };
    uint32_t const ces[11] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_162)
{
    // 0122 0021;	
    // (Ģ) LATIN CAPITAL LETTER G WITH CEDILLA	[1D5A 0261 | 0020 0030 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0122, 0x0021 };
    uint32_t const ces[11] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_163)
{
    // 1E21 0021;	
    // (ḡ) LATIN SMALL LETTER G WITH MACRON	[1D5A 0261 | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E21, 0x0021 };
    uint32_t const ces[11] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_164)
{
    // 1E20 0021;	
    // (Ḡ) LATIN CAPITAL LETTER G WITH MACRON	[1D5A 0261 | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E20, 0x0021 };
    uint32_t const ces[11] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_165)
{
    // A7A1 0021;	
    // (ꞡ) LATIN SMALL LETTER G WITH OBLIQUE STROKE	[1D5A 0261 | 0020 0035 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA7A1, 0x0021 };
    uint32_t const ces[11] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0035, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_166)
{
    // A7A0 0021;	
    // (Ꞡ) LATIN CAPITAL LETTER G WITH OBLIQUE STROKE	[1D5A 0261 | 0020 0035 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0xA7A0, 0x0021 };
    uint32_t const ces[11] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0035, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_167)
{
    // 1D79 0021;	
    // (ᵹ) LATIN SMALL LETTER INSULAR G	[1D5A 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1D79, 0x0021 };
    uint32_t const ces[11] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_168)
{
    // A77D 0021;	
    // (Ᵹ) LATIN CAPITAL LETTER INSULAR G	[1D5A 0261 | 0020 0112 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0xA77D, 0x0021 };
    uint32_t const ces[11] = { 0x1D5A, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_169)
{
    // 0067 003F;	
    // (g) LATIN SMALL LETTER G	[1D5A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0067, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_170)
{
    // FF47 003F;	
    // (ｇ) FULLWIDTH LATIN SMALL LETTER G	[1D5A 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF47, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_171)
{
    // 1DDA 003F;	
    // (ᷚ) COMBINING LATIN SMALL LETTER G	[1D5A 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DDA, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_172)
{
    // 210A 003F;	
    // (ℊ) SCRIPT SMALL G	[1D5A 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x210A, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_173)
{
    // 1D420 003F;	
    // (𝐠) MATHEMATICAL BOLD SMALL G	[1D5A 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D420, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_174)
{
    // 1D454 003F;	
    // (𝑔) MATHEMATICAL ITALIC SMALL G	[1D5A 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D454, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_175)
{
    // 1D488 003F;	
    // (𝒈) MATHEMATICAL BOLD ITALIC SMALL G	[1D5A 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D488, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_176)
{
    // 1D4F0 003F;	
    // (𝓰) MATHEMATICAL BOLD SCRIPT SMALL G	[1D5A 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4F0, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_177)
{
    // 1D524 003F;	
    // (𝔤) MATHEMATICAL FRAKTUR SMALL G	[1D5A 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D524, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_178)
{
    // 1D558 003F;	
    // (𝕘) MATHEMATICAL DOUBLE-STRUCK SMALL G	[1D5A 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D558, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_179)
{
    // 1D58C 003F;	
    // (𝖌) MATHEMATICAL BOLD FRAKTUR SMALL G	[1D5A 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D58C, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_180)
{
    // 1D5C0 003F;	
    // (𝗀) MATHEMATICAL SANS-SERIF SMALL G	[1D5A 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5C0, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_181)
{
    // 1D5F4 003F;	
    // (𝗴) MATHEMATICAL SANS-SERIF BOLD SMALL G	[1D5A 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5F4, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_182)
{
    // 1D628 003F;	
    // (𝘨) MATHEMATICAL SANS-SERIF ITALIC SMALL G	[1D5A 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D628, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_183)
{
    // 1D65C 003F;	
    // (𝙜) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL G	[1D5A 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D65C, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_184)
{
    // 1D690 003F;	
    // (𝚐) MATHEMATICAL MONOSPACE SMALL G	[1D5A 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D690, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_185)
{
    // 24D6 003F;	
    // (ⓖ) CIRCLED LATIN SMALL LETTER G	[1D5A 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24D6, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_186)
{
    // 0047 003F;	
    // (G) LATIN CAPITAL LETTER G	[1D5A 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0047, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_187)
{
    // FF27 003F;	
    // (Ｇ) FULLWIDTH LATIN CAPITAL LETTER G	[1D5A 0267 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF27, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_188)
{
    // 1D406 003F;	
    // (𝐆) MATHEMATICAL BOLD CAPITAL G	[1D5A 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D406, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_189)
{
    // 1D43A 003F;	
    // (𝐺) MATHEMATICAL ITALIC CAPITAL G	[1D5A 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D43A, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_190)
{
    // 1D46E 003F;	
    // (𝑮) MATHEMATICAL BOLD ITALIC CAPITAL G	[1D5A 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D46E, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_191)
{
    // 1D4A2 003F;	
    // (𝒢) MATHEMATICAL SCRIPT CAPITAL G	[1D5A 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4A2, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_192)
{
    // 1D4D6 003F;	
    // (𝓖) MATHEMATICAL BOLD SCRIPT CAPITAL G	[1D5A 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4D6, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_193)
{
    // 1D50A 003F;	
    // (𝔊) MATHEMATICAL FRAKTUR CAPITAL G	[1D5A 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D50A, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_194)
{
    // 1D53E 003F;	
    // (𝔾) MATHEMATICAL DOUBLE-STRUCK CAPITAL G	[1D5A 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D53E, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_195)
{
    // 1D572 003F;	
    // (𝕲) MATHEMATICAL BOLD FRAKTUR CAPITAL G	[1D5A 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D572, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_196)
{
    // 1D5A6 003F;	
    // (𝖦) MATHEMATICAL SANS-SERIF CAPITAL G	[1D5A 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5A6, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_197)
{
    // 1D5DA 003F;	
    // (𝗚) MATHEMATICAL SANS-SERIF BOLD CAPITAL G	[1D5A 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5DA, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_198)
{
    // 1D60E 003F;	
    // (𝘎) MATHEMATICAL SANS-SERIF ITALIC CAPITAL G	[1D5A 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D60E, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_199)
{
    // 1D642 003F;	
    // (𝙂) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL G	[1D5A 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D642, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_200)
{
    // 1D676 003F;	
    // (𝙶) MATHEMATICAL MONOSPACE CAPITAL G	[1D5A 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D676, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_201)
{
    // 24BC 003F;	
    // (Ⓖ) CIRCLED LATIN CAPITAL LETTER G	[1D5A 0267 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24BC, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_202)
{
    // 1F156 003F;	
    // (🅖) NEGATIVE CIRCLED LATIN CAPITAL LETTER G	[1D5A 0267 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F156, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_203)
{
    // 1D4D 003F;	
    // (ᵍ) MODIFIER LETTER SMALL G	[1D5A 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D4D, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_204)
{
    // 1D33 003F;	
    // (ᴳ) MODIFIER LETTER CAPITAL G	[1D5A 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D33, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_205)
{
    // 1F136 003F;	
    // (🄶) SQUARED LATIN CAPITAL LETTER G	[1D5A 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F136, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_206)
{
    // 1F176 003F;	
    // (🅶) NEGATIVE SQUARED LATIN CAPITAL LETTER G	[1D5A 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F176, 0x003F };
    uint32_t const ces[9] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_207)
{
    // 01F5 003F;	
    // (ǵ) LATIN SMALL LETTER G WITH ACUTE	[1D5A 0267 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01F5, 0x003F };
    uint32_t const ces[11] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_208)
{
    // 01F4 003F;	
    // (Ǵ) LATIN CAPITAL LETTER G WITH ACUTE	[1D5A 0267 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01F4, 0x003F };
    uint32_t const ces[11] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_209)
{
    // 011F 003F;	
    // (ğ) LATIN SMALL LETTER G WITH BREVE	[1D5A 0267 | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x011F, 0x003F };
    uint32_t const ces[11] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_210)
{
    // 011E 003F;	
    // (Ğ) LATIN CAPITAL LETTER G WITH BREVE	[1D5A 0267 | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x011E, 0x003F };
    uint32_t const ces[11] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_211)
{
    // 011D 003F;	
    // (ĝ) LATIN SMALL LETTER G WITH CIRCUMFLEX	[1D5A 0267 | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x011D, 0x003F };
    uint32_t const ces[11] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_212)
{
    // 011C 003F;	
    // (Ĝ) LATIN CAPITAL LETTER G WITH CIRCUMFLEX	[1D5A 0267 | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x011C, 0x003F };
    uint32_t const ces[11] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_213)
{
    // 01E7 003F;	
    // (ǧ) LATIN SMALL LETTER G WITH CARON	[1D5A 0267 | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01E7, 0x003F };
    uint32_t const ces[11] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_214)
{
    // 01E6 003F;	
    // (Ǧ) LATIN CAPITAL LETTER G WITH CARON	[1D5A 0267 | 0020 0028 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01E6, 0x003F };
    uint32_t const ces[11] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_215)
{
    // 0121 003F;	
    // (ġ) LATIN SMALL LETTER G WITH DOT ABOVE	[1D5A 0267 | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0121, 0x003F };
    uint32_t const ces[11] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_216)
{
    // 0120 003F;	
    // (Ġ) LATIN CAPITAL LETTER G WITH DOT ABOVE	[1D5A 0267 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0120, 0x003F };
    uint32_t const ces[11] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_217)
{
    // 0123 003F;	
    // (ģ) LATIN SMALL LETTER G WITH CEDILLA	[1D5A 0267 | 0020 0030 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0123, 0x003F };
    uint32_t const ces[11] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_218)
{
    // 0122 003F;	
    // (Ģ) LATIN CAPITAL LETTER G WITH CEDILLA	[1D5A 0267 | 0020 0030 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0122, 0x003F };
    uint32_t const ces[11] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_219)
{
    // 1E21 003F;	
    // (ḡ) LATIN SMALL LETTER G WITH MACRON	[1D5A 0267 | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E21, 0x003F };
    uint32_t const ces[11] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_220)
{
    // 1E20 003F;	
    // (Ḡ) LATIN CAPITAL LETTER G WITH MACRON	[1D5A 0267 | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E20, 0x003F };
    uint32_t const ces[11] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_221)
{
    // A7A1 003F;	
    // (ꞡ) LATIN SMALL LETTER G WITH OBLIQUE STROKE	[1D5A 0267 | 0020 0035 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA7A1, 0x003F };
    uint32_t const ces[11] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0035, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_222)
{
    // A7A0 003F;	
    // (Ꞡ) LATIN CAPITAL LETTER G WITH OBLIQUE STROKE	[1D5A 0267 | 0020 0035 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0xA7A0, 0x003F };
    uint32_t const ces[11] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0035, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_223)
{
    // 1D79 003F;	
    // (ᵹ) LATIN SMALL LETTER INSULAR G	[1D5A 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1D79, 0x003F };
    uint32_t const ces[11] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_224)
{
    // A77D 003F;	
    // (Ᵹ) LATIN CAPITAL LETTER INSULAR G	[1D5A 0267 | 0020 0112 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0xA77D, 0x003F };
    uint32_t const ces[11] = { 0x1D5A, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_225)
{
    // 0067 0061;	
    // (g) LATIN SMALL LETTER G	[1D5A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0067, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_226)
{
    // 0067 0041;	
    // (g) LATIN SMALL LETTER G	[1D5A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0067, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_227)
{
    // FF47 0061;	
    // (ｇ) FULLWIDTH LATIN SMALL LETTER G	[1D5A 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF47, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_228)
{
    // FF47 0041;	
    // (ｇ) FULLWIDTH LATIN SMALL LETTER G	[1D5A 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF47, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_229)
{
    // 1DDA 0061;	
    // (ᷚ) COMBINING LATIN SMALL LETTER G	[1D5A 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DDA, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_230)
{
    // 1DDA 0041;	
    // (ᷚ) COMBINING LATIN SMALL LETTER G	[1D5A 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1DDA, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_231)
{
    // 210A 0061;	
    // (ℊ) SCRIPT SMALL G	[1D5A 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x210A, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_232)
{
    // 1D420 0061;	
    // (𝐠) MATHEMATICAL BOLD SMALL G	[1D5A 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D420, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_233)
{
    // 1D454 0061;	
    // (𝑔) MATHEMATICAL ITALIC SMALL G	[1D5A 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D454, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_234)
{
    // 1D488 0061;	
    // (𝒈) MATHEMATICAL BOLD ITALIC SMALL G	[1D5A 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D488, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_235)
{
    // 1D4F0 0061;	
    // (𝓰) MATHEMATICAL BOLD SCRIPT SMALL G	[1D5A 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4F0, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_236)
{
    // 1D524 0061;	
    // (𝔤) MATHEMATICAL FRAKTUR SMALL G	[1D5A 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D524, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_237)
{
    // 1D558 0061;	
    // (𝕘) MATHEMATICAL DOUBLE-STRUCK SMALL G	[1D5A 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D558, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_238)
{
    // 1D58C 0061;	
    // (𝖌) MATHEMATICAL BOLD FRAKTUR SMALL G	[1D5A 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D58C, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_239)
{
    // 1D5C0 0061;	
    // (𝗀) MATHEMATICAL SANS-SERIF SMALL G	[1D5A 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5C0, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_240)
{
    // 1D5F4 0061;	
    // (𝗴) MATHEMATICAL SANS-SERIF BOLD SMALL G	[1D5A 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5F4, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_241)
{
    // 1D628 0061;	
    // (𝘨) MATHEMATICAL SANS-SERIF ITALIC SMALL G	[1D5A 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D628, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_242)
{
    // 1D65C 0061;	
    // (𝙜) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL G	[1D5A 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D65C, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_243)
{
    // 1D690 0061;	
    // (𝚐) MATHEMATICAL MONOSPACE SMALL G	[1D5A 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D690, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_244)
{
    // 210A 0041;	
    // (ℊ) SCRIPT SMALL G	[1D5A 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x210A, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_245)
{
    // 1D420 0041;	
    // (𝐠) MATHEMATICAL BOLD SMALL G	[1D5A 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D420, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_246)
{
    // 1D454 0041;	
    // (𝑔) MATHEMATICAL ITALIC SMALL G	[1D5A 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D454, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_247)
{
    // 1D488 0041;	
    // (𝒈) MATHEMATICAL BOLD ITALIC SMALL G	[1D5A 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D488, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_248)
{
    // 1D4F0 0041;	
    // (𝓰) MATHEMATICAL BOLD SCRIPT SMALL G	[1D5A 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D4F0, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_249)
{
    // 1D524 0041;	
    // (𝔤) MATHEMATICAL FRAKTUR SMALL G	[1D5A 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D524, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_250)
{
    // 1D558 0041;	
    // (𝕘) MATHEMATICAL DOUBLE-STRUCK SMALL G	[1D5A 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D558, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_251)
{
    // 1D58C 0041;	
    // (𝖌) MATHEMATICAL BOLD FRAKTUR SMALL G	[1D5A 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D58C, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_252)
{
    // 1D5C0 0041;	
    // (𝗀) MATHEMATICAL SANS-SERIF SMALL G	[1D5A 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D5C0, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_253)
{
    // 1D5F4 0041;	
    // (𝗴) MATHEMATICAL SANS-SERIF BOLD SMALL G	[1D5A 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D5F4, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_254)
{
    // 1D628 0041;	
    // (𝘨) MATHEMATICAL SANS-SERIF ITALIC SMALL G	[1D5A 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D628, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_255)
{
    // 1D65C 0041;	
    // (𝙜) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL G	[1D5A 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D65C, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_256)
{
    // 1D690 0041;	
    // (𝚐) MATHEMATICAL MONOSPACE SMALL G	[1D5A 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D690, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_257)
{
    // 24D6 0061;	
    // (ⓖ) CIRCLED LATIN SMALL LETTER G	[1D5A 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24D6, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_258)
{
    // 24D6 0041;	
    // (ⓖ) CIRCLED LATIN SMALL LETTER G	[1D5A 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x24D6, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_259)
{
    // 0047 0061;	
    // (G) LATIN CAPITAL LETTER G	[1D5A 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0047, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_260)
{
    // 0047 0041;	
    // (G) LATIN CAPITAL LETTER G	[1D5A 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0047, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_261)
{
    // FF27 0061;	
    // (Ｇ) FULLWIDTH LATIN CAPITAL LETTER G	[1D5A 1CAD | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF27, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_262)
{
    // FF27 0041;	
    // (Ｇ) FULLWIDTH LATIN CAPITAL LETTER G	[1D5A 1CAD | 0020 0020 | 0009 0008 |]

    uint32_t cps[2] = { 0xFF27, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_263)
{
    // 1D406 0061;	
    // (𝐆) MATHEMATICAL BOLD CAPITAL G	[1D5A 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D406, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_264)
{
    // 1D43A 0061;	
    // (𝐺) MATHEMATICAL ITALIC CAPITAL G	[1D5A 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D43A, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_265)
{
    // 1D46E 0061;	
    // (𝑮) MATHEMATICAL BOLD ITALIC CAPITAL G	[1D5A 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D46E, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_266)
{
    // 1D4A2 0061;	
    // (𝒢) MATHEMATICAL SCRIPT CAPITAL G	[1D5A 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4A2, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_267)
{
    // 1D4D6 0061;	
    // (𝓖) MATHEMATICAL BOLD SCRIPT CAPITAL G	[1D5A 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4D6, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_268)
{
    // 1D50A 0061;	
    // (𝔊) MATHEMATICAL FRAKTUR CAPITAL G	[1D5A 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D50A, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_269)
{
    // 1D53E 0061;	
    // (𝔾) MATHEMATICAL DOUBLE-STRUCK CAPITAL G	[1D5A 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D53E, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_270)
{
    // 1D572 0061;	
    // (𝕲) MATHEMATICAL BOLD FRAKTUR CAPITAL G	[1D5A 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D572, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_271)
{
    // 1D5A6 0061;	
    // (𝖦) MATHEMATICAL SANS-SERIF CAPITAL G	[1D5A 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5A6, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_272)
{
    // 1D5DA 0061;	
    // (𝗚) MATHEMATICAL SANS-SERIF BOLD CAPITAL G	[1D5A 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5DA, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_273)
{
    // 1D60E 0061;	
    // (𝘎) MATHEMATICAL SANS-SERIF ITALIC CAPITAL G	[1D5A 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D60E, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_274)
{
    // 1D642 0061;	
    // (𝙂) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL G	[1D5A 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D642, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_275)
{
    // 1D676 0061;	
    // (𝙶) MATHEMATICAL MONOSPACE CAPITAL G	[1D5A 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D676, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_276)
{
    // 1D406 0041;	
    // (𝐆) MATHEMATICAL BOLD CAPITAL G	[1D5A 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D406, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_277)
{
    // 1D43A 0041;	
    // (𝐺) MATHEMATICAL ITALIC CAPITAL G	[1D5A 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D43A, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_278)
{
    // 1D46E 0041;	
    // (𝑮) MATHEMATICAL BOLD ITALIC CAPITAL G	[1D5A 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D46E, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_279)
{
    // 1D4A2 0041;	
    // (𝒢) MATHEMATICAL SCRIPT CAPITAL G	[1D5A 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D4A2, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_280)
{
    // 1D4D6 0041;	
    // (𝓖) MATHEMATICAL BOLD SCRIPT CAPITAL G	[1D5A 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D4D6, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_281)
{
    // 1D50A 0041;	
    // (𝔊) MATHEMATICAL FRAKTUR CAPITAL G	[1D5A 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D50A, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_282)
{
    // 1D53E 0041;	
    // (𝔾) MATHEMATICAL DOUBLE-STRUCK CAPITAL G	[1D5A 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D53E, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_283)
{
    // 1D572 0041;	
    // (𝕲) MATHEMATICAL BOLD FRAKTUR CAPITAL G	[1D5A 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D572, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_284)
{
    // 1D5A6 0041;	
    // (𝖦) MATHEMATICAL SANS-SERIF CAPITAL G	[1D5A 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D5A6, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_285)
{
    // 1D5DA 0041;	
    // (𝗚) MATHEMATICAL SANS-SERIF BOLD CAPITAL G	[1D5A 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D5DA, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_286)
{
    // 1D60E 0041;	
    // (𝘎) MATHEMATICAL SANS-SERIF ITALIC CAPITAL G	[1D5A 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D60E, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_287)
{
    // 1D642 0041;	
    // (𝙂) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL G	[1D5A 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D642, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_288)
{
    // 1D676 0041;	
    // (𝙶) MATHEMATICAL MONOSPACE CAPITAL G	[1D5A 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D676, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_289)
{
    // 24BC 0061;	
    // (Ⓖ) CIRCLED LATIN CAPITAL LETTER G	[1D5A 1CAD | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24BC, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_290)
{
    // 1F156 0061;	
    // (🅖) NEGATIVE CIRCLED LATIN CAPITAL LETTER G	[1D5A 1CAD | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F156, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_291)
{
    // 24BC 0041;	
    // (Ⓖ) CIRCLED LATIN CAPITAL LETTER G	[1D5A 1CAD | 0020 0020 | 000C 0008 |]

    uint32_t cps[2] = { 0x24BC, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_292)
{
    // 1F156 0041;	
    // (🅖) NEGATIVE CIRCLED LATIN CAPITAL LETTER G	[1D5A 1CAD | 0020 0020 | 000C 0008 |]

    uint32_t cps[2] = { 0x1F156, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_293)
{
    // 1D4D 0061;	
    // (ᵍ) MODIFIER LETTER SMALL G	[1D5A 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D4D, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_294)
{
    // 1D4D 0041;	
    // (ᵍ) MODIFIER LETTER SMALL G	[1D5A 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x1D4D, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_295)
{
    // 1D33 0061;	
    // (ᴳ) MODIFIER LETTER CAPITAL G	[1D5A 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D33, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_296)
{
    // 1F136 0061;	
    // (🄶) SQUARED LATIN CAPITAL LETTER G	[1D5A 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F136, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_297)
{
    // 1F176 0061;	
    // (🅶) NEGATIVE SQUARED LATIN CAPITAL LETTER G	[1D5A 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F176, 0x0061 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_298)
{
    // 1D33 0041;	
    // (ᴳ) MODIFIER LETTER CAPITAL G	[1D5A 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1D33, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_299)
{
    // 1F136 0041;	
    // (🄶) SQUARED LATIN CAPITAL LETTER G	[1D5A 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1F136, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_300)
{
    // 1F176 0041;	
    // (🅶) NEGATIVE SQUARED LATIN CAPITAL LETTER G	[1D5A 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1F176, 0x0041 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_301)
{
    // 01F5 0061;	
    // (ǵ) LATIN SMALL LETTER G WITH ACUTE	[1D5A 1CAD | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01F5, 0x0061 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_302)
{
    // 01F5 0041;	
    // (ǵ) LATIN SMALL LETTER G WITH ACUTE	[1D5A 1CAD | 0020 0024 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x01F5, 0x0041 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_303)
{
    // 01F4 0061;	
    // (Ǵ) LATIN CAPITAL LETTER G WITH ACUTE	[1D5A 1CAD | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01F4, 0x0061 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_304)
{
    // 01F4 0041;	
    // (Ǵ) LATIN CAPITAL LETTER G WITH ACUTE	[1D5A 1CAD | 0020 0024 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x01F4, 0x0041 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_305)
{
    // 011F 0061;	
    // (ğ) LATIN SMALL LETTER G WITH BREVE	[1D5A 1CAD | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x011F, 0x0061 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_306)
{
    // 011F 0041;	
    // (ğ) LATIN SMALL LETTER G WITH BREVE	[1D5A 1CAD | 0020 0026 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x011F, 0x0041 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_307)
{
    // 011E 0061;	
    // (Ğ) LATIN CAPITAL LETTER G WITH BREVE	[1D5A 1CAD | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x011E, 0x0061 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_308)
{
    // 011E 0041;	
    // (Ğ) LATIN CAPITAL LETTER G WITH BREVE	[1D5A 1CAD | 0020 0026 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x011E, 0x0041 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_309)
{
    // 011D 0061;	
    // (ĝ) LATIN SMALL LETTER G WITH CIRCUMFLEX	[1D5A 1CAD | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x011D, 0x0061 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_310)
{
    // 011D 0041;	
    // (ĝ) LATIN SMALL LETTER G WITH CIRCUMFLEX	[1D5A 1CAD | 0020 0027 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x011D, 0x0041 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_311)
{
    // 011C 0061;	
    // (Ĝ) LATIN CAPITAL LETTER G WITH CIRCUMFLEX	[1D5A 1CAD | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x011C, 0x0061 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_312)
{
    // 011C 0041;	
    // (Ĝ) LATIN CAPITAL LETTER G WITH CIRCUMFLEX	[1D5A 1CAD | 0020 0027 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x011C, 0x0041 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_313)
{
    // 01E7 0061;	
    // (ǧ) LATIN SMALL LETTER G WITH CARON	[1D5A 1CAD | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01E7, 0x0061 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_314)
{
    // 01E7 0041;	
    // (ǧ) LATIN SMALL LETTER G WITH CARON	[1D5A 1CAD | 0020 0028 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x01E7, 0x0041 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_315)
{
    // 01E6 0061;	
    // (Ǧ) LATIN CAPITAL LETTER G WITH CARON	[1D5A 1CAD | 0020 0028 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01E6, 0x0061 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_316)
{
    // 01E6 0041;	
    // (Ǧ) LATIN CAPITAL LETTER G WITH CARON	[1D5A 1CAD | 0020 0028 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x01E6, 0x0041 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_317)
{
    // 0121 0061;	
    // (ġ) LATIN SMALL LETTER G WITH DOT ABOVE	[1D5A 1CAD | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0121, 0x0061 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_318)
{
    // 0121 0041;	
    // (ġ) LATIN SMALL LETTER G WITH DOT ABOVE	[1D5A 1CAD | 0020 002E 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0121, 0x0041 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_319)
{
    // 0120 0061;	
    // (Ġ) LATIN CAPITAL LETTER G WITH DOT ABOVE	[1D5A 1CAD | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0120, 0x0061 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_320)
{
    // 0120 0041;	
    // (Ġ) LATIN CAPITAL LETTER G WITH DOT ABOVE	[1D5A 1CAD | 0020 002E 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0120, 0x0041 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_321)
{
    // 0123 0061;	
    // (ģ) LATIN SMALL LETTER G WITH CEDILLA	[1D5A 1CAD | 0020 0030 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0123, 0x0061 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_322)
{
    // 0123 0041;	
    // (ģ) LATIN SMALL LETTER G WITH CEDILLA	[1D5A 1CAD | 0020 0030 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0123, 0x0041 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_323)
{
    // 0122 0061;	
    // (Ģ) LATIN CAPITAL LETTER G WITH CEDILLA	[1D5A 1CAD | 0020 0030 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0122, 0x0061 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_324)
{
    // 0122 0041;	
    // (Ģ) LATIN CAPITAL LETTER G WITH CEDILLA	[1D5A 1CAD | 0020 0030 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0122, 0x0041 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_325)
{
    // 1E21 0061;	
    // (ḡ) LATIN SMALL LETTER G WITH MACRON	[1D5A 1CAD | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E21, 0x0061 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_326)
{
    // 1E21 0041;	
    // (ḡ) LATIN SMALL LETTER G WITH MACRON	[1D5A 1CAD | 0020 0032 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E21, 0x0041 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_327)
{
    // 1E20 0061;	
    // (Ḡ) LATIN CAPITAL LETTER G WITH MACRON	[1D5A 1CAD | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E20, 0x0061 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_328)
{
    // 1E20 0041;	
    // (Ḡ) LATIN CAPITAL LETTER G WITH MACRON	[1D5A 1CAD | 0020 0032 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1E20, 0x0041 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_329)
{
    // A7A1 0061;	
    // (ꞡ) LATIN SMALL LETTER G WITH OBLIQUE STROKE	[1D5A 1CAD | 0020 0035 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA7A1, 0x0061 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0035, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_330)
{
    // A7A1 0041;	
    // (ꞡ) LATIN SMALL LETTER G WITH OBLIQUE STROKE	[1D5A 1CAD | 0020 0035 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0xA7A1, 0x0041 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0035, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_331)
{
    // A7A0 0061;	
    // (Ꞡ) LATIN CAPITAL LETTER G WITH OBLIQUE STROKE	[1D5A 1CAD | 0020 0035 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0xA7A0, 0x0061 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0035, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_332)
{
    // A7A0 0041;	
    // (Ꞡ) LATIN CAPITAL LETTER G WITH OBLIQUE STROKE	[1D5A 1CAD | 0020 0035 0020 | 000A 0004 0008 |]

    uint32_t cps[2] = { 0xA7A0, 0x0041 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0035, 0x0020, 0x0000, 0x000A, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_333)
{
    // 1D79 0061;	
    // (ᵹ) LATIN SMALL LETTER INSULAR G	[1D5A 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1D79, 0x0061 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_334)
{
    // 1D79 0041;	
    // (ᵹ) LATIN SMALL LETTER INSULAR G	[1D5A 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1D79, 0x0041 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_335)
{
    // A77D 0061;	
    // (Ᵹ) LATIN CAPITAL LETTER INSULAR G	[1D5A 1CAD | 0020 0112 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0xA77D, 0x0061 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_336)
{
    // A77D 0041;	
    // (Ᵹ) LATIN CAPITAL LETTER INSULAR G	[1D5A 1CAD | 0020 0112 0020 | 000A 0004 0008 |]

    uint32_t cps[2] = { 0xA77D, 0x0041 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x000A, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_337)
{
    // 33FF 0021;	
    // (㏿) SQUARE GAL	[1D5A 1CAD 1DDD 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33FF, 0x0021 };
    uint32_t const ces[15] = { 0x1D5A, 0x1CAD, 0x1DDD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_338)
{
    // 33FF 003F;	
    // (㏿) SQUARE GAL	[1D5A 1CAD 1DDD 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33FF, 0x003F };
    uint32_t const ces[15] = { 0x1D5A, 0x1CAD, 0x1DDD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_339)
{
    // 33FF 0061;	
    // (㏿) SQUARE GAL	[1D5A 1CAD 1DDD 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33FF, 0x0061 };
    uint32_t const ces[15] = { 0x1D5A, 0x1CAD, 0x1DDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_340)
{
    // 33FF 0041;	
    // (㏿) SQUARE GAL	[1D5A 1CAD 1DDD 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x33FF, 0x0041 };
    uint32_t const ces[15] = { 0x1D5A, 0x1CAD, 0x1DDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_341)
{
    // 33FF 0062;	
    // (㏿) SQUARE GAL	[1D5A 1CAD 1DDD 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33FF, 0x0062 };
    uint32_t const ces[15] = { 0x1D5A, 0x1CAD, 0x1DDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_342)
{
    // 0067 0062;	
    // (g) LATIN SMALL LETTER G	[1D5A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0067, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_343)
{
    // FF47 0062;	
    // (ｇ) FULLWIDTH LATIN SMALL LETTER G	[1D5A 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF47, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_344)
{
    // 1DDA 0062;	
    // (ᷚ) COMBINING LATIN SMALL LETTER G	[1D5A 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DDA, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_345)
{
    // 210A 0062;	
    // (ℊ) SCRIPT SMALL G	[1D5A 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x210A, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_346)
{
    // 1D420 0062;	
    // (𝐠) MATHEMATICAL BOLD SMALL G	[1D5A 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D420, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_347)
{
    // 1D454 0062;	
    // (𝑔) MATHEMATICAL ITALIC SMALL G	[1D5A 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D454, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_348)
{
    // 1D488 0062;	
    // (𝒈) MATHEMATICAL BOLD ITALIC SMALL G	[1D5A 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D488, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_349)
{
    // 1D4F0 0062;	
    // (𝓰) MATHEMATICAL BOLD SCRIPT SMALL G	[1D5A 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4F0, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_350)
{
    // 1D524 0062;	
    // (𝔤) MATHEMATICAL FRAKTUR SMALL G	[1D5A 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D524, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_351)
{
    // 1D558 0062;	
    // (𝕘) MATHEMATICAL DOUBLE-STRUCK SMALL G	[1D5A 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D558, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_352)
{
    // 1D58C 0062;	
    // (𝖌) MATHEMATICAL BOLD FRAKTUR SMALL G	[1D5A 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D58C, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_353)
{
    // 1D5C0 0062;	
    // (𝗀) MATHEMATICAL SANS-SERIF SMALL G	[1D5A 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5C0, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_354)
{
    // 1D5F4 0062;	
    // (𝗴) MATHEMATICAL SANS-SERIF BOLD SMALL G	[1D5A 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5F4, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_355)
{
    // 1D628 0062;	
    // (𝘨) MATHEMATICAL SANS-SERIF ITALIC SMALL G	[1D5A 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D628, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_356)
{
    // 1D65C 0062;	
    // (𝙜) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL G	[1D5A 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D65C, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_357)
{
    // 1D690 0062;	
    // (𝚐) MATHEMATICAL MONOSPACE SMALL G	[1D5A 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D690, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_358)
{
    // 24D6 0062;	
    // (ⓖ) CIRCLED LATIN SMALL LETTER G	[1D5A 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24D6, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_359)
{
    // 0047 0062;	
    // (G) LATIN CAPITAL LETTER G	[1D5A 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0047, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_360)
{
    // FF27 0062;	
    // (Ｇ) FULLWIDTH LATIN CAPITAL LETTER G	[1D5A 1CC6 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF27, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_361)
{
    // 1D406 0062;	
    // (𝐆) MATHEMATICAL BOLD CAPITAL G	[1D5A 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D406, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_362)
{
    // 1D43A 0062;	
    // (𝐺) MATHEMATICAL ITALIC CAPITAL G	[1D5A 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D43A, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_363)
{
    // 1D46E 0062;	
    // (𝑮) MATHEMATICAL BOLD ITALIC CAPITAL G	[1D5A 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D46E, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_364)
{
    // 1D4A2 0062;	
    // (𝒢) MATHEMATICAL SCRIPT CAPITAL G	[1D5A 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4A2, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_365)
{
    // 1D4D6 0062;	
    // (𝓖) MATHEMATICAL BOLD SCRIPT CAPITAL G	[1D5A 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4D6, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_366)
{
    // 1D50A 0062;	
    // (𝔊) MATHEMATICAL FRAKTUR CAPITAL G	[1D5A 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D50A, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_367)
{
    // 1D53E 0062;	
    // (𝔾) MATHEMATICAL DOUBLE-STRUCK CAPITAL G	[1D5A 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D53E, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_368)
{
    // 1D572 0062;	
    // (𝕲) MATHEMATICAL BOLD FRAKTUR CAPITAL G	[1D5A 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D572, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_369)
{
    // 1D5A6 0062;	
    // (𝖦) MATHEMATICAL SANS-SERIF CAPITAL G	[1D5A 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5A6, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_370)
{
    // 1D5DA 0062;	
    // (𝗚) MATHEMATICAL SANS-SERIF BOLD CAPITAL G	[1D5A 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5DA, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_371)
{
    // 1D60E 0062;	
    // (𝘎) MATHEMATICAL SANS-SERIF ITALIC CAPITAL G	[1D5A 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D60E, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_372)
{
    // 1D642 0062;	
    // (𝙂) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL G	[1D5A 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D642, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_373)
{
    // 1D676 0062;	
    // (𝙶) MATHEMATICAL MONOSPACE CAPITAL G	[1D5A 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D676, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_374)
{
    // 24BC 0062;	
    // (Ⓖ) CIRCLED LATIN CAPITAL LETTER G	[1D5A 1CC6 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24BC, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_375)
{
    // 1F156 0062;	
    // (🅖) NEGATIVE CIRCLED LATIN CAPITAL LETTER G	[1D5A 1CC6 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F156, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_376)
{
    // 1D4D 0062;	
    // (ᵍ) MODIFIER LETTER SMALL G	[1D5A 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D4D, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_377)
{
    // 1D33 0062;	
    // (ᴳ) MODIFIER LETTER CAPITAL G	[1D5A 1CC6 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D33, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_378)
{
    // 1F136 0062;	
    // (🄶) SQUARED LATIN CAPITAL LETTER G	[1D5A 1CC6 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F136, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_379)
{
    // 1F176 0062;	
    // (🅶) NEGATIVE SQUARED LATIN CAPITAL LETTER G	[1D5A 1CC6 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F176, 0x0062 };
    uint32_t const ces[9] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_380)
{
    // 01F5 0062;	
    // (ǵ) LATIN SMALL LETTER G WITH ACUTE	[1D5A 1CC6 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01F5, 0x0062 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_381)
{
    // 01F4 0062;	
    // (Ǵ) LATIN CAPITAL LETTER G WITH ACUTE	[1D5A 1CC6 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01F4, 0x0062 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_382)
{
    // 011F 0062;	
    // (ğ) LATIN SMALL LETTER G WITH BREVE	[1D5A 1CC6 | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x011F, 0x0062 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_383)
{
    // 011E 0062;	
    // (Ğ) LATIN CAPITAL LETTER G WITH BREVE	[1D5A 1CC6 | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x011E, 0x0062 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_384)
{
    // 011D 0062;	
    // (ĝ) LATIN SMALL LETTER G WITH CIRCUMFLEX	[1D5A 1CC6 | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x011D, 0x0062 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_385)
{
    // 011C 0062;	
    // (Ĝ) LATIN CAPITAL LETTER G WITH CIRCUMFLEX	[1D5A 1CC6 | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x011C, 0x0062 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_386)
{
    // 01E7 0062;	
    // (ǧ) LATIN SMALL LETTER G WITH CARON	[1D5A 1CC6 | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01E7, 0x0062 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_387)
{
    // 01E6 0062;	
    // (Ǧ) LATIN CAPITAL LETTER G WITH CARON	[1D5A 1CC6 | 0020 0028 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01E6, 0x0062 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_388)
{
    // 0121 0062;	
    // (ġ) LATIN SMALL LETTER G WITH DOT ABOVE	[1D5A 1CC6 | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0121, 0x0062 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_389)
{
    // 0120 0062;	
    // (Ġ) LATIN CAPITAL LETTER G WITH DOT ABOVE	[1D5A 1CC6 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0120, 0x0062 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_390)
{
    // 0123 0062;	
    // (ģ) LATIN SMALL LETTER G WITH CEDILLA	[1D5A 1CC6 | 0020 0030 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0123, 0x0062 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_391)
{
    // 0122 0062;	
    // (Ģ) LATIN CAPITAL LETTER G WITH CEDILLA	[1D5A 1CC6 | 0020 0030 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0122, 0x0062 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_392)
{
    // 1E21 0062;	
    // (ḡ) LATIN SMALL LETTER G WITH MACRON	[1D5A 1CC6 | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E21, 0x0062 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_393)
{
    // 1E20 0062;	
    // (Ḡ) LATIN CAPITAL LETTER G WITH MACRON	[1D5A 1CC6 | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E20, 0x0062 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_394)
{
    // A7A1 0062;	
    // (ꞡ) LATIN SMALL LETTER G WITH OBLIQUE STROKE	[1D5A 1CC6 | 0020 0035 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA7A1, 0x0062 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0035, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_395)
{
    // A7A0 0062;	
    // (Ꞡ) LATIN CAPITAL LETTER G WITH OBLIQUE STROKE	[1D5A 1CC6 | 0020 0035 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0xA7A0, 0x0062 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0035, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_396)
{
    // 1D79 0062;	
    // (ᵹ) LATIN SMALL LETTER INSULAR G	[1D5A 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1D79, 0x0062 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_397)
{
    // A77D 0062;	
    // (Ᵹ) LATIN CAPITAL LETTER INSULAR G	[1D5A 1CC6 | 0020 0112 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0xA77D, 0x0062 };
    uint32_t const ces[11] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_398)
{
    // 3387 0021;	
    // (㎇) SQUARE GB	[1D5A 1CC6 0261 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x3387, 0x0021 };
    uint32_t const ces[12] = { 0x1D5A, 0x1CC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_399)
{
    // 3387 003F;	
    // (㎇) SQUARE GB	[1D5A 1CC6 0267 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x3387, 0x003F };
    uint32_t const ces[12] = { 0x1D5A, 0x1CC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_400)
{
    // 3387 0061;	
    // (㎇) SQUARE GB	[1D5A 1CC6 1CAD | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x3387, 0x0061 };
    uint32_t const ces[12] = { 0x1D5A, 0x1CC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_401)
{
    // 3387 0041;	
    // (㎇) SQUARE GB	[1D5A 1CC6 1CAD | 0020 0020 0020 | 001D 001D 0008 |]

    uint32_t cps[2] = { 0x3387, 0x0041 };
    uint32_t const ces[12] = { 0x1D5A, 0x1CC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_402)
{
    // 3387 0062;	
    // (㎇) SQUARE GB	[1D5A 1CC6 1CC6 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x3387, 0x0062 };
    uint32_t const ces[12] = { 0x1D5A, 0x1CC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_403)
{
    // 3393 0021;	
    // (㎓) SQUARE GHZ	[1D5A 1D7E 1F87 0261 | 0020 0020 0020 0020 | 001D 001D 001C 0002 |]

    uint32_t cps[2] = { 0x3393, 0x0021 };
    uint32_t const ces[15] = { 0x1D5A, 0x1D7E, 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_404)
{
    // 3393 003F;	
    // (㎓) SQUARE GHZ	[1D5A 1D7E 1F87 0267 | 0020 0020 0020 0020 | 001D 001D 001C 0002 |]

    uint32_t cps[2] = { 0x3393, 0x003F };
    uint32_t const ces[15] = { 0x1D5A, 0x1D7E, 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_405)
{
    // 3393 0061;	
    // (㎓) SQUARE GHZ	[1D5A 1D7E 1F87 1CAD | 0020 0020 0020 0020 | 001D 001D 001C 0002 |]

    uint32_t cps[2] = { 0x3393, 0x0061 };
    uint32_t const ces[15] = { 0x1D5A, 0x1D7E, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_406)
{
    // 3393 0041;	
    // (㎓) SQUARE GHZ	[1D5A 1D7E 1F87 1CAD | 0020 0020 0020 0020 | 001D 001D 001C 0008 |]

    uint32_t cps[2] = { 0x3393, 0x0041 };
    uint32_t const ces[15] = { 0x1D5A, 0x1D7E, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_407)
{
    // 3393 0062;	
    // (㎓) SQUARE GHZ	[1D5A 1D7E 1F87 1CC6 | 0020 0020 0020 0020 | 001D 001D 001C 0002 |]

    uint32_t cps[2] = { 0x3393, 0x0062 };
    uint32_t const ces[15] = { 0x1D5A, 0x1D7E, 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_408)
{
    // 33AC 0021;	
    // (㎬) SQUARE GPA	[1D5A 1E72 1CAD 0261 | 0020 0020 0020 0020 | 001D 001D 001C 0002 |]

    uint32_t cps[2] = { 0x33AC, 0x0021 };
    uint32_t const ces[15] = { 0x1D5A, 0x1E72, 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_409)
{
    // 33AC 003F;	
    // (㎬) SQUARE GPA	[1D5A 1E72 1CAD 0267 | 0020 0020 0020 0020 | 001D 001D 001C 0002 |]

    uint32_t cps[2] = { 0x33AC, 0x003F };
    uint32_t const ces[15] = { 0x1D5A, 0x1E72, 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_410)
{
    // 33AC 0061;	
    // (㎬) SQUARE GPA	[1D5A 1E72 1CAD 1CAD | 0020 0020 0020 0020 | 001D 001D 001C 0002 |]

    uint32_t cps[2] = { 0x33AC, 0x0061 };
    uint32_t const ces[15] = { 0x1D5A, 0x1E72, 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_411)
{
    // 33AC 0041;	
    // (㎬) SQUARE GPA	[1D5A 1E72 1CAD 1CAD | 0020 0020 0020 0020 | 001D 001D 001C 0008 |]

    uint32_t cps[2] = { 0x33AC, 0x0041 };
    uint32_t const ces[15] = { 0x1D5A, 0x1E72, 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_412)
{
    // 33AC 0062;	
    // (㎬) SQUARE GPA	[1D5A 1E72 1CAD 1CC6 | 0020 0020 0020 0020 | 001D 001D 001C 0002 |]

    uint32_t cps[2] = { 0x33AC, 0x0062 };
    uint32_t const ces[15] = { 0x1D5A, 0x1E72, 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_413)
{
    // 33C9 0021;	
    // (㏉) SQUARE GY	[1D5A 1F71 0261 | 0020 0020 0020 | 001D 001C 0002 |]

    uint32_t cps[2] = { 0x33C9, 0x0021 };
    uint32_t const ces[12] = { 0x1D5A, 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_414)
{
    // 33C9 003F;	
    // (㏉) SQUARE GY	[1D5A 1F71 0267 | 0020 0020 0020 | 001D 001C 0002 |]

    uint32_t cps[2] = { 0x33C9, 0x003F };
    uint32_t const ces[12] = { 0x1D5A, 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_415)
{
    // 33C9 0061;	
    // (㏉) SQUARE GY	[1D5A 1F71 1CAD | 0020 0020 0020 | 001D 001C 0002 |]

    uint32_t cps[2] = { 0x33C9, 0x0061 };
    uint32_t const ces[12] = { 0x1D5A, 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_416)
{
    // 33C9 0041;	
    // (㏉) SQUARE GY	[1D5A 1F71 1CAD | 0020 0020 0020 | 001D 001C 0008 |]

    uint32_t cps[2] = { 0x33C9, 0x0041 };
    uint32_t const ces[12] = { 0x1D5A, 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_417)
{
    // 33C9 0062;	
    // (㏉) SQUARE GY	[1D5A 1F71 1CC6 | 0020 0020 0020 | 001D 001C 0002 |]

    uint32_t cps[2] = { 0x33C9, 0x0062 };
    uint32_t const ces[12] = { 0x1D5A, 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_418)
{
    // 0261 0021;	
    // (ɡ) LATIN SMALL LETTER SCRIPT G	[1D5E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0261, 0x0021 };
    uint32_t const ces[9] = { 0x1D5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_419)
{
    // A7AC 0021;	
    // (Ɡ) LATIN CAPITAL LETTER SCRIPT G	[1D5E 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA7AC, 0x0021 };
    uint32_t const ces[9] = { 0x1D5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_420)
{
    // 1DA2 0021;	
    // (ᶢ) MODIFIER LETTER SMALL SCRIPT G	[1D5E 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DA2, 0x0021 };
    uint32_t const ces[9] = { 0x1D5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_421)
{
    // 0261 003F;	
    // (ɡ) LATIN SMALL LETTER SCRIPT G	[1D5E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0261, 0x003F };
    uint32_t const ces[9] = { 0x1D5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_422)
{
    // A7AC 003F;	
    // (Ɡ) LATIN CAPITAL LETTER SCRIPT G	[1D5E 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA7AC, 0x003F };
    uint32_t const ces[9] = { 0x1D5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_423)
{
    // 1DA2 003F;	
    // (ᶢ) MODIFIER LETTER SMALL SCRIPT G	[1D5E 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DA2, 0x003F };
    uint32_t const ces[9] = { 0x1D5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_424)
{
    // 0261 0061;	
    // (ɡ) LATIN SMALL LETTER SCRIPT G	[1D5E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0261, 0x0061 };
    uint32_t const ces[9] = { 0x1D5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_425)
{
    // 0261 0041;	
    // (ɡ) LATIN SMALL LETTER SCRIPT G	[1D5E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0261, 0x0041 };
    uint32_t const ces[9] = { 0x1D5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_426)
{
    // A7AC 0061;	
    // (Ɡ) LATIN CAPITAL LETTER SCRIPT G	[1D5E 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA7AC, 0x0061 };
    uint32_t const ces[9] = { 0x1D5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_427)
{
    // A7AC 0041;	
    // (Ɡ) LATIN CAPITAL LETTER SCRIPT G	[1D5E 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA7AC, 0x0041 };
    uint32_t const ces[9] = { 0x1D5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_428)
{
    // 1DA2 0061;	
    // (ᶢ) MODIFIER LETTER SMALL SCRIPT G	[1D5E 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DA2, 0x0061 };
    uint32_t const ces[9] = { 0x1D5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_429)
{
    // 1DA2 0041;	
    // (ᶢ) MODIFIER LETTER SMALL SCRIPT G	[1D5E 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x1DA2, 0x0041 };
    uint32_t const ces[9] = { 0x1D5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_430)
{
    // 0261 0062;	
    // (ɡ) LATIN SMALL LETTER SCRIPT G	[1D5E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0261, 0x0062 };
    uint32_t const ces[9] = { 0x1D5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_431)
{
    // A7AC 0062;	
    // (Ɡ) LATIN CAPITAL LETTER SCRIPT G	[1D5E 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA7AC, 0x0062 };
    uint32_t const ces[9] = { 0x1D5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_432)
{
    // 1DA2 0062;	
    // (ᶢ) MODIFIER LETTER SMALL SCRIPT G	[1D5E 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DA2, 0x0062 };
    uint32_t const ces[9] = { 0x1D5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_433)
{
    // AB36 0021;	
    // (ꬶ) LATIN SMALL LETTER SCRIPT G WITH CROSSED-TAIL	[1D62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB36, 0x0021 };
    uint32_t const ces[9] = { 0x1D62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_434)
{
    // AB36 003F;	
    // (ꬶ) LATIN SMALL LETTER SCRIPT G WITH CROSSED-TAIL	[1D62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB36, 0x003F };
    uint32_t const ces[9] = { 0x1D62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_435)
{
    // AB36 0061;	
    // (ꬶ) LATIN SMALL LETTER SCRIPT G WITH CROSSED-TAIL	[1D62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB36, 0x0061 };
    uint32_t const ces[9] = { 0x1D62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_436)
{
    // AB36 0041;	
    // (ꬶ) LATIN SMALL LETTER SCRIPT G WITH CROSSED-TAIL	[1D62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB36, 0x0041 };
    uint32_t const ces[9] = { 0x1D62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_437)
{
    // AB36 0062;	
    // (ꬶ) LATIN SMALL LETTER SCRIPT G WITH CROSSED-TAIL	[1D62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB36, 0x0062 };
    uint32_t const ces[9] = { 0x1D62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_438)
{
    // 0334 1DDB;	
    // (ᷛ) COMBINING LATIN LETTER SMALL CAPITAL G	[1D63 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x1DDB };
    uint32_t const ces[8] = { 0x1D63, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_439)
{
    // 1DDB 0334;	
    // (ᷛ) COMBINING LATIN LETTER SMALL CAPITAL G	[1D63 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x1DDB, 0x0334 };
    uint32_t const ces[8] = { 0x1D63, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_440)
{
    // 0262 0021;	
    // (ɢ) LATIN LETTER SMALL CAPITAL G	[1D63 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0262, 0x0021 };
    uint32_t const ces[9] = { 0x1D63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_441)
{
    // 1DDB 0021;	
    // (ᷛ) COMBINING LATIN LETTER SMALL CAPITAL G	[1D63 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DDB, 0x0021 };
    uint32_t const ces[9] = { 0x1D63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_442)
{
    // 0262 003F;	
    // (ɢ) LATIN LETTER SMALL CAPITAL G	[1D63 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0262, 0x003F };
    uint32_t const ces[9] = { 0x1D63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_443)
{
    // 1DDB 003F;	
    // (ᷛ) COMBINING LATIN LETTER SMALL CAPITAL G	[1D63 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DDB, 0x003F };
    uint32_t const ces[9] = { 0x1D63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_444)
{
    // 0262 0061;	
    // (ɢ) LATIN LETTER SMALL CAPITAL G	[1D63 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0262, 0x0061 };
    uint32_t const ces[9] = { 0x1D63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_445)
{
    // 0262 0041;	
    // (ɢ) LATIN LETTER SMALL CAPITAL G	[1D63 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0262, 0x0041 };
    uint32_t const ces[9] = { 0x1D63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_446)
{
    // 1DDB 0061;	
    // (ᷛ) COMBINING LATIN LETTER SMALL CAPITAL G	[1D63 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DDB, 0x0061 };
    uint32_t const ces[9] = { 0x1D63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_447)
{
    // 1DDB 0041;	
    // (ᷛ) COMBINING LATIN LETTER SMALL CAPITAL G	[1D63 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1DDB, 0x0041 };
    uint32_t const ces[9] = { 0x1D63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_448)
{
    // 0262 0062;	
    // (ɢ) LATIN LETTER SMALL CAPITAL G	[1D63 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0262, 0x0062 };
    uint32_t const ces[9] = { 0x1D63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_449)
{
    // 1DDB 0062;	
    // (ᷛ) COMBINING LATIN LETTER SMALL CAPITAL G	[1D63 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DDB, 0x0062 };
    uint32_t const ces[9] = { 0x1D63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_450)
{
    // 01E5 0021;	
    // (ǥ) LATIN SMALL LETTER G WITH STROKE	[1D67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01E5, 0x0021 };
    uint32_t const ces[9] = { 0x1D67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_451)
{
    // 01E4 0021;	
    // (Ǥ) LATIN CAPITAL LETTER G WITH STROKE	[1D67 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01E4, 0x0021 };
    uint32_t const ces[9] = { 0x1D67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_452)
{
    // 01E5 003F;	
    // (ǥ) LATIN SMALL LETTER G WITH STROKE	[1D67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01E5, 0x003F };
    uint32_t const ces[9] = { 0x1D67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_453)
{
    // 01E4 003F;	
    // (Ǥ) LATIN CAPITAL LETTER G WITH STROKE	[1D67 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01E4, 0x003F };
    uint32_t const ces[9] = { 0x1D67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_454)
{
    // 01E5 0061;	
    // (ǥ) LATIN SMALL LETTER G WITH STROKE	[1D67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01E5, 0x0061 };
    uint32_t const ces[9] = { 0x1D67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_455)
{
    // 01E5 0041;	
    // (ǥ) LATIN SMALL LETTER G WITH STROKE	[1D67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x01E5, 0x0041 };
    uint32_t const ces[9] = { 0x1D67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_456)
{
    // 01E4 0061;	
    // (Ǥ) LATIN CAPITAL LETTER G WITH STROKE	[1D67 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01E4, 0x0061 };
    uint32_t const ces[9] = { 0x1D67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_457)
{
    // 01E4 0041;	
    // (Ǥ) LATIN CAPITAL LETTER G WITH STROKE	[1D67 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x01E4, 0x0041 };
    uint32_t const ces[9] = { 0x1D67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_458)
{
    // 01E5 0062;	
    // (ǥ) LATIN SMALL LETTER G WITH STROKE	[1D67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01E5, 0x0062 };
    uint32_t const ces[9] = { 0x1D67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_459)
{
    // 01E4 0062;	
    // (Ǥ) LATIN CAPITAL LETTER G WITH STROKE	[1D67 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01E4, 0x0062 };
    uint32_t const ces[9] = { 0x1D67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_460)
{
    // 1D83 0021;	
    // (ᶃ) LATIN SMALL LETTER G WITH PALATAL HOOK	[1D6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D83, 0x0021 };
    uint32_t const ces[9] = { 0x1D6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_461)
{
    // 1D83 003F;	
    // (ᶃ) LATIN SMALL LETTER G WITH PALATAL HOOK	[1D6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D83, 0x003F };
    uint32_t const ces[9] = { 0x1D6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_462)
{
    // 1D83 0061;	
    // (ᶃ) LATIN SMALL LETTER G WITH PALATAL HOOK	[1D6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D83, 0x0061 };
    uint32_t const ces[9] = { 0x1D6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_463)
{
    // 1D83 0041;	
    // (ᶃ) LATIN SMALL LETTER G WITH PALATAL HOOK	[1D6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D83, 0x0041 };
    uint32_t const ces[9] = { 0x1D6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_464)
{
    // 1D83 0062;	
    // (ᶃ) LATIN SMALL LETTER G WITH PALATAL HOOK	[1D6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D83, 0x0062 };
    uint32_t const ces[9] = { 0x1D6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_465)
{
    // 0260 0021;	
    // (ɠ) LATIN SMALL LETTER G WITH HOOK	[1D6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0260, 0x0021 };
    uint32_t const ces[9] = { 0x1D6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_466)
{
    // 0193 0021;	
    // (Ɠ) LATIN CAPITAL LETTER G WITH HOOK	[1D6C 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0193, 0x0021 };
    uint32_t const ces[9] = { 0x1D6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_467)
{
    // 0260 003F;	
    // (ɠ) LATIN SMALL LETTER G WITH HOOK	[1D6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0260, 0x003F };
    uint32_t const ces[9] = { 0x1D6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_468)
{
    // 0193 003F;	
    // (Ɠ) LATIN CAPITAL LETTER G WITH HOOK	[1D6C 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0193, 0x003F };
    uint32_t const ces[9] = { 0x1D6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_469)
{
    // 0260 0061;	
    // (ɠ) LATIN SMALL LETTER G WITH HOOK	[1D6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0260, 0x0061 };
    uint32_t const ces[9] = { 0x1D6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_470)
{
    // 0260 0041;	
    // (ɠ) LATIN SMALL LETTER G WITH HOOK	[1D6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0260, 0x0041 };
    uint32_t const ces[9] = { 0x1D6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_471)
{
    // 0193 0061;	
    // (Ɠ) LATIN CAPITAL LETTER G WITH HOOK	[1D6C 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0193, 0x0061 };
    uint32_t const ces[9] = { 0x1D6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_472)
{
    // 0193 0041;	
    // (Ɠ) LATIN CAPITAL LETTER G WITH HOOK	[1D6C 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0193, 0x0041 };
    uint32_t const ces[9] = { 0x1D6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_473)
{
    // 0260 0062;	
    // (ɠ) LATIN SMALL LETTER G WITH HOOK	[1D6C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0260, 0x0062 };
    uint32_t const ces[9] = { 0x1D6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_474)
{
    // 0193 0062;	
    // (Ɠ) LATIN CAPITAL LETTER G WITH HOOK	[1D6C 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0193, 0x0062 };
    uint32_t const ces[9] = { 0x1D6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_475)
{
    // 029B 0021;	
    // (ʛ) LATIN LETTER SMALL CAPITAL G WITH HOOK	[1D70 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x029B, 0x0021 };
    uint32_t const ces[9] = { 0x1D70, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_476)
{
    // 029B 003F;	
    // (ʛ) LATIN LETTER SMALL CAPITAL G WITH HOOK	[1D70 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x029B, 0x003F };
    uint32_t const ces[9] = { 0x1D70, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_477)
{
    // 029B 0061;	
    // (ʛ) LATIN LETTER SMALL CAPITAL G WITH HOOK	[1D70 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x029B, 0x0061 };
    uint32_t const ces[9] = { 0x1D70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_478)
{
    // 029B 0041;	
    // (ʛ) LATIN LETTER SMALL CAPITAL G WITH HOOK	[1D70 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x029B, 0x0041 };
    uint32_t const ces[9] = { 0x1D70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_479)
{
    // 029B 0062;	
    // (ʛ) LATIN LETTER SMALL CAPITAL G WITH HOOK	[1D70 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x029B, 0x0062 };
    uint32_t const ces[9] = { 0x1D70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_480)
{
    // 1D77 0021;	
    // (ᵷ) LATIN SMALL LETTER TURNED G	[1D74 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D77, 0x0021 };
    uint32_t const ces[9] = { 0x1D74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_481)
{
    // 1D77 003F;	
    // (ᵷ) LATIN SMALL LETTER TURNED G	[1D74 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D77, 0x003F };
    uint32_t const ces[9] = { 0x1D74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_482)
{
    // 1D77 0061;	
    // (ᵷ) LATIN SMALL LETTER TURNED G	[1D74 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D77, 0x0061 };
    uint32_t const ces[9] = { 0x1D74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_483)
{
    // 1D77 0041;	
    // (ᵷ) LATIN SMALL LETTER TURNED G	[1D74 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D77, 0x0041 };
    uint32_t const ces[9] = { 0x1D74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_484)
{
    // 1D77 0062;	
    // (ᵷ) LATIN SMALL LETTER TURNED G	[1D74 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D77, 0x0062 };
    uint32_t const ces[9] = { 0x1D74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_485)
{
    // A77F 0021;	
    // (ꝿ) LATIN SMALL LETTER TURNED INSULAR G	[1D75 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA77F, 0x0021 };
    uint32_t const ces[9] = { 0x1D75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_486)
{
    // A77E 0021;	
    // (Ꝿ) LATIN CAPITAL LETTER TURNED INSULAR G	[1D75 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA77E, 0x0021 };
    uint32_t const ces[9] = { 0x1D75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_487)
{
    // A77F 003F;	
    // (ꝿ) LATIN SMALL LETTER TURNED INSULAR G	[1D75 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA77F, 0x003F };
    uint32_t const ces[9] = { 0x1D75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_488)
{
    // A77E 003F;	
    // (Ꝿ) LATIN CAPITAL LETTER TURNED INSULAR G	[1D75 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA77E, 0x003F };
    uint32_t const ces[9] = { 0x1D75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_489)
{
    // A77F 0061;	
    // (ꝿ) LATIN SMALL LETTER TURNED INSULAR G	[1D75 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA77F, 0x0061 };
    uint32_t const ces[9] = { 0x1D75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_490)
{
    // A77F 0041;	
    // (ꝿ) LATIN SMALL LETTER TURNED INSULAR G	[1D75 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA77F, 0x0041 };
    uint32_t const ces[9] = { 0x1D75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_491)
{
    // A77E 0061;	
    // (Ꝿ) LATIN CAPITAL LETTER TURNED INSULAR G	[1D75 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA77E, 0x0061 };
    uint32_t const ces[9] = { 0x1D75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_492)
{
    // A77E 0041;	
    // (Ꝿ) LATIN CAPITAL LETTER TURNED INSULAR G	[1D75 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA77E, 0x0041 };
    uint32_t const ces[9] = { 0x1D75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_493)
{
    // A77F 0062;	
    // (ꝿ) LATIN SMALL LETTER TURNED INSULAR G	[1D75 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA77F, 0x0062 };
    uint32_t const ces[9] = { 0x1D75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_494)
{
    // A77E 0062;	
    // (Ꝿ) LATIN CAPITAL LETTER TURNED INSULAR G	[1D75 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA77E, 0x0062 };
    uint32_t const ces[9] = { 0x1D75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_495)
{
    // 0263 0021;	
    // (ɣ) LATIN SMALL LETTER GAMMA	[1D76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0263, 0x0021 };
    uint32_t const ces[9] = { 0x1D76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_496)
{
    // 0194 0021;	
    // (Ɣ) LATIN CAPITAL LETTER GAMMA	[1D76 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0194, 0x0021 };
    uint32_t const ces[9] = { 0x1D76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_497)
{
    // 02E0 0021;	
    // (ˠ) MODIFIER LETTER SMALL GAMMA	[1D76 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x02E0, 0x0021 };
    uint32_t const ces[9] = { 0x1D76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_498)
{
    // 0263 003F;	
    // (ɣ) LATIN SMALL LETTER GAMMA	[1D76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0263, 0x003F };
    uint32_t const ces[9] = { 0x1D76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_107_499)
{
    // 0194 003F;	
    // (Ɣ) LATIN CAPITAL LETTER GAMMA	[1D76 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0194, 0x003F };
    uint32_t const ces[9] = { 0x1D76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

