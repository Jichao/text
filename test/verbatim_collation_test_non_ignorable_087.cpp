// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_087_000)
{
    // 1F19E 0061;	
    // (🆞) SQUARED FOUR K	[1CA7 1DCB 1CAD | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x1F19E, 0x0061 };
    uint32_t const ces[12] = { 0x1CA7, 0x1DCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_001)
{
    // 1F19E 0041;	
    // (🆞) SQUARED FOUR K	[1CA7 1DCB 1CAD | 0020 0020 0020 | 001C 001D 0008 |]

    uint32_t cps[2] = { 0x1F19E, 0x0041 };
    uint32_t const ces[12] = { 0x1CA7, 0x1DCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_002)
{
    // 1F19E 0062;	
    // (🆞) SQUARED FOUR K	[1CA7 1DCB 1CC6 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x1F19E, 0x0062 };
    uint32_t const ces[12] = { 0x1CA7, 0x1DCB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_003)
{
    // 33E3 0021;	
    // (㏣) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY FOUR	[1CA7 FB40 E5E5 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E3, 0x0021 };
    uint32_t const ces[13] = { 0x1CA7, 0xFB40, 0xE5E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_004)
{
    // 33E3 003F;	
    // (㏣) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY FOUR	[1CA7 FB40 E5E5 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E3, 0x003F };
    uint32_t const ces[13] = { 0x1CA7, 0xFB40, 0xE5E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_005)
{
    // 33E3 0061;	
    // (㏣) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY FOUR	[1CA7 FB40 E5E5 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E3, 0x0061 };
    uint32_t const ces[13] = { 0x1CA7, 0xFB40, 0xE5E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_006)
{
    // 33E3 0041;	
    // (㏣) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY FOUR	[1CA7 FB40 E5E5 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x33E3, 0x0041 };
    uint32_t const ces[13] = { 0x1CA7, 0xFB40, 0xE5E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_007)
{
    // 33E3 0062;	
    // (㏣) IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY FOUR	[1CA7 FB40 E5E5 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x33E3, 0x0062 };
    uint32_t const ces[13] = { 0x1CA7, 0xFB40, 0xE5E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_008)
{
    // 32C3 0021;	
    // (㋃) IDEOGRAPHIC TELEGRAPH SYMBOL FOR APRIL	[1CA7 FB40 E708 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C3, 0x0021 };
    uint32_t const ces[13] = { 0x1CA7, 0xFB40, 0xE708, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_009)
{
    // 32C3 003F;	
    // (㋃) IDEOGRAPHIC TELEGRAPH SYMBOL FOR APRIL	[1CA7 FB40 E708 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C3, 0x003F };
    uint32_t const ces[13] = { 0x1CA7, 0xFB40, 0xE708, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_010)
{
    // 32C3 0061;	
    // (㋃) IDEOGRAPHIC TELEGRAPH SYMBOL FOR APRIL	[1CA7 FB40 E708 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C3, 0x0061 };
    uint32_t const ces[13] = { 0x1CA7, 0xFB40, 0xE708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_011)
{
    // 32C3 0041;	
    // (㋃) IDEOGRAPHIC TELEGRAPH SYMBOL FOR APRIL	[1CA7 FB40 E708 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x32C3, 0x0041 };
    uint32_t const ces[13] = { 0x1CA7, 0xFB40, 0xE708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_012)
{
    // 32C3 0062;	
    // (㋃) IDEOGRAPHIC TELEGRAPH SYMBOL FOR APRIL	[1CA7 FB40 E708 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x32C3, 0x0062 };
    uint32_t const ces[13] = { 0x1CA7, 0xFB40, 0xE708, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_013)
{
    // 335C 0021;	
    // (㍜) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR FOUR	[1CA7 FB40 F0B9 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x335C, 0x0021 };
    uint32_t const ces[13] = { 0x1CA7, 0xFB40, 0xF0B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_014)
{
    // 335C 003F;	
    // (㍜) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR FOUR	[1CA7 FB40 F0B9 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x335C, 0x003F };
    uint32_t const ces[13] = { 0x1CA7, 0xFB40, 0xF0B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_015)
{
    // 335C 0061;	
    // (㍜) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR FOUR	[1CA7 FB40 F0B9 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x335C, 0x0061 };
    uint32_t const ces[13] = { 0x1CA7, 0xFB40, 0xF0B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_016)
{
    // 335C 0041;	
    // (㍜) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR FOUR	[1CA7 FB40 F0B9 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x335C, 0x0041 };
    uint32_t const ces[13] = { 0x1CA7, 0xFB40, 0xF0B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_017)
{
    // 335C 0062;	
    // (㍜) IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR FOUR	[1CA7 FB40 F0B9 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x335C, 0x0062 };
    uint32_t const ces[13] = { 0x1CA7, 0xFB40, 0xF0B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_018)
{
    // 1F106 0021;	
    // (🄆) DIGIT FIVE COMMA	[1CA8 0222 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F106, 0x0021 };
    uint32_t const ces[12] = { 0x1CA8, 0x0222, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_019)
{
    // 1F106 003F;	
    // (🄆) DIGIT FIVE COMMA	[1CA8 0222 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F106, 0x003F };
    uint32_t const ces[12] = { 0x1CA8, 0x0222, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_020)
{
    // 1F106 0061;	
    // (🄆) DIGIT FIVE COMMA	[1CA8 0222 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F106, 0x0061 };
    uint32_t const ces[12] = { 0x1CA8, 0x0222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_021)
{
    // 1F106 0041;	
    // (🄆) DIGIT FIVE COMMA	[1CA8 0222 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1F106, 0x0041 };
    uint32_t const ces[12] = { 0x1CA8, 0x0222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_022)
{
    // 1F106 0062;	
    // (🄆) DIGIT FIVE COMMA	[1CA8 0222 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F106, 0x0062 };
    uint32_t const ces[12] = { 0x1CA8, 0x0222, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_023)
{
    // 0035 0021;	
    // (5) DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0035, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_024)
{
    // 0665 0021;	
    // (‎٥‎) ARABIC-INDIC DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0665, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_025)
{
    // 06F5 0021;	
    // (۵) EXTENDED ARABIC-INDIC DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06F5, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_026)
{
    // 07C5 0021;	
    // (‎‎߅‎‎) NKO DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07C5, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_027)
{
    // 096B 0021;	
    // (५) DEVANAGARI DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x096B, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_028)
{
    // 09EB 0021;	
    // (৫) BENGALI DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09EB, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_029)
{
    // 0A6B 0021;	
    // (੫) GURMUKHI DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A6B, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_030)
{
    // 0AEB 0021;	
    // (૫) GUJARATI DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AEB, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_031)
{
    // 0B6B 0021;	
    // (୫) ORIYA DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B6B, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_032)
{
    // 0BEB 0021;	
    // (௫) TAMIL DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BEB, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_033)
{
    // 0C6B 0021;	
    // (౫) TELUGU DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C6B, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_034)
{
    // 0CEB 0021;	
    // (೫) KANNADA DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CEB, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_035)
{
    // 0D6B 0021;	
    // (൫) MALAYALAM DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D6B, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_036)
{
    // 0DEB 0021;	
    // (෫) SINHALA LITH DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DEB, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_037)
{
    // 0E55 0021;	
    // (๕) THAI DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E55, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_038)
{
    // 0ED5 0021;	
    // (໕) LAO DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ED5, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_039)
{
    // 0F25 0021;	
    // (༥) TIBETAN DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F25, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_040)
{
    // 1045 0021;	
    // (၅) MYANMAR DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1045, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_041)
{
    // 1095 0021;	
    // (႕) MYANMAR SHAN DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1095, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_042)
{
    // 136D 0021;	
    // (፭) ETHIOPIC DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x136D, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_043)
{
    // 17E5 0021;	
    // (៥) KHMER DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17E5, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_044)
{
    // 17F5 0021;	
    // (៵) KHMER SYMBOL LEK ATTAK PRAM	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17F5, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_045)
{
    // 1815 0021;	
    // (᠕) MONGOLIAN DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1815, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_046)
{
    // 194B 0021;	
    // (᥋) LIMBU DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x194B, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_047)
{
    // 19D5 0021;	
    // (᧕) NEW TAI LUE DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19D5, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_048)
{
    // 1A85 0021;	
    // (᪅) TAI THAM HORA DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A85, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_049)
{
    // 1A95 0021;	
    // (᪕) TAI THAM THAM DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A95, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_050)
{
    // 1B55 0021;	
    // (᭕) BALINESE DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B55, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_051)
{
    // 1BB5 0021;	
    // (᮵) SUNDANESE DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BB5, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_052)
{
    // 1C45 0021;	
    // (᱅) LEPCHA DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C45, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_053)
{
    // 1C55 0021;	
    // (᱕) OL CHIKI DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C55, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_054)
{
    // 3025 0021;	
    // (〥) HANGZHOU NUMERAL FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3025, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_055)
{
    // A625 0021;	
    // (꘥) VAI DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA625, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_056)
{
    // A8D5 0021;	
    // (꣕) SAURASHTRA DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8D5, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_057)
{
    // A905 0021;	
    // (꤅) KAYAH LI DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA905, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_058)
{
    // A9D5 0021;	
    // (꧕) JAVANESE DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9D5, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_059)
{
    // A9F5 0021;	
    // (꧵) MYANMAR TAI LAING DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9F5, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_060)
{
    // AA55 0021;	
    // (꩕) CHAM DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA55, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_061)
{
    // ABF5 0021;	
    // (꯵) MEETEI MAYEK DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABF5, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_062)
{
    // 1010B 0021;	
    // (𐄋) AEGEAN NUMBER FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1010B, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_063)
{
    // 10143 0021;	
    // (𐅃) GREEK ACROPHONIC ATTIC FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10143, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_064)
{
    // 10148 0021;	
    // (𐅈) GREEK ACROPHONIC ATTIC FIVE TALENTS	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10148, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_065)
{
    // 1014F 0021;	
    // (𐅏) GREEK ACROPHONIC ATTIC FIVE STATERS	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1014F, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_066)
{
    // 1015F 0021;	
    // (𐅟) GREEK ACROPHONIC TROEZENIAN FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1015F, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_067)
{
    // 10173 0021;	
    // (𐅳) GREEK ACROPHONIC DELPHIC FIVE MNAS	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10173, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_068)
{
    // 102E5 0021;	
    // (𐋥) COPTIC EPACT DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102E5, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_069)
{
    // 10321 0021;	
    // (𐌡) OLD ITALIC NUMERAL FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10321, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_070)
{
    // 104A5 0021;	
    // (𐒥) OSMANYA DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104A5, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_071)
{
    // 1087D 0021;	
    // (‎‎𐡽‎‎) PALMYRENE NUMBER FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1087D, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_072)
{
    // 108AC 0021;	
    // (‎‎𐢬‎‎) NABATAEAN NUMBER FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108AC, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_073)
{
    // 108FC 0021;	
    // (‎‎𐣼‎‎) HATRAN NUMBER FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108FC, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_074)
{
    // 109C4 0021;	
    // (‎‎𐧄‎‎) MEROITIC CURSIVE NUMBER FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109C4, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_075)
{
    // 10AEC 0021;	
    // (‎‎𐫬‎‎) MANICHAEAN NUMBER FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AEC, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_076)
{
    // 10CFB 0021;	
    // (‎‎𐳻‎‎) OLD HUNGARIAN NUMBER FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CFB, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_077)
{
    // 10E64 0021;	
    // (‎𐹤‎) RUMI DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E64, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_078)
{
    // 11056 0021;	
    // (𑁖) BRAHMI NUMBER FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11056, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_079)
{
    // 1106B 0021;	
    // (𑁫) BRAHMI DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1106B, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_080)
{
    // 110F5 0021;	
    // (𑃵) SORA SOMPENG DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110F5, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_081)
{
    // 1113B 0021;	
    // (𑄻) CHAKMA DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1113B, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_082)
{
    // 111D5 0021;	
    // (𑇕) SHARADA DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111D5, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_083)
{
    // 111E5 0021;	
    // (𑇥) SINHALA ARCHAIC DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111E5, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_084)
{
    // 112F5 0021;	
    // (𑋵) KHUDAWADI DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F5, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_085)
{
    // 11455 0021;	
    // (𑑕) NEWA DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11455, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_086)
{
    // 114D5 0021;	
    // (𑓕) TIRHUTA DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D5, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_087)
{
    // 11655 0021;	
    // (𑙕) MODI DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11655, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_088)
{
    // 116C5 0021;	
    // (𑛅) TAKRI DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116C5, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_089)
{
    // 11735 0021;	
    // (𑜵) AHOM DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11735, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_090)
{
    // 118E5 0021;	
    // (𑣥) WARANG CITI DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x118E5, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_091)
{
    // 11C55 0021;	
    // (𑱕) BHAIKSUKI DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C55, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_092)
{
    // 11C5E 0021;	
    // (𑱞) BHAIKSUKI NUMBER FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C5E, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_093)
{
    // 11D55 0021;	
    // (𑵕) MASARAM GONDI DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D55, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_094)
{
    // 12403 0021;	
    // (𒐃) CUNEIFORM NUMERIC SIGN FIVE ASH	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12403, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_095)
{
    // 1240A 0021;	
    // (𒐊) CUNEIFORM NUMERIC SIGN FIVE DISH	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1240A, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_096)
{
    // 12410 0021;	
    // (𒐐) CUNEIFORM NUMERIC SIGN FIVE U	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12410, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_097)
{
    // 12419 0021;	
    // (𒐙) CUNEIFORM NUMERIC SIGN FIVE GESH2	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12419, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_098)
{
    // 12422 0021;	
    // (𒐢) CUNEIFORM NUMERIC SIGN FIVE GESHU	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12422, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_099)
{
    // 12427 0021;	
    // (𒐧) CUNEIFORM NUMERIC SIGN FIVE SHAR2	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12427, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_100)
{
    // 12431 0021;	
    // (𒐱) CUNEIFORM NUMERIC SIGN FIVE SHARU	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12431, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_101)
{
    // 12439 0021;	
    // (𒐹) CUNEIFORM NUMERIC SIGN FIVE BURU	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12439, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_102)
{
    // 1244D 0021;	
    // (𒑍) CUNEIFORM NUMERIC SIGN FIVE ASH TENU	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1244D, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_103)
{
    // 12454 0021;	
    // (𒑔) CUNEIFORM NUMERIC SIGN FIVE BAN2	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12454, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_104)
{
    // 12455 0021;	
    // (𒑕) CUNEIFORM NUMERIC SIGN FIVE BAN2 VARIANT FORM	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12455, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_105)
{
    // 1246A 0021;	
    // (𒑪) CUNEIFORM NUMERIC SIGN FIVE U VARIANT FORM	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1246A, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_106)
{
    // 16A65 0021;	
    // (𖩥) MRO DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A65, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_107)
{
    // 16B55 0021;	
    // (𖭕) PAHAWH HMONG DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B55, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_108)
{
    // 1D364 0021;	
    // (𝍤) COUNTING ROD UNIT DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D364, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_109)
{
    // 1E8CB 0021;	
    // (‎‎𞣋‎‎) MENDE KIKAKUI DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E8CB, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_110)
{
    // 1E955 0021;	
    // (‎‎𞥕‎‎) ADLAM DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E955, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_111)
{
    // FF15 0021;	
    // (５) FULLWIDTH DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF15, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_112)
{
    // 0F2E 0021;	
    // (༮) TIBETAN DIGIT HALF FIVE	[1CA8 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0F2E, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_113)
{
    // 1D7D3 0021;	
    // (𝟓) MATHEMATICAL BOLD DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7D3, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_114)
{
    // 1D7DD 0021;	
    // (𝟝) MATHEMATICAL DOUBLE-STRUCK DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7DD, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_115)
{
    // 1D7E7 0021;	
    // (𝟧) MATHEMATICAL SANS-SERIF DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7E7, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_116)
{
    // 1D7F1 0021;	
    // (𝟱) MATHEMATICAL SANS-SERIF BOLD DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7F1, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_117)
{
    // 1D7FB 0021;	
    // (𝟻) MATHEMATICAL MONOSPACE DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7FB, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_118)
{
    // 2464 0021;	
    // (⑤) CIRCLED DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2464, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_119)
{
    // 24F9 0021;	
    // (⓹) DOUBLE CIRCLED DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24F9, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_120)
{
    // 277A 0021;	
    // (❺) DINGBAT NEGATIVE CIRCLED DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x277A, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_121)
{
    // 2784 0021;	
    // (➄) DINGBAT CIRCLED SANS-SERIF DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2784, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_122)
{
    // 278E 0021;	
    // (➎) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT FIVE	[1CA8 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x278E, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_123)
{
    // 2075 0021;	
    // (⁵) SUPERSCRIPT FIVE	[1CA8 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x2075, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_124)
{
    // 2085 0021;	
    // (₅) SUBSCRIPT FIVE	[1CA8 0261 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2085, 0x0021 };
    uint32_t const ces[9] = { 0x1CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_125)
{
    // 0035 003F;	
    // (5) DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0035, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_126)
{
    // 0665 003F;	
    // (‎٥‎) ARABIC-INDIC DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0665, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_127)
{
    // 06F5 003F;	
    // (۵) EXTENDED ARABIC-INDIC DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06F5, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_128)
{
    // 07C5 003F;	
    // (‎‎߅‎‎) NKO DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07C5, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_129)
{
    // 096B 003F;	
    // (५) DEVANAGARI DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x096B, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_130)
{
    // 09EB 003F;	
    // (৫) BENGALI DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09EB, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_131)
{
    // 0A6B 003F;	
    // (੫) GURMUKHI DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A6B, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_132)
{
    // 0AEB 003F;	
    // (૫) GUJARATI DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AEB, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_133)
{
    // 0B6B 003F;	
    // (୫) ORIYA DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B6B, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_134)
{
    // 0BEB 003F;	
    // (௫) TAMIL DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BEB, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_135)
{
    // 0C6B 003F;	
    // (౫) TELUGU DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C6B, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_136)
{
    // 0CEB 003F;	
    // (೫) KANNADA DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CEB, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_137)
{
    // 0D6B 003F;	
    // (൫) MALAYALAM DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D6B, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_138)
{
    // 0DEB 003F;	
    // (෫) SINHALA LITH DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DEB, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_139)
{
    // 0E55 003F;	
    // (๕) THAI DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E55, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_140)
{
    // 0ED5 003F;	
    // (໕) LAO DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ED5, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_141)
{
    // 0F25 003F;	
    // (༥) TIBETAN DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F25, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_142)
{
    // 1045 003F;	
    // (၅) MYANMAR DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1045, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_143)
{
    // 1095 003F;	
    // (႕) MYANMAR SHAN DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1095, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_144)
{
    // 136D 003F;	
    // (፭) ETHIOPIC DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x136D, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_145)
{
    // 17E5 003F;	
    // (៥) KHMER DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17E5, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_146)
{
    // 17F5 003F;	
    // (៵) KHMER SYMBOL LEK ATTAK PRAM	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17F5, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_147)
{
    // 1815 003F;	
    // (᠕) MONGOLIAN DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1815, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_148)
{
    // 194B 003F;	
    // (᥋) LIMBU DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x194B, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_149)
{
    // 19D5 003F;	
    // (᧕) NEW TAI LUE DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19D5, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_150)
{
    // 1A85 003F;	
    // (᪅) TAI THAM HORA DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A85, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_151)
{
    // 1A95 003F;	
    // (᪕) TAI THAM THAM DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A95, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_152)
{
    // 1B55 003F;	
    // (᭕) BALINESE DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B55, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_153)
{
    // 1BB5 003F;	
    // (᮵) SUNDANESE DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BB5, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_154)
{
    // 1C45 003F;	
    // (᱅) LEPCHA DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C45, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_155)
{
    // 1C55 003F;	
    // (᱕) OL CHIKI DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C55, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_156)
{
    // 3025 003F;	
    // (〥) HANGZHOU NUMERAL FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3025, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_157)
{
    // A625 003F;	
    // (꘥) VAI DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA625, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_158)
{
    // A8D5 003F;	
    // (꣕) SAURASHTRA DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8D5, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_159)
{
    // A905 003F;	
    // (꤅) KAYAH LI DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA905, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_160)
{
    // A9D5 003F;	
    // (꧕) JAVANESE DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9D5, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_161)
{
    // A9F5 003F;	
    // (꧵) MYANMAR TAI LAING DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9F5, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_162)
{
    // AA55 003F;	
    // (꩕) CHAM DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA55, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_163)
{
    // ABF5 003F;	
    // (꯵) MEETEI MAYEK DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABF5, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_164)
{
    // 1010B 003F;	
    // (𐄋) AEGEAN NUMBER FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1010B, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_165)
{
    // 10143 003F;	
    // (𐅃) GREEK ACROPHONIC ATTIC FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10143, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_166)
{
    // 10148 003F;	
    // (𐅈) GREEK ACROPHONIC ATTIC FIVE TALENTS	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10148, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_167)
{
    // 1014F 003F;	
    // (𐅏) GREEK ACROPHONIC ATTIC FIVE STATERS	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1014F, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_168)
{
    // 1015F 003F;	
    // (𐅟) GREEK ACROPHONIC TROEZENIAN FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1015F, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_169)
{
    // 10173 003F;	
    // (𐅳) GREEK ACROPHONIC DELPHIC FIVE MNAS	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10173, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_170)
{
    // 102E5 003F;	
    // (𐋥) COPTIC EPACT DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102E5, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_171)
{
    // 10321 003F;	
    // (𐌡) OLD ITALIC NUMERAL FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10321, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_172)
{
    // 104A5 003F;	
    // (𐒥) OSMANYA DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104A5, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_173)
{
    // 1087D 003F;	
    // (‎‎𐡽‎‎) PALMYRENE NUMBER FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1087D, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_174)
{
    // 108AC 003F;	
    // (‎‎𐢬‎‎) NABATAEAN NUMBER FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108AC, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_175)
{
    // 108FC 003F;	
    // (‎‎𐣼‎‎) HATRAN NUMBER FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108FC, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_176)
{
    // 109C4 003F;	
    // (‎‎𐧄‎‎) MEROITIC CURSIVE NUMBER FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109C4, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_177)
{
    // 10AEC 003F;	
    // (‎‎𐫬‎‎) MANICHAEAN NUMBER FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AEC, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_178)
{
    // 10CFB 003F;	
    // (‎‎𐳻‎‎) OLD HUNGARIAN NUMBER FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CFB, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_179)
{
    // 10E64 003F;	
    // (‎𐹤‎) RUMI DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E64, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_180)
{
    // 11056 003F;	
    // (𑁖) BRAHMI NUMBER FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11056, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_181)
{
    // 1106B 003F;	
    // (𑁫) BRAHMI DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1106B, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_182)
{
    // 110F5 003F;	
    // (𑃵) SORA SOMPENG DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110F5, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_183)
{
    // 1113B 003F;	
    // (𑄻) CHAKMA DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1113B, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_184)
{
    // 111D5 003F;	
    // (𑇕) SHARADA DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111D5, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_185)
{
    // 111E5 003F;	
    // (𑇥) SINHALA ARCHAIC DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111E5, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_186)
{
    // 112F5 003F;	
    // (𑋵) KHUDAWADI DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F5, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_187)
{
    // 11455 003F;	
    // (𑑕) NEWA DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11455, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_188)
{
    // 114D5 003F;	
    // (𑓕) TIRHUTA DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D5, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_189)
{
    // 11655 003F;	
    // (𑙕) MODI DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11655, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_190)
{
    // 116C5 003F;	
    // (𑛅) TAKRI DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116C5, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_191)
{
    // 11735 003F;	
    // (𑜵) AHOM DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11735, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_192)
{
    // 118E5 003F;	
    // (𑣥) WARANG CITI DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x118E5, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_193)
{
    // 11C55 003F;	
    // (𑱕) BHAIKSUKI DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C55, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_194)
{
    // 11C5E 003F;	
    // (𑱞) BHAIKSUKI NUMBER FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C5E, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_195)
{
    // 11D55 003F;	
    // (𑵕) MASARAM GONDI DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D55, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_196)
{
    // 12403 003F;	
    // (𒐃) CUNEIFORM NUMERIC SIGN FIVE ASH	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12403, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_197)
{
    // 1240A 003F;	
    // (𒐊) CUNEIFORM NUMERIC SIGN FIVE DISH	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1240A, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_198)
{
    // 12410 003F;	
    // (𒐐) CUNEIFORM NUMERIC SIGN FIVE U	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12410, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_199)
{
    // 12419 003F;	
    // (𒐙) CUNEIFORM NUMERIC SIGN FIVE GESH2	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12419, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_200)
{
    // 12422 003F;	
    // (𒐢) CUNEIFORM NUMERIC SIGN FIVE GESHU	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12422, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_201)
{
    // 12427 003F;	
    // (𒐧) CUNEIFORM NUMERIC SIGN FIVE SHAR2	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12427, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_202)
{
    // 12431 003F;	
    // (𒐱) CUNEIFORM NUMERIC SIGN FIVE SHARU	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12431, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_203)
{
    // 12439 003F;	
    // (𒐹) CUNEIFORM NUMERIC SIGN FIVE BURU	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12439, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_204)
{
    // 1244D 003F;	
    // (𒑍) CUNEIFORM NUMERIC SIGN FIVE ASH TENU	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1244D, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_205)
{
    // 12454 003F;	
    // (𒑔) CUNEIFORM NUMERIC SIGN FIVE BAN2	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12454, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_206)
{
    // 12455 003F;	
    // (𒑕) CUNEIFORM NUMERIC SIGN FIVE BAN2 VARIANT FORM	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12455, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_207)
{
    // 1246A 003F;	
    // (𒑪) CUNEIFORM NUMERIC SIGN FIVE U VARIANT FORM	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1246A, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_208)
{
    // 16A65 003F;	
    // (𖩥) MRO DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A65, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_209)
{
    // 16B55 003F;	
    // (𖭕) PAHAWH HMONG DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B55, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_210)
{
    // 1D364 003F;	
    // (𝍤) COUNTING ROD UNIT DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D364, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_211)
{
    // 1E8CB 003F;	
    // (‎‎𞣋‎‎) MENDE KIKAKUI DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E8CB, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_212)
{
    // 1E955 003F;	
    // (‎‎𞥕‎‎) ADLAM DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E955, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_213)
{
    // FF15 003F;	
    // (５) FULLWIDTH DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF15, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_214)
{
    // 0F2E 003F;	
    // (༮) TIBETAN DIGIT HALF FIVE	[1CA8 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0F2E, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_215)
{
    // 1D7D3 003F;	
    // (𝟓) MATHEMATICAL BOLD DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7D3, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_216)
{
    // 1D7DD 003F;	
    // (𝟝) MATHEMATICAL DOUBLE-STRUCK DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7DD, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_217)
{
    // 1D7E7 003F;	
    // (𝟧) MATHEMATICAL SANS-SERIF DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7E7, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_218)
{
    // 1D7F1 003F;	
    // (𝟱) MATHEMATICAL SANS-SERIF BOLD DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7F1, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_219)
{
    // 1D7FB 003F;	
    // (𝟻) MATHEMATICAL MONOSPACE DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7FB, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_220)
{
    // 2464 003F;	
    // (⑤) CIRCLED DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2464, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_221)
{
    // 24F9 003F;	
    // (⓹) DOUBLE CIRCLED DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24F9, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_222)
{
    // 277A 003F;	
    // (❺) DINGBAT NEGATIVE CIRCLED DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x277A, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_223)
{
    // 2784 003F;	
    // (➄) DINGBAT CIRCLED SANS-SERIF DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2784, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_224)
{
    // 278E 003F;	
    // (➎) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT FIVE	[1CA8 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x278E, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_225)
{
    // 2075 003F;	
    // (⁵) SUPERSCRIPT FIVE	[1CA8 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x2075, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_226)
{
    // 2085 003F;	
    // (₅) SUBSCRIPT FIVE	[1CA8 0267 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2085, 0x003F };
    uint32_t const ces[9] = { 0x1CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_227)
{
    // 248C 0021;	
    // (⒌) DIGIT FIVE FULL STOP	[1CA8 0278 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x248C, 0x0021 };
    uint32_t const ces[12] = { 0x1CA8, 0x0278, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_228)
{
    // 248C 003F;	
    // (⒌) DIGIT FIVE FULL STOP	[1CA8 0278 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x248C, 0x003F };
    uint32_t const ces[12] = { 0x1CA8, 0x0278, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_229)
{
    // 1F1A0 0021;	
    // (🆠) SQUARED FIVE POINT ONE	[1CA8 0278 1CA4 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x1F1A0, 0x0021 };
    uint32_t const ces[15] = { 0x1CA8, 0x0278, 0x1CA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_230)
{
    // 1F1A0 003F;	
    // (🆠) SQUARED FIVE POINT ONE	[1CA8 0278 1CA4 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x1F1A0, 0x003F };
    uint32_t const ces[15] = { 0x1CA8, 0x0278, 0x1CA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_231)
{
    // 1F1A0 0061;	
    // (🆠) SQUARED FIVE POINT ONE	[1CA8 0278 1CA4 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x1F1A0, 0x0061 };
    uint32_t const ces[15] = { 0x1CA8, 0x0278, 0x1CA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_232)
{
    // 1F1A0 0041;	
    // (🆠) SQUARED FIVE POINT ONE	[1CA8 0278 1CA4 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x1F1A0, 0x0041 };
    uint32_t const ces[15] = { 0x1CA8, 0x0278, 0x1CA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_233)
{
    // 1F1A0 0062;	
    // (🆠) SQUARED FIVE POINT ONE	[1CA8 0278 1CA4 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x1F1A0, 0x0062 };
    uint32_t const ces[15] = { 0x1CA8, 0x0278, 0x1CA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_234)
{
    // 248C 0061;	
    // (⒌) DIGIT FIVE FULL STOP	[1CA8 0278 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x248C, 0x0061 };
    uint32_t const ces[12] = { 0x1CA8, 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_235)
{
    // 248C 0041;	
    // (⒌) DIGIT FIVE FULL STOP	[1CA8 0278 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x248C, 0x0041 };
    uint32_t const ces[12] = { 0x1CA8, 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_236)
{
    // 248C 0062;	
    // (⒌) DIGIT FIVE FULL STOP	[1CA8 0278 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x248C, 0x0062 };
    uint32_t const ces[12] = { 0x1CA8, 0x0278, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_237)
{
    // 215A 0021;	
    // (⅚) VULGAR FRACTION FIVE SIXTHS	[1CA8 063C 1CA9 0261 | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]

    uint32_t cps[2] = { 0x215A, 0x0021 };
    uint32_t const ces[15] = { 0x1CA8, 0x063C, 0x1CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_238)
{
    // 215A 003F;	
    // (⅚) VULGAR FRACTION FIVE SIXTHS	[1CA8 063C 1CA9 0267 | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]

    uint32_t cps[2] = { 0x215A, 0x003F };
    uint32_t const ces[15] = { 0x1CA8, 0x063C, 0x1CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_239)
{
    // 215A 0061;	
    // (⅚) VULGAR FRACTION FIVE SIXTHS	[1CA8 063C 1CA9 1CAD | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]

    uint32_t cps[2] = { 0x215A, 0x0061 };
    uint32_t const ces[15] = { 0x1CA8, 0x063C, 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_240)
{
    // 215A 0041;	
    // (⅚) VULGAR FRACTION FIVE SIXTHS	[1CA8 063C 1CA9 1CAD | 0020 0020 0020 0020 | 001E 001E 001E 0008 |]

    uint32_t cps[2] = { 0x215A, 0x0041 };
    uint32_t const ces[15] = { 0x1CA8, 0x063C, 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_241)
{
    // 215A 0062;	
    // (⅚) VULGAR FRACTION FIVE SIXTHS	[1CA8 063C 1CA9 1CC6 | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]

    uint32_t cps[2] = { 0x215A, 0x0062 };
    uint32_t const ces[15] = { 0x1CA8, 0x063C, 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_242)
{
    // 215D 0021;	
    // (⅝) VULGAR FRACTION FIVE EIGHTHS	[1CA8 063C 1CAB 0261 | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]

    uint32_t cps[2] = { 0x215D, 0x0021 };
    uint32_t const ces[15] = { 0x1CA8, 0x063C, 0x1CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_243)
{
    // 215D 003F;	
    // (⅝) VULGAR FRACTION FIVE EIGHTHS	[1CA8 063C 1CAB 0267 | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]

    uint32_t cps[2] = { 0x215D, 0x003F };
    uint32_t const ces[15] = { 0x1CA8, 0x063C, 0x1CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_244)
{
    // 215D 0061;	
    // (⅝) VULGAR FRACTION FIVE EIGHTHS	[1CA8 063C 1CAB 1CAD | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]

    uint32_t cps[2] = { 0x215D, 0x0061 };
    uint32_t const ces[15] = { 0x1CA8, 0x063C, 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_245)
{
    // 215D 0041;	
    // (⅝) VULGAR FRACTION FIVE EIGHTHS	[1CA8 063C 1CAB 1CAD | 0020 0020 0020 0020 | 001E 001E 001E 0008 |]

    uint32_t cps[2] = { 0x215D, 0x0041 };
    uint32_t const ces[15] = { 0x1CA8, 0x063C, 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_246)
{
    // 215D 0062;	
    // (⅝) VULGAR FRACTION FIVE EIGHTHS	[1CA8 063C 1CAB 1CC6 | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]

    uint32_t cps[2] = { 0x215D, 0x0062 };
    uint32_t const ces[15] = { 0x1CA8, 0x063C, 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_247)
{
    // 324C 0021;	
    // (㉌) CIRCLED NUMBER FIFTY ON BLACK SQUARE	[1CA8 1CA3 0261 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x324C, 0x0021 };
    uint32_t const ces[12] = { 0x1CA8, 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_248)
{
    // 32BF 0021;	
    // (㊿) CIRCLED NUMBER FIFTY	[1CA8 1CA3 0261 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x32BF, 0x0021 };
    uint32_t const ces[12] = { 0x1CA8, 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_249)
{
    // 324C 003F;	
    // (㉌) CIRCLED NUMBER FIFTY ON BLACK SQUARE	[1CA8 1CA3 0267 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x324C, 0x003F };
    uint32_t const ces[12] = { 0x1CA8, 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_250)
{
    // 32BF 003F;	
    // (㊿) CIRCLED NUMBER FIFTY	[1CA8 1CA3 0267 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x32BF, 0x003F };
    uint32_t const ces[12] = { 0x1CA8, 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_251)
{
    // 324C 0061;	
    // (㉌) CIRCLED NUMBER FIFTY ON BLACK SQUARE	[1CA8 1CA3 1CAD | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x324C, 0x0061 };
    uint32_t const ces[12] = { 0x1CA8, 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_252)
{
    // 32BF 0061;	
    // (㊿) CIRCLED NUMBER FIFTY	[1CA8 1CA3 1CAD | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x32BF, 0x0061 };
    uint32_t const ces[12] = { 0x1CA8, 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_253)
{
    // 324C 0041;	
    // (㉌) CIRCLED NUMBER FIFTY ON BLACK SQUARE	[1CA8 1CA3 1CAD | 0020 0020 0020 | 0006 0006 0008 |]

    uint32_t cps[2] = { 0x324C, 0x0041 };
    uint32_t const ces[12] = { 0x1CA8, 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_254)
{
    // 32BF 0041;	
    // (㊿) CIRCLED NUMBER FIFTY	[1CA8 1CA3 1CAD | 0020 0020 0020 | 0006 0006 0008 |]

    uint32_t cps[2] = { 0x32BF, 0x0041 };
    uint32_t const ces[12] = { 0x1CA8, 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_255)
{
    // 324C 0062;	
    // (㉌) CIRCLED NUMBER FIFTY ON BLACK SQUARE	[1CA8 1CA3 1CC6 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x324C, 0x0062 };
    uint32_t const ces[12] = { 0x1CA8, 0x1CA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_256)
{
    // 32BF 0062;	
    // (㊿) CIRCLED NUMBER FIFTY	[1CA8 1CA3 1CC6 | 0020 0020 0020 | 0006 0006 0002 |]

    uint32_t cps[2] = { 0x32BF, 0x0062 };
    uint32_t const ces[12] = { 0x1CA8, 0x1CA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0006, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_257)
{
    // 0035 0061;	
    // (5) DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0035, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_258)
{
    // 0665 0061;	
    // (‎٥‎) ARABIC-INDIC DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0665, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_259)
{
    // 06F5 0061;	
    // (۵) EXTENDED ARABIC-INDIC DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06F5, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_260)
{
    // 07C5 0061;	
    // (‎‎߅‎‎) NKO DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07C5, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_261)
{
    // 096B 0061;	
    // (५) DEVANAGARI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x096B, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_262)
{
    // 09EB 0061;	
    // (৫) BENGALI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09EB, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_263)
{
    // 0A6B 0061;	
    // (੫) GURMUKHI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A6B, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_264)
{
    // 0AEB 0061;	
    // (૫) GUJARATI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AEB, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_265)
{
    // 0B6B 0061;	
    // (୫) ORIYA DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B6B, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_266)
{
    // 0BEB 0061;	
    // (௫) TAMIL DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BEB, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_267)
{
    // 0C6B 0061;	
    // (౫) TELUGU DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C6B, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_268)
{
    // 0CEB 0061;	
    // (೫) KANNADA DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CEB, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_269)
{
    // 0D6B 0061;	
    // (൫) MALAYALAM DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D6B, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_270)
{
    // 0DEB 0061;	
    // (෫) SINHALA LITH DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DEB, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_271)
{
    // 0E55 0061;	
    // (๕) THAI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E55, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_272)
{
    // 0ED5 0061;	
    // (໕) LAO DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ED5, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_273)
{
    // 0F25 0061;	
    // (༥) TIBETAN DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F25, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_274)
{
    // 1045 0061;	
    // (၅) MYANMAR DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1045, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_275)
{
    // 1095 0061;	
    // (႕) MYANMAR SHAN DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1095, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_276)
{
    // 136D 0061;	
    // (፭) ETHIOPIC DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x136D, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_277)
{
    // 17E5 0061;	
    // (៥) KHMER DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17E5, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_278)
{
    // 17F5 0061;	
    // (៵) KHMER SYMBOL LEK ATTAK PRAM	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17F5, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_279)
{
    // 1815 0061;	
    // (᠕) MONGOLIAN DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1815, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_280)
{
    // 194B 0061;	
    // (᥋) LIMBU DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x194B, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_281)
{
    // 19D5 0061;	
    // (᧕) NEW TAI LUE DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19D5, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_282)
{
    // 1A85 0061;	
    // (᪅) TAI THAM HORA DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A85, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_283)
{
    // 1A95 0061;	
    // (᪕) TAI THAM THAM DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A95, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_284)
{
    // 1B55 0061;	
    // (᭕) BALINESE DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B55, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_285)
{
    // 1BB5 0061;	
    // (᮵) SUNDANESE DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BB5, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_286)
{
    // 1C45 0061;	
    // (᱅) LEPCHA DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C45, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_287)
{
    // 1C55 0061;	
    // (᱕) OL CHIKI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C55, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_288)
{
    // 3025 0061;	
    // (〥) HANGZHOU NUMERAL FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3025, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_289)
{
    // A625 0061;	
    // (꘥) VAI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA625, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_290)
{
    // A8D5 0061;	
    // (꣕) SAURASHTRA DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8D5, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_291)
{
    // A905 0061;	
    // (꤅) KAYAH LI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA905, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_292)
{
    // A9D5 0061;	
    // (꧕) JAVANESE DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9D5, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_293)
{
    // A9F5 0061;	
    // (꧵) MYANMAR TAI LAING DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9F5, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_294)
{
    // AA55 0061;	
    // (꩕) CHAM DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA55, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_295)
{
    // ABF5 0061;	
    // (꯵) MEETEI MAYEK DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABF5, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_296)
{
    // 1010B 0061;	
    // (𐄋) AEGEAN NUMBER FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1010B, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_297)
{
    // 10143 0061;	
    // (𐅃) GREEK ACROPHONIC ATTIC FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10143, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_298)
{
    // 10148 0061;	
    // (𐅈) GREEK ACROPHONIC ATTIC FIVE TALENTS	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10148, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_299)
{
    // 1014F 0061;	
    // (𐅏) GREEK ACROPHONIC ATTIC FIVE STATERS	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1014F, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_300)
{
    // 1015F 0061;	
    // (𐅟) GREEK ACROPHONIC TROEZENIAN FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1015F, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_301)
{
    // 10173 0061;	
    // (𐅳) GREEK ACROPHONIC DELPHIC FIVE MNAS	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10173, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_302)
{
    // 102E5 0061;	
    // (𐋥) COPTIC EPACT DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102E5, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_303)
{
    // 10321 0061;	
    // (𐌡) OLD ITALIC NUMERAL FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10321, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_304)
{
    // 104A5 0061;	
    // (𐒥) OSMANYA DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104A5, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_305)
{
    // 1087D 0061;	
    // (‎‎𐡽‎‎) PALMYRENE NUMBER FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1087D, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_306)
{
    // 108AC 0061;	
    // (‎‎𐢬‎‎) NABATAEAN NUMBER FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108AC, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_307)
{
    // 108FC 0061;	
    // (‎‎𐣼‎‎) HATRAN NUMBER FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108FC, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_308)
{
    // 109C4 0061;	
    // (‎‎𐧄‎‎) MEROITIC CURSIVE NUMBER FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109C4, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_309)
{
    // 10AEC 0061;	
    // (‎‎𐫬‎‎) MANICHAEAN NUMBER FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AEC, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_310)
{
    // 10CFB 0061;	
    // (‎‎𐳻‎‎) OLD HUNGARIAN NUMBER FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10CFB, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_311)
{
    // 10E64 0061;	
    // (‎𐹤‎) RUMI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10E64, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_312)
{
    // 11056 0061;	
    // (𑁖) BRAHMI NUMBER FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11056, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_313)
{
    // 1106B 0061;	
    // (𑁫) BRAHMI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1106B, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_314)
{
    // 110F5 0061;	
    // (𑃵) SORA SOMPENG DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110F5, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_315)
{
    // 1113B 0061;	
    // (𑄻) CHAKMA DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1113B, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_316)
{
    // 111D5 0061;	
    // (𑇕) SHARADA DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111D5, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_317)
{
    // 111E5 0061;	
    // (𑇥) SINHALA ARCHAIC DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111E5, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_318)
{
    // 112F5 0061;	
    // (𑋵) KHUDAWADI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F5, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_319)
{
    // 11455 0061;	
    // (𑑕) NEWA DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11455, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_320)
{
    // 114D5 0061;	
    // (𑓕) TIRHUTA DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D5, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_321)
{
    // 11655 0061;	
    // (𑙕) MODI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11655, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_322)
{
    // 116C5 0061;	
    // (𑛅) TAKRI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116C5, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_323)
{
    // 11735 0061;	
    // (𑜵) AHOM DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11735, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_324)
{
    // 118E5 0061;	
    // (𑣥) WARANG CITI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x118E5, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_325)
{
    // 11C55 0061;	
    // (𑱕) BHAIKSUKI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C55, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_326)
{
    // 11C5E 0061;	
    // (𑱞) BHAIKSUKI NUMBER FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C5E, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_327)
{
    // 11D55 0061;	
    // (𑵕) MASARAM GONDI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D55, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_328)
{
    // 12403 0061;	
    // (𒐃) CUNEIFORM NUMERIC SIGN FIVE ASH	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12403, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_329)
{
    // 1240A 0061;	
    // (𒐊) CUNEIFORM NUMERIC SIGN FIVE DISH	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1240A, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_330)
{
    // 12410 0061;	
    // (𒐐) CUNEIFORM NUMERIC SIGN FIVE U	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12410, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_331)
{
    // 12419 0061;	
    // (𒐙) CUNEIFORM NUMERIC SIGN FIVE GESH2	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12419, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_332)
{
    // 12422 0061;	
    // (𒐢) CUNEIFORM NUMERIC SIGN FIVE GESHU	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12422, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_333)
{
    // 12427 0061;	
    // (𒐧) CUNEIFORM NUMERIC SIGN FIVE SHAR2	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12427, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_334)
{
    // 12431 0061;	
    // (𒐱) CUNEIFORM NUMERIC SIGN FIVE SHARU	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12431, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_335)
{
    // 12439 0061;	
    // (𒐹) CUNEIFORM NUMERIC SIGN FIVE BURU	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12439, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_336)
{
    // 1244D 0061;	
    // (𒑍) CUNEIFORM NUMERIC SIGN FIVE ASH TENU	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1244D, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_337)
{
    // 12454 0061;	
    // (𒑔) CUNEIFORM NUMERIC SIGN FIVE BAN2	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12454, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_338)
{
    // 12455 0061;	
    // (𒑕) CUNEIFORM NUMERIC SIGN FIVE BAN2 VARIANT FORM	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12455, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_339)
{
    // 1246A 0061;	
    // (𒑪) CUNEIFORM NUMERIC SIGN FIVE U VARIANT FORM	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1246A, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_340)
{
    // 16A65 0061;	
    // (𖩥) MRO DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A65, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_341)
{
    // 16B55 0061;	
    // (𖭕) PAHAWH HMONG DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B55, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_342)
{
    // 1D364 0061;	
    // (𝍤) COUNTING ROD UNIT DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D364, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_343)
{
    // 1E8CB 0061;	
    // (‎‎𞣋‎‎) MENDE KIKAKUI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E8CB, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_344)
{
    // 1E955 0061;	
    // (‎‎𞥕‎‎) ADLAM DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E955, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_345)
{
    // 0035 0041;	
    // (5) DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0035, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_346)
{
    // 0665 0041;	
    // (‎٥‎) ARABIC-INDIC DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0665, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_347)
{
    // 06F5 0041;	
    // (۵) EXTENDED ARABIC-INDIC DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06F5, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_348)
{
    // 07C5 0041;	
    // (‎‎߅‎‎) NKO DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x07C5, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_349)
{
    // 096B 0041;	
    // (५) DEVANAGARI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x096B, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_350)
{
    // 09EB 0041;	
    // (৫) BENGALI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x09EB, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_351)
{
    // 0A6B 0041;	
    // (੫) GURMUKHI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0A6B, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_352)
{
    // 0AEB 0041;	
    // (૫) GUJARATI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AEB, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_353)
{
    // 0B6B 0041;	
    // (୫) ORIYA DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B6B, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_354)
{
    // 0BEB 0041;	
    // (௫) TAMIL DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BEB, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_355)
{
    // 0C6B 0041;	
    // (౫) TELUGU DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C6B, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_356)
{
    // 0CEB 0041;	
    // (೫) KANNADA DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0CEB, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_357)
{
    // 0D6B 0041;	
    // (൫) MALAYALAM DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0D6B, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_358)
{
    // 0DEB 0041;	
    // (෫) SINHALA LITH DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DEB, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_359)
{
    // 0E55 0041;	
    // (๕) THAI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E55, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_360)
{
    // 0ED5 0041;	
    // (໕) LAO DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0ED5, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_361)
{
    // 0F25 0041;	
    // (༥) TIBETAN DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F25, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_362)
{
    // 1045 0041;	
    // (၅) MYANMAR DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1045, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_363)
{
    // 1095 0041;	
    // (႕) MYANMAR SHAN DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1095, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_364)
{
    // 136D 0041;	
    // (፭) ETHIOPIC DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x136D, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_365)
{
    // 17E5 0041;	
    // (៥) KHMER DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17E5, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_366)
{
    // 17F5 0041;	
    // (៵) KHMER SYMBOL LEK ATTAK PRAM	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17F5, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_367)
{
    // 1815 0041;	
    // (᠕) MONGOLIAN DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1815, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_368)
{
    // 194B 0041;	
    // (᥋) LIMBU DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x194B, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_369)
{
    // 19D5 0041;	
    // (᧕) NEW TAI LUE DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19D5, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_370)
{
    // 1A85 0041;	
    // (᪅) TAI THAM HORA DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A85, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_371)
{
    // 1A95 0041;	
    // (᪕) TAI THAM THAM DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A95, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_372)
{
    // 1B55 0041;	
    // (᭕) BALINESE DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B55, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_373)
{
    // 1BB5 0041;	
    // (᮵) SUNDANESE DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BB5, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_374)
{
    // 1C45 0041;	
    // (᱅) LEPCHA DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C45, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_375)
{
    // 1C55 0041;	
    // (᱕) OL CHIKI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C55, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_376)
{
    // 3025 0041;	
    // (〥) HANGZHOU NUMERAL FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3025, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_377)
{
    // A625 0041;	
    // (꘥) VAI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA625, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_378)
{
    // A8D5 0041;	
    // (꣕) SAURASHTRA DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA8D5, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_379)
{
    // A905 0041;	
    // (꤅) KAYAH LI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA905, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_380)
{
    // A9D5 0041;	
    // (꧕) JAVANESE DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA9D5, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_381)
{
    // A9F5 0041;	
    // (꧵) MYANMAR TAI LAING DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA9F5, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_382)
{
    // AA55 0041;	
    // (꩕) CHAM DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA55, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_383)
{
    // ABF5 0041;	
    // (꯵) MEETEI MAYEK DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABF5, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_384)
{
    // 1010B 0041;	
    // (𐄋) AEGEAN NUMBER FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1010B, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_385)
{
    // 10143 0041;	
    // (𐅃) GREEK ACROPHONIC ATTIC FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10143, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_386)
{
    // 10148 0041;	
    // (𐅈) GREEK ACROPHONIC ATTIC FIVE TALENTS	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10148, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_387)
{
    // 1014F 0041;	
    // (𐅏) GREEK ACROPHONIC ATTIC FIVE STATERS	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1014F, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_388)
{
    // 1015F 0041;	
    // (𐅟) GREEK ACROPHONIC TROEZENIAN FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1015F, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_389)
{
    // 10173 0041;	
    // (𐅳) GREEK ACROPHONIC DELPHIC FIVE MNAS	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10173, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_390)
{
    // 102E5 0041;	
    // (𐋥) COPTIC EPACT DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102E5, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_391)
{
    // 10321 0041;	
    // (𐌡) OLD ITALIC NUMERAL FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10321, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_392)
{
    // 104A5 0041;	
    // (𐒥) OSMANYA DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104A5, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_393)
{
    // 1087D 0041;	
    // (‎‎𐡽‎‎) PALMYRENE NUMBER FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1087D, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_394)
{
    // 108AC 0041;	
    // (‎‎𐢬‎‎) NABATAEAN NUMBER FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x108AC, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_395)
{
    // 108FC 0041;	
    // (‎‎𐣼‎‎) HATRAN NUMBER FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x108FC, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_396)
{
    // 109C4 0041;	
    // (‎‎𐧄‎‎) MEROITIC CURSIVE NUMBER FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109C4, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_397)
{
    // 10AEC 0041;	
    // (‎‎𐫬‎‎) MANICHAEAN NUMBER FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10AEC, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_398)
{
    // 10CFB 0041;	
    // (‎‎𐳻‎‎) OLD HUNGARIAN NUMBER FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10CFB, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_399)
{
    // 10E64 0041;	
    // (‎𐹤‎) RUMI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10E64, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_400)
{
    // 11056 0041;	
    // (𑁖) BRAHMI NUMBER FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11056, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_401)
{
    // 1106B 0041;	
    // (𑁫) BRAHMI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1106B, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_402)
{
    // 110F5 0041;	
    // (𑃵) SORA SOMPENG DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x110F5, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_403)
{
    // 1113B 0041;	
    // (𑄻) CHAKMA DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1113B, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_404)
{
    // 111D5 0041;	
    // (𑇕) SHARADA DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111D5, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_405)
{
    // 111E5 0041;	
    // (𑇥) SINHALA ARCHAIC DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x111E5, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_406)
{
    // 112F5 0041;	
    // (𑋵) KHUDAWADI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112F5, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_407)
{
    // 11455 0041;	
    // (𑑕) NEWA DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11455, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_408)
{
    // 114D5 0041;	
    // (𑓕) TIRHUTA DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114D5, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_409)
{
    // 11655 0041;	
    // (𑙕) MODI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11655, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_410)
{
    // 116C5 0041;	
    // (𑛅) TAKRI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x116C5, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_411)
{
    // 11735 0041;	
    // (𑜵) AHOM DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11735, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_412)
{
    // 118E5 0041;	
    // (𑣥) WARANG CITI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x118E5, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_413)
{
    // 11C55 0041;	
    // (𑱕) BHAIKSUKI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C55, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_414)
{
    // 11C5E 0041;	
    // (𑱞) BHAIKSUKI NUMBER FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C5E, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_415)
{
    // 11D55 0041;	
    // (𑵕) MASARAM GONDI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11D55, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_416)
{
    // 12403 0041;	
    // (𒐃) CUNEIFORM NUMERIC SIGN FIVE ASH	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12403, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_417)
{
    // 1240A 0041;	
    // (𒐊) CUNEIFORM NUMERIC SIGN FIVE DISH	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1240A, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_418)
{
    // 12410 0041;	
    // (𒐐) CUNEIFORM NUMERIC SIGN FIVE U	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12410, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_419)
{
    // 12419 0041;	
    // (𒐙) CUNEIFORM NUMERIC SIGN FIVE GESH2	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12419, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_420)
{
    // 12422 0041;	
    // (𒐢) CUNEIFORM NUMERIC SIGN FIVE GESHU	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12422, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_421)
{
    // 12427 0041;	
    // (𒐧) CUNEIFORM NUMERIC SIGN FIVE SHAR2	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12427, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_422)
{
    // 12431 0041;	
    // (𒐱) CUNEIFORM NUMERIC SIGN FIVE SHARU	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12431, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_423)
{
    // 12439 0041;	
    // (𒐹) CUNEIFORM NUMERIC SIGN FIVE BURU	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12439, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_424)
{
    // 1244D 0041;	
    // (𒑍) CUNEIFORM NUMERIC SIGN FIVE ASH TENU	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1244D, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_425)
{
    // 12454 0041;	
    // (𒑔) CUNEIFORM NUMERIC SIGN FIVE BAN2	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12454, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_426)
{
    // 12455 0041;	
    // (𒑕) CUNEIFORM NUMERIC SIGN FIVE BAN2 VARIANT FORM	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12455, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_427)
{
    // 1246A 0041;	
    // (𒑪) CUNEIFORM NUMERIC SIGN FIVE U VARIANT FORM	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1246A, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_428)
{
    // 16A65 0041;	
    // (𖩥) MRO DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A65, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_429)
{
    // 16B55 0041;	
    // (𖭕) PAHAWH HMONG DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B55, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_430)
{
    // 1D364 0041;	
    // (𝍤) COUNTING ROD UNIT DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D364, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_431)
{
    // 1E8CB 0041;	
    // (‎‎𞣋‎‎) MENDE KIKAKUI DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E8CB, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_432)
{
    // 1E955 0041;	
    // (‎‎𞥕‎‎) ADLAM DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E955, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_433)
{
    // FF15 0061;	
    // (５) FULLWIDTH DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF15, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_434)
{
    // FF15 0041;	
    // (５) FULLWIDTH DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF15, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_435)
{
    // 0F2E 0061;	
    // (༮) TIBETAN DIGIT HALF FIVE	[1CA8 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0F2E, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_436)
{
    // 0F2E 0041;	
    // (༮) TIBETAN DIGIT HALF FIVE	[1CA8 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x0F2E, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_437)
{
    // 1D7D3 0061;	
    // (𝟓) MATHEMATICAL BOLD DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7D3, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_438)
{
    // 1D7DD 0061;	
    // (𝟝) MATHEMATICAL DOUBLE-STRUCK DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7DD, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_439)
{
    // 1D7E7 0061;	
    // (𝟧) MATHEMATICAL SANS-SERIF DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7E7, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_440)
{
    // 1D7F1 0061;	
    // (𝟱) MATHEMATICAL SANS-SERIF BOLD DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7F1, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_441)
{
    // 1D7FB 0061;	
    // (𝟻) MATHEMATICAL MONOSPACE DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7FB, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_442)
{
    // 1D7D3 0041;	
    // (𝟓) MATHEMATICAL BOLD DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7D3, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_443)
{
    // 1D7DD 0041;	
    // (𝟝) MATHEMATICAL DOUBLE-STRUCK DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7DD, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_444)
{
    // 1D7E7 0041;	
    // (𝟧) MATHEMATICAL SANS-SERIF DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7E7, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_445)
{
    // 1D7F1 0041;	
    // (𝟱) MATHEMATICAL SANS-SERIF BOLD DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7F1, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_446)
{
    // 1D7FB 0041;	
    // (𝟻) MATHEMATICAL MONOSPACE DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7FB, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_447)
{
    // 2464 0061;	
    // (⑤) CIRCLED DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2464, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_448)
{
    // 24F9 0061;	
    // (⓹) DOUBLE CIRCLED DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24F9, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_449)
{
    // 277A 0061;	
    // (❺) DINGBAT NEGATIVE CIRCLED DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x277A, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_450)
{
    // 2784 0061;	
    // (➄) DINGBAT CIRCLED SANS-SERIF DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x2784, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_451)
{
    // 278E 0061;	
    // (➎) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x278E, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_452)
{
    // 2464 0041;	
    // (⑤) CIRCLED DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x2464, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_453)
{
    // 24F9 0041;	
    // (⓹) DOUBLE CIRCLED DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x24F9, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_454)
{
    // 277A 0041;	
    // (❺) DINGBAT NEGATIVE CIRCLED DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x277A, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_455)
{
    // 2784 0041;	
    // (➄) DINGBAT CIRCLED SANS-SERIF DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x2784, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_456)
{
    // 278E 0041;	
    // (➎) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x278E, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_457)
{
    // 2075 0061;	
    // (⁵) SUPERSCRIPT FIVE	[1CA8 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x2075, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_458)
{
    // 2075 0041;	
    // (⁵) SUPERSCRIPT FIVE	[1CA8 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x2075, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_459)
{
    // 2085 0061;	
    // (₅) SUBSCRIPT FIVE	[1CA8 1CAD | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2085, 0x0061 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_460)
{
    // 2085 0041;	
    // (₅) SUBSCRIPT FIVE	[1CA8 1CAD | 0020 0020 | 0015 0008 |]

    uint32_t cps[2] = { 0x2085, 0x0041 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_461)
{
    // 0035 0062;	
    // (5) DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0035, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_462)
{
    // 0665 0062;	
    // (‎٥‎) ARABIC-INDIC DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0665, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_463)
{
    // 06F5 0062;	
    // (۵) EXTENDED ARABIC-INDIC DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06F5, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_464)
{
    // 07C5 0062;	
    // (‎‎߅‎‎) NKO DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07C5, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_465)
{
    // 096B 0062;	
    // (५) DEVANAGARI DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x096B, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_466)
{
    // 09EB 0062;	
    // (৫) BENGALI DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09EB, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_467)
{
    // 0A6B 0062;	
    // (੫) GURMUKHI DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A6B, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_468)
{
    // 0AEB 0062;	
    // (૫) GUJARATI DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AEB, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_469)
{
    // 0B6B 0062;	
    // (୫) ORIYA DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B6B, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_470)
{
    // 0BEB 0062;	
    // (௫) TAMIL DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BEB, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_471)
{
    // 0C6B 0062;	
    // (౫) TELUGU DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C6B, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_472)
{
    // 0CEB 0062;	
    // (೫) KANNADA DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CEB, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_473)
{
    // 0D6B 0062;	
    // (൫) MALAYALAM DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D6B, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_474)
{
    // 0DEB 0062;	
    // (෫) SINHALA LITH DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DEB, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_475)
{
    // 0E55 0062;	
    // (๕) THAI DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E55, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_476)
{
    // 0ED5 0062;	
    // (໕) LAO DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ED5, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_477)
{
    // 0F25 0062;	
    // (༥) TIBETAN DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F25, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_478)
{
    // 1045 0062;	
    // (၅) MYANMAR DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1045, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_479)
{
    // 1095 0062;	
    // (႕) MYANMAR SHAN DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1095, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_480)
{
    // 136D 0062;	
    // (፭) ETHIOPIC DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x136D, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_481)
{
    // 17E5 0062;	
    // (៥) KHMER DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17E5, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_482)
{
    // 17F5 0062;	
    // (៵) KHMER SYMBOL LEK ATTAK PRAM	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17F5, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_483)
{
    // 1815 0062;	
    // (᠕) MONGOLIAN DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1815, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_484)
{
    // 194B 0062;	
    // (᥋) LIMBU DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x194B, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_485)
{
    // 19D5 0062;	
    // (᧕) NEW TAI LUE DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19D5, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_486)
{
    // 1A85 0062;	
    // (᪅) TAI THAM HORA DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A85, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_487)
{
    // 1A95 0062;	
    // (᪕) TAI THAM THAM DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A95, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_488)
{
    // 1B55 0062;	
    // (᭕) BALINESE DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B55, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_489)
{
    // 1BB5 0062;	
    // (᮵) SUNDANESE DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BB5, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_490)
{
    // 1C45 0062;	
    // (᱅) LEPCHA DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C45, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_491)
{
    // 1C55 0062;	
    // (᱕) OL CHIKI DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C55, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_492)
{
    // 3025 0062;	
    // (〥) HANGZHOU NUMERAL FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3025, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_493)
{
    // A625 0062;	
    // (꘥) VAI DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA625, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_494)
{
    // A8D5 0062;	
    // (꣕) SAURASHTRA DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8D5, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_495)
{
    // A905 0062;	
    // (꤅) KAYAH LI DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA905, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_496)
{
    // A9D5 0062;	
    // (꧕) JAVANESE DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9D5, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_497)
{
    // A9F5 0062;	
    // (꧵) MYANMAR TAI LAING DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9F5, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_498)
{
    // AA55 0062;	
    // (꩕) CHAM DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA55, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_087_499)
{
    // ABF5 0062;	
    // (꯵) MEETEI MAYEK DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABF5, 0x0062 };
    uint32_t const ces[9] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

