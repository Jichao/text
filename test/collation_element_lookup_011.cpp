// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_011_000)
{
    // 0691  ; [.23AE.0020.0002] 
    // ARABIC LETTER RREH

    uint32_t const cps[1] = { 0x691 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23ae), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_001)
{
    // 0692  ; [.23AF.0020.0002] 
    // ARABIC LETTER REH WITH SMALL V

    uint32_t const cps[1] = { 0x692 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23af), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_002)
{
    // 0693  ; [.23B0.0020.0002] 
    // ARABIC LETTER REH WITH RING

    uint32_t const cps[1] = { 0x693 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23b0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_003)
{
    // 0694  ; [.23B1.0020.0002] 
    // ARABIC LETTER REH WITH DOT BELOW

    uint32_t const cps[1] = { 0x694 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23b1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_004)
{
    // 0695  ; [.23B2.0020.0002] 
    // ARABIC LETTER REH WITH SMALL V BELOW

    uint32_t const cps[1] = { 0x695 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23b2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_005)
{
    // 0696  ; [.23B3.0020.0002] 
    // ARABIC LETTER REH WITH DOT BELOW AND DOT ABOVE

    uint32_t const cps[1] = { 0x696 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23b3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_006)
{
    // 0697  ; [.23B4.0020.0002] 
    // ARABIC LETTER REH WITH TWO DOTS ABOVE

    uint32_t const cps[1] = { 0x697 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23b4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_007)
{
    // 0698  ; [.23B5.0020.0002] 
    // ARABIC LETTER JEH

    uint32_t const cps[1] = { 0x698 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23b5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_008)
{
    // 0699  ; [.23B6.0020.0002] 
    // ARABIC LETTER REH WITH FOUR DOTS ABOVE

    uint32_t const cps[1] = { 0x699 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23b6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_009)
{
    // 069A  ; [.23C1.0020.0002] 
    // ARABIC LETTER SEEN WITH DOT BELOW AND DOT ABOVE

    uint32_t const cps[1] = { 0x69a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23c1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_010)
{
    // 069B  ; [.23C2.0020.0002] 
    // ARABIC LETTER SEEN WITH THREE DOTS BELOW

    uint32_t const cps[1] = { 0x69b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23c2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_011)
{
    // 069C  ; [.23C3.0020.0002] 
    // ARABIC LETTER SEEN WITH THREE DOTS BELOW AND THREE DOTS ABOVE

    uint32_t const cps[1] = { 0x69c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23c3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_012)
{
    // 069D  ; [.23CC.0020.0002] 
    // ARABIC LETTER SAD WITH TWO DOTS BELOW

    uint32_t const cps[1] = { 0x69d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_013)
{
    // 069E  ; [.23CE.0020.0002] 
    // ARABIC LETTER SAD WITH THREE DOTS ABOVE

    uint32_t const cps[1] = { 0x69e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23ce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_014)
{
    // 069F  ; [.23D2.0020.0002] 
    // ARABIC LETTER TAH WITH THREE DOTS ABOVE

    uint32_t const cps[1] = { 0x69f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23d2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_015)
{
    // 06A0  ; [.23D6.0020.0002] 
    // ARABIC LETTER AIN WITH THREE DOTS ABOVE

    uint32_t const cps[1] = { 0x6a0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23d6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_016)
{
    // 06A1  ; [.23DD.0020.0002] 
    // ARABIC LETTER DOTLESS FEH

    uint32_t const cps[1] = { 0x6a1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23dd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_017)
{
    // 06A2  ; [.23DE.0020.0002] 
    // ARABIC LETTER FEH WITH DOT MOVED BELOW

    uint32_t const cps[1] = { 0x6a2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23de), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_018)
{
    // 06A3  ; [.23E0.0020.0002] 
    // ARABIC LETTER FEH WITH DOT BELOW

    uint32_t const cps[1] = { 0x6a3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23e0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_019)
{
    // 06A4  ; [.23E1.0020.0002] 
    // ARABIC LETTER VEH

    uint32_t const cps[1] = { 0x6a4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23e1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_020)
{
    // 06A5  ; [.23E3.0020.0002] 
    // ARABIC LETTER FEH WITH THREE DOTS BELOW

    uint32_t const cps[1] = { 0x6a5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23e3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_021)
{
    // 06A6  ; [.23E4.0020.0002] 
    // ARABIC LETTER PEHEH

    uint32_t const cps[1] = { 0x6a6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23e4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_022)
{
    // 06A7  ; [.23E9.0020.0002] 
    // ARABIC LETTER QAF WITH DOT ABOVE

    uint32_t const cps[1] = { 0x6a7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23e9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_023)
{
    // 06A8  ; [.23EB.0020.0002] 
    // ARABIC LETTER QAF WITH THREE DOTS ABOVE

    uint32_t const cps[1] = { 0x6a8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23eb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_024)
{
    // 06A9  ; [.23EE.0020.0002] 
    // ARABIC LETTER KEHEH

    uint32_t const cps[1] = { 0x6a9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23ee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_025)
{
    // 06AA  ; [.23EF.0020.0002] 
    // ARABIC LETTER SWASH KAF

    uint32_t const cps[1] = { 0x6aa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23ef), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_026)
{
    // 06AB  ; [.23F0.0020.0002] 
    // ARABIC LETTER KAF WITH RING

    uint32_t const cps[1] = { 0x6ab };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23f0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_027)
{
    // 06AC  ; [.23F1.0020.0002] 
    // ARABIC LETTER KAF WITH DOT ABOVE

    uint32_t const cps[1] = { 0x6ac };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23f1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_028)
{
    // 06AD  ; [.23F3.0020.0002] 
    // ARABIC LETTER NG

    uint32_t const cps[1] = { 0x6ad };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23f3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_029)
{
    // 06AE  ; [.23F4.0020.0002] 
    // ARABIC LETTER KAF WITH THREE DOTS BELOW

    uint32_t const cps[1] = { 0x6ae };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23f4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_030)
{
    // 06AF  ; [.23F6.0020.0002] 
    // ARABIC LETTER GAF

    uint32_t const cps[1] = { 0x6af };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23f6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_031)
{
    // 06B0  ; [.23F8.0020.0002] 
    // ARABIC LETTER GAF WITH RING

    uint32_t const cps[1] = { 0x6b0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23f8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_032)
{
    // 06B1  ; [.23F9.0020.0002] 
    // ARABIC LETTER NGOEH

    uint32_t const cps[1] = { 0x6b1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23f9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_033)
{
    // 06B2  ; [.23FA.0020.0002] 
    // ARABIC LETTER GAF WITH TWO DOTS BELOW

    uint32_t const cps[1] = { 0x6b2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23fa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_034)
{
    // 06B3  ; [.23FB.0020.0002] 
    // ARABIC LETTER GUEH

    uint32_t const cps[1] = { 0x6b3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23fb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_035)
{
    // 06B4  ; [.23FC.0020.0002] 
    // ARABIC LETTER GAF WITH THREE DOTS ABOVE

    uint32_t const cps[1] = { 0x6b4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23fc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_036)
{
    // 06B5  ; [.2403.0020.0002] 
    // ARABIC LETTER LAM WITH SMALL V

    uint32_t const cps[1] = { 0x6b5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2403), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_037)
{
    // 06B6  ; [.2404.0020.0002] 
    // ARABIC LETTER LAM WITH DOT ABOVE

    uint32_t const cps[1] = { 0x6b6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2404), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_038)
{
    // 06B7  ; [.2405.0020.0002] 
    // ARABIC LETTER LAM WITH THREE DOTS ABOVE

    uint32_t const cps[1] = { 0x6b7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2405), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_039)
{
    // 06B8  ; [.2406.0020.0002] 
    // ARABIC LETTER LAM WITH THREE DOTS BELOW

    uint32_t const cps[1] = { 0x6b8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2406), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_040)
{
    // 06B9  ; [.2413.0020.0002] 
    // ARABIC LETTER NOON WITH DOT BELOW

    uint32_t const cps[1] = { 0x6b9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2413), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_041)
{
    // 06BA  ; [.240E.0020.0002] 
    // ARABIC LETTER NOON GHUNNA

    uint32_t const cps[1] = { 0x6ba };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x240e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_042)
{
    // 06BB  ; [.2410.0020.0002] 
    // ARABIC LETTER RNOON

    uint32_t const cps[1] = { 0x6bb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2410), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_043)
{
    // 06BC  ; [.2411.0020.0002] 
    // ARABIC LETTER NOON WITH RING

    uint32_t const cps[1] = { 0x6bc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2411), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_044)
{
    // 06BD  ; [.2412.0020.0002] 
    // ARABIC LETTER NOON WITH THREE DOTS ABOVE

    uint32_t const cps[1] = { 0x6bd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2412), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_045)
{
    // 06BE  ; [.2418.0020.0002] 
    // ARABIC LETTER HEH DOACHASHMEE

    uint32_t const cps[1] = { 0x6be };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2418), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_046)
{
    // 06BF  ; [.238F.0020.0002] 
    // ARABIC LETTER TCHEH WITH DOT ABOVE

    uint32_t const cps[1] = { 0x6bf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x238f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_047)
{
    // 06C0  ; [.241C.0020.0002][.0000.0083.0002] 
    // ARABIC LETTER HEH WITH YEH ABOVE

    uint32_t const cps[1] = { 0x6c0 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x241c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x63), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_011_048)
{
    // 06C1  ; [.2419.0020.0002] 
    // ARABIC LETTER HEH GOAL

    uint32_t const cps[1] = { 0x6c1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2419), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_049)
{
    // 06C2  ; [.2419.0020.0002][.0000.0083.0002] 
    // ARABIC LETTER HEH GOAL WITH HAMZA ABOVE

    uint32_t const cps[1] = { 0x6c2 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2419), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x63), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_011_050)
{
    // 06C3  ; [.241A.0020.0002] 
    // ARABIC LETTER TEH MARBUTA GOAL

    uint32_t const cps[1] = { 0x6c3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x241a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_051)
{
    // 06C4  ; [.241E.0020.0002] 
    // ARABIC LETTER WAW WITH RING

    uint32_t const cps[1] = { 0x6c4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x241e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_052)
{
    // 06C5  ; [.241F.0020.0002] 
    // ARABIC LETTER KIRGHIZ OE

    uint32_t const cps[1] = { 0x6c5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x241f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_053)
{
    // 06C6  ; [.2420.0020.0002] 
    // ARABIC LETTER OE

    uint32_t const cps[1] = { 0x6c6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2420), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_054)
{
    // 06C7  ; [.2421.0020.0002] 
    // ARABIC LETTER U

    uint32_t const cps[1] = { 0x6c7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2421), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_055)
{
    // 06C8  ; [.2422.0020.0002] 
    // ARABIC LETTER YU

    uint32_t const cps[1] = { 0x6c8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2422), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_056)
{
    // 06C9  ; [.2423.0020.0002] 
    // ARABIC LETTER KIRGHIZ YU

    uint32_t const cps[1] = { 0x6c9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2423), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_057)
{
    // 06CA  ; [.2424.0020.0002] 
    // ARABIC LETTER WAW WITH TWO DOTS ABOVE

    uint32_t const cps[1] = { 0x6ca };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2424), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_058)
{
    // 06CB  ; [.2425.0020.0002] 
    // ARABIC LETTER VE

    uint32_t const cps[1] = { 0x6cb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2425), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_059)
{
    // 06CC  ; [.242D.0020.0002] 
    // ARABIC LETTER FARSI YEH

    uint32_t const cps[1] = { 0x6cc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x242d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_060)
{
    // 06CD  ; [.242E.0020.0002] 
    // ARABIC LETTER YEH WITH TAIL

    uint32_t const cps[1] = { 0x6cd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x242e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_061)
{
    // 06CE  ; [.242F.0020.0002] 
    // ARABIC LETTER YEH WITH SMALL V

    uint32_t const cps[1] = { 0x6ce };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x242f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_062)
{
    // 06CF  ; [.2427.0020.0002] 
    // ARABIC LETTER WAW WITH DOT ABOVE

    uint32_t const cps[1] = { 0x6cf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2427), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_063)
{
    // 06D0  ; [.2430.0020.0002] 
    // ARABIC LETTER E

    uint32_t const cps[1] = { 0x6d0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2430), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_064)
{
    // 06D1  ; [.2431.0020.0002] 
    // ARABIC LETTER YEH WITH THREE DOTS BELOW

    uint32_t const cps[1] = { 0x6d1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2431), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_065)
{
    // 06D2  ; [.243A.0020.0002] 
    // ARABIC LETTER YEH BARREE

    uint32_t const cps[1] = { 0x6d2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x243a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_066)
{
    // 06D3  ; [.243A.0020.0002][.0000.0083.0002] 
    // ARABIC LETTER YEH BARREE WITH HAMZA ABOVE

    uint32_t const cps[1] = { 0x6d3 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x243a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x63), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_011_067)
{
    // 06D4  ; [*027A.0020.0002] 
    // ARABIC FULL STOP

    uint32_t const cps[1] = { 0x6d4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_068)
{
    // 06D5  ; [.241C.0020.0002] 
    // ARABIC LETTER AE

    uint32_t const cps[1] = { 0x6d5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x241c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_069)
{
    // 06D6  ; [.0000.0000.0000] 
    // ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA

    uint32_t const cps[1] = { 0x6d6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_070)
{
    // 06D7  ; [.0000.0000.0000] 
    // ARABIC SMALL HIGH LIGATURE QAF WITH LAM WITH ALEF MAKSURA

    uint32_t const cps[1] = { 0x6d7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_071)
{
    // 06D8  ; [.0000.0000.0000] 
    // ARABIC SMALL HIGH MEEM INITIAL FORM

    uint32_t const cps[1] = { 0x6d8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_072)
{
    // 06D9  ; [.0000.0000.0000] 
    // ARABIC SMALL HIGH LAM ALEF

    uint32_t const cps[1] = { 0x6d9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_073)
{
    // 06DA  ; [.0000.0000.0000] 
    // ARABIC SMALL HIGH JEEM

    uint32_t const cps[1] = { 0x6da };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_074)
{
    // 06DB  ; [.0000.0000.0000] 
    // ARABIC SMALL HIGH THREE DOTS

    uint32_t const cps[1] = { 0x6db };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_075)
{
    // 06DC  ; [.0000.0000.0000] 
    // ARABIC SMALL HIGH SEEN

    uint32_t const cps[1] = { 0x6dc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_076)
{
    // 06DD  ; [.0000.0000.0000] 
    // ARABIC END OF AYAH

    uint32_t const cps[1] = { 0x6dd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_077)
{
    // 06DE  ; [*0515.0020.0002] 
    // ARABIC START OF RUB EL HIZB

    uint32_t const cps[1] = { 0x6de };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x515), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_078)
{
    // 06DF  ; [.0000.0000.0000] 
    // ARABIC SMALL HIGH ROUNDED ZERO

    uint32_t const cps[1] = { 0x6df };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_079)
{
    // 06E0  ; [.0000.0000.0000] 
    // ARABIC SMALL HIGH UPRIGHT RECTANGULAR ZERO

    uint32_t const cps[1] = { 0x6e0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_080)
{
    // 06E1  ; [.0000.0000.0000] 
    // ARABIC SMALL HIGH DOTLESS HEAD OF KHAH

    uint32_t const cps[1] = { 0x6e1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_081)
{
    // 06E2  ; [.0000.0000.0000] 
    // ARABIC SMALL HIGH MEEM ISOLATED FORM

    uint32_t const cps[1] = { 0x6e2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_082)
{
    // 06E3  ; [.0000.0000.0000] 
    // ARABIC SMALL LOW SEEN

    uint32_t const cps[1] = { 0x6e3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_083)
{
    // 06E4  ; [.0000.0000.0000] 
    // ARABIC SMALL HIGH MADDA

    uint32_t const cps[1] = { 0x6e4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_084)
{
    // 06E5  ; [.241D.0020.0004] 
    // ARABIC SMALL WAW

    uint32_t const cps[1] = { 0x6e5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x241d), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_085)
{
    // 06E6  ; [.242C.0020.0004] 
    // ARABIC SMALL YEH

    uint32_t const cps[1] = { 0x6e6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x242c), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_086)
{
    // 06E7  ; [.0000.0000.0000] 
    // ARABIC SMALL HIGH YEH

    uint32_t const cps[1] = { 0x6e7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_087)
{
    // 06E8  ; [.0000.0000.0000] 
    // ARABIC SMALL HIGH NOON

    uint32_t const cps[1] = { 0x6e8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_088)
{
    // 06E9  ; [*0516.0020.0002] 
    // ARABIC PLACE OF SAJDAH

    uint32_t const cps[1] = { 0x6e9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x516), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_089)
{
    // 06EA  ; [.0000.0000.0000] 
    // ARABIC EMPTY CENTRE LOW STOP

    uint32_t const cps[1] = { 0x6ea };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_090)
{
    // 06EB  ; [.0000.0000.0000] 
    // ARABIC EMPTY CENTRE HIGH STOP

    uint32_t const cps[1] = { 0x6eb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_091)
{
    // 06EC  ; [.0000.0000.0000] 
    // ARABIC ROUNDED HIGH STOP WITH FILLED CENTRE

    uint32_t const cps[1] = { 0x6ec };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_092)
{
    // 06ED  ; [.0000.0000.0000] 
    // ARABIC SMALL LOW MEEM

    uint32_t const cps[1] = { 0x6ed };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_093)
{
    // 06EE  ; [.23A9.0020.0002] 
    // ARABIC LETTER DAL WITH INVERTED V

    uint32_t const cps[1] = { 0x6ee };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23a9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_094)
{
    // 06EF  ; [.23B7.0020.0002] 
    // ARABIC LETTER REH WITH INVERTED V

    uint32_t const cps[1] = { 0x6ef };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23b7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_095)
{
    // 06F0  ; [.1CA3.0020.0002] 
    // EXTENDED ARABIC-INDIC DIGIT ZERO

    uint32_t const cps[1] = { 0x6f0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_096)
{
    // 06F1  ; [.1CA4.0020.0002] 
    // EXTENDED ARABIC-INDIC DIGIT ONE

    uint32_t const cps[1] = { 0x6f1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_097)
{
    // 06F2  ; [.1CA5.0020.0002] 
    // EXTENDED ARABIC-INDIC DIGIT TWO

    uint32_t const cps[1] = { 0x6f2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_098)
{
    // 06F3  ; [.1CA6.0020.0002] 
    // EXTENDED ARABIC-INDIC DIGIT THREE

    uint32_t const cps[1] = { 0x6f3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_099)
{
    // 06F4  ; [.1CA7.0020.0002] 
    // EXTENDED ARABIC-INDIC DIGIT FOUR

    uint32_t const cps[1] = { 0x6f4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_100)
{
    // 06F5  ; [.1CA8.0020.0002] 
    // EXTENDED ARABIC-INDIC DIGIT FIVE

    uint32_t const cps[1] = { 0x6f5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_101)
{
    // 06F6  ; [.1CA9.0020.0002] 
    // EXTENDED ARABIC-INDIC DIGIT SIX

    uint32_t const cps[1] = { 0x6f6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_102)
{
    // 06F7  ; [.1CAA.0020.0002] 
    // EXTENDED ARABIC-INDIC DIGIT SEVEN

    uint32_t const cps[1] = { 0x6f7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_103)
{
    // 06F8  ; [.1CAB.0020.0002] 
    // EXTENDED ARABIC-INDIC DIGIT EIGHT

    uint32_t const cps[1] = { 0x6f8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_104)
{
    // 06F9  ; [.1CAC.0020.0002] 
    // EXTENDED ARABIC-INDIC DIGIT NINE

    uint32_t const cps[1] = { 0x6f9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_105)
{
    // 06FA  ; [.23C4.0020.0002] 
    // ARABIC LETTER SHEEN WITH DOT BELOW

    uint32_t const cps[1] = { 0x6fa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23c4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_106)
{
    // 06FB  ; [.23CF.0020.0002] 
    // ARABIC LETTER DAD WITH DOT BELOW

    uint32_t const cps[1] = { 0x6fb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23cf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_107)
{
    // 06FC  ; [.23D7.0020.0002] 
    // ARABIC LETTER GHAIN WITH DOT BELOW

    uint32_t const cps[1] = { 0x6fc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23d7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_108)
{
    // 06FD  ; [.2363.0020.0004][.0000.0112.0004] 
    // ARABIC SIGN SINDHI AMPERSAND

    uint32_t const cps[1] = { 0x6fd };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2363), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_011_109)
{
    // 06FE  ; [.2409.0020.0004][.0000.0112.0004] 
    // ARABIC SIGN SINDHI POSTPOSITION MEN

    uint32_t const cps[1] = { 0x6fe };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2409), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_011_110)
{
    // 06FF  ; [.241B.0020.0002] 
    // ARABIC LETTER HEH WITH INVERTED V

    uint32_t const cps[1] = { 0x6ff };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x241b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_111)
{
    // 0700  ; [*02C5.0020.0002] 
    // SYRIAC END OF PARAGRAPH

    uint32_t const cps[1] = { 0x700 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2c5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_112)
{
    // 0701  ; [*027B.0020.0002] 
    // SYRIAC SUPRALINEAR FULL STOP

    uint32_t const cps[1] = { 0x701 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_113)
{
    // 0702  ; [*027C.0020.0002] 
    // SYRIAC SUBLINEAR FULL STOP

    uint32_t const cps[1] = { 0x702 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_114)
{
    // 0703  ; [*023D.0020.0002] 
    // SYRIAC SUPRALINEAR COLON

    uint32_t const cps[1] = { 0x703 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_115)
{
    // 0704  ; [*023E.0020.0002] 
    // SYRIAC SUBLINEAR COLON

    uint32_t const cps[1] = { 0x704 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_116)
{
    // 0705  ; [*023F.0020.0002] 
    // SYRIAC HORIZONTAL COLON

    uint32_t const cps[1] = { 0x705 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_117)
{
    // 0706  ; [*0240.0020.0002] 
    // SYRIAC COLON SKEWED LEFT

    uint32_t const cps[1] = { 0x706 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x240), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_118)
{
    // 0707  ; [*0241.0020.0002] 
    // SYRIAC COLON SKEWED RIGHT

    uint32_t const cps[1] = { 0x707 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x241), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_119)
{
    // 0708  ; [*0242.0020.0002] 
    // SYRIAC SUPRALINEAR COLON SKEWED LEFT

    uint32_t const cps[1] = { 0x708 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x242), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_120)
{
    // 0709  ; [*026C.0020.0002] 
    // SYRIAC SUBLINEAR COLON SKEWED RIGHT

    uint32_t const cps[1] = { 0x709 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x26c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_121)
{
    // 070A  ; [*03D9.0020.0002] 
    // SYRIAC CONTRACTION

    uint32_t const cps[1] = { 0x70a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3d9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_122)
{
    // 070B  ; [*03DA.0020.0002] 
    // SYRIAC HARKLEAN OBELUS

    uint32_t const cps[1] = { 0x70b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3da), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_123)
{
    // 070C  ; [*03DB.0020.0002] 
    // SYRIAC HARKLEAN METOBELUS

    uint32_t const cps[1] = { 0x70c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3db), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_124)
{
    // 070D  ; [*03DC.0020.0002] 
    // SYRIAC HARKLEAN ASTERISCUS

    uint32_t const cps[1] = { 0x70d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3dc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_125)
{
    // 070F  ; [.0000.0000.0000] 
    // SYRIAC ABBREVIATION MARK

    uint32_t const cps[1] = { 0x70f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_126)
{
    // 0710  ; [.243D.0020.0002] 
    // SYRIAC LETTER ALAPH

    uint32_t const cps[1] = { 0x710 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x243d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_127)
{
    // 0711  ; [.0000.0099.0002] 
    // SYRIAC LETTER SUPERSCRIPT ALAPH

    uint32_t const cps[1] = { 0x711 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x79), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_128)
{
    // 0712  ; [.243E.0020.0002] 
    // SYRIAC LETTER BETH

    uint32_t const cps[1] = { 0x712 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x243e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_129)
{
    // 0713  ; [.243F.0020.0002] 
    // SYRIAC LETTER GAMAL

    uint32_t const cps[1] = { 0x713 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x243f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_130)
{
    // 0714  ; [.243F.0020.0004][.0000.0112.0004] 
    // SYRIAC LETTER GAMAL GARSHUNI

    uint32_t const cps[1] = { 0x714 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x243f), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_011_131)
{
    // 0715  ; [.2441.0020.0002] 
    // SYRIAC LETTER DALATH

    uint32_t const cps[1] = { 0x715 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2441), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_132)
{
    // 0716  ; [.2440.0020.0002] 
    // SYRIAC LETTER DOTLESS DALATH RISH

    uint32_t const cps[1] = { 0x716 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2440), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_133)
{
    // 0717  ; [.2442.0020.0002] 
    // SYRIAC LETTER HE

    uint32_t const cps[1] = { 0x717 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2442), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_134)
{
    // 0718  ; [.2443.0020.0002] 
    // SYRIAC LETTER WAW

    uint32_t const cps[1] = { 0x718 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2443), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_135)
{
    // 0719  ; [.2444.0020.0002] 
    // SYRIAC LETTER ZAIN

    uint32_t const cps[1] = { 0x719 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2444), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_136)
{
    // 071A  ; [.2446.0020.0002] 
    // SYRIAC LETTER HETH

    uint32_t const cps[1] = { 0x71a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2446), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_137)
{
    // 071B  ; [.2447.0020.0002] 
    // SYRIAC LETTER TETH

    uint32_t const cps[1] = { 0x71b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2447), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_138)
{
    // 071C  ; [.2447.0020.0004][.0000.0112.0004] 
    // SYRIAC LETTER TETH GARSHUNI

    uint32_t const cps[1] = { 0x71c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2447), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_011_139)
{
    // 071D  ; [.2448.0020.0002] 
    // SYRIAC LETTER YUDH

    uint32_t const cps[1] = { 0x71d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2448), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_140)
{
    // 071E  ; [.2449.0020.0002] 
    // SYRIAC LETTER YUDH HE

    uint32_t const cps[1] = { 0x71e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2449), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_141)
{
    // 071F  ; [.244A.0020.0002] 
    // SYRIAC LETTER KAPH

    uint32_t const cps[1] = { 0x71f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x244a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_142)
{
    // 0720  ; [.244C.0020.0002] 
    // SYRIAC LETTER LAMADH

    uint32_t const cps[1] = { 0x720 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x244c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_143)
{
    // 0721  ; [.244D.0020.0002] 
    // SYRIAC LETTER MIM

    uint32_t const cps[1] = { 0x721 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x244d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_144)
{
    // 0722  ; [.244E.0020.0002] 
    // SYRIAC LETTER NUN

    uint32_t const cps[1] = { 0x722 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x244e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_145)
{
    // 0723  ; [.244F.0020.0002] 
    // SYRIAC LETTER SEMKATH

    uint32_t const cps[1] = { 0x723 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x244f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_146)
{
    // 0724  ; [.244F.0020.0019] 
    // SYRIAC LETTER FINAL SEMKATH

    uint32_t const cps[1] = { 0x724 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x244f), uint8_t(0x0), uint8_t(0x19)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_147)
{
    // 0725  ; [.2450.0020.0002] 
    // SYRIAC LETTER E

    uint32_t const cps[1] = { 0x725 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2450), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_148)
{
    // 0726  ; [.2451.0020.0002] 
    // SYRIAC LETTER PE

    uint32_t const cps[1] = { 0x726 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2451), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_011_149)
{
    // 0727  ; [.2451.0020.0004][.0000.0112.0004] 
    // SYRIAC LETTER REVERSED PE

    uint32_t const cps[1] = { 0x727 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2451), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

