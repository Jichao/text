// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_257_000)
{
    // A13C 003F;	
    // (ꄼ) YI SYLLABLE DDIEP	[412F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA13C, 0x003F };
    uint32_t const ces[9] = { 0x412F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_001)
{
    // A13C 0061;	
    // (ꄼ) YI SYLLABLE DDIEP	[412F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA13C, 0x0061 };
    uint32_t const ces[9] = { 0x412F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_002)
{
    // A13C 0041;	
    // (ꄼ) YI SYLLABLE DDIEP	[412F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA13C, 0x0041 };
    uint32_t const ces[9] = { 0x412F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_003)
{
    // A13C 0062;	
    // (ꄼ) YI SYLLABLE DDIEP	[412F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA13C, 0x0062 };
    uint32_t const ces[9] = { 0x412F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_004)
{
    // A13D 0021;	
    // (ꄽ) YI SYLLABLE DDAT	[4130 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA13D, 0x0021 };
    uint32_t const ces[9] = { 0x4130, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_005)
{
    // A13D 003F;	
    // (ꄽ) YI SYLLABLE DDAT	[4130 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA13D, 0x003F };
    uint32_t const ces[9] = { 0x4130, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_006)
{
    // A13D 0061;	
    // (ꄽ) YI SYLLABLE DDAT	[4130 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA13D, 0x0061 };
    uint32_t const ces[9] = { 0x4130, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_007)
{
    // A13D 0041;	
    // (ꄽ) YI SYLLABLE DDAT	[4130 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA13D, 0x0041 };
    uint32_t const ces[9] = { 0x4130, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_008)
{
    // A13D 0062;	
    // (ꄽ) YI SYLLABLE DDAT	[4130 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA13D, 0x0062 };
    uint32_t const ces[9] = { 0x4130, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_009)
{
    // A13E 0021;	
    // (ꄾ) YI SYLLABLE DDAX	[4131 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA13E, 0x0021 };
    uint32_t const ces[9] = { 0x4131, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_010)
{
    // A13E 003F;	
    // (ꄾ) YI SYLLABLE DDAX	[4131 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA13E, 0x003F };
    uint32_t const ces[9] = { 0x4131, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_011)
{
    // A13E 0061;	
    // (ꄾ) YI SYLLABLE DDAX	[4131 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA13E, 0x0061 };
    uint32_t const ces[9] = { 0x4131, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_012)
{
    // A13E 0041;	
    // (ꄾ) YI SYLLABLE DDAX	[4131 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA13E, 0x0041 };
    uint32_t const ces[9] = { 0x4131, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_013)
{
    // A13E 0062;	
    // (ꄾ) YI SYLLABLE DDAX	[4131 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA13E, 0x0062 };
    uint32_t const ces[9] = { 0x4131, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_014)
{
    // A13F 0021;	
    // (ꄿ) YI SYLLABLE DDA	[4132 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA13F, 0x0021 };
    uint32_t const ces[9] = { 0x4132, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_015)
{
    // A13F 003F;	
    // (ꄿ) YI SYLLABLE DDA	[4132 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA13F, 0x003F };
    uint32_t const ces[9] = { 0x4132, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_016)
{
    // A13F 0061;	
    // (ꄿ) YI SYLLABLE DDA	[4132 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA13F, 0x0061 };
    uint32_t const ces[9] = { 0x4132, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_017)
{
    // A13F 0041;	
    // (ꄿ) YI SYLLABLE DDA	[4132 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA13F, 0x0041 };
    uint32_t const ces[9] = { 0x4132, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_018)
{
    // A13F 0062;	
    // (ꄿ) YI SYLLABLE DDA	[4132 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA13F, 0x0062 };
    uint32_t const ces[9] = { 0x4132, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_019)
{
    // A140 0021;	
    // (ꅀ) YI SYLLABLE DDAP	[4133 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA140, 0x0021 };
    uint32_t const ces[9] = { 0x4133, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_020)
{
    // A140 003F;	
    // (ꅀ) YI SYLLABLE DDAP	[4133 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA140, 0x003F };
    uint32_t const ces[9] = { 0x4133, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_021)
{
    // A140 0061;	
    // (ꅀ) YI SYLLABLE DDAP	[4133 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA140, 0x0061 };
    uint32_t const ces[9] = { 0x4133, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_022)
{
    // A140 0041;	
    // (ꅀ) YI SYLLABLE DDAP	[4133 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA140, 0x0041 };
    uint32_t const ces[9] = { 0x4133, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_023)
{
    // A140 0062;	
    // (ꅀ) YI SYLLABLE DDAP	[4133 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA140, 0x0062 };
    uint32_t const ces[9] = { 0x4133, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_024)
{
    // A141 0021;	
    // (ꅁ) YI SYLLABLE DDUOX	[4134 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA141, 0x0021 };
    uint32_t const ces[9] = { 0x4134, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_025)
{
    // A141 003F;	
    // (ꅁ) YI SYLLABLE DDUOX	[4134 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA141, 0x003F };
    uint32_t const ces[9] = { 0x4134, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_026)
{
    // A141 0061;	
    // (ꅁ) YI SYLLABLE DDUOX	[4134 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA141, 0x0061 };
    uint32_t const ces[9] = { 0x4134, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_027)
{
    // A141 0041;	
    // (ꅁ) YI SYLLABLE DDUOX	[4134 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA141, 0x0041 };
    uint32_t const ces[9] = { 0x4134, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_028)
{
    // A141 0062;	
    // (ꅁ) YI SYLLABLE DDUOX	[4134 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA141, 0x0062 };
    uint32_t const ces[9] = { 0x4134, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_029)
{
    // A142 0021;	
    // (ꅂ) YI SYLLABLE DDUO	[4135 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA142, 0x0021 };
    uint32_t const ces[9] = { 0x4135, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_030)
{
    // A142 003F;	
    // (ꅂ) YI SYLLABLE DDUO	[4135 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA142, 0x003F };
    uint32_t const ces[9] = { 0x4135, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_031)
{
    // A142 0061;	
    // (ꅂ) YI SYLLABLE DDUO	[4135 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA142, 0x0061 };
    uint32_t const ces[9] = { 0x4135, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_032)
{
    // A142 0041;	
    // (ꅂ) YI SYLLABLE DDUO	[4135 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA142, 0x0041 };
    uint32_t const ces[9] = { 0x4135, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_033)
{
    // A142 0062;	
    // (ꅂ) YI SYLLABLE DDUO	[4135 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA142, 0x0062 };
    uint32_t const ces[9] = { 0x4135, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_034)
{
    // A143 0021;	
    // (ꅃ) YI SYLLABLE DDUOP	[4136 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA143, 0x0021 };
    uint32_t const ces[9] = { 0x4136, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_035)
{
    // A143 003F;	
    // (ꅃ) YI SYLLABLE DDUOP	[4136 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA143, 0x003F };
    uint32_t const ces[9] = { 0x4136, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_036)
{
    // A143 0061;	
    // (ꅃ) YI SYLLABLE DDUOP	[4136 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA143, 0x0061 };
    uint32_t const ces[9] = { 0x4136, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_037)
{
    // A143 0041;	
    // (ꅃ) YI SYLLABLE DDUOP	[4136 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA143, 0x0041 };
    uint32_t const ces[9] = { 0x4136, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_038)
{
    // A143 0062;	
    // (ꅃ) YI SYLLABLE DDUOP	[4136 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA143, 0x0062 };
    uint32_t const ces[9] = { 0x4136, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_039)
{
    // A144 0021;	
    // (ꅄ) YI SYLLABLE DDOT	[4137 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA144, 0x0021 };
    uint32_t const ces[9] = { 0x4137, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_040)
{
    // A144 003F;	
    // (ꅄ) YI SYLLABLE DDOT	[4137 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA144, 0x003F };
    uint32_t const ces[9] = { 0x4137, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_041)
{
    // A144 0061;	
    // (ꅄ) YI SYLLABLE DDOT	[4137 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA144, 0x0061 };
    uint32_t const ces[9] = { 0x4137, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_042)
{
    // A144 0041;	
    // (ꅄ) YI SYLLABLE DDOT	[4137 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA144, 0x0041 };
    uint32_t const ces[9] = { 0x4137, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_043)
{
    // A144 0062;	
    // (ꅄ) YI SYLLABLE DDOT	[4137 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA144, 0x0062 };
    uint32_t const ces[9] = { 0x4137, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_044)
{
    // A145 0021;	
    // (ꅅ) YI SYLLABLE DDOX	[4138 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA145, 0x0021 };
    uint32_t const ces[9] = { 0x4138, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_045)
{
    // A145 003F;	
    // (ꅅ) YI SYLLABLE DDOX	[4138 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA145, 0x003F };
    uint32_t const ces[9] = { 0x4138, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_046)
{
    // A145 0061;	
    // (ꅅ) YI SYLLABLE DDOX	[4138 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA145, 0x0061 };
    uint32_t const ces[9] = { 0x4138, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_047)
{
    // A145 0041;	
    // (ꅅ) YI SYLLABLE DDOX	[4138 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA145, 0x0041 };
    uint32_t const ces[9] = { 0x4138, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_048)
{
    // A145 0062;	
    // (ꅅ) YI SYLLABLE DDOX	[4138 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA145, 0x0062 };
    uint32_t const ces[9] = { 0x4138, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_049)
{
    // A146 0021;	
    // (ꅆ) YI SYLLABLE DDO	[4139 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA146, 0x0021 };
    uint32_t const ces[9] = { 0x4139, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_050)
{
    // A146 003F;	
    // (ꅆ) YI SYLLABLE DDO	[4139 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA146, 0x003F };
    uint32_t const ces[9] = { 0x4139, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_051)
{
    // A146 0061;	
    // (ꅆ) YI SYLLABLE DDO	[4139 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA146, 0x0061 };
    uint32_t const ces[9] = { 0x4139, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_052)
{
    // A146 0041;	
    // (ꅆ) YI SYLLABLE DDO	[4139 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA146, 0x0041 };
    uint32_t const ces[9] = { 0x4139, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_053)
{
    // A146 0062;	
    // (ꅆ) YI SYLLABLE DDO	[4139 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA146, 0x0062 };
    uint32_t const ces[9] = { 0x4139, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_054)
{
    // A147 0021;	
    // (ꅇ) YI SYLLABLE DDOP	[413A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA147, 0x0021 };
    uint32_t const ces[9] = { 0x413A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_055)
{
    // A147 003F;	
    // (ꅇ) YI SYLLABLE DDOP	[413A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA147, 0x003F };
    uint32_t const ces[9] = { 0x413A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_056)
{
    // A147 0061;	
    // (ꅇ) YI SYLLABLE DDOP	[413A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA147, 0x0061 };
    uint32_t const ces[9] = { 0x413A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_057)
{
    // A147 0041;	
    // (ꅇ) YI SYLLABLE DDOP	[413A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA147, 0x0041 };
    uint32_t const ces[9] = { 0x413A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_058)
{
    // A147 0062;	
    // (ꅇ) YI SYLLABLE DDOP	[413A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA147, 0x0062 };
    uint32_t const ces[9] = { 0x413A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_059)
{
    // A148 0021;	
    // (ꅈ) YI SYLLABLE DDEX	[413B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA148, 0x0021 };
    uint32_t const ces[9] = { 0x413B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_060)
{
    // A148 003F;	
    // (ꅈ) YI SYLLABLE DDEX	[413B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA148, 0x003F };
    uint32_t const ces[9] = { 0x413B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_061)
{
    // A148 0061;	
    // (ꅈ) YI SYLLABLE DDEX	[413B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA148, 0x0061 };
    uint32_t const ces[9] = { 0x413B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_062)
{
    // A148 0041;	
    // (ꅈ) YI SYLLABLE DDEX	[413B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA148, 0x0041 };
    uint32_t const ces[9] = { 0x413B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_063)
{
    // A148 0062;	
    // (ꅈ) YI SYLLABLE DDEX	[413B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA148, 0x0062 };
    uint32_t const ces[9] = { 0x413B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_064)
{
    // A149 0021;	
    // (ꅉ) YI SYLLABLE DDE	[413C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA149, 0x0021 };
    uint32_t const ces[9] = { 0x413C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_065)
{
    // A149 003F;	
    // (ꅉ) YI SYLLABLE DDE	[413C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA149, 0x003F };
    uint32_t const ces[9] = { 0x413C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_066)
{
    // A149 0061;	
    // (ꅉ) YI SYLLABLE DDE	[413C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA149, 0x0061 };
    uint32_t const ces[9] = { 0x413C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_067)
{
    // A149 0041;	
    // (ꅉ) YI SYLLABLE DDE	[413C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA149, 0x0041 };
    uint32_t const ces[9] = { 0x413C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_068)
{
    // A149 0062;	
    // (ꅉ) YI SYLLABLE DDE	[413C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA149, 0x0062 };
    uint32_t const ces[9] = { 0x413C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_069)
{
    // A14A 0021;	
    // (ꅊ) YI SYLLABLE DDEP	[413D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA14A, 0x0021 };
    uint32_t const ces[9] = { 0x413D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_070)
{
    // A14A 003F;	
    // (ꅊ) YI SYLLABLE DDEP	[413D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA14A, 0x003F };
    uint32_t const ces[9] = { 0x413D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_071)
{
    // A14A 0061;	
    // (ꅊ) YI SYLLABLE DDEP	[413D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA14A, 0x0061 };
    uint32_t const ces[9] = { 0x413D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_072)
{
    // A14A 0041;	
    // (ꅊ) YI SYLLABLE DDEP	[413D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA14A, 0x0041 };
    uint32_t const ces[9] = { 0x413D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_073)
{
    // A14A 0062;	
    // (ꅊ) YI SYLLABLE DDEP	[413D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA14A, 0x0062 };
    uint32_t const ces[9] = { 0x413D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_074)
{
    // A14B 0021;	
    // (ꅋ) YI SYLLABLE DDUT	[413E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA14B, 0x0021 };
    uint32_t const ces[9] = { 0x413E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_075)
{
    // A14B 003F;	
    // (ꅋ) YI SYLLABLE DDUT	[413E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA14B, 0x003F };
    uint32_t const ces[9] = { 0x413E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_076)
{
    // A14B 0061;	
    // (ꅋ) YI SYLLABLE DDUT	[413E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA14B, 0x0061 };
    uint32_t const ces[9] = { 0x413E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_077)
{
    // A14B 0041;	
    // (ꅋ) YI SYLLABLE DDUT	[413E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA14B, 0x0041 };
    uint32_t const ces[9] = { 0x413E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_078)
{
    // A14B 0062;	
    // (ꅋ) YI SYLLABLE DDUT	[413E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA14B, 0x0062 };
    uint32_t const ces[9] = { 0x413E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_079)
{
    // A14C 0021;	
    // (ꅌ) YI SYLLABLE DDUX	[413F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA14C, 0x0021 };
    uint32_t const ces[9] = { 0x413F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_080)
{
    // A14C 003F;	
    // (ꅌ) YI SYLLABLE DDUX	[413F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA14C, 0x003F };
    uint32_t const ces[9] = { 0x413F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_081)
{
    // A14C 0061;	
    // (ꅌ) YI SYLLABLE DDUX	[413F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA14C, 0x0061 };
    uint32_t const ces[9] = { 0x413F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_082)
{
    // A14C 0041;	
    // (ꅌ) YI SYLLABLE DDUX	[413F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA14C, 0x0041 };
    uint32_t const ces[9] = { 0x413F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_083)
{
    // A14C 0062;	
    // (ꅌ) YI SYLLABLE DDUX	[413F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA14C, 0x0062 };
    uint32_t const ces[9] = { 0x413F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_084)
{
    // A14D 0021;	
    // (ꅍ) YI SYLLABLE DDU	[4140 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA14D, 0x0021 };
    uint32_t const ces[9] = { 0x4140, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_085)
{
    // A14D 003F;	
    // (ꅍ) YI SYLLABLE DDU	[4140 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA14D, 0x003F };
    uint32_t const ces[9] = { 0x4140, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_086)
{
    // A14D 0061;	
    // (ꅍ) YI SYLLABLE DDU	[4140 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA14D, 0x0061 };
    uint32_t const ces[9] = { 0x4140, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_087)
{
    // A14D 0041;	
    // (ꅍ) YI SYLLABLE DDU	[4140 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA14D, 0x0041 };
    uint32_t const ces[9] = { 0x4140, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_088)
{
    // A14D 0062;	
    // (ꅍ) YI SYLLABLE DDU	[4140 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA14D, 0x0062 };
    uint32_t const ces[9] = { 0x4140, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_089)
{
    // A14E 0021;	
    // (ꅎ) YI SYLLABLE DDUP	[4141 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA14E, 0x0021 };
    uint32_t const ces[9] = { 0x4141, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_090)
{
    // A14E 003F;	
    // (ꅎ) YI SYLLABLE DDUP	[4141 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA14E, 0x003F };
    uint32_t const ces[9] = { 0x4141, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_091)
{
    // A14E 0061;	
    // (ꅎ) YI SYLLABLE DDUP	[4141 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA14E, 0x0061 };
    uint32_t const ces[9] = { 0x4141, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_092)
{
    // A14E 0041;	
    // (ꅎ) YI SYLLABLE DDUP	[4141 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA14E, 0x0041 };
    uint32_t const ces[9] = { 0x4141, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_093)
{
    // A14E 0062;	
    // (ꅎ) YI SYLLABLE DDUP	[4141 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA14E, 0x0062 };
    uint32_t const ces[9] = { 0x4141, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_094)
{
    // A14F 0021;	
    // (ꅏ) YI SYLLABLE DDURX	[4142 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA14F, 0x0021 };
    uint32_t const ces[9] = { 0x4142, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_095)
{
    // A14F 003F;	
    // (ꅏ) YI SYLLABLE DDURX	[4142 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA14F, 0x003F };
    uint32_t const ces[9] = { 0x4142, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_096)
{
    // A14F 0061;	
    // (ꅏ) YI SYLLABLE DDURX	[4142 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA14F, 0x0061 };
    uint32_t const ces[9] = { 0x4142, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_097)
{
    // A14F 0041;	
    // (ꅏ) YI SYLLABLE DDURX	[4142 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA14F, 0x0041 };
    uint32_t const ces[9] = { 0x4142, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_098)
{
    // A14F 0062;	
    // (ꅏ) YI SYLLABLE DDURX	[4142 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA14F, 0x0062 };
    uint32_t const ces[9] = { 0x4142, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_099)
{
    // A150 0021;	
    // (ꅐ) YI SYLLABLE DDUR	[4143 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA150, 0x0021 };
    uint32_t const ces[9] = { 0x4143, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_100)
{
    // A150 003F;	
    // (ꅐ) YI SYLLABLE DDUR	[4143 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA150, 0x003F };
    uint32_t const ces[9] = { 0x4143, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_101)
{
    // A150 0061;	
    // (ꅐ) YI SYLLABLE DDUR	[4143 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA150, 0x0061 };
    uint32_t const ces[9] = { 0x4143, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_102)
{
    // A150 0041;	
    // (ꅐ) YI SYLLABLE DDUR	[4143 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA150, 0x0041 };
    uint32_t const ces[9] = { 0x4143, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_103)
{
    // A150 0062;	
    // (ꅐ) YI SYLLABLE DDUR	[4143 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA150, 0x0062 };
    uint32_t const ces[9] = { 0x4143, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_104)
{
    // A151 0021;	
    // (ꅑ) YI SYLLABLE NDIT	[4144 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA151, 0x0021 };
    uint32_t const ces[9] = { 0x4144, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_105)
{
    // A151 003F;	
    // (ꅑ) YI SYLLABLE NDIT	[4144 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA151, 0x003F };
    uint32_t const ces[9] = { 0x4144, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_106)
{
    // A151 0061;	
    // (ꅑ) YI SYLLABLE NDIT	[4144 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA151, 0x0061 };
    uint32_t const ces[9] = { 0x4144, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_107)
{
    // A151 0041;	
    // (ꅑ) YI SYLLABLE NDIT	[4144 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA151, 0x0041 };
    uint32_t const ces[9] = { 0x4144, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_108)
{
    // A151 0062;	
    // (ꅑ) YI SYLLABLE NDIT	[4144 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA151, 0x0062 };
    uint32_t const ces[9] = { 0x4144, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_109)
{
    // A152 0021;	
    // (ꅒ) YI SYLLABLE NDIX	[4145 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA152, 0x0021 };
    uint32_t const ces[9] = { 0x4145, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_110)
{
    // A152 003F;	
    // (ꅒ) YI SYLLABLE NDIX	[4145 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA152, 0x003F };
    uint32_t const ces[9] = { 0x4145, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_111)
{
    // A152 0061;	
    // (ꅒ) YI SYLLABLE NDIX	[4145 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA152, 0x0061 };
    uint32_t const ces[9] = { 0x4145, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_112)
{
    // A152 0041;	
    // (ꅒ) YI SYLLABLE NDIX	[4145 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA152, 0x0041 };
    uint32_t const ces[9] = { 0x4145, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_113)
{
    // A152 0062;	
    // (ꅒ) YI SYLLABLE NDIX	[4145 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA152, 0x0062 };
    uint32_t const ces[9] = { 0x4145, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_114)
{
    // A153 0021;	
    // (ꅓ) YI SYLLABLE NDI	[4146 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA153, 0x0021 };
    uint32_t const ces[9] = { 0x4146, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_115)
{
    // A153 003F;	
    // (ꅓ) YI SYLLABLE NDI	[4146 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA153, 0x003F };
    uint32_t const ces[9] = { 0x4146, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_116)
{
    // A153 0061;	
    // (ꅓ) YI SYLLABLE NDI	[4146 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA153, 0x0061 };
    uint32_t const ces[9] = { 0x4146, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_117)
{
    // A153 0041;	
    // (ꅓ) YI SYLLABLE NDI	[4146 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA153, 0x0041 };
    uint32_t const ces[9] = { 0x4146, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_118)
{
    // A153 0062;	
    // (ꅓ) YI SYLLABLE NDI	[4146 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA153, 0x0062 };
    uint32_t const ces[9] = { 0x4146, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_119)
{
    // A154 0021;	
    // (ꅔ) YI SYLLABLE NDIP	[4147 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA154, 0x0021 };
    uint32_t const ces[9] = { 0x4147, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_120)
{
    // A154 003F;	
    // (ꅔ) YI SYLLABLE NDIP	[4147 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA154, 0x003F };
    uint32_t const ces[9] = { 0x4147, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_121)
{
    // A154 0061;	
    // (ꅔ) YI SYLLABLE NDIP	[4147 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA154, 0x0061 };
    uint32_t const ces[9] = { 0x4147, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_122)
{
    // A154 0041;	
    // (ꅔ) YI SYLLABLE NDIP	[4147 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA154, 0x0041 };
    uint32_t const ces[9] = { 0x4147, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_123)
{
    // A154 0062;	
    // (ꅔ) YI SYLLABLE NDIP	[4147 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA154, 0x0062 };
    uint32_t const ces[9] = { 0x4147, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_124)
{
    // A155 0021;	
    // (ꅕ) YI SYLLABLE NDIEX	[4148 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA155, 0x0021 };
    uint32_t const ces[9] = { 0x4148, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_125)
{
    // A155 003F;	
    // (ꅕ) YI SYLLABLE NDIEX	[4148 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA155, 0x003F };
    uint32_t const ces[9] = { 0x4148, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_126)
{
    // A155 0061;	
    // (ꅕ) YI SYLLABLE NDIEX	[4148 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA155, 0x0061 };
    uint32_t const ces[9] = { 0x4148, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_127)
{
    // A155 0041;	
    // (ꅕ) YI SYLLABLE NDIEX	[4148 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA155, 0x0041 };
    uint32_t const ces[9] = { 0x4148, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_128)
{
    // A155 0062;	
    // (ꅕ) YI SYLLABLE NDIEX	[4148 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA155, 0x0062 };
    uint32_t const ces[9] = { 0x4148, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_129)
{
    // A156 0021;	
    // (ꅖ) YI SYLLABLE NDIE	[4149 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA156, 0x0021 };
    uint32_t const ces[9] = { 0x4149, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_130)
{
    // A156 003F;	
    // (ꅖ) YI SYLLABLE NDIE	[4149 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA156, 0x003F };
    uint32_t const ces[9] = { 0x4149, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_131)
{
    // A156 0061;	
    // (ꅖ) YI SYLLABLE NDIE	[4149 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA156, 0x0061 };
    uint32_t const ces[9] = { 0x4149, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_132)
{
    // A156 0041;	
    // (ꅖ) YI SYLLABLE NDIE	[4149 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA156, 0x0041 };
    uint32_t const ces[9] = { 0x4149, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_133)
{
    // A156 0062;	
    // (ꅖ) YI SYLLABLE NDIE	[4149 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA156, 0x0062 };
    uint32_t const ces[9] = { 0x4149, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_134)
{
    // A157 0021;	
    // (ꅗ) YI SYLLABLE NDAT	[414A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA157, 0x0021 };
    uint32_t const ces[9] = { 0x414A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_135)
{
    // A157 003F;	
    // (ꅗ) YI SYLLABLE NDAT	[414A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA157, 0x003F };
    uint32_t const ces[9] = { 0x414A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_136)
{
    // A157 0061;	
    // (ꅗ) YI SYLLABLE NDAT	[414A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA157, 0x0061 };
    uint32_t const ces[9] = { 0x414A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_137)
{
    // A157 0041;	
    // (ꅗ) YI SYLLABLE NDAT	[414A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA157, 0x0041 };
    uint32_t const ces[9] = { 0x414A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_138)
{
    // A157 0062;	
    // (ꅗ) YI SYLLABLE NDAT	[414A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA157, 0x0062 };
    uint32_t const ces[9] = { 0x414A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_139)
{
    // A158 0021;	
    // (ꅘ) YI SYLLABLE NDAX	[414B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA158, 0x0021 };
    uint32_t const ces[9] = { 0x414B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_140)
{
    // A158 003F;	
    // (ꅘ) YI SYLLABLE NDAX	[414B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA158, 0x003F };
    uint32_t const ces[9] = { 0x414B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_141)
{
    // A158 0061;	
    // (ꅘ) YI SYLLABLE NDAX	[414B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA158, 0x0061 };
    uint32_t const ces[9] = { 0x414B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_142)
{
    // A158 0041;	
    // (ꅘ) YI SYLLABLE NDAX	[414B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA158, 0x0041 };
    uint32_t const ces[9] = { 0x414B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_143)
{
    // A158 0062;	
    // (ꅘ) YI SYLLABLE NDAX	[414B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA158, 0x0062 };
    uint32_t const ces[9] = { 0x414B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_144)
{
    // A159 0021;	
    // (ꅙ) YI SYLLABLE NDA	[414C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA159, 0x0021 };
    uint32_t const ces[9] = { 0x414C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_145)
{
    // A159 003F;	
    // (ꅙ) YI SYLLABLE NDA	[414C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA159, 0x003F };
    uint32_t const ces[9] = { 0x414C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_146)
{
    // A159 0061;	
    // (ꅙ) YI SYLLABLE NDA	[414C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA159, 0x0061 };
    uint32_t const ces[9] = { 0x414C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_147)
{
    // A159 0041;	
    // (ꅙ) YI SYLLABLE NDA	[414C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA159, 0x0041 };
    uint32_t const ces[9] = { 0x414C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_148)
{
    // A159 0062;	
    // (ꅙ) YI SYLLABLE NDA	[414C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA159, 0x0062 };
    uint32_t const ces[9] = { 0x414C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_149)
{
    // A15A 0021;	
    // (ꅚ) YI SYLLABLE NDAP	[414D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA15A, 0x0021 };
    uint32_t const ces[9] = { 0x414D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_150)
{
    // A15A 003F;	
    // (ꅚ) YI SYLLABLE NDAP	[414D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA15A, 0x003F };
    uint32_t const ces[9] = { 0x414D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_151)
{
    // A15A 0061;	
    // (ꅚ) YI SYLLABLE NDAP	[414D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA15A, 0x0061 };
    uint32_t const ces[9] = { 0x414D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_152)
{
    // A15A 0041;	
    // (ꅚ) YI SYLLABLE NDAP	[414D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA15A, 0x0041 };
    uint32_t const ces[9] = { 0x414D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_153)
{
    // A15A 0062;	
    // (ꅚ) YI SYLLABLE NDAP	[414D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA15A, 0x0062 };
    uint32_t const ces[9] = { 0x414D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_154)
{
    // A15B 0021;	
    // (ꅛ) YI SYLLABLE NDOT	[414E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA15B, 0x0021 };
    uint32_t const ces[9] = { 0x414E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_155)
{
    // A15B 003F;	
    // (ꅛ) YI SYLLABLE NDOT	[414E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA15B, 0x003F };
    uint32_t const ces[9] = { 0x414E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_156)
{
    // A15B 0061;	
    // (ꅛ) YI SYLLABLE NDOT	[414E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA15B, 0x0061 };
    uint32_t const ces[9] = { 0x414E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_157)
{
    // A15B 0041;	
    // (ꅛ) YI SYLLABLE NDOT	[414E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA15B, 0x0041 };
    uint32_t const ces[9] = { 0x414E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_158)
{
    // A15B 0062;	
    // (ꅛ) YI SYLLABLE NDOT	[414E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA15B, 0x0062 };
    uint32_t const ces[9] = { 0x414E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_159)
{
    // A15C 0021;	
    // (ꅜ) YI SYLLABLE NDOX	[414F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA15C, 0x0021 };
    uint32_t const ces[9] = { 0x414F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_160)
{
    // A15C 003F;	
    // (ꅜ) YI SYLLABLE NDOX	[414F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA15C, 0x003F };
    uint32_t const ces[9] = { 0x414F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_161)
{
    // A15C 0061;	
    // (ꅜ) YI SYLLABLE NDOX	[414F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA15C, 0x0061 };
    uint32_t const ces[9] = { 0x414F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_162)
{
    // A15C 0041;	
    // (ꅜ) YI SYLLABLE NDOX	[414F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA15C, 0x0041 };
    uint32_t const ces[9] = { 0x414F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_163)
{
    // A15C 0062;	
    // (ꅜ) YI SYLLABLE NDOX	[414F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA15C, 0x0062 };
    uint32_t const ces[9] = { 0x414F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_164)
{
    // A15D 0021;	
    // (ꅝ) YI SYLLABLE NDO	[4150 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA15D, 0x0021 };
    uint32_t const ces[9] = { 0x4150, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_165)
{
    // A15D 003F;	
    // (ꅝ) YI SYLLABLE NDO	[4150 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA15D, 0x003F };
    uint32_t const ces[9] = { 0x4150, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_166)
{
    // A15D 0061;	
    // (ꅝ) YI SYLLABLE NDO	[4150 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA15D, 0x0061 };
    uint32_t const ces[9] = { 0x4150, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_167)
{
    // A15D 0041;	
    // (ꅝ) YI SYLLABLE NDO	[4150 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA15D, 0x0041 };
    uint32_t const ces[9] = { 0x4150, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_168)
{
    // A15D 0062;	
    // (ꅝ) YI SYLLABLE NDO	[4150 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA15D, 0x0062 };
    uint32_t const ces[9] = { 0x4150, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_169)
{
    // A15E 0021;	
    // (ꅞ) YI SYLLABLE NDOP	[4151 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA15E, 0x0021 };
    uint32_t const ces[9] = { 0x4151, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_170)
{
    // A15E 003F;	
    // (ꅞ) YI SYLLABLE NDOP	[4151 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA15E, 0x003F };
    uint32_t const ces[9] = { 0x4151, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_171)
{
    // A15E 0061;	
    // (ꅞ) YI SYLLABLE NDOP	[4151 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA15E, 0x0061 };
    uint32_t const ces[9] = { 0x4151, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_172)
{
    // A15E 0041;	
    // (ꅞ) YI SYLLABLE NDOP	[4151 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA15E, 0x0041 };
    uint32_t const ces[9] = { 0x4151, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_173)
{
    // A15E 0062;	
    // (ꅞ) YI SYLLABLE NDOP	[4151 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA15E, 0x0062 };
    uint32_t const ces[9] = { 0x4151, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_174)
{
    // A15F 0021;	
    // (ꅟ) YI SYLLABLE NDEX	[4152 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA15F, 0x0021 };
    uint32_t const ces[9] = { 0x4152, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_175)
{
    // A15F 003F;	
    // (ꅟ) YI SYLLABLE NDEX	[4152 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA15F, 0x003F };
    uint32_t const ces[9] = { 0x4152, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_176)
{
    // A15F 0061;	
    // (ꅟ) YI SYLLABLE NDEX	[4152 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA15F, 0x0061 };
    uint32_t const ces[9] = { 0x4152, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_177)
{
    // A15F 0041;	
    // (ꅟ) YI SYLLABLE NDEX	[4152 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA15F, 0x0041 };
    uint32_t const ces[9] = { 0x4152, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_178)
{
    // A15F 0062;	
    // (ꅟ) YI SYLLABLE NDEX	[4152 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA15F, 0x0062 };
    uint32_t const ces[9] = { 0x4152, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_179)
{
    // A160 0021;	
    // (ꅠ) YI SYLLABLE NDE	[4153 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA160, 0x0021 };
    uint32_t const ces[9] = { 0x4153, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_180)
{
    // A160 003F;	
    // (ꅠ) YI SYLLABLE NDE	[4153 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA160, 0x003F };
    uint32_t const ces[9] = { 0x4153, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_181)
{
    // A160 0061;	
    // (ꅠ) YI SYLLABLE NDE	[4153 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA160, 0x0061 };
    uint32_t const ces[9] = { 0x4153, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_182)
{
    // A160 0041;	
    // (ꅠ) YI SYLLABLE NDE	[4153 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA160, 0x0041 };
    uint32_t const ces[9] = { 0x4153, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_183)
{
    // A160 0062;	
    // (ꅠ) YI SYLLABLE NDE	[4153 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA160, 0x0062 };
    uint32_t const ces[9] = { 0x4153, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_184)
{
    // A161 0021;	
    // (ꅡ) YI SYLLABLE NDEP	[4154 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA161, 0x0021 };
    uint32_t const ces[9] = { 0x4154, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_185)
{
    // A161 003F;	
    // (ꅡ) YI SYLLABLE NDEP	[4154 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA161, 0x003F };
    uint32_t const ces[9] = { 0x4154, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_186)
{
    // A161 0061;	
    // (ꅡ) YI SYLLABLE NDEP	[4154 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA161, 0x0061 };
    uint32_t const ces[9] = { 0x4154, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_187)
{
    // A161 0041;	
    // (ꅡ) YI SYLLABLE NDEP	[4154 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA161, 0x0041 };
    uint32_t const ces[9] = { 0x4154, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_188)
{
    // A161 0062;	
    // (ꅡ) YI SYLLABLE NDEP	[4154 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA161, 0x0062 };
    uint32_t const ces[9] = { 0x4154, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_189)
{
    // A162 0021;	
    // (ꅢ) YI SYLLABLE NDUT	[4155 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA162, 0x0021 };
    uint32_t const ces[9] = { 0x4155, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_190)
{
    // A162 003F;	
    // (ꅢ) YI SYLLABLE NDUT	[4155 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA162, 0x003F };
    uint32_t const ces[9] = { 0x4155, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_191)
{
    // A162 0061;	
    // (ꅢ) YI SYLLABLE NDUT	[4155 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA162, 0x0061 };
    uint32_t const ces[9] = { 0x4155, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_192)
{
    // A162 0041;	
    // (ꅢ) YI SYLLABLE NDUT	[4155 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA162, 0x0041 };
    uint32_t const ces[9] = { 0x4155, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_193)
{
    // A162 0062;	
    // (ꅢ) YI SYLLABLE NDUT	[4155 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA162, 0x0062 };
    uint32_t const ces[9] = { 0x4155, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_194)
{
    // A163 0021;	
    // (ꅣ) YI SYLLABLE NDUX	[4156 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA163, 0x0021 };
    uint32_t const ces[9] = { 0x4156, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_195)
{
    // A163 003F;	
    // (ꅣ) YI SYLLABLE NDUX	[4156 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA163, 0x003F };
    uint32_t const ces[9] = { 0x4156, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_196)
{
    // A163 0061;	
    // (ꅣ) YI SYLLABLE NDUX	[4156 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA163, 0x0061 };
    uint32_t const ces[9] = { 0x4156, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_197)
{
    // A163 0041;	
    // (ꅣ) YI SYLLABLE NDUX	[4156 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA163, 0x0041 };
    uint32_t const ces[9] = { 0x4156, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_198)
{
    // A163 0062;	
    // (ꅣ) YI SYLLABLE NDUX	[4156 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA163, 0x0062 };
    uint32_t const ces[9] = { 0x4156, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_199)
{
    // A164 0021;	
    // (ꅤ) YI SYLLABLE NDU	[4157 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA164, 0x0021 };
    uint32_t const ces[9] = { 0x4157, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_200)
{
    // A164 003F;	
    // (ꅤ) YI SYLLABLE NDU	[4157 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA164, 0x003F };
    uint32_t const ces[9] = { 0x4157, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_201)
{
    // A164 0061;	
    // (ꅤ) YI SYLLABLE NDU	[4157 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA164, 0x0061 };
    uint32_t const ces[9] = { 0x4157, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_202)
{
    // A164 0041;	
    // (ꅤ) YI SYLLABLE NDU	[4157 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA164, 0x0041 };
    uint32_t const ces[9] = { 0x4157, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_203)
{
    // A164 0062;	
    // (ꅤ) YI SYLLABLE NDU	[4157 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA164, 0x0062 };
    uint32_t const ces[9] = { 0x4157, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_204)
{
    // A165 0021;	
    // (ꅥ) YI SYLLABLE NDUP	[4158 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA165, 0x0021 };
    uint32_t const ces[9] = { 0x4158, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_205)
{
    // A165 003F;	
    // (ꅥ) YI SYLLABLE NDUP	[4158 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA165, 0x003F };
    uint32_t const ces[9] = { 0x4158, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_206)
{
    // A165 0061;	
    // (ꅥ) YI SYLLABLE NDUP	[4158 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA165, 0x0061 };
    uint32_t const ces[9] = { 0x4158, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_207)
{
    // A165 0041;	
    // (ꅥ) YI SYLLABLE NDUP	[4158 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA165, 0x0041 };
    uint32_t const ces[9] = { 0x4158, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_208)
{
    // A165 0062;	
    // (ꅥ) YI SYLLABLE NDUP	[4158 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA165, 0x0062 };
    uint32_t const ces[9] = { 0x4158, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_209)
{
    // A166 0021;	
    // (ꅦ) YI SYLLABLE NDURX	[4159 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA166, 0x0021 };
    uint32_t const ces[9] = { 0x4159, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_210)
{
    // A166 003F;	
    // (ꅦ) YI SYLLABLE NDURX	[4159 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA166, 0x003F };
    uint32_t const ces[9] = { 0x4159, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_211)
{
    // A166 0061;	
    // (ꅦ) YI SYLLABLE NDURX	[4159 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA166, 0x0061 };
    uint32_t const ces[9] = { 0x4159, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_212)
{
    // A166 0041;	
    // (ꅦ) YI SYLLABLE NDURX	[4159 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA166, 0x0041 };
    uint32_t const ces[9] = { 0x4159, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_213)
{
    // A166 0062;	
    // (ꅦ) YI SYLLABLE NDURX	[4159 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA166, 0x0062 };
    uint32_t const ces[9] = { 0x4159, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_214)
{
    // A167 0021;	
    // (ꅧ) YI SYLLABLE NDUR	[415A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA167, 0x0021 };
    uint32_t const ces[9] = { 0x415A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_215)
{
    // A167 003F;	
    // (ꅧ) YI SYLLABLE NDUR	[415A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA167, 0x003F };
    uint32_t const ces[9] = { 0x415A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_216)
{
    // A167 0061;	
    // (ꅧ) YI SYLLABLE NDUR	[415A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA167, 0x0061 };
    uint32_t const ces[9] = { 0x415A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_217)
{
    // A167 0041;	
    // (ꅧ) YI SYLLABLE NDUR	[415A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA167, 0x0041 };
    uint32_t const ces[9] = { 0x415A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_218)
{
    // A167 0062;	
    // (ꅧ) YI SYLLABLE NDUR	[415A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA167, 0x0062 };
    uint32_t const ces[9] = { 0x415A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_219)
{
    // A168 0021;	
    // (ꅨ) YI SYLLABLE HNIT	[415B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA168, 0x0021 };
    uint32_t const ces[9] = { 0x415B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_220)
{
    // A168 003F;	
    // (ꅨ) YI SYLLABLE HNIT	[415B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA168, 0x003F };
    uint32_t const ces[9] = { 0x415B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_221)
{
    // A168 0061;	
    // (ꅨ) YI SYLLABLE HNIT	[415B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA168, 0x0061 };
    uint32_t const ces[9] = { 0x415B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_222)
{
    // A168 0041;	
    // (ꅨ) YI SYLLABLE HNIT	[415B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA168, 0x0041 };
    uint32_t const ces[9] = { 0x415B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_223)
{
    // A168 0062;	
    // (ꅨ) YI SYLLABLE HNIT	[415B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA168, 0x0062 };
    uint32_t const ces[9] = { 0x415B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_224)
{
    // A169 0021;	
    // (ꅩ) YI SYLLABLE HNIX	[415C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA169, 0x0021 };
    uint32_t const ces[9] = { 0x415C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_225)
{
    // A169 003F;	
    // (ꅩ) YI SYLLABLE HNIX	[415C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA169, 0x003F };
    uint32_t const ces[9] = { 0x415C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_226)
{
    // A169 0061;	
    // (ꅩ) YI SYLLABLE HNIX	[415C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA169, 0x0061 };
    uint32_t const ces[9] = { 0x415C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_227)
{
    // A169 0041;	
    // (ꅩ) YI SYLLABLE HNIX	[415C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA169, 0x0041 };
    uint32_t const ces[9] = { 0x415C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_228)
{
    // A169 0062;	
    // (ꅩ) YI SYLLABLE HNIX	[415C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA169, 0x0062 };
    uint32_t const ces[9] = { 0x415C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_229)
{
    // A16A 0021;	
    // (ꅪ) YI SYLLABLE HNI	[415D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA16A, 0x0021 };
    uint32_t const ces[9] = { 0x415D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_230)
{
    // A16A 003F;	
    // (ꅪ) YI SYLLABLE HNI	[415D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA16A, 0x003F };
    uint32_t const ces[9] = { 0x415D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_231)
{
    // A16A 0061;	
    // (ꅪ) YI SYLLABLE HNI	[415D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA16A, 0x0061 };
    uint32_t const ces[9] = { 0x415D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_232)
{
    // A16A 0041;	
    // (ꅪ) YI SYLLABLE HNI	[415D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA16A, 0x0041 };
    uint32_t const ces[9] = { 0x415D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_233)
{
    // A16A 0062;	
    // (ꅪ) YI SYLLABLE HNI	[415D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA16A, 0x0062 };
    uint32_t const ces[9] = { 0x415D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_234)
{
    // A16B 0021;	
    // (ꅫ) YI SYLLABLE HNIP	[415E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA16B, 0x0021 };
    uint32_t const ces[9] = { 0x415E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_235)
{
    // A16B 003F;	
    // (ꅫ) YI SYLLABLE HNIP	[415E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA16B, 0x003F };
    uint32_t const ces[9] = { 0x415E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_236)
{
    // A16B 0061;	
    // (ꅫ) YI SYLLABLE HNIP	[415E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA16B, 0x0061 };
    uint32_t const ces[9] = { 0x415E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_237)
{
    // A16B 0041;	
    // (ꅫ) YI SYLLABLE HNIP	[415E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA16B, 0x0041 };
    uint32_t const ces[9] = { 0x415E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_238)
{
    // A16B 0062;	
    // (ꅫ) YI SYLLABLE HNIP	[415E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA16B, 0x0062 };
    uint32_t const ces[9] = { 0x415E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_239)
{
    // A16C 0021;	
    // (ꅬ) YI SYLLABLE HNIET	[415F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA16C, 0x0021 };
    uint32_t const ces[9] = { 0x415F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_240)
{
    // A16C 003F;	
    // (ꅬ) YI SYLLABLE HNIET	[415F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA16C, 0x003F };
    uint32_t const ces[9] = { 0x415F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_241)
{
    // A16C 0061;	
    // (ꅬ) YI SYLLABLE HNIET	[415F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA16C, 0x0061 };
    uint32_t const ces[9] = { 0x415F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_242)
{
    // A16C 0041;	
    // (ꅬ) YI SYLLABLE HNIET	[415F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA16C, 0x0041 };
    uint32_t const ces[9] = { 0x415F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_243)
{
    // A16C 0062;	
    // (ꅬ) YI SYLLABLE HNIET	[415F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA16C, 0x0062 };
    uint32_t const ces[9] = { 0x415F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_244)
{
    // A16D 0021;	
    // (ꅭ) YI SYLLABLE HNIEX	[4160 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA16D, 0x0021 };
    uint32_t const ces[9] = { 0x4160, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_245)
{
    // A16D 003F;	
    // (ꅭ) YI SYLLABLE HNIEX	[4160 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA16D, 0x003F };
    uint32_t const ces[9] = { 0x4160, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_246)
{
    // A16D 0061;	
    // (ꅭ) YI SYLLABLE HNIEX	[4160 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA16D, 0x0061 };
    uint32_t const ces[9] = { 0x4160, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_247)
{
    // A16D 0041;	
    // (ꅭ) YI SYLLABLE HNIEX	[4160 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA16D, 0x0041 };
    uint32_t const ces[9] = { 0x4160, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_248)
{
    // A16D 0062;	
    // (ꅭ) YI SYLLABLE HNIEX	[4160 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA16D, 0x0062 };
    uint32_t const ces[9] = { 0x4160, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_249)
{
    // A16E 0021;	
    // (ꅮ) YI SYLLABLE HNIE	[4161 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA16E, 0x0021 };
    uint32_t const ces[9] = { 0x4161, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_250)
{
    // A16E 003F;	
    // (ꅮ) YI SYLLABLE HNIE	[4161 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA16E, 0x003F };
    uint32_t const ces[9] = { 0x4161, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_251)
{
    // A16E 0061;	
    // (ꅮ) YI SYLLABLE HNIE	[4161 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA16E, 0x0061 };
    uint32_t const ces[9] = { 0x4161, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_252)
{
    // A16E 0041;	
    // (ꅮ) YI SYLLABLE HNIE	[4161 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA16E, 0x0041 };
    uint32_t const ces[9] = { 0x4161, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_253)
{
    // A16E 0062;	
    // (ꅮ) YI SYLLABLE HNIE	[4161 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA16E, 0x0062 };
    uint32_t const ces[9] = { 0x4161, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_254)
{
    // A16F 0021;	
    // (ꅯ) YI SYLLABLE HNIEP	[4162 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA16F, 0x0021 };
    uint32_t const ces[9] = { 0x4162, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_255)
{
    // A16F 003F;	
    // (ꅯ) YI SYLLABLE HNIEP	[4162 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA16F, 0x003F };
    uint32_t const ces[9] = { 0x4162, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_256)
{
    // A16F 0061;	
    // (ꅯ) YI SYLLABLE HNIEP	[4162 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA16F, 0x0061 };
    uint32_t const ces[9] = { 0x4162, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_257)
{
    // A16F 0041;	
    // (ꅯ) YI SYLLABLE HNIEP	[4162 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA16F, 0x0041 };
    uint32_t const ces[9] = { 0x4162, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_258)
{
    // A16F 0062;	
    // (ꅯ) YI SYLLABLE HNIEP	[4162 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA16F, 0x0062 };
    uint32_t const ces[9] = { 0x4162, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_259)
{
    // A170 0021;	
    // (ꅰ) YI SYLLABLE HNAT	[4163 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA170, 0x0021 };
    uint32_t const ces[9] = { 0x4163, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_260)
{
    // A170 003F;	
    // (ꅰ) YI SYLLABLE HNAT	[4163 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA170, 0x003F };
    uint32_t const ces[9] = { 0x4163, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_261)
{
    // A170 0061;	
    // (ꅰ) YI SYLLABLE HNAT	[4163 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA170, 0x0061 };
    uint32_t const ces[9] = { 0x4163, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_262)
{
    // A170 0041;	
    // (ꅰ) YI SYLLABLE HNAT	[4163 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA170, 0x0041 };
    uint32_t const ces[9] = { 0x4163, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_263)
{
    // A170 0062;	
    // (ꅰ) YI SYLLABLE HNAT	[4163 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA170, 0x0062 };
    uint32_t const ces[9] = { 0x4163, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_264)
{
    // A171 0021;	
    // (ꅱ) YI SYLLABLE HNAX	[4164 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA171, 0x0021 };
    uint32_t const ces[9] = { 0x4164, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_265)
{
    // A171 003F;	
    // (ꅱ) YI SYLLABLE HNAX	[4164 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA171, 0x003F };
    uint32_t const ces[9] = { 0x4164, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_266)
{
    // A171 0061;	
    // (ꅱ) YI SYLLABLE HNAX	[4164 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA171, 0x0061 };
    uint32_t const ces[9] = { 0x4164, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_267)
{
    // A171 0041;	
    // (ꅱ) YI SYLLABLE HNAX	[4164 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA171, 0x0041 };
    uint32_t const ces[9] = { 0x4164, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_268)
{
    // A171 0062;	
    // (ꅱ) YI SYLLABLE HNAX	[4164 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA171, 0x0062 };
    uint32_t const ces[9] = { 0x4164, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_269)
{
    // A172 0021;	
    // (ꅲ) YI SYLLABLE HNA	[4165 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA172, 0x0021 };
    uint32_t const ces[9] = { 0x4165, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_270)
{
    // A172 003F;	
    // (ꅲ) YI SYLLABLE HNA	[4165 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA172, 0x003F };
    uint32_t const ces[9] = { 0x4165, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_271)
{
    // A172 0061;	
    // (ꅲ) YI SYLLABLE HNA	[4165 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA172, 0x0061 };
    uint32_t const ces[9] = { 0x4165, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_272)
{
    // A172 0041;	
    // (ꅲ) YI SYLLABLE HNA	[4165 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA172, 0x0041 };
    uint32_t const ces[9] = { 0x4165, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_273)
{
    // A172 0062;	
    // (ꅲ) YI SYLLABLE HNA	[4165 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA172, 0x0062 };
    uint32_t const ces[9] = { 0x4165, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_274)
{
    // A173 0021;	
    // (ꅳ) YI SYLLABLE HNAP	[4166 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA173, 0x0021 };
    uint32_t const ces[9] = { 0x4166, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_275)
{
    // A173 003F;	
    // (ꅳ) YI SYLLABLE HNAP	[4166 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA173, 0x003F };
    uint32_t const ces[9] = { 0x4166, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_276)
{
    // A173 0061;	
    // (ꅳ) YI SYLLABLE HNAP	[4166 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA173, 0x0061 };
    uint32_t const ces[9] = { 0x4166, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_277)
{
    // A173 0041;	
    // (ꅳ) YI SYLLABLE HNAP	[4166 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA173, 0x0041 };
    uint32_t const ces[9] = { 0x4166, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_278)
{
    // A173 0062;	
    // (ꅳ) YI SYLLABLE HNAP	[4166 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA173, 0x0062 };
    uint32_t const ces[9] = { 0x4166, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_279)
{
    // A174 0021;	
    // (ꅴ) YI SYLLABLE HNUOX	[4167 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA174, 0x0021 };
    uint32_t const ces[9] = { 0x4167, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_280)
{
    // A174 003F;	
    // (ꅴ) YI SYLLABLE HNUOX	[4167 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA174, 0x003F };
    uint32_t const ces[9] = { 0x4167, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_281)
{
    // A174 0061;	
    // (ꅴ) YI SYLLABLE HNUOX	[4167 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA174, 0x0061 };
    uint32_t const ces[9] = { 0x4167, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_282)
{
    // A174 0041;	
    // (ꅴ) YI SYLLABLE HNUOX	[4167 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA174, 0x0041 };
    uint32_t const ces[9] = { 0x4167, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_283)
{
    // A174 0062;	
    // (ꅴ) YI SYLLABLE HNUOX	[4167 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA174, 0x0062 };
    uint32_t const ces[9] = { 0x4167, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_284)
{
    // A175 0021;	
    // (ꅵ) YI SYLLABLE HNUO	[4168 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA175, 0x0021 };
    uint32_t const ces[9] = { 0x4168, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_285)
{
    // A175 003F;	
    // (ꅵ) YI SYLLABLE HNUO	[4168 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA175, 0x003F };
    uint32_t const ces[9] = { 0x4168, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_286)
{
    // A175 0061;	
    // (ꅵ) YI SYLLABLE HNUO	[4168 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA175, 0x0061 };
    uint32_t const ces[9] = { 0x4168, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_287)
{
    // A175 0041;	
    // (ꅵ) YI SYLLABLE HNUO	[4168 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA175, 0x0041 };
    uint32_t const ces[9] = { 0x4168, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_288)
{
    // A175 0062;	
    // (ꅵ) YI SYLLABLE HNUO	[4168 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA175, 0x0062 };
    uint32_t const ces[9] = { 0x4168, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_289)
{
    // A176 0021;	
    // (ꅶ) YI SYLLABLE HNOT	[4169 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA176, 0x0021 };
    uint32_t const ces[9] = { 0x4169, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_290)
{
    // A176 003F;	
    // (ꅶ) YI SYLLABLE HNOT	[4169 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA176, 0x003F };
    uint32_t const ces[9] = { 0x4169, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_291)
{
    // A176 0061;	
    // (ꅶ) YI SYLLABLE HNOT	[4169 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA176, 0x0061 };
    uint32_t const ces[9] = { 0x4169, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_292)
{
    // A176 0041;	
    // (ꅶ) YI SYLLABLE HNOT	[4169 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA176, 0x0041 };
    uint32_t const ces[9] = { 0x4169, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_293)
{
    // A176 0062;	
    // (ꅶ) YI SYLLABLE HNOT	[4169 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA176, 0x0062 };
    uint32_t const ces[9] = { 0x4169, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_294)
{
    // A177 0021;	
    // (ꅷ) YI SYLLABLE HNOX	[416A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA177, 0x0021 };
    uint32_t const ces[9] = { 0x416A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_295)
{
    // A177 003F;	
    // (ꅷ) YI SYLLABLE HNOX	[416A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA177, 0x003F };
    uint32_t const ces[9] = { 0x416A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_296)
{
    // A177 0061;	
    // (ꅷ) YI SYLLABLE HNOX	[416A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA177, 0x0061 };
    uint32_t const ces[9] = { 0x416A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_297)
{
    // A177 0041;	
    // (ꅷ) YI SYLLABLE HNOX	[416A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA177, 0x0041 };
    uint32_t const ces[9] = { 0x416A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_298)
{
    // A177 0062;	
    // (ꅷ) YI SYLLABLE HNOX	[416A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA177, 0x0062 };
    uint32_t const ces[9] = { 0x416A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_299)
{
    // A178 0021;	
    // (ꅸ) YI SYLLABLE HNOP	[416B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA178, 0x0021 };
    uint32_t const ces[9] = { 0x416B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_300)
{
    // A178 003F;	
    // (ꅸ) YI SYLLABLE HNOP	[416B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA178, 0x003F };
    uint32_t const ces[9] = { 0x416B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_301)
{
    // A178 0061;	
    // (ꅸ) YI SYLLABLE HNOP	[416B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA178, 0x0061 };
    uint32_t const ces[9] = { 0x416B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_302)
{
    // A178 0041;	
    // (ꅸ) YI SYLLABLE HNOP	[416B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA178, 0x0041 };
    uint32_t const ces[9] = { 0x416B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_303)
{
    // A178 0062;	
    // (ꅸ) YI SYLLABLE HNOP	[416B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA178, 0x0062 };
    uint32_t const ces[9] = { 0x416B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_304)
{
    // A179 0021;	
    // (ꅹ) YI SYLLABLE HNEX	[416C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA179, 0x0021 };
    uint32_t const ces[9] = { 0x416C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_305)
{
    // A179 003F;	
    // (ꅹ) YI SYLLABLE HNEX	[416C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA179, 0x003F };
    uint32_t const ces[9] = { 0x416C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_306)
{
    // A179 0061;	
    // (ꅹ) YI SYLLABLE HNEX	[416C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA179, 0x0061 };
    uint32_t const ces[9] = { 0x416C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_307)
{
    // A179 0041;	
    // (ꅹ) YI SYLLABLE HNEX	[416C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA179, 0x0041 };
    uint32_t const ces[9] = { 0x416C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_308)
{
    // A179 0062;	
    // (ꅹ) YI SYLLABLE HNEX	[416C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA179, 0x0062 };
    uint32_t const ces[9] = { 0x416C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_309)
{
    // A17A 0021;	
    // (ꅺ) YI SYLLABLE HNE	[416D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA17A, 0x0021 };
    uint32_t const ces[9] = { 0x416D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_310)
{
    // A17A 003F;	
    // (ꅺ) YI SYLLABLE HNE	[416D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA17A, 0x003F };
    uint32_t const ces[9] = { 0x416D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_311)
{
    // A17A 0061;	
    // (ꅺ) YI SYLLABLE HNE	[416D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA17A, 0x0061 };
    uint32_t const ces[9] = { 0x416D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_312)
{
    // A17A 0041;	
    // (ꅺ) YI SYLLABLE HNE	[416D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA17A, 0x0041 };
    uint32_t const ces[9] = { 0x416D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_313)
{
    // A17A 0062;	
    // (ꅺ) YI SYLLABLE HNE	[416D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA17A, 0x0062 };
    uint32_t const ces[9] = { 0x416D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_314)
{
    // A17B 0021;	
    // (ꅻ) YI SYLLABLE HNEP	[416E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA17B, 0x0021 };
    uint32_t const ces[9] = { 0x416E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_315)
{
    // A17B 003F;	
    // (ꅻ) YI SYLLABLE HNEP	[416E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA17B, 0x003F };
    uint32_t const ces[9] = { 0x416E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_316)
{
    // A17B 0061;	
    // (ꅻ) YI SYLLABLE HNEP	[416E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA17B, 0x0061 };
    uint32_t const ces[9] = { 0x416E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_317)
{
    // A17B 0041;	
    // (ꅻ) YI SYLLABLE HNEP	[416E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA17B, 0x0041 };
    uint32_t const ces[9] = { 0x416E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_318)
{
    // A17B 0062;	
    // (ꅻ) YI SYLLABLE HNEP	[416E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA17B, 0x0062 };
    uint32_t const ces[9] = { 0x416E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_319)
{
    // A17C 0021;	
    // (ꅼ) YI SYLLABLE HNUT	[416F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA17C, 0x0021 };
    uint32_t const ces[9] = { 0x416F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_320)
{
    // A17C 003F;	
    // (ꅼ) YI SYLLABLE HNUT	[416F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA17C, 0x003F };
    uint32_t const ces[9] = { 0x416F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_321)
{
    // A17C 0061;	
    // (ꅼ) YI SYLLABLE HNUT	[416F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA17C, 0x0061 };
    uint32_t const ces[9] = { 0x416F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_322)
{
    // A17C 0041;	
    // (ꅼ) YI SYLLABLE HNUT	[416F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA17C, 0x0041 };
    uint32_t const ces[9] = { 0x416F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_323)
{
    // A17C 0062;	
    // (ꅼ) YI SYLLABLE HNUT	[416F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA17C, 0x0062 };
    uint32_t const ces[9] = { 0x416F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_324)
{
    // A17D 0021;	
    // (ꅽ) YI SYLLABLE NIT	[4170 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA17D, 0x0021 };
    uint32_t const ces[9] = { 0x4170, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_325)
{
    // A17D 003F;	
    // (ꅽ) YI SYLLABLE NIT	[4170 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA17D, 0x003F };
    uint32_t const ces[9] = { 0x4170, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_326)
{
    // A17D 0061;	
    // (ꅽ) YI SYLLABLE NIT	[4170 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA17D, 0x0061 };
    uint32_t const ces[9] = { 0x4170, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_327)
{
    // A17D 0041;	
    // (ꅽ) YI SYLLABLE NIT	[4170 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA17D, 0x0041 };
    uint32_t const ces[9] = { 0x4170, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_328)
{
    // A17D 0062;	
    // (ꅽ) YI SYLLABLE NIT	[4170 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA17D, 0x0062 };
    uint32_t const ces[9] = { 0x4170, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_329)
{
    // A17E 0021;	
    // (ꅾ) YI SYLLABLE NIX	[4171 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA17E, 0x0021 };
    uint32_t const ces[9] = { 0x4171, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_330)
{
    // A17E 003F;	
    // (ꅾ) YI SYLLABLE NIX	[4171 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA17E, 0x003F };
    uint32_t const ces[9] = { 0x4171, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_331)
{
    // A17E 0061;	
    // (ꅾ) YI SYLLABLE NIX	[4171 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA17E, 0x0061 };
    uint32_t const ces[9] = { 0x4171, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_332)
{
    // A17E 0041;	
    // (ꅾ) YI SYLLABLE NIX	[4171 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA17E, 0x0041 };
    uint32_t const ces[9] = { 0x4171, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_333)
{
    // A17E 0062;	
    // (ꅾ) YI SYLLABLE NIX	[4171 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA17E, 0x0062 };
    uint32_t const ces[9] = { 0x4171, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_334)
{
    // A17F 0021;	
    // (ꅿ) YI SYLLABLE NI	[4172 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA17F, 0x0021 };
    uint32_t const ces[9] = { 0x4172, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_335)
{
    // A17F 003F;	
    // (ꅿ) YI SYLLABLE NI	[4172 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA17F, 0x003F };
    uint32_t const ces[9] = { 0x4172, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_336)
{
    // A17F 0061;	
    // (ꅿ) YI SYLLABLE NI	[4172 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA17F, 0x0061 };
    uint32_t const ces[9] = { 0x4172, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_337)
{
    // A17F 0041;	
    // (ꅿ) YI SYLLABLE NI	[4172 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA17F, 0x0041 };
    uint32_t const ces[9] = { 0x4172, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_338)
{
    // A17F 0062;	
    // (ꅿ) YI SYLLABLE NI	[4172 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA17F, 0x0062 };
    uint32_t const ces[9] = { 0x4172, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_339)
{
    // A180 0021;	
    // (ꆀ) YI SYLLABLE NIP	[4173 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA180, 0x0021 };
    uint32_t const ces[9] = { 0x4173, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_340)
{
    // A180 003F;	
    // (ꆀ) YI SYLLABLE NIP	[4173 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA180, 0x003F };
    uint32_t const ces[9] = { 0x4173, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_341)
{
    // A180 0061;	
    // (ꆀ) YI SYLLABLE NIP	[4173 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA180, 0x0061 };
    uint32_t const ces[9] = { 0x4173, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_342)
{
    // A180 0041;	
    // (ꆀ) YI SYLLABLE NIP	[4173 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA180, 0x0041 };
    uint32_t const ces[9] = { 0x4173, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_343)
{
    // A180 0062;	
    // (ꆀ) YI SYLLABLE NIP	[4173 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA180, 0x0062 };
    uint32_t const ces[9] = { 0x4173, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_344)
{
    // A181 0021;	
    // (ꆁ) YI SYLLABLE NIEX	[4174 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA181, 0x0021 };
    uint32_t const ces[9] = { 0x4174, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_345)
{
    // A181 003F;	
    // (ꆁ) YI SYLLABLE NIEX	[4174 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA181, 0x003F };
    uint32_t const ces[9] = { 0x4174, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_346)
{
    // A181 0061;	
    // (ꆁ) YI SYLLABLE NIEX	[4174 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA181, 0x0061 };
    uint32_t const ces[9] = { 0x4174, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_347)
{
    // A181 0041;	
    // (ꆁ) YI SYLLABLE NIEX	[4174 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA181, 0x0041 };
    uint32_t const ces[9] = { 0x4174, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_348)
{
    // A181 0062;	
    // (ꆁ) YI SYLLABLE NIEX	[4174 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA181, 0x0062 };
    uint32_t const ces[9] = { 0x4174, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_349)
{
    // A182 0021;	
    // (ꆂ) YI SYLLABLE NIE	[4175 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA182, 0x0021 };
    uint32_t const ces[9] = { 0x4175, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_350)
{
    // A182 003F;	
    // (ꆂ) YI SYLLABLE NIE	[4175 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA182, 0x003F };
    uint32_t const ces[9] = { 0x4175, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_351)
{
    // A182 0061;	
    // (ꆂ) YI SYLLABLE NIE	[4175 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA182, 0x0061 };
    uint32_t const ces[9] = { 0x4175, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_352)
{
    // A182 0041;	
    // (ꆂ) YI SYLLABLE NIE	[4175 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA182, 0x0041 };
    uint32_t const ces[9] = { 0x4175, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_353)
{
    // A182 0062;	
    // (ꆂ) YI SYLLABLE NIE	[4175 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA182, 0x0062 };
    uint32_t const ces[9] = { 0x4175, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_354)
{
    // A183 0021;	
    // (ꆃ) YI SYLLABLE NIEP	[4176 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA183, 0x0021 };
    uint32_t const ces[9] = { 0x4176, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_355)
{
    // A183 003F;	
    // (ꆃ) YI SYLLABLE NIEP	[4176 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA183, 0x003F };
    uint32_t const ces[9] = { 0x4176, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_356)
{
    // A183 0061;	
    // (ꆃ) YI SYLLABLE NIEP	[4176 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA183, 0x0061 };
    uint32_t const ces[9] = { 0x4176, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_357)
{
    // A183 0041;	
    // (ꆃ) YI SYLLABLE NIEP	[4176 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA183, 0x0041 };
    uint32_t const ces[9] = { 0x4176, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_358)
{
    // A183 0062;	
    // (ꆃ) YI SYLLABLE NIEP	[4176 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA183, 0x0062 };
    uint32_t const ces[9] = { 0x4176, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_359)
{
    // A184 0021;	
    // (ꆄ) YI SYLLABLE NAX	[4177 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA184, 0x0021 };
    uint32_t const ces[9] = { 0x4177, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_360)
{
    // A184 003F;	
    // (ꆄ) YI SYLLABLE NAX	[4177 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA184, 0x003F };
    uint32_t const ces[9] = { 0x4177, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_361)
{
    // A184 0061;	
    // (ꆄ) YI SYLLABLE NAX	[4177 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA184, 0x0061 };
    uint32_t const ces[9] = { 0x4177, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_362)
{
    // A184 0041;	
    // (ꆄ) YI SYLLABLE NAX	[4177 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA184, 0x0041 };
    uint32_t const ces[9] = { 0x4177, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_363)
{
    // A184 0062;	
    // (ꆄ) YI SYLLABLE NAX	[4177 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA184, 0x0062 };
    uint32_t const ces[9] = { 0x4177, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_364)
{
    // A185 0021;	
    // (ꆅ) YI SYLLABLE NA	[4178 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA185, 0x0021 };
    uint32_t const ces[9] = { 0x4178, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_365)
{
    // A185 003F;	
    // (ꆅ) YI SYLLABLE NA	[4178 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA185, 0x003F };
    uint32_t const ces[9] = { 0x4178, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_366)
{
    // A185 0061;	
    // (ꆅ) YI SYLLABLE NA	[4178 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA185, 0x0061 };
    uint32_t const ces[9] = { 0x4178, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_367)
{
    // A185 0041;	
    // (ꆅ) YI SYLLABLE NA	[4178 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA185, 0x0041 };
    uint32_t const ces[9] = { 0x4178, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_368)
{
    // A185 0062;	
    // (ꆅ) YI SYLLABLE NA	[4178 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA185, 0x0062 };
    uint32_t const ces[9] = { 0x4178, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_369)
{
    // A186 0021;	
    // (ꆆ) YI SYLLABLE NAP	[4179 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA186, 0x0021 };
    uint32_t const ces[9] = { 0x4179, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_370)
{
    // A186 003F;	
    // (ꆆ) YI SYLLABLE NAP	[4179 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA186, 0x003F };
    uint32_t const ces[9] = { 0x4179, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_371)
{
    // A186 0061;	
    // (ꆆ) YI SYLLABLE NAP	[4179 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA186, 0x0061 };
    uint32_t const ces[9] = { 0x4179, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_372)
{
    // A186 0041;	
    // (ꆆ) YI SYLLABLE NAP	[4179 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA186, 0x0041 };
    uint32_t const ces[9] = { 0x4179, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_373)
{
    // A186 0062;	
    // (ꆆ) YI SYLLABLE NAP	[4179 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA186, 0x0062 };
    uint32_t const ces[9] = { 0x4179, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_374)
{
    // A187 0021;	
    // (ꆇ) YI SYLLABLE NUOX	[417A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA187, 0x0021 };
    uint32_t const ces[9] = { 0x417A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_375)
{
    // A187 003F;	
    // (ꆇ) YI SYLLABLE NUOX	[417A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA187, 0x003F };
    uint32_t const ces[9] = { 0x417A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_376)
{
    // A187 0061;	
    // (ꆇ) YI SYLLABLE NUOX	[417A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA187, 0x0061 };
    uint32_t const ces[9] = { 0x417A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_377)
{
    // A187 0041;	
    // (ꆇ) YI SYLLABLE NUOX	[417A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA187, 0x0041 };
    uint32_t const ces[9] = { 0x417A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_378)
{
    // A187 0062;	
    // (ꆇ) YI SYLLABLE NUOX	[417A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA187, 0x0062 };
    uint32_t const ces[9] = { 0x417A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_379)
{
    // A188 0021;	
    // (ꆈ) YI SYLLABLE NUO	[417B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA188, 0x0021 };
    uint32_t const ces[9] = { 0x417B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_380)
{
    // A188 003F;	
    // (ꆈ) YI SYLLABLE NUO	[417B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA188, 0x003F };
    uint32_t const ces[9] = { 0x417B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_381)
{
    // A188 0061;	
    // (ꆈ) YI SYLLABLE NUO	[417B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA188, 0x0061 };
    uint32_t const ces[9] = { 0x417B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_382)
{
    // A188 0041;	
    // (ꆈ) YI SYLLABLE NUO	[417B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA188, 0x0041 };
    uint32_t const ces[9] = { 0x417B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_383)
{
    // A188 0062;	
    // (ꆈ) YI SYLLABLE NUO	[417B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA188, 0x0062 };
    uint32_t const ces[9] = { 0x417B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_384)
{
    // A189 0021;	
    // (ꆉ) YI SYLLABLE NUOP	[417C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA189, 0x0021 };
    uint32_t const ces[9] = { 0x417C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_385)
{
    // A189 003F;	
    // (ꆉ) YI SYLLABLE NUOP	[417C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA189, 0x003F };
    uint32_t const ces[9] = { 0x417C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_386)
{
    // A189 0061;	
    // (ꆉ) YI SYLLABLE NUOP	[417C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA189, 0x0061 };
    uint32_t const ces[9] = { 0x417C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_387)
{
    // A189 0041;	
    // (ꆉ) YI SYLLABLE NUOP	[417C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA189, 0x0041 };
    uint32_t const ces[9] = { 0x417C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_388)
{
    // A189 0062;	
    // (ꆉ) YI SYLLABLE NUOP	[417C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA189, 0x0062 };
    uint32_t const ces[9] = { 0x417C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_389)
{
    // A18A 0021;	
    // (ꆊ) YI SYLLABLE NOT	[417D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA18A, 0x0021 };
    uint32_t const ces[9] = { 0x417D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_390)
{
    // A18A 003F;	
    // (ꆊ) YI SYLLABLE NOT	[417D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA18A, 0x003F };
    uint32_t const ces[9] = { 0x417D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_391)
{
    // A18A 0061;	
    // (ꆊ) YI SYLLABLE NOT	[417D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA18A, 0x0061 };
    uint32_t const ces[9] = { 0x417D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_392)
{
    // A18A 0041;	
    // (ꆊ) YI SYLLABLE NOT	[417D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA18A, 0x0041 };
    uint32_t const ces[9] = { 0x417D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_393)
{
    // A18A 0062;	
    // (ꆊ) YI SYLLABLE NOT	[417D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA18A, 0x0062 };
    uint32_t const ces[9] = { 0x417D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_394)
{
    // A18B 0021;	
    // (ꆋ) YI SYLLABLE NOX	[417E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA18B, 0x0021 };
    uint32_t const ces[9] = { 0x417E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_395)
{
    // A18B 003F;	
    // (ꆋ) YI SYLLABLE NOX	[417E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA18B, 0x003F };
    uint32_t const ces[9] = { 0x417E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_396)
{
    // A18B 0061;	
    // (ꆋ) YI SYLLABLE NOX	[417E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA18B, 0x0061 };
    uint32_t const ces[9] = { 0x417E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_397)
{
    // A18B 0041;	
    // (ꆋ) YI SYLLABLE NOX	[417E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA18B, 0x0041 };
    uint32_t const ces[9] = { 0x417E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_398)
{
    // A18B 0062;	
    // (ꆋ) YI SYLLABLE NOX	[417E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA18B, 0x0062 };
    uint32_t const ces[9] = { 0x417E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_399)
{
    // A18C 0021;	
    // (ꆌ) YI SYLLABLE NO	[417F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA18C, 0x0021 };
    uint32_t const ces[9] = { 0x417F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_400)
{
    // A18C 003F;	
    // (ꆌ) YI SYLLABLE NO	[417F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA18C, 0x003F };
    uint32_t const ces[9] = { 0x417F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_401)
{
    // A18C 0061;	
    // (ꆌ) YI SYLLABLE NO	[417F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA18C, 0x0061 };
    uint32_t const ces[9] = { 0x417F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_402)
{
    // A18C 0041;	
    // (ꆌ) YI SYLLABLE NO	[417F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA18C, 0x0041 };
    uint32_t const ces[9] = { 0x417F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_403)
{
    // A18C 0062;	
    // (ꆌ) YI SYLLABLE NO	[417F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA18C, 0x0062 };
    uint32_t const ces[9] = { 0x417F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_404)
{
    // A18D 0021;	
    // (ꆍ) YI SYLLABLE NOP	[4180 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA18D, 0x0021 };
    uint32_t const ces[9] = { 0x4180, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_405)
{
    // A18D 003F;	
    // (ꆍ) YI SYLLABLE NOP	[4180 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA18D, 0x003F };
    uint32_t const ces[9] = { 0x4180, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_406)
{
    // A18D 0061;	
    // (ꆍ) YI SYLLABLE NOP	[4180 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA18D, 0x0061 };
    uint32_t const ces[9] = { 0x4180, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_407)
{
    // A18D 0041;	
    // (ꆍ) YI SYLLABLE NOP	[4180 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA18D, 0x0041 };
    uint32_t const ces[9] = { 0x4180, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_408)
{
    // A18D 0062;	
    // (ꆍ) YI SYLLABLE NOP	[4180 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA18D, 0x0062 };
    uint32_t const ces[9] = { 0x4180, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_409)
{
    // A18E 0021;	
    // (ꆎ) YI SYLLABLE NEX	[4181 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA18E, 0x0021 };
    uint32_t const ces[9] = { 0x4181, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_410)
{
    // A18E 003F;	
    // (ꆎ) YI SYLLABLE NEX	[4181 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA18E, 0x003F };
    uint32_t const ces[9] = { 0x4181, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_411)
{
    // A18E 0061;	
    // (ꆎ) YI SYLLABLE NEX	[4181 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA18E, 0x0061 };
    uint32_t const ces[9] = { 0x4181, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_412)
{
    // A18E 0041;	
    // (ꆎ) YI SYLLABLE NEX	[4181 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA18E, 0x0041 };
    uint32_t const ces[9] = { 0x4181, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_413)
{
    // A18E 0062;	
    // (ꆎ) YI SYLLABLE NEX	[4181 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA18E, 0x0062 };
    uint32_t const ces[9] = { 0x4181, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_414)
{
    // A18F 0021;	
    // (ꆏ) YI SYLLABLE NE	[4182 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA18F, 0x0021 };
    uint32_t const ces[9] = { 0x4182, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_415)
{
    // A18F 003F;	
    // (ꆏ) YI SYLLABLE NE	[4182 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA18F, 0x003F };
    uint32_t const ces[9] = { 0x4182, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_416)
{
    // A18F 0061;	
    // (ꆏ) YI SYLLABLE NE	[4182 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA18F, 0x0061 };
    uint32_t const ces[9] = { 0x4182, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_417)
{
    // A18F 0041;	
    // (ꆏ) YI SYLLABLE NE	[4182 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA18F, 0x0041 };
    uint32_t const ces[9] = { 0x4182, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_418)
{
    // A18F 0062;	
    // (ꆏ) YI SYLLABLE NE	[4182 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA18F, 0x0062 };
    uint32_t const ces[9] = { 0x4182, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_419)
{
    // A190 0021;	
    // (ꆐ) YI SYLLABLE NEP	[4183 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA190, 0x0021 };
    uint32_t const ces[9] = { 0x4183, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_420)
{
    // A190 003F;	
    // (ꆐ) YI SYLLABLE NEP	[4183 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA190, 0x003F };
    uint32_t const ces[9] = { 0x4183, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_421)
{
    // A190 0061;	
    // (ꆐ) YI SYLLABLE NEP	[4183 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA190, 0x0061 };
    uint32_t const ces[9] = { 0x4183, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_422)
{
    // A190 0041;	
    // (ꆐ) YI SYLLABLE NEP	[4183 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA190, 0x0041 };
    uint32_t const ces[9] = { 0x4183, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_423)
{
    // A190 0062;	
    // (ꆐ) YI SYLLABLE NEP	[4183 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA190, 0x0062 };
    uint32_t const ces[9] = { 0x4183, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_424)
{
    // A191 0021;	
    // (ꆑ) YI SYLLABLE NUT	[4184 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA191, 0x0021 };
    uint32_t const ces[9] = { 0x4184, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_425)
{
    // A191 003F;	
    // (ꆑ) YI SYLLABLE NUT	[4184 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA191, 0x003F };
    uint32_t const ces[9] = { 0x4184, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_426)
{
    // A191 0061;	
    // (ꆑ) YI SYLLABLE NUT	[4184 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA191, 0x0061 };
    uint32_t const ces[9] = { 0x4184, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_427)
{
    // A191 0041;	
    // (ꆑ) YI SYLLABLE NUT	[4184 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA191, 0x0041 };
    uint32_t const ces[9] = { 0x4184, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_428)
{
    // A191 0062;	
    // (ꆑ) YI SYLLABLE NUT	[4184 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA191, 0x0062 };
    uint32_t const ces[9] = { 0x4184, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_429)
{
    // A192 0021;	
    // (ꆒ) YI SYLLABLE NUX	[4185 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA192, 0x0021 };
    uint32_t const ces[9] = { 0x4185, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_430)
{
    // A192 003F;	
    // (ꆒ) YI SYLLABLE NUX	[4185 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA192, 0x003F };
    uint32_t const ces[9] = { 0x4185, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_431)
{
    // A192 0061;	
    // (ꆒ) YI SYLLABLE NUX	[4185 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA192, 0x0061 };
    uint32_t const ces[9] = { 0x4185, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_432)
{
    // A192 0041;	
    // (ꆒ) YI SYLLABLE NUX	[4185 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA192, 0x0041 };
    uint32_t const ces[9] = { 0x4185, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_433)
{
    // A192 0062;	
    // (ꆒ) YI SYLLABLE NUX	[4185 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA192, 0x0062 };
    uint32_t const ces[9] = { 0x4185, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_434)
{
    // A193 0021;	
    // (ꆓ) YI SYLLABLE NU	[4186 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA193, 0x0021 };
    uint32_t const ces[9] = { 0x4186, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_435)
{
    // A193 003F;	
    // (ꆓ) YI SYLLABLE NU	[4186 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA193, 0x003F };
    uint32_t const ces[9] = { 0x4186, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_436)
{
    // A193 0061;	
    // (ꆓ) YI SYLLABLE NU	[4186 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA193, 0x0061 };
    uint32_t const ces[9] = { 0x4186, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_437)
{
    // A193 0041;	
    // (ꆓ) YI SYLLABLE NU	[4186 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA193, 0x0041 };
    uint32_t const ces[9] = { 0x4186, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_438)
{
    // A193 0062;	
    // (ꆓ) YI SYLLABLE NU	[4186 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA193, 0x0062 };
    uint32_t const ces[9] = { 0x4186, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_439)
{
    // A194 0021;	
    // (ꆔ) YI SYLLABLE NUP	[4187 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA194, 0x0021 };
    uint32_t const ces[9] = { 0x4187, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_440)
{
    // A194 003F;	
    // (ꆔ) YI SYLLABLE NUP	[4187 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA194, 0x003F };
    uint32_t const ces[9] = { 0x4187, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_441)
{
    // A194 0061;	
    // (ꆔ) YI SYLLABLE NUP	[4187 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA194, 0x0061 };
    uint32_t const ces[9] = { 0x4187, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_442)
{
    // A194 0041;	
    // (ꆔ) YI SYLLABLE NUP	[4187 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA194, 0x0041 };
    uint32_t const ces[9] = { 0x4187, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_443)
{
    // A194 0062;	
    // (ꆔ) YI SYLLABLE NUP	[4187 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA194, 0x0062 };
    uint32_t const ces[9] = { 0x4187, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_444)
{
    // A195 0021;	
    // (ꆕ) YI SYLLABLE NURX	[4188 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA195, 0x0021 };
    uint32_t const ces[9] = { 0x4188, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_445)
{
    // A195 003F;	
    // (ꆕ) YI SYLLABLE NURX	[4188 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA195, 0x003F };
    uint32_t const ces[9] = { 0x4188, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_446)
{
    // A195 0061;	
    // (ꆕ) YI SYLLABLE NURX	[4188 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA195, 0x0061 };
    uint32_t const ces[9] = { 0x4188, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_447)
{
    // A195 0041;	
    // (ꆕ) YI SYLLABLE NURX	[4188 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA195, 0x0041 };
    uint32_t const ces[9] = { 0x4188, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_448)
{
    // A195 0062;	
    // (ꆕ) YI SYLLABLE NURX	[4188 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA195, 0x0062 };
    uint32_t const ces[9] = { 0x4188, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_449)
{
    // A196 0021;	
    // (ꆖ) YI SYLLABLE NUR	[4189 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA196, 0x0021 };
    uint32_t const ces[9] = { 0x4189, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_450)
{
    // A196 003F;	
    // (ꆖ) YI SYLLABLE NUR	[4189 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA196, 0x003F };
    uint32_t const ces[9] = { 0x4189, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_451)
{
    // A196 0061;	
    // (ꆖ) YI SYLLABLE NUR	[4189 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA196, 0x0061 };
    uint32_t const ces[9] = { 0x4189, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_452)
{
    // A196 0041;	
    // (ꆖ) YI SYLLABLE NUR	[4189 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA196, 0x0041 };
    uint32_t const ces[9] = { 0x4189, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_453)
{
    // A196 0062;	
    // (ꆖ) YI SYLLABLE NUR	[4189 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA196, 0x0062 };
    uint32_t const ces[9] = { 0x4189, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_454)
{
    // A197 0021;	
    // (ꆗ) YI SYLLABLE HLIT	[418A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA197, 0x0021 };
    uint32_t const ces[9] = { 0x418A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_455)
{
    // A197 003F;	
    // (ꆗ) YI SYLLABLE HLIT	[418A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA197, 0x003F };
    uint32_t const ces[9] = { 0x418A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_456)
{
    // A197 0061;	
    // (ꆗ) YI SYLLABLE HLIT	[418A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA197, 0x0061 };
    uint32_t const ces[9] = { 0x418A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_457)
{
    // A197 0041;	
    // (ꆗ) YI SYLLABLE HLIT	[418A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA197, 0x0041 };
    uint32_t const ces[9] = { 0x418A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_458)
{
    // A197 0062;	
    // (ꆗ) YI SYLLABLE HLIT	[418A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA197, 0x0062 };
    uint32_t const ces[9] = { 0x418A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_459)
{
    // A198 0021;	
    // (ꆘ) YI SYLLABLE HLIX	[418B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA198, 0x0021 };
    uint32_t const ces[9] = { 0x418B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_460)
{
    // A198 003F;	
    // (ꆘ) YI SYLLABLE HLIX	[418B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA198, 0x003F };
    uint32_t const ces[9] = { 0x418B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_461)
{
    // A198 0061;	
    // (ꆘ) YI SYLLABLE HLIX	[418B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA198, 0x0061 };
    uint32_t const ces[9] = { 0x418B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_462)
{
    // A198 0041;	
    // (ꆘ) YI SYLLABLE HLIX	[418B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA198, 0x0041 };
    uint32_t const ces[9] = { 0x418B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_463)
{
    // A198 0062;	
    // (ꆘ) YI SYLLABLE HLIX	[418B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA198, 0x0062 };
    uint32_t const ces[9] = { 0x418B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_464)
{
    // A199 0021;	
    // (ꆙ) YI SYLLABLE HLI	[418C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA199, 0x0021 };
    uint32_t const ces[9] = { 0x418C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_465)
{
    // A199 003F;	
    // (ꆙ) YI SYLLABLE HLI	[418C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA199, 0x003F };
    uint32_t const ces[9] = { 0x418C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_466)
{
    // A199 0061;	
    // (ꆙ) YI SYLLABLE HLI	[418C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA199, 0x0061 };
    uint32_t const ces[9] = { 0x418C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_467)
{
    // A199 0041;	
    // (ꆙ) YI SYLLABLE HLI	[418C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA199, 0x0041 };
    uint32_t const ces[9] = { 0x418C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_468)
{
    // A199 0062;	
    // (ꆙ) YI SYLLABLE HLI	[418C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA199, 0x0062 };
    uint32_t const ces[9] = { 0x418C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_469)
{
    // A19A 0021;	
    // (ꆚ) YI SYLLABLE HLIP	[418D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA19A, 0x0021 };
    uint32_t const ces[9] = { 0x418D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_470)
{
    // A19A 003F;	
    // (ꆚ) YI SYLLABLE HLIP	[418D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA19A, 0x003F };
    uint32_t const ces[9] = { 0x418D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_471)
{
    // A19A 0061;	
    // (ꆚ) YI SYLLABLE HLIP	[418D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA19A, 0x0061 };
    uint32_t const ces[9] = { 0x418D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_472)
{
    // A19A 0041;	
    // (ꆚ) YI SYLLABLE HLIP	[418D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA19A, 0x0041 };
    uint32_t const ces[9] = { 0x418D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_473)
{
    // A19A 0062;	
    // (ꆚ) YI SYLLABLE HLIP	[418D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA19A, 0x0062 };
    uint32_t const ces[9] = { 0x418D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_474)
{
    // A19B 0021;	
    // (ꆛ) YI SYLLABLE HLIEX	[418E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA19B, 0x0021 };
    uint32_t const ces[9] = { 0x418E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_475)
{
    // A19B 003F;	
    // (ꆛ) YI SYLLABLE HLIEX	[418E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA19B, 0x003F };
    uint32_t const ces[9] = { 0x418E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_476)
{
    // A19B 0061;	
    // (ꆛ) YI SYLLABLE HLIEX	[418E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA19B, 0x0061 };
    uint32_t const ces[9] = { 0x418E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_477)
{
    // A19B 0041;	
    // (ꆛ) YI SYLLABLE HLIEX	[418E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA19B, 0x0041 };
    uint32_t const ces[9] = { 0x418E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_478)
{
    // A19B 0062;	
    // (ꆛ) YI SYLLABLE HLIEX	[418E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA19B, 0x0062 };
    uint32_t const ces[9] = { 0x418E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_479)
{
    // A19C 0021;	
    // (ꆜ) YI SYLLABLE HLIE	[418F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA19C, 0x0021 };
    uint32_t const ces[9] = { 0x418F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_480)
{
    // A19C 003F;	
    // (ꆜ) YI SYLLABLE HLIE	[418F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA19C, 0x003F };
    uint32_t const ces[9] = { 0x418F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_481)
{
    // A19C 0061;	
    // (ꆜ) YI SYLLABLE HLIE	[418F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA19C, 0x0061 };
    uint32_t const ces[9] = { 0x418F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_482)
{
    // A19C 0041;	
    // (ꆜ) YI SYLLABLE HLIE	[418F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA19C, 0x0041 };
    uint32_t const ces[9] = { 0x418F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_483)
{
    // A19C 0062;	
    // (ꆜ) YI SYLLABLE HLIE	[418F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA19C, 0x0062 };
    uint32_t const ces[9] = { 0x418F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_484)
{
    // A19D 0021;	
    // (ꆝ) YI SYLLABLE HLIEP	[4190 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA19D, 0x0021 };
    uint32_t const ces[9] = { 0x4190, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_485)
{
    // A19D 003F;	
    // (ꆝ) YI SYLLABLE HLIEP	[4190 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA19D, 0x003F };
    uint32_t const ces[9] = { 0x4190, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_486)
{
    // A19D 0061;	
    // (ꆝ) YI SYLLABLE HLIEP	[4190 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA19D, 0x0061 };
    uint32_t const ces[9] = { 0x4190, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_487)
{
    // A19D 0041;	
    // (ꆝ) YI SYLLABLE HLIEP	[4190 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA19D, 0x0041 };
    uint32_t const ces[9] = { 0x4190, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_488)
{
    // A19D 0062;	
    // (ꆝ) YI SYLLABLE HLIEP	[4190 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA19D, 0x0062 };
    uint32_t const ces[9] = { 0x4190, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_489)
{
    // A19E 0021;	
    // (ꆞ) YI SYLLABLE HLAT	[4191 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA19E, 0x0021 };
    uint32_t const ces[9] = { 0x4191, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_490)
{
    // A19E 003F;	
    // (ꆞ) YI SYLLABLE HLAT	[4191 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA19E, 0x003F };
    uint32_t const ces[9] = { 0x4191, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_491)
{
    // A19E 0061;	
    // (ꆞ) YI SYLLABLE HLAT	[4191 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA19E, 0x0061 };
    uint32_t const ces[9] = { 0x4191, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_492)
{
    // A19E 0041;	
    // (ꆞ) YI SYLLABLE HLAT	[4191 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA19E, 0x0041 };
    uint32_t const ces[9] = { 0x4191, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_493)
{
    // A19E 0062;	
    // (ꆞ) YI SYLLABLE HLAT	[4191 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA19E, 0x0062 };
    uint32_t const ces[9] = { 0x4191, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_494)
{
    // A19F 0021;	
    // (ꆟ) YI SYLLABLE HLAX	[4192 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA19F, 0x0021 };
    uint32_t const ces[9] = { 0x4192, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_495)
{
    // A19F 003F;	
    // (ꆟ) YI SYLLABLE HLAX	[4192 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA19F, 0x003F };
    uint32_t const ces[9] = { 0x4192, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_496)
{
    // A19F 0061;	
    // (ꆟ) YI SYLLABLE HLAX	[4192 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA19F, 0x0061 };
    uint32_t const ces[9] = { 0x4192, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_497)
{
    // A19F 0041;	
    // (ꆟ) YI SYLLABLE HLAX	[4192 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA19F, 0x0041 };
    uint32_t const ces[9] = { 0x4192, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_498)
{
    // A19F 0062;	
    // (ꆟ) YI SYLLABLE HLAX	[4192 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA19F, 0x0062 };
    uint32_t const ces[9] = { 0x4192, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_257_499)
{
    // A1A0 0021;	
    // (ꆠ) YI SYLLABLE HLA	[4193 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA1A0, 0x0021 };
    uint32_t const ces[9] = { 0x4193, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

