// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_053_000)
{
    // 2097  ; [.1DDD.0020.0015] 
    // LATIN SUBSCRIPT SMALL LETTER L

    uint32_t const cps[1] = { 0x2097 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x15)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_001)
{
    // 2098  ; [.1E10.0020.0015] 
    // LATIN SUBSCRIPT SMALL LETTER M

    uint32_t const cps[1] = { 0x2098 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x15)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_002)
{
    // 2099  ; [.1E1F.0020.0015] 
    // LATIN SUBSCRIPT SMALL LETTER N

    uint32_t const cps[1] = { 0x2099 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x15)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_003)
{
    // 209A  ; [.1E72.0020.0015] 
    // LATIN SUBSCRIPT SMALL LETTER P

    uint32_t const cps[1] = { 0x209a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x15)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_004)
{
    // 209B  ; [.1ED7.0020.0015] 
    // LATIN SUBSCRIPT SMALL LETTER S

    uint32_t const cps[1] = { 0x209b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x15)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_005)
{
    // 209C  ; [.1EFB.0020.0015] 
    // LATIN SUBSCRIPT SMALL LETTER T

    uint32_t const cps[1] = { 0x209c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0x15)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_006)
{
    // 20A0  ; [.1C84.0020.0002] 
    // EURO-CURRENCY SIGN

    uint32_t const cps[1] = { 0x20a0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c84), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_007)
{
    // 20A1  ; [.1C85.0020.0002] 
    // COLON SIGN

    uint32_t const cps[1] = { 0x20a1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c85), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_008)
{
    // 20A2  ; [.1C86.0020.0002] 
    // CRUZEIRO SIGN

    uint32_t const cps[1] = { 0x20a2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c86), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_009)
{
    // 20A3  ; [.1C87.0020.0002] 
    // FRENCH FRANC SIGN

    uint32_t const cps[1] = { 0x20a3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c87), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_010)
{
    // 20A4  ; [.1C88.0020.0002] 
    // LIRA SIGN

    uint32_t const cps[1] = { 0x20a4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c88), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_011)
{
    // 20A5  ; [.1C89.0020.0002] 
    // MILL SIGN

    uint32_t const cps[1] = { 0x20a5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c89), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_012)
{
    // 20A6  ; [.1C8A.0020.0002] 
    // NAIRA SIGN

    uint32_t const cps[1] = { 0x20a6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c8a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_013)
{
    // 20A7  ; [.1C8B.0020.0002] 
    // PESETA SIGN

    uint32_t const cps[1] = { 0x20a7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_014)
{
    // 20A8  ; [.1E99.0020.000A][.1ED7.0020.0004] 
    // RUPEE SIGN

    uint32_t const cps[1] = { 0x20a8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_053_015)
{
    // 20A9  ; [.1C8C.0020.0002] 
    // WON SIGN

    uint32_t const cps[1] = { 0x20a9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_016)
{
    // 20AA  ; [.1C8D.0020.0002] 
    // NEW SHEQEL SIGN

    uint32_t const cps[1] = { 0x20aa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_017)
{
    // 20AB  ; [.1C8E.0020.0002] 
    // DONG SIGN

    uint32_t const cps[1] = { 0x20ab };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_018)
{
    // 20AC  ; [.1C8F.0020.0002] 
    // EURO SIGN

    uint32_t const cps[1] = { 0x20ac };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_019)
{
    // 20AD  ; [.1C90.0020.0002] 
    // KIP SIGN

    uint32_t const cps[1] = { 0x20ad };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c90), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_020)
{
    // 20AE  ; [.1C91.0020.0002] 
    // TUGRIK SIGN

    uint32_t const cps[1] = { 0x20ae };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c91), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_021)
{
    // 20AF  ; [.1C92.0020.0002] 
    // DRACHMA SIGN

    uint32_t const cps[1] = { 0x20af };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c92), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_022)
{
    // 20B0  ; [.1C93.0020.0002] 
    // GERMAN PENNY SIGN

    uint32_t const cps[1] = { 0x20b0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c93), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_023)
{
    // 20B1  ; [.1C94.0020.0002] 
    // PESO SIGN

    uint32_t const cps[1] = { 0x20b1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c94), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_024)
{
    // 20B2  ; [.1C95.0020.0002] 
    // GUARANI SIGN

    uint32_t const cps[1] = { 0x20b2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c95), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_025)
{
    // 20B3  ; [.1C96.0020.0002] 
    // AUSTRAL SIGN

    uint32_t const cps[1] = { 0x20b3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c96), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_026)
{
    // 20B4  ; [.1C97.0020.0002] 
    // HRYVNIA SIGN

    uint32_t const cps[1] = { 0x20b4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c97), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_027)
{
    // 20B5  ; [.1C98.0020.0002] 
    // CEDI SIGN

    uint32_t const cps[1] = { 0x20b5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c98), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_028)
{
    // 20B6  ; [.1C99.0020.0002] 
    // LIVRE TOURNOIS SIGN

    uint32_t const cps[1] = { 0x20b6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c99), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_029)
{
    // 20B7  ; [.1C9A.0020.0002] 
    // SPESMILO SIGN

    uint32_t const cps[1] = { 0x20b7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c9a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_030)
{
    // 20B8  ; [.1C9B.0020.0002] 
    // TENGE SIGN

    uint32_t const cps[1] = { 0x20b8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c9b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_031)
{
    // 20B9  ; [.1C9C.0020.0002] 
    // INDIAN RUPEE SIGN

    uint32_t const cps[1] = { 0x20b9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c9c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_032)
{
    // 20BA  ; [.1C9D.0020.0002] 
    // TURKISH LIRA SIGN

    uint32_t const cps[1] = { 0x20ba };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c9d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_033)
{
    // 20BB  ; [.1C9E.0020.0002] 
    // NORDIC MARK SIGN

    uint32_t const cps[1] = { 0x20bb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c9e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_034)
{
    // 20BC  ; [.1C9F.0020.0002] 
    // MANAT SIGN

    uint32_t const cps[1] = { 0x20bc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c9f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_035)
{
    // 20BD  ; [.1CA0.0020.0002] 
    // RUBLE SIGN

    uint32_t const cps[1] = { 0x20bd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_036)
{
    // 20BE  ; [.1CA1.0020.0002] 
    // LARI SIGN

    uint32_t const cps[1] = { 0x20be };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_037)
{
    // 20BF  ; [.1CA2.0020.0002] 
    // BITCOIN SIGN

    uint32_t const cps[1] = { 0x20bf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_038)
{
    // 20D0  ; [.0000.0102.0002] 
    // COMBINING LEFT HARPOON ABOVE

    uint32_t const cps[1] = { 0x20d0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_039)
{
    // 20D1  ; [.0000.0103.0002] 
    // COMBINING RIGHT HARPOON ABOVE

    uint32_t const cps[1] = { 0x20d1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe3), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_040)
{
    // 20D2  ; [.0000.0104.0002] 
    // COMBINING LONG VERTICAL LINE OVERLAY

    uint32_t const cps[1] = { 0x20d2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_041)
{
    // 20D3  ; [.0000.0104.0002] 
    // COMBINING SHORT VERTICAL LINE OVERLAY

    uint32_t const cps[1] = { 0x20d3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_042)
{
    // 20D4  ; [.0000.0105.0002] 
    // COMBINING ANTICLOCKWISE ARROW ABOVE

    uint32_t const cps[1] = { 0x20d4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_043)
{
    // 20D5  ; [.0000.0106.0002] 
    // COMBINING CLOCKWISE ARROW ABOVE

    uint32_t const cps[1] = { 0x20d5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe6), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_044)
{
    // 20D6  ; [.0000.0107.0002] 
    // COMBINING LEFT ARROW ABOVE

    uint32_t const cps[1] = { 0x20d6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe7), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_045)
{
    // 20D7  ; [.0000.0108.0002] 
    // COMBINING RIGHT ARROW ABOVE

    uint32_t const cps[1] = { 0x20d7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe8), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_046)
{
    // 20D8  ; [.0000.0035.0002] 
    // COMBINING RING OVERLAY

    uint32_t const cps[1] = { 0x20d8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x15), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_047)
{
    // 20D9  ; [.0000.0035.0002] 
    // COMBINING CLOCKWISE RING OVERLAY

    uint32_t const cps[1] = { 0x20d9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x15), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_048)
{
    // 20DA  ; [.0000.0035.0002] 
    // COMBINING ANTICLOCKWISE RING OVERLAY

    uint32_t const cps[1] = { 0x20da };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x15), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_049)
{
    // 20DB  ; [.0000.0109.0002] 
    // COMBINING THREE DOTS ABOVE

    uint32_t const cps[1] = { 0x20db };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe9), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_050)
{
    // 20DC  ; [.0000.010A.0002] 
    // COMBINING FOUR DOTS ABOVE

    uint32_t const cps[1] = { 0x20dc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xea), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_051)
{
    // 20DD  ; [.0000.0036.0002] 
    // COMBINING ENCLOSING CIRCLE

    uint32_t const cps[1] = { 0x20dd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x16), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_052)
{
    // 20DE  ; [.0000.0036.0002] 
    // COMBINING ENCLOSING SQUARE

    uint32_t const cps[1] = { 0x20de };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x16), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_053)
{
    // 20DF  ; [.0000.0036.0002] 
    // COMBINING ENCLOSING DIAMOND

    uint32_t const cps[1] = { 0x20df };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x16), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_054)
{
    // 20E0  ; [.0000.0036.0002] 
    // COMBINING ENCLOSING CIRCLE BACKSLASH

    uint32_t const cps[1] = { 0x20e0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x16), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_055)
{
    // 20E1  ; [.0000.010B.0002] 
    // COMBINING LEFT RIGHT ARROW ABOVE

    uint32_t const cps[1] = { 0x20e1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xeb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_056)
{
    // 20E2  ; [.0000.0036.0002] 
    // COMBINING ENCLOSING SCREEN

    uint32_t const cps[1] = { 0x20e2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x16), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_057)
{
    // 20E3  ; [.0000.0036.0002] 
    // COMBINING ENCLOSING KEYCAP

    uint32_t const cps[1] = { 0x20e3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x16), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_058)
{
    // 20E4  ; [.0000.0036.0002] 
    // COMBINING ENCLOSING UPWARD POINTING TRIANGLE

    uint32_t const cps[1] = { 0x20e4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x16), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_059)
{
    // 20E5  ; [.0000.0035.0002] 
    // COMBINING REVERSE SOLIDUS OVERLAY

    uint32_t const cps[1] = { 0x20e5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x15), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_060)
{
    // 20E6  ; [.0000.010C.0002] 
    // COMBINING DOUBLE VERTICAL STROKE OVERLAY

    uint32_t const cps[1] = { 0x20e6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xec), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_061)
{
    // 20E7  ; [.0000.010D.0002] 
    // COMBINING ANNUITY SYMBOL

    uint32_t const cps[1] = { 0x20e7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xed), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_062)
{
    // 20E8  ; [.0000.010E.0002] 
    // COMBINING TRIPLE UNDERDOT

    uint32_t const cps[1] = { 0x20e8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xee), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_063)
{
    // 20E9  ; [.0000.010F.0002] 
    // COMBINING WIDE BRIDGE ABOVE

    uint32_t const cps[1] = { 0x20e9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xef), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_064)
{
    // 20EA  ; [.0000.0035.0002] 
    // COMBINING LEFTWARDS ARROW OVERLAY

    uint32_t const cps[1] = { 0x20ea };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x15), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_065)
{
    // 20EB  ; [.0000.0035.0002] 
    // COMBINING LONG DOUBLE SOLIDUS OVERLAY

    uint32_t const cps[1] = { 0x20eb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x15), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_066)
{
    // 20EC  ; [.0000.0034.0002] 
    // COMBINING RIGHTWARDS HARPOON WITH BARB DOWNWARDS

    uint32_t const cps[1] = { 0x20ec };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_067)
{
    // 20ED  ; [.0000.0034.0002] 
    // COMBINING LEFTWARDS HARPOON WITH BARB DOWNWARDS

    uint32_t const cps[1] = { 0x20ed };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_068)
{
    // 20EE  ; [.0000.0034.0002] 
    // COMBINING LEFT ARROW BELOW

    uint32_t const cps[1] = { 0x20ee };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_069)
{
    // 20EF  ; [.0000.0034.0002] 
    // COMBINING RIGHT ARROW BELOW

    uint32_t const cps[1] = { 0x20ef };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_070)
{
    // 20F0  ; [.0000.0033.0002] 
    // COMBINING ASTERISK ABOVE

    uint32_t const cps[1] = { 0x20f0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_071)
{
    // 2100  ; [.1CAD.0020.0004][*0395.0020.0004][.1CE0.0020.0004] 
    // ACCOUNT OF

    uint32_t const cps[1] = { 0x2100 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x395), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_053_072)
{
    // 2101  ; [.1CAD.0020.0004][*0395.0020.0004][.1ED7.0020.0004] 
    // ADDRESSED TO THE SUBJECT

    uint32_t const cps[1] = { 0x2101 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x395), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_053_073)
{
    // 2102  ; [.1CE0.0020.000B] 
    // DOUBLE-STRUCK CAPITAL C

    uint32_t const cps[1] = { 0x2102 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_074)
{
    // 2103  ; [*050C.0020.0004][.1CE0.0020.000A] 
    // DEGREE CELSIUS

    uint32_t const cps[1] = { 0x2103 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x50c), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_053_075)
{
    // 2104  ; [*059C.0020.0002] 
    // CENTRE LINE SYMBOL

    uint32_t const cps[1] = { 0x2104 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x59c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_076)
{
    // 2105  ; [.1CE0.0020.0004][*0395.0020.0004][.1E43.0020.0004] 
    // CARE OF

    uint32_t const cps[1] = { 0x2105 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x395), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_053_077)
{
    // 2106  ; [.1CE0.0020.0004][*0395.0020.0004][.1F1B.0020.0004] 
    // CADA UNA

    uint32_t const cps[1] = { 0x2106 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x395), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_053_078)
{
    // 2107  ; [.1D28.0020.000A] 
    // EULER CONSTANT

    uint32_t const cps[1] = { 0x2107 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1d28), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_079)
{
    // 2108  ; [*059D.0020.0002] 
    // SCRUPLE

    uint32_t const cps[1] = { 0x2108 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x59d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_080)
{
    // 2109  ; [*050C.0020.0004][.1D4B.0020.000A] 
    // DEGREE FAHRENHEIT

    uint32_t const cps[1] = { 0x2109 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x50c), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_053_081)
{
    // 210A  ; [.1D5A.0020.0005] 
    // SCRIPT SMALL G

    uint32_t const cps[1] = { 0x210a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_082)
{
    // 210B  ; [.1D7E.0020.000B] 
    // SCRIPT CAPITAL H

    uint32_t const cps[1] = { 0x210b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_083)
{
    // 210C  ; [.1D7E.0020.000B] 
    // BLACK-LETTER CAPITAL H

    uint32_t const cps[1] = { 0x210c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_084)
{
    // 210D  ; [.1D7E.0020.000B] 
    // DOUBLE-STRUCK CAPITAL H

    uint32_t const cps[1] = { 0x210d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_085)
{
    // 210E  ; [.1D7E.0020.0005] 
    // PLANCK CONSTANT

    uint32_t const cps[1] = { 0x210e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_086)
{
    // 210F  ; [.1D7E.0020.0002][.0000.0039.0002] 
    // PLANCK CONSTANT OVER TWO PI

    uint32_t const cps[1] = { 0x210f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x19), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_053_087)
{
    // 2110  ; [.1D98.0020.000B] 
    // SCRIPT CAPITAL I

    uint32_t const cps[1] = { 0x2110 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_088)
{
    // 2111  ; [.1D98.0020.000B] 
    // BLACK-LETTER CAPITAL I

    uint32_t const cps[1] = { 0x2111 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_089)
{
    // 2112  ; [.1DDD.0020.000B] 
    // SCRIPT CAPITAL L

    uint32_t const cps[1] = { 0x2112 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_090)
{
    // 2113  ; [.1DDD.0020.0005] 
    // SCRIPT SMALL L

    uint32_t const cps[1] = { 0x2113 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_091)
{
    // 2114  ; [*059E.0020.0002] 
    // L B BAR SYMBOL

    uint32_t const cps[1] = { 0x2114 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x59e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_092)
{
    // 2115  ; [.1E1F.0020.000B] 
    // DOUBLE-STRUCK CAPITAL N

    uint32_t const cps[1] = { 0x2115 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_093)
{
    // 2116  ; [.1E1F.0020.000A][.1E43.0020.0004] 
    // NUMERO SIGN

    uint32_t const cps[1] = { 0x2116 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_053_094)
{
    // 2117  ; [*059F.0020.0002] 
    // SOUND RECORDING COPYRIGHT

    uint32_t const cps[1] = { 0x2117 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x59f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_095)
{
    // 2118  ; [*05A0.0020.0002] 
    // SCRIPT CAPITAL P

    uint32_t const cps[1] = { 0x2118 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5a0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_096)
{
    // 2119  ; [.1E72.0020.000B] 
    // DOUBLE-STRUCK CAPITAL P

    uint32_t const cps[1] = { 0x2119 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_097)
{
    // 211A  ; [.1E87.0020.000B] 
    // DOUBLE-STRUCK CAPITAL Q

    uint32_t const cps[1] = { 0x211a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1e87), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_098)
{
    // 211B  ; [.1E99.0020.000B] 
    // SCRIPT CAPITAL R

    uint32_t const cps[1] = { 0x211b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_099)
{
    // 211C  ; [.1E99.0020.000B] 
    // BLACK-LETTER CAPITAL R

    uint32_t const cps[1] = { 0x211c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_100)
{
    // 211D  ; [.1E99.0020.000B] 
    // DOUBLE-STRUCK CAPITAL R

    uint32_t const cps[1] = { 0x211d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_101)
{
    // 211E  ; [*05A1.0020.0002] 
    // PRESCRIPTION TAKE

    uint32_t const cps[1] = { 0x211e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5a1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_102)
{
    // 211F  ; [*05A2.0020.0002] 
    // RESPONSE

    uint32_t const cps[1] = { 0x211f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5a2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_103)
{
    // 2120  ; [.1ED7.0020.0014][.1E10.0020.0014] 
    // SERVICE MARK

    uint32_t const cps[1] = { 0x2120 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x14)}, {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_053_104)
{
    // 2121  ; [.1EFB.0020.000A][.1D10.0020.000A][.1DDD.0020.000A] 
    // TELEPHONE SIGN

    uint32_t const cps[1] = { 0x2121 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_053_105)
{
    // 2122  ; [.1EFB.0020.0014][.1E10.0020.0014] 
    // TRADE MARK SIGN

    uint32_t const cps[1] = { 0x2122 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0x14)}, {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_053_106)
{
    // 2123  ; [*05A3.0020.0002] 
    // VERSICLE

    uint32_t const cps[1] = { 0x2123 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5a3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_107)
{
    // 2124  ; [.1F87.0020.000B] 
    // DOUBLE-STRUCK CAPITAL Z

    uint32_t const cps[1] = { 0x2124 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_108)
{
    // 2125  ; [*05A4.0020.0002] 
    // OUNCE SIGN

    uint32_t const cps[1] = { 0x2125 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5a4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_109)
{
    // 2126  ; [.2047.0020.0008] 
    // OHM SIGN

    uint32_t const cps[1] = { 0x2126 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_110)
{
    // 2127  ; [*05A5.0020.0002] 
    // INVERTED OHM SIGN

    uint32_t const cps[1] = { 0x2127 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5a5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_111)
{
    // 2128  ; [.1F87.0020.000B] 
    // BLACK-LETTER CAPITAL Z

    uint32_t const cps[1] = { 0x2128 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_112)
{
    // 2129  ; [*05A6.0020.0002] 
    // TURNED GREEK SMALL LETTER IOTA

    uint32_t const cps[1] = { 0x2129 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5a6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_113)
{
    // 212A  ; [.1DCB.0020.0008] 
    // KELVIN SIGN

    uint32_t const cps[1] = { 0x212a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_114)
{
    // 212B  ; [.1CAD.0020.0008][.0000.0029.0002] 
    // ANGSTROM SIGN

    uint32_t const cps[1] = { 0x212b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x9), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_053_115)
{
    // 212C  ; [.1CC6.0020.000B] 
    // SCRIPT CAPITAL B

    uint32_t const cps[1] = { 0x212c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_116)
{
    // 212D  ; [.1CE0.0020.000B] 
    // BLACK-LETTER CAPITAL C

    uint32_t const cps[1] = { 0x212d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_117)
{
    // 212E  ; [*05A7.0020.0002] 
    // ESTIMATED SYMBOL

    uint32_t const cps[1] = { 0x212e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5a7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_118)
{
    // 212F  ; [.1D10.0020.0005] 
    // SCRIPT SMALL E

    uint32_t const cps[1] = { 0x212f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_119)
{
    // 2130  ; [.1D10.0020.000B] 
    // SCRIPT CAPITAL E

    uint32_t const cps[1] = { 0x2130 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_120)
{
    // 2131  ; [.1D4B.0020.000B] 
    // SCRIPT CAPITAL F

    uint32_t const cps[1] = { 0x2131 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_121)
{
    // 2132  ; [.1D58.0020.0008] 
    // TURNED CAPITAL F

    uint32_t const cps[1] = { 0x2132 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1d58), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_122)
{
    // 2133  ; [.1E10.0020.000B] 
    // SCRIPT CAPITAL M

    uint32_t const cps[1] = { 0x2133 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_123)
{
    // 2134  ; [.1E43.0020.0005] 
    // SCRIPT SMALL O

    uint32_t const cps[1] = { 0x2134 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_124)
{
    // 2135  ; [.231D.0020.0004] 
    // ALEF SYMBOL

    uint32_t const cps[1] = { 0x2135 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x231d), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_125)
{
    // 2136  ; [.231E.0020.0004] 
    // BET SYMBOL

    uint32_t const cps[1] = { 0x2136 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x231e), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_126)
{
    // 2137  ; [.231F.0020.0004] 
    // GIMEL SYMBOL

    uint32_t const cps[1] = { 0x2137 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x231f), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_127)
{
    // 2138  ; [.2320.0020.0004] 
    // DALET SYMBOL

    uint32_t const cps[1] = { 0x2138 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2320), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_128)
{
    // 2139  ; [.1D98.0020.0005] 
    // INFORMATION SOURCE

    uint32_t const cps[1] = { 0x2139 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_129)
{
    // 213A  ; [*05A8.0020.0002] 
    // ROTATED CAPITAL Q

    uint32_t const cps[1] = { 0x213a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5a8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_130)
{
    // 213B  ; [.1D4B.0020.000A][.1CAD.0020.000A][.1F65.0020.000A] 
    // FACSIMILE SIGN

    uint32_t const cps[1] = { 0x213b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_053_131)
{
    // 213C  ; [.2035.0020.0005] 
    // DOUBLE-STRUCK SMALL PI

    uint32_t const cps[1] = { 0x213c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2035), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_132)
{
    // 213D  ; [.2021.0020.0005] 
    // DOUBLE-STRUCK SMALL GAMMA

    uint32_t const cps[1] = { 0x213d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2021), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_133)
{
    // 213E  ; [.2021.0020.000B] 
    // DOUBLE-STRUCK CAPITAL GAMMA

    uint32_t const cps[1] = { 0x213e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2021), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_134)
{
    // 213F  ; [.2035.0020.000B] 
    // DOUBLE-STRUCK CAPITAL PI

    uint32_t const cps[1] = { 0x213f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2035), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_135)
{
    // 2140  ; [*062B.0020.0005] 
    // DOUBLE-STRUCK N-ARY SUMMATION

    uint32_t const cps[1] = { 0x2140 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x62b), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_136)
{
    // 2141  ; [*05A9.0020.0002] 
    // TURNED SANS-SERIF CAPITAL G

    uint32_t const cps[1] = { 0x2141 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5a9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_137)
{
    // 2142  ; [*05AA.0020.0002] 
    // TURNED SANS-SERIF CAPITAL L

    uint32_t const cps[1] = { 0x2142 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5aa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_138)
{
    // 2143  ; [*05AB.0020.0002] 
    // REVERSED SANS-SERIF CAPITAL L

    uint32_t const cps[1] = { 0x2143 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5ab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_139)
{
    // 2144  ; [*05AC.0020.0002] 
    // TURNED SANS-SERIF CAPITAL Y

    uint32_t const cps[1] = { 0x2144 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5ac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_140)
{
    // 2145  ; [.1CF5.0020.000B] 
    // DOUBLE-STRUCK ITALIC CAPITAL D

    uint32_t const cps[1] = { 0x2145 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_141)
{
    // 2146  ; [.1CF5.0020.0005] 
    // DOUBLE-STRUCK ITALIC SMALL D

    uint32_t const cps[1] = { 0x2146 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_142)
{
    // 2147  ; [.1D10.0020.0005] 
    // DOUBLE-STRUCK ITALIC SMALL E

    uint32_t const cps[1] = { 0x2147 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_143)
{
    // 2148  ; [.1D98.0020.0005] 
    // DOUBLE-STRUCK ITALIC SMALL I

    uint32_t const cps[1] = { 0x2148 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_144)
{
    // 2149  ; [.1DB2.0020.0005] 
    // DOUBLE-STRUCK ITALIC SMALL J

    uint32_t const cps[1] = { 0x2149 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1db2), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_145)
{
    // 214A  ; [*05AD.0020.0002] 
    // PROPERTY LINE

    uint32_t const cps[1] = { 0x214a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5ad), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_146)
{
    // 214B  ; [*06C7.0020.0002] 
    // TURNED AMPERSAND

    uint32_t const cps[1] = { 0x214b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x6c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_147)
{
    // 214C  ; [*05AE.0020.0002] 
    // PER SIGN

    uint32_t const cps[1] = { 0x214c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x5ae), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_053_148)
{
    // 214D  ; [.1CAD.0020.000A][*0395.0020.0004][.1ED7.0020.000A] 
    // AKTIESELSKAB

    uint32_t const cps[1] = { 0x214d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x395), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_053_149)
{
    // 214E  ; [.1D58.0020.0002] 
    // TURNED SMALL F

    uint32_t const cps[1] = { 0x214e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1d58), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

