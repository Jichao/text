// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_044_000)
{
    // 1AA3  ; [*042E.0020.0002] 
    // TAI THAM SIGN KEOW

    uint32_t const cps[1] = { 0x1aa3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x42e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_001)
{
    // 1AA4  ; [*042F.0020.0002] 
    // TAI THAM SIGN HOY

    uint32_t const cps[1] = { 0x1aa4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x42f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_002)
{
    // 1AA5  ; [*0430.0020.0002] 
    // TAI THAM SIGN DOKMAI

    uint32_t const cps[1] = { 0x1aa5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x430), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_003)
{
    // 1AA6  ; [*0431.0020.0002] 
    // TAI THAM SIGN REVERSED ROTATED RANA

    uint32_t const cps[1] = { 0x1aa6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x431), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_004)
{
    // 1AA7  ; [.1C62.0020.0002] 
    // TAI THAM SIGN MAI YAMOK

    uint32_t const cps[1] = { 0x1aa7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1c62), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_005)
{
    // 1AA8  ; [*029E.0020.0002] 
    // TAI THAM SIGN KAAN

    uint32_t const cps[1] = { 0x1aa8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_006)
{
    // 1AA9  ; [*029F.0020.0002] 
    // TAI THAM SIGN KAANKUU

    uint32_t const cps[1] = { 0x1aa9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_007)
{
    // 1AAA  ; [*02A0.0020.0002] 
    // TAI THAM SIGN SATKAAN

    uint32_t const cps[1] = { 0x1aaa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2a0), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_008)
{
    // 1AAB  ; [*02A1.0020.0002] 
    // TAI THAM SIGN SATKAANKUU

    uint32_t const cps[1] = { 0x1aab };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2a1), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_009)
{
    // 1AAC  ; [*0432.0020.0002] 
    // TAI THAM SIGN HANG

    uint32_t const cps[1] = { 0x1aac };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x432), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_010)
{
    // 1AAD  ; [*0433.0020.0002] 
    // TAI THAM SIGN CAANG

    uint32_t const cps[1] = { 0x1aad };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x433), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_011)
{
    // 1AB0  ; [.0000.0033.0002] 
    // COMBINING DOUBLED CIRCUMFLEX ACCENT

    uint32_t const cps[1] = { 0x1ab0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_012)
{
    // 1AB1  ; [.0000.0033.0002] 
    // COMBINING DIAERESIS-RING

    uint32_t const cps[1] = { 0x1ab1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_013)
{
    // 1AB2  ; [.0000.0033.0002] 
    // COMBINING INFINITY

    uint32_t const cps[1] = { 0x1ab2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_014)
{
    // 1AB3  ; [.0000.0033.0002] 
    // COMBINING DOWNWARDS ARROW

    uint32_t const cps[1] = { 0x1ab3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_015)
{
    // 1AB4  ; [.0000.0033.0002] 
    // COMBINING TRIPLE DOT

    uint32_t const cps[1] = { 0x1ab4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_016)
{
    // 1AB5  ; [.0000.0034.0002] 
    // COMBINING X-X BELOW

    uint32_t const cps[1] = { 0x1ab5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_017)
{
    // 1AB6  ; [.0000.0034.0002] 
    // COMBINING WIGGLY LINE BELOW

    uint32_t const cps[1] = { 0x1ab6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_018)
{
    // 1AB7  ; [.0000.0034.0002] 
    // COMBINING OPEN MARK BELOW

    uint32_t const cps[1] = { 0x1ab7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_019)
{
    // 1AB8  ; [.0000.0034.0002] 
    // COMBINING DOUBLE OPEN MARK BELOW

    uint32_t const cps[1] = { 0x1ab8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_020)
{
    // 1AB9  ; [.0000.0034.0002] 
    // COMBINING LIGHT CENTRALIZATION STROKE BELOW

    uint32_t const cps[1] = { 0x1ab9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_021)
{
    // 1ABA  ; [.0000.0034.0002] 
    // COMBINING STRONG CENTRALIZATION STROKE BELOW

    uint32_t const cps[1] = { 0x1aba };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_022)
{
    // 1ABB  ; [.0000.0033.0002] 
    // COMBINING PARENTHESES ABOVE

    uint32_t const cps[1] = { 0x1abb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_023)
{
    // 1ABC  ; [.0000.0033.0002] 
    // COMBINING DOUBLE PARENTHESES ABOVE

    uint32_t const cps[1] = { 0x1abc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x13), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_024)
{
    // 1ABD  ; [.0000.0034.0002] 
    // COMBINING PARENTHESES BELOW

    uint32_t const cps[1] = { 0x1abd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_025)
{
    // 1ABE  ; [.0000.0036.0002] 
    // COMBINING PARENTHESES OVERLAY

    uint32_t const cps[1] = { 0x1abe };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x16), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_026)
{
    // 1B00  ; [.0000.00C3.0002] 
    // BALINESE SIGN ULU RICEM

    uint32_t const cps[1] = { 0x1b00 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa3), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_027)
{
    // 1B01  ; [.0000.00C3.0002] 
    // BALINESE SIGN ULU CANDRA

    uint32_t const cps[1] = { 0x1b01 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa3), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_028)
{
    // 1B02  ; [.0000.00C4.0002] 
    // BALINESE SIGN CECEK

    uint32_t const cps[1] = { 0x1b02 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa4), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_029)
{
    // 1B03  ; [.0000.00C8.0002] 
    // BALINESE SIGN SURANG

    uint32_t const cps[1] = { 0x1b03 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa8), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_030)
{
    // 1B04  ; [.0000.00C5.0002] 
    // BALINESE SIGN BISAH

    uint32_t const cps[1] = { 0x1b04 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa5), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_031)
{
    // 1B05  ; [.336E.0020.0002] 
    // BALINESE LETTER AKARA

    uint32_t const cps[1] = { 0x1b05 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x336e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 1));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_044_032)
{
    // 1B05 1B35 ; [.336F.0020.0002] 
    // BALINESE LETTER AKARA TEDUNG

    uint32_t const cps[2] = { 0x1b05, 0x1b35 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x336f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 1));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_044_033)
{
    // 1B06  ; [.336F.0020.0002] 
    // BALINESE LETTER AKARA TEDUNG

    uint32_t const cps[1] = { 0x1b06 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x336f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_034)
{
    // 1B07  ; [.3370.0020.0002] 
    // BALINESE LETTER IKARA

    uint32_t const cps[1] = { 0x1b07 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3370), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 1));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_044_035)
{
    // 1B07 1B35 ; [.3371.0020.0002] 
    // BALINESE LETTER IKARA TEDUNG

    uint32_t const cps[2] = { 0x1b07, 0x1b35 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3371), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 1));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_044_036)
{
    // 1B08  ; [.3371.0020.0002] 
    // BALINESE LETTER IKARA TEDUNG

    uint32_t const cps[1] = { 0x1b08 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3371), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_037)
{
    // 1B09  ; [.3372.0020.0002] 
    // BALINESE LETTER UKARA

    uint32_t const cps[1] = { 0x1b09 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3372), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 1));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_044_038)
{
    // 1B09 1B35 ; [.3373.0020.0002] 
    // BALINESE LETTER UKARA TEDUNG

    uint32_t const cps[2] = { 0x1b09, 0x1b35 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3373), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 1));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_044_039)
{
    // 1B0A  ; [.3373.0020.0002] 
    // BALINESE LETTER UKARA TEDUNG

    uint32_t const cps[1] = { 0x1b0a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3373), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_040)
{
    // 1B0B  ; [.3374.0020.0002] 
    // BALINESE LETTER RA REPA

    uint32_t const cps[1] = { 0x1b0b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3374), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 1));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_044_041)
{
    // 1B0B 1B35 ; [.3375.0020.0002] 
    // BALINESE LETTER RA REPA TEDUNG

    uint32_t const cps[2] = { 0x1b0b, 0x1b35 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3375), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 1));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_044_042)
{
    // 1B0C  ; [.3375.0020.0002] 
    // BALINESE LETTER RA REPA TEDUNG

    uint32_t const cps[1] = { 0x1b0c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3375), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_043)
{
    // 1B0D  ; [.3376.0020.0002] 
    // BALINESE LETTER LA LENGA

    uint32_t const cps[1] = { 0x1b0d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3376), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 1));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_044_044)
{
    // 1B0D 1B35 ; [.3377.0020.0002] 
    // BALINESE LETTER LA LENGA TEDUNG

    uint32_t const cps[2] = { 0x1b0d, 0x1b35 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3377), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 1));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_044_045)
{
    // 1B0E  ; [.3377.0020.0002] 
    // BALINESE LETTER LA LENGA TEDUNG

    uint32_t const cps[1] = { 0x1b0e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3377), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_046)
{
    // 1B0F  ; [.3378.0020.0002] 
    // BALINESE LETTER EKARA

    uint32_t const cps[1] = { 0x1b0f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3378), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_047)
{
    // 1B10  ; [.3379.0020.0002] 
    // BALINESE LETTER AIKARA

    uint32_t const cps[1] = { 0x1b10 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3379), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_048)
{
    // 1B11  ; [.337A.0020.0002] 
    // BALINESE LETTER OKARA

    uint32_t const cps[1] = { 0x1b11 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x337a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 1));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_044_049)
{
    // 1B11 1B35 ; [.337B.0020.0002] 
    // BALINESE LETTER OKARA TEDUNG

    uint32_t const cps[2] = { 0x1b11, 0x1b35 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x337b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 1));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_044_050)
{
    // 1B12  ; [.337B.0020.0002] 
    // BALINESE LETTER OKARA TEDUNG

    uint32_t const cps[1] = { 0x1b12 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x337b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_051)
{
    // 1B13  ; [.337C.0020.0002] 
    // BALINESE LETTER KA

    uint32_t const cps[1] = { 0x1b13 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x337c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_052)
{
    // 1B14  ; [.337F.0020.0002] 
    // BALINESE LETTER KA MAHAPRANA

    uint32_t const cps[1] = { 0x1b14 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x337f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_053)
{
    // 1B15  ; [.3380.0020.0002] 
    // BALINESE LETTER GA

    uint32_t const cps[1] = { 0x1b15 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3380), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_054)
{
    // 1B16  ; [.3381.0020.0002] 
    // BALINESE LETTER GA GORA

    uint32_t const cps[1] = { 0x1b16 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3381), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_055)
{
    // 1B17  ; [.3382.0020.0002] 
    // BALINESE LETTER NGA

    uint32_t const cps[1] = { 0x1b17 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3382), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_056)
{
    // 1B18  ; [.3383.0020.0002] 
    // BALINESE LETTER CA

    uint32_t const cps[1] = { 0x1b18 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3383), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_057)
{
    // 1B19  ; [.3384.0020.0002] 
    // BALINESE LETTER CA LACA

    uint32_t const cps[1] = { 0x1b19 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3384), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_058)
{
    // 1B1A  ; [.3385.0020.0002] 
    // BALINESE LETTER JA

    uint32_t const cps[1] = { 0x1b1a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3385), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_059)
{
    // 1B1B  ; [.3386.0020.0002] 
    // BALINESE LETTER JA JERA

    uint32_t const cps[1] = { 0x1b1b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3386), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_060)
{
    // 1B1C  ; [.3387.0020.0002] 
    // BALINESE LETTER NYA

    uint32_t const cps[1] = { 0x1b1c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3387), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_061)
{
    // 1B1D  ; [.3388.0020.0002] 
    // BALINESE LETTER TA LATIK

    uint32_t const cps[1] = { 0x1b1d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3388), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_062)
{
    // 1B1E  ; [.3389.0020.0002] 
    // BALINESE LETTER TA MURDA MAHAPRANA

    uint32_t const cps[1] = { 0x1b1e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3389), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_063)
{
    // 1B1F  ; [.338A.0020.0002] 
    // BALINESE LETTER DA MURDA ALPAPRANA

    uint32_t const cps[1] = { 0x1b1f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x338a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_064)
{
    // 1B20  ; [.338B.0020.0002] 
    // BALINESE LETTER DA MURDA MAHAPRANA

    uint32_t const cps[1] = { 0x1b20 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x338b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_065)
{
    // 1B21  ; [.338C.0020.0002] 
    // BALINESE LETTER NA RAMBAT

    uint32_t const cps[1] = { 0x1b21 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x338c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_066)
{
    // 1B22  ; [.338D.0020.0002] 
    // BALINESE LETTER TA

    uint32_t const cps[1] = { 0x1b22 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x338d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_067)
{
    // 1B23  ; [.338F.0020.0002] 
    // BALINESE LETTER TA TAWA

    uint32_t const cps[1] = { 0x1b23 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x338f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_068)
{
    // 1B24  ; [.3390.0020.0002] 
    // BALINESE LETTER DA

    uint32_t const cps[1] = { 0x1b24 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3390), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_069)
{
    // 1B25  ; [.3391.0020.0002] 
    // BALINESE LETTER DA MADU

    uint32_t const cps[1] = { 0x1b25 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3391), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_070)
{
    // 1B26  ; [.3392.0020.0002] 
    // BALINESE LETTER NA

    uint32_t const cps[1] = { 0x1b26 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3392), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_071)
{
    // 1B27  ; [.3393.0020.0002] 
    // BALINESE LETTER PA

    uint32_t const cps[1] = { 0x1b27 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3393), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_072)
{
    // 1B28  ; [.3395.0020.0002] 
    // BALINESE LETTER PA KAPAL

    uint32_t const cps[1] = { 0x1b28 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3395), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_073)
{
    // 1B29  ; [.3396.0020.0002] 
    // BALINESE LETTER BA

    uint32_t const cps[1] = { 0x1b29 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3396), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_074)
{
    // 1B2A  ; [.3397.0020.0002] 
    // BALINESE LETTER BA KEMBANG

    uint32_t const cps[1] = { 0x1b2a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3397), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_075)
{
    // 1B2B  ; [.3398.0020.0002] 
    // BALINESE LETTER MA

    uint32_t const cps[1] = { 0x1b2b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3398), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_076)
{
    // 1B2C  ; [.3399.0020.0002] 
    // BALINESE LETTER YA

    uint32_t const cps[1] = { 0x1b2c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3399), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_077)
{
    // 1B2D  ; [.339A.0020.0002] 
    // BALINESE LETTER RA

    uint32_t const cps[1] = { 0x1b2d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x339a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_078)
{
    // 1B2E  ; [.339B.0020.0002] 
    // BALINESE LETTER LA

    uint32_t const cps[1] = { 0x1b2e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x339b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_079)
{
    // 1B2F  ; [.339C.0020.0002] 
    // BALINESE LETTER WA

    uint32_t const cps[1] = { 0x1b2f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x339c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_080)
{
    // 1B30  ; [.339E.0020.0002] 
    // BALINESE LETTER SA SAGA

    uint32_t const cps[1] = { 0x1b30 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x339e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_081)
{
    // 1B31  ; [.339F.0020.0002] 
    // BALINESE LETTER SA SAPA

    uint32_t const cps[1] = { 0x1b31 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x339f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_082)
{
    // 1B32  ; [.33A0.0020.0002] 
    // BALINESE LETTER SA

    uint32_t const cps[1] = { 0x1b32 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x33a0), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_083)
{
    // 1B33  ; [.33A3.0020.0002] 
    // BALINESE LETTER HA

    uint32_t const cps[1] = { 0x1b33 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x33a3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_084)
{
    // 1B34  ; [.0000.00C2.0002] 
    // BALINESE SIGN REREKAN

    uint32_t const cps[1] = { 0x1b34 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa2), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_085)
{
    // 1B35  ; [.33A4.0020.0002] 
    // BALINESE VOWEL SIGN TEDUNG

    uint32_t const cps[1] = { 0x1b35 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x33a4), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_086)
{
    // 1B36  ; [.33A5.0020.0002] 
    // BALINESE VOWEL SIGN ULU

    uint32_t const cps[1] = { 0x1b36 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x33a5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_087)
{
    // 1B37  ; [.33A6.0020.0002] 
    // BALINESE VOWEL SIGN ULU SARI

    uint32_t const cps[1] = { 0x1b37 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x33a6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_088)
{
    // 1B38  ; [.33A7.0020.0002] 
    // BALINESE VOWEL SIGN SUKU

    uint32_t const cps[1] = { 0x1b38 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x33a7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_089)
{
    // 1B39  ; [.33A8.0020.0002] 
    // BALINESE VOWEL SIGN SUKU ILUT

    uint32_t const cps[1] = { 0x1b39 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x33a8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_090)
{
    // 1B3A  ; [.33A9.0020.0002] 
    // BALINESE VOWEL SIGN RA REPA

    uint32_t const cps[1] = { 0x1b3a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x33a9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 1));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_044_091)
{
    // 1B3A 1B35 ; [.33AA.0020.0002] 
    // BALINESE VOWEL SIGN RA REPA TEDUNG

    uint32_t const cps[2] = { 0x1b3a, 0x1b35 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x33aa), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 1));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_044_092)
{
    // 1B3B  ; [.33AA.0020.0002] 
    // BALINESE VOWEL SIGN RA REPA TEDUNG

    uint32_t const cps[1] = { 0x1b3b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x33aa), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_093)
{
    // 1B3C  ; [.33AB.0020.0002] 
    // BALINESE VOWEL SIGN LA LENGA

    uint32_t const cps[1] = { 0x1b3c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x33ab), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 1));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_044_094)
{
    // 1B3C 1B35 ; [.33AC.0020.0002] 
    // BALINESE VOWEL SIGN LA LENGA TEDUNG

    uint32_t const cps[2] = { 0x1b3c, 0x1b35 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x33ac), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 1));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_044_095)
{
    // 1B3D  ; [.33AC.0020.0002] 
    // BALINESE VOWEL SIGN LA LENGA TEDUNG

    uint32_t const cps[1] = { 0x1b3d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x33ac), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_096)
{
    // 1B3E  ; [.33AD.0020.0002] 
    // BALINESE VOWEL SIGN TALING

    uint32_t const cps[1] = { 0x1b3e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x33ad), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 1));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_044_097)
{
    // 1B3E 1B35 ; [.33AF.0020.0002] 
    // BALINESE VOWEL SIGN TALING TEDUNG

    uint32_t const cps[2] = { 0x1b3e, 0x1b35 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x33af), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 1));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_044_098)
{
    // 1B3F  ; [.33AE.0020.0002] 
    // BALINESE VOWEL SIGN TALING REPA

    uint32_t const cps[1] = { 0x1b3f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x33ae), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 1));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_044_099)
{
    // 1B3F 1B35 ; [.33B0.0020.0002] 
    // BALINESE VOWEL SIGN TALING REPA TEDUNG

    uint32_t const cps[2] = { 0x1b3f, 0x1b35 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x33b0), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 1));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_044_100)
{
    // 1B40  ; [.33AF.0020.0002] 
    // BALINESE VOWEL SIGN TALING TEDUNG

    uint32_t const cps[1] = { 0x1b40 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x33af), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_101)
{
    // 1B41  ; [.33B0.0020.0002] 
    // BALINESE VOWEL SIGN TALING REPA TEDUNG

    uint32_t const cps[1] = { 0x1b41 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x33b0), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_102)
{
    // 1B42  ; [.33B1.0020.0002] 
    // BALINESE VOWEL SIGN PEPET

    uint32_t const cps[1] = { 0x1b42 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x33b1), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 1));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_044_103)
{
    // 1B42 1B35 ; [.33B2.0020.0002] 
    // BALINESE VOWEL SIGN PEPET TEDUNG

    uint32_t const cps[2] = { 0x1b42, 0x1b35 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x33b2), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 1));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_044_104)
{
    // 1B43  ; [.33B2.0020.0002] 
    // BALINESE VOWEL SIGN PEPET TEDUNG

    uint32_t const cps[1] = { 0x1b43 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x33b2), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_105)
{
    // 1B44  ; [.33B3.0020.0002] 
    // BALINESE ADEG ADEG

    uint32_t const cps[1] = { 0x1b44 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x33b3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_106)
{
    // 1B45  ; [.337D.0020.0002] 
    // BALINESE LETTER KAF SASAK

    uint32_t const cps[1] = { 0x1b45 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x337d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_107)
{
    // 1B46  ; [.337E.0020.0002] 
    // BALINESE LETTER KHOT SASAK

    uint32_t const cps[1] = { 0x1b46 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x337e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_108)
{
    // 1B47  ; [.338E.0020.0002] 
    // BALINESE LETTER TZIR SASAK

    uint32_t const cps[1] = { 0x1b47 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x338e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_109)
{
    // 1B48  ; [.3394.0020.0002] 
    // BALINESE LETTER EF SASAK

    uint32_t const cps[1] = { 0x1b48 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3394), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_110)
{
    // 1B49  ; [.339D.0020.0002] 
    // BALINESE LETTER VE SASAK

    uint32_t const cps[1] = { 0x1b49 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x339d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_111)
{
    // 1B4A  ; [.33A1.0020.0002] 
    // BALINESE LETTER ZAL SASAK

    uint32_t const cps[1] = { 0x1b4a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x33a1), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_112)
{
    // 1B4B  ; [.33A2.0020.0002] 
    // BALINESE LETTER ASYURA SASAK

    uint32_t const cps[1] = { 0x1b4b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x33a2), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_113)
{
    // 1B50  ; [.1CA3.0020.0002] 
    // BALINESE DIGIT ZERO

    uint32_t const cps[1] = { 0x1b50 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_114)
{
    // 1B51  ; [.1CA4.0020.0002] 
    // BALINESE DIGIT ONE

    uint32_t const cps[1] = { 0x1b51 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_115)
{
    // 1B52  ; [.1CA5.0020.0002] 
    // BALINESE DIGIT TWO

    uint32_t const cps[1] = { 0x1b52 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_116)
{
    // 1B53  ; [.1CA6.0020.0002] 
    // BALINESE DIGIT THREE

    uint32_t const cps[1] = { 0x1b53 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_117)
{
    // 1B54  ; [.1CA7.0020.0002] 
    // BALINESE DIGIT FOUR

    uint32_t const cps[1] = { 0x1b54 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_118)
{
    // 1B55  ; [.1CA8.0020.0002] 
    // BALINESE DIGIT FIVE

    uint32_t const cps[1] = { 0x1b55 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_119)
{
    // 1B56  ; [.1CA9.0020.0002] 
    // BALINESE DIGIT SIX

    uint32_t const cps[1] = { 0x1b56 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_120)
{
    // 1B57  ; [.1CAA.0020.0002] 
    // BALINESE DIGIT SEVEN

    uint32_t const cps[1] = { 0x1b57 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_121)
{
    // 1B58  ; [.1CAB.0020.0002] 
    // BALINESE DIGIT EIGHT

    uint32_t const cps[1] = { 0x1b58 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_122)
{
    // 1B59  ; [.1CAC.0020.0002] 
    // BALINESE DIGIT NINE

    uint32_t const cps[1] = { 0x1b59 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_123)
{
    // 1B5A  ; [*02CC.0020.0002] 
    // BALINESE PANTI

    uint32_t const cps[1] = { 0x1b5a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_124)
{
    // 1B5B  ; [*02CD.0020.0002] 
    // BALINESE PAMADA

    uint32_t const cps[1] = { 0x1b5b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2cd), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_125)
{
    // 1B5C  ; [*0281.0020.0002] 
    // BALINESE WINDU

    uint32_t const cps[1] = { 0x1b5c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x281), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_126)
{
    // 1B5D  ; [*025B.0020.0002] 
    // BALINESE CARIK PAMUNGKAH

    uint32_t const cps[1] = { 0x1b5d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x25b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_127)
{
    // 1B5E  ; [*02A2.0020.0002] 
    // BALINESE CARIK SIKI

    uint32_t const cps[1] = { 0x1b5e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2a2), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_128)
{
    // 1B5F  ; [*02A3.0020.0002] 
    // BALINESE CARIK PAREREN

    uint32_t const cps[1] = { 0x1b5f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2a3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_129)
{
    // 1B60  ; [*0210.0020.0002] 
    // BALINESE PAMENENG

    uint32_t const cps[1] = { 0x1b60 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x210), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_130)
{
    // 1B61  ; [*0587.0020.0002] 
    // BALINESE MUSICAL SYMBOL DONG

    uint32_t const cps[1] = { 0x1b61 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x587), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_131)
{
    // 1B62  ; [*0588.0020.0002] 
    // BALINESE MUSICAL SYMBOL DENG

    uint32_t const cps[1] = { 0x1b62 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x588), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_132)
{
    // 1B63  ; [*0589.0020.0002] 
    // BALINESE MUSICAL SYMBOL DUNG

    uint32_t const cps[1] = { 0x1b63 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x589), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_133)
{
    // 1B64  ; [*058A.0020.0002] 
    // BALINESE MUSICAL SYMBOL DANG

    uint32_t const cps[1] = { 0x1b64 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x58a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_134)
{
    // 1B65  ; [*058B.0020.0002] 
    // BALINESE MUSICAL SYMBOL DANG SURANG

    uint32_t const cps[1] = { 0x1b65 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x58b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_135)
{
    // 1B66  ; [*058C.0020.0002] 
    // BALINESE MUSICAL SYMBOL DING

    uint32_t const cps[1] = { 0x1b66 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x58c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_136)
{
    // 1B67  ; [*058D.0020.0002] 
    // BALINESE MUSICAL SYMBOL DAENG

    uint32_t const cps[1] = { 0x1b67 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x58d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_137)
{
    // 1B68  ; [*058E.0020.0002] 
    // BALINESE MUSICAL SYMBOL DEUNG

    uint32_t const cps[1] = { 0x1b68 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x58e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_138)
{
    // 1B69  ; [*058F.0020.0002] 
    // BALINESE MUSICAL SYMBOL DAING

    uint32_t const cps[1] = { 0x1b69 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x58f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_139)
{
    // 1B6A  ; [*0590.0020.0002] 
    // BALINESE MUSICAL SYMBOL DANG GEDE

    uint32_t const cps[1] = { 0x1b6a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x590), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_140)
{
    // 1B6B  ; [.0000.0000.0000] 
    // BALINESE MUSICAL SYMBOL COMBINING TEGEH

    uint32_t const cps[1] = { 0x1b6b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_141)
{
    // 1B6C  ; [.0000.0000.0000] 
    // BALINESE MUSICAL SYMBOL COMBINING ENDEP

    uint32_t const cps[1] = { 0x1b6c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_142)
{
    // 1B6D  ; [.0000.0000.0000] 
    // BALINESE MUSICAL SYMBOL COMBINING KEMPUL

    uint32_t const cps[1] = { 0x1b6d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_143)
{
    // 1B6E  ; [.0000.0000.0000] 
    // BALINESE MUSICAL SYMBOL COMBINING KEMPLI

    uint32_t const cps[1] = { 0x1b6e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_144)
{
    // 1B6F  ; [.0000.0000.0000] 
    // BALINESE MUSICAL SYMBOL COMBINING JEGOGAN

    uint32_t const cps[1] = { 0x1b6f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_145)
{
    // 1B70  ; [.0000.0000.0000] 
    // BALINESE MUSICAL SYMBOL COMBINING KEMPUL WITH JEGOGAN

    uint32_t const cps[1] = { 0x1b70 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_146)
{
    // 1B71  ; [.0000.0000.0000] 
    // BALINESE MUSICAL SYMBOL COMBINING KEMPLI WITH JEGOGAN

    uint32_t const cps[1] = { 0x1b71 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_147)
{
    // 1B72  ; [.0000.0000.0000] 
    // BALINESE MUSICAL SYMBOL COMBINING BENDE

    uint32_t const cps[1] = { 0x1b72 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_148)
{
    // 1B73  ; [.0000.0000.0000] 
    // BALINESE MUSICAL SYMBOL COMBINING GONG

    uint32_t const cps[1] = { 0x1b73 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_044_149)
{
    // 1B74  ; [*0591.0020.0002] 
    // BALINESE MUSICAL SYMBOL RIGHT-HAND OPEN DUG

    uint32_t const cps[1] = { 0x1b74 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x591), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

