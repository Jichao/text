// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_117_000)
{
    // 1D15 0061;	
    // (ᴕ) LATIN LETTER SMALL CAPITAL OU	[1E71 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D15, 0x0061 };
    uint32_t const ces[9] = { 0x1E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_001)
{
    // 1D15 0041;	
    // (ᴕ) LATIN LETTER SMALL CAPITAL OU	[1E71 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D15, 0x0041 };
    uint32_t const ces[9] = { 0x1E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_002)
{
    // 1D15 0062;	
    // (ᴕ) LATIN LETTER SMALL CAPITAL OU	[1E71 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D15, 0x0062 };
    uint32_t const ces[9] = { 0x1E71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_003)
{
    // 0070 0301 0334;	
    // (ṕ) LATIN SMALL LETTER P, COMBINING ACUTE ACCENT	[1E72 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0070, 0x0301, 0x0334 };
    uint32_t const ces[10] = { 0x1E72, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_004)
{
    // 0070 0334 0301;	
    // (p̴) LATIN SMALL LETTER P, COMBINING TILDE OVERLAY	[1E72 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0070, 0x0334, 0x0301 };
    uint32_t const ces[10] = { 0x1E72, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_005)
{
    // 0070 0341 0334;	
    // (ṕ) LATIN SMALL LETTER P, COMBINING ACUTE TONE MARK	[1E72 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0070, 0x0341, 0x0334 };
    uint32_t const ces[10] = { 0x1E72, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_006)
{
    // 1E55 0334;	
    // (ṕ) LATIN SMALL LETTER P WITH ACUTE	[1E72 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E55, 0x0334 };
    uint32_t const ces[10] = { 0x1E72, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_007)
{
    // 0050 0301 0334;	
    // (Ṕ) LATIN CAPITAL LETTER P, COMBINING ACUTE ACCENT	[1E72 | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0050, 0x0301, 0x0334 };
    uint32_t const ces[10] = { 0x1E72, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_008)
{
    // 0050 0334 0301;	
    // (P̴) LATIN CAPITAL LETTER P, COMBINING TILDE OVERLAY	[1E72 | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0050, 0x0334, 0x0301 };
    uint32_t const ces[10] = { 0x1E72, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_009)
{
    // 0050 0341 0334;	
    // (Ṕ) LATIN CAPITAL LETTER P, COMBINING ACUTE TONE MARK	[1E72 | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0050, 0x0341, 0x0334 };
    uint32_t const ces[10] = { 0x1E72, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_010)
{
    // 1E54 0334;	
    // (Ṕ) LATIN CAPITAL LETTER P WITH ACUTE	[1E72 | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E54, 0x0334 };
    uint32_t const ces[10] = { 0x1E72, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_011)
{
    // 0070 0307 0334;	
    // (ṗ) LATIN SMALL LETTER P, COMBINING DOT ABOVE	[1E72 | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0070, 0x0307, 0x0334 };
    uint32_t const ces[10] = { 0x1E72, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_012)
{
    // 0070 0334 0307;	
    // (p̴) LATIN SMALL LETTER P, COMBINING TILDE OVERLAY	[1E72 | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0070, 0x0334, 0x0307 };
    uint32_t const ces[10] = { 0x1E72, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_013)
{
    // 1E57 0334;	
    // (ṗ) LATIN SMALL LETTER P WITH DOT ABOVE	[1E72 | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E57, 0x0334 };
    uint32_t const ces[10] = { 0x1E72, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_014)
{
    // 0050 0307 0334;	
    // (Ṗ) LATIN CAPITAL LETTER P, COMBINING DOT ABOVE	[1E72 | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0050, 0x0307, 0x0334 };
    uint32_t const ces[10] = { 0x1E72, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_015)
{
    // 0050 0334 0307;	
    // (P̴) LATIN CAPITAL LETTER P, COMBINING TILDE OVERLAY	[1E72 | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0050, 0x0334, 0x0307 };
    uint32_t const ces[10] = { 0x1E72, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_016)
{
    // 1E56 0334;	
    // (Ṗ) LATIN CAPITAL LETTER P WITH DOT ABOVE	[1E72 | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E56, 0x0334 };
    uint32_t const ces[10] = { 0x1E72, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_017)
{
    // 0334 1DEE;	
    // (ᷮ) COMBINING LATIN SMALL LETTER P	[1E72 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x1DEE };
    uint32_t const ces[8] = { 0x1E72, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_018)
{
    // 1DEE 0334;	
    // (ᷮ) COMBINING LATIN SMALL LETTER P	[1E72 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x1DEE, 0x0334 };
    uint32_t const ces[8] = { 0x1E72, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_019)
{
    // 0070 0021;	
    // (p) LATIN SMALL LETTER P	[1E72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0070, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_020)
{
    // FF50 0021;	
    // (ｐ) FULLWIDTH LATIN SMALL LETTER P	[1E72 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF50, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_021)
{
    // 1DEE 0021;	
    // (ᷮ) COMBINING LATIN SMALL LETTER P	[1E72 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DEE, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_022)
{
    // 1D429 0021;	
    // (𝐩) MATHEMATICAL BOLD SMALL P	[1E72 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D429, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_023)
{
    // 1D45D 0021;	
    // (𝑝) MATHEMATICAL ITALIC SMALL P	[1E72 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D45D, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_024)
{
    // 1D491 0021;	
    // (𝒑) MATHEMATICAL BOLD ITALIC SMALL P	[1E72 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D491, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_025)
{
    // 1D4C5 0021;	
    // (𝓅) MATHEMATICAL SCRIPT SMALL P	[1E72 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4C5, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_026)
{
    // 1D4F9 0021;	
    // (𝓹) MATHEMATICAL BOLD SCRIPT SMALL P	[1E72 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4F9, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_027)
{
    // 1D52D 0021;	
    // (𝔭) MATHEMATICAL FRAKTUR SMALL P	[1E72 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D52D, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_028)
{
    // 1D561 0021;	
    // (𝕡) MATHEMATICAL DOUBLE-STRUCK SMALL P	[1E72 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D561, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_029)
{
    // 1D595 0021;	
    // (𝖕) MATHEMATICAL BOLD FRAKTUR SMALL P	[1E72 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D595, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_030)
{
    // 1D5C9 0021;	
    // (𝗉) MATHEMATICAL SANS-SERIF SMALL P	[1E72 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5C9, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_031)
{
    // 1D5FD 0021;	
    // (𝗽) MATHEMATICAL SANS-SERIF BOLD SMALL P	[1E72 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5FD, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_032)
{
    // 1D631 0021;	
    // (𝘱) MATHEMATICAL SANS-SERIF ITALIC SMALL P	[1E72 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D631, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_033)
{
    // 1D665 0021;	
    // (𝙥) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL P	[1E72 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D665, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_034)
{
    // 1D699 0021;	
    // (𝚙) MATHEMATICAL MONOSPACE SMALL P	[1E72 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D699, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_035)
{
    // 24DF 0021;	
    // (ⓟ) CIRCLED LATIN SMALL LETTER P	[1E72 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24DF, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_036)
{
    // 0050 0021;	
    // (P) LATIN CAPITAL LETTER P	[1E72 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0050, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_037)
{
    // FF30 0021;	
    // (Ｐ) FULLWIDTH LATIN CAPITAL LETTER P	[1E72 0261 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF30, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_038)
{
    // 2119 0021;	
    // (ℙ) DOUBLE-STRUCK CAPITAL P	[1E72 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2119, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_039)
{
    // 1D40F 0021;	
    // (𝐏) MATHEMATICAL BOLD CAPITAL P	[1E72 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D40F, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_040)
{
    // 1D443 0021;	
    // (𝑃) MATHEMATICAL ITALIC CAPITAL P	[1E72 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D443, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_041)
{
    // 1D477 0021;	
    // (𝑷) MATHEMATICAL BOLD ITALIC CAPITAL P	[1E72 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D477, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_042)
{
    // 1D4AB 0021;	
    // (𝒫) MATHEMATICAL SCRIPT CAPITAL P	[1E72 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4AB, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_043)
{
    // 1D4DF 0021;	
    // (𝓟) MATHEMATICAL BOLD SCRIPT CAPITAL P	[1E72 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4DF, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_044)
{
    // 1D513 0021;	
    // (𝔓) MATHEMATICAL FRAKTUR CAPITAL P	[1E72 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D513, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_045)
{
    // 1D57B 0021;	
    // (𝕻) MATHEMATICAL BOLD FRAKTUR CAPITAL P	[1E72 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D57B, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_046)
{
    // 1D5AF 0021;	
    // (𝖯) MATHEMATICAL SANS-SERIF CAPITAL P	[1E72 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5AF, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_047)
{
    // 1D5E3 0021;	
    // (𝗣) MATHEMATICAL SANS-SERIF BOLD CAPITAL P	[1E72 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5E3, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_048)
{
    // 1D617 0021;	
    // (𝘗) MATHEMATICAL SANS-SERIF ITALIC CAPITAL P	[1E72 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D617, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_049)
{
    // 1D64B 0021;	
    // (𝙋) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL P	[1E72 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D64B, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_050)
{
    // 1D67F 0021;	
    // (𝙿) MATHEMATICAL MONOSPACE CAPITAL P	[1E72 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D67F, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_051)
{
    // 24C5 0021;	
    // (Ⓟ) CIRCLED LATIN CAPITAL LETTER P	[1E72 0261 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24C5, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_052)
{
    // 1F15F 0021;	
    // (🅟) NEGATIVE CIRCLED LATIN CAPITAL LETTER P	[1E72 0261 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F15F, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_053)
{
    // 1D56 0021;	
    // (ᵖ) MODIFIER LETTER SMALL P	[1E72 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D56, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_054)
{
    // 209A 0021;	
    // (ₚ) LATIN SUBSCRIPT SMALL LETTER P	[1E72 0261 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x209A, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_055)
{
    // 1D3E 0021;	
    // (ᴾ) MODIFIER LETTER CAPITAL P	[1E72 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D3E, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_056)
{
    // 1F13F 0021;	
    // (🄿) SQUARED LATIN CAPITAL LETTER P	[1E72 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F13F, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_057)
{
    // 1F17F 0021;	
    // (🅿) NEGATIVE SQUARED LATIN CAPITAL LETTER P	[1E72 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F17F, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_058)
{
    // 1F18A 0021;	
    // (🆊) CROSSED NEGATIVE SQUARED LATIN CAPITAL LETTER P	[1E72 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F18A, 0x0021 };
    uint32_t const ces[9] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_059)
{
    // 1E55 0021;	
    // (ṕ) LATIN SMALL LETTER P WITH ACUTE	[1E72 0261 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E55, 0x0021 };
    uint32_t const ces[11] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_060)
{
    // 1E54 0021;	
    // (Ṕ) LATIN CAPITAL LETTER P WITH ACUTE	[1E72 0261 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E54, 0x0021 };
    uint32_t const ces[11] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_061)
{
    // 1E57 0021;	
    // (ṗ) LATIN SMALL LETTER P WITH DOT ABOVE	[1E72 0261 | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E57, 0x0021 };
    uint32_t const ces[11] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_062)
{
    // 1E56 0021;	
    // (Ṗ) LATIN CAPITAL LETTER P WITH DOT ABOVE	[1E72 0261 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E56, 0x0021 };
    uint32_t const ces[11] = { 0x1E72, 0x0261, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_063)
{
    // 0070 003F;	
    // (p) LATIN SMALL LETTER P	[1E72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0070, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_064)
{
    // FF50 003F;	
    // (ｐ) FULLWIDTH LATIN SMALL LETTER P	[1E72 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF50, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_065)
{
    // 1DEE 003F;	
    // (ᷮ) COMBINING LATIN SMALL LETTER P	[1E72 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DEE, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_066)
{
    // 1D429 003F;	
    // (𝐩) MATHEMATICAL BOLD SMALL P	[1E72 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D429, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_067)
{
    // 1D45D 003F;	
    // (𝑝) MATHEMATICAL ITALIC SMALL P	[1E72 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D45D, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_068)
{
    // 1D491 003F;	
    // (𝒑) MATHEMATICAL BOLD ITALIC SMALL P	[1E72 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D491, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_069)
{
    // 1D4C5 003F;	
    // (𝓅) MATHEMATICAL SCRIPT SMALL P	[1E72 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4C5, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_070)
{
    // 1D4F9 003F;	
    // (𝓹) MATHEMATICAL BOLD SCRIPT SMALL P	[1E72 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4F9, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_071)
{
    // 1D52D 003F;	
    // (𝔭) MATHEMATICAL FRAKTUR SMALL P	[1E72 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D52D, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_072)
{
    // 1D561 003F;	
    // (𝕡) MATHEMATICAL DOUBLE-STRUCK SMALL P	[1E72 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D561, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_073)
{
    // 1D595 003F;	
    // (𝖕) MATHEMATICAL BOLD FRAKTUR SMALL P	[1E72 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D595, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_074)
{
    // 1D5C9 003F;	
    // (𝗉) MATHEMATICAL SANS-SERIF SMALL P	[1E72 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5C9, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_075)
{
    // 1D5FD 003F;	
    // (𝗽) MATHEMATICAL SANS-SERIF BOLD SMALL P	[1E72 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5FD, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_076)
{
    // 1D631 003F;	
    // (𝘱) MATHEMATICAL SANS-SERIF ITALIC SMALL P	[1E72 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D631, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_077)
{
    // 1D665 003F;	
    // (𝙥) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL P	[1E72 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D665, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_078)
{
    // 1D699 003F;	
    // (𝚙) MATHEMATICAL MONOSPACE SMALL P	[1E72 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D699, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_079)
{
    // 24DF 003F;	
    // (ⓟ) CIRCLED LATIN SMALL LETTER P	[1E72 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24DF, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_080)
{
    // 0050 003F;	
    // (P) LATIN CAPITAL LETTER P	[1E72 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0050, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_081)
{
    // FF30 003F;	
    // (Ｐ) FULLWIDTH LATIN CAPITAL LETTER P	[1E72 0267 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF30, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_082)
{
    // 2119 003F;	
    // (ℙ) DOUBLE-STRUCK CAPITAL P	[1E72 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2119, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_083)
{
    // 1D40F 003F;	
    // (𝐏) MATHEMATICAL BOLD CAPITAL P	[1E72 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D40F, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_084)
{
    // 1D443 003F;	
    // (𝑃) MATHEMATICAL ITALIC CAPITAL P	[1E72 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D443, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_085)
{
    // 1D477 003F;	
    // (𝑷) MATHEMATICAL BOLD ITALIC CAPITAL P	[1E72 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D477, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_086)
{
    // 1D4AB 003F;	
    // (𝒫) MATHEMATICAL SCRIPT CAPITAL P	[1E72 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4AB, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_087)
{
    // 1D4DF 003F;	
    // (𝓟) MATHEMATICAL BOLD SCRIPT CAPITAL P	[1E72 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4DF, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_088)
{
    // 1D513 003F;	
    // (𝔓) MATHEMATICAL FRAKTUR CAPITAL P	[1E72 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D513, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_089)
{
    // 1D57B 003F;	
    // (𝕻) MATHEMATICAL BOLD FRAKTUR CAPITAL P	[1E72 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D57B, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_090)
{
    // 1D5AF 003F;	
    // (𝖯) MATHEMATICAL SANS-SERIF CAPITAL P	[1E72 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5AF, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_091)
{
    // 1D5E3 003F;	
    // (𝗣) MATHEMATICAL SANS-SERIF BOLD CAPITAL P	[1E72 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5E3, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_092)
{
    // 1D617 003F;	
    // (𝘗) MATHEMATICAL SANS-SERIF ITALIC CAPITAL P	[1E72 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D617, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_093)
{
    // 1D64B 003F;	
    // (𝙋) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL P	[1E72 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D64B, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_094)
{
    // 1D67F 003F;	
    // (𝙿) MATHEMATICAL MONOSPACE CAPITAL P	[1E72 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D67F, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_095)
{
    // 24C5 003F;	
    // (Ⓟ) CIRCLED LATIN CAPITAL LETTER P	[1E72 0267 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24C5, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_096)
{
    // 1F15F 003F;	
    // (🅟) NEGATIVE CIRCLED LATIN CAPITAL LETTER P	[1E72 0267 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F15F, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_097)
{
    // 1D56 003F;	
    // (ᵖ) MODIFIER LETTER SMALL P	[1E72 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D56, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_098)
{
    // 209A 003F;	
    // (ₚ) LATIN SUBSCRIPT SMALL LETTER P	[1E72 0267 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x209A, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_099)
{
    // 1D3E 003F;	
    // (ᴾ) MODIFIER LETTER CAPITAL P	[1E72 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D3E, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_100)
{
    // 1F13F 003F;	
    // (🄿) SQUARED LATIN CAPITAL LETTER P	[1E72 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F13F, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_101)
{
    // 1F17F 003F;	
    // (🅿) NEGATIVE SQUARED LATIN CAPITAL LETTER P	[1E72 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F17F, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_102)
{
    // 1F18A 003F;	
    // (🆊) CROSSED NEGATIVE SQUARED LATIN CAPITAL LETTER P	[1E72 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F18A, 0x003F };
    uint32_t const ces[9] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_103)
{
    // 1E55 003F;	
    // (ṕ) LATIN SMALL LETTER P WITH ACUTE	[1E72 0267 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E55, 0x003F };
    uint32_t const ces[11] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_104)
{
    // 1E54 003F;	
    // (Ṕ) LATIN CAPITAL LETTER P WITH ACUTE	[1E72 0267 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E54, 0x003F };
    uint32_t const ces[11] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_105)
{
    // 1E57 003F;	
    // (ṗ) LATIN SMALL LETTER P WITH DOT ABOVE	[1E72 0267 | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E57, 0x003F };
    uint32_t const ces[11] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_106)
{
    // 1E56 003F;	
    // (Ṗ) LATIN CAPITAL LETTER P WITH DOT ABOVE	[1E72 0267 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E56, 0x003F };
    uint32_t const ces[11] = { 0x1E72, 0x0267, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_107)
{
    // 33D8 0021;	
    // (㏘) SQUARE PM	[1E72 0278 1E10 0278 0261 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33D8, 0x0021 };
    uint32_t const ces[18] = { 0x1E72, 0x0278, 0x1E10, 0x0278, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_108)
{
    // 33D8 003F;	
    // (㏘) SQUARE PM	[1E72 0278 1E10 0278 0267 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33D8, 0x003F };
    uint32_t const ces[18] = { 0x1E72, 0x0278, 0x1E10, 0x0278, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_109)
{
    // 33D8 0061;	
    // (㏘) SQUARE PM	[1E72 0278 1E10 0278 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33D8, 0x0061 };
    uint32_t const ces[18] = { 0x1E72, 0x0278, 0x1E10, 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_110)
{
    // 33D8 0041;	
    // (㏘) SQUARE PM	[1E72 0278 1E10 0278 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x33D8, 0x0041 };
    uint32_t const ces[18] = { 0x1E72, 0x0278, 0x1E10, 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_111)
{
    // 33D8 0062;	
    // (㏘) SQUARE PM	[1E72 0278 1E10 0278 1CC6 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33D8, 0x0062 };
    uint32_t const ces[18] = { 0x1E72, 0x0278, 0x1E10, 0x0278, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_112)
{
    // 0070 0061;	
    // (p) LATIN SMALL LETTER P	[1E72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0070, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_113)
{
    // 0070 0041;	
    // (p) LATIN SMALL LETTER P	[1E72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0070, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_114)
{
    // FF50 0061;	
    // (ｐ) FULLWIDTH LATIN SMALL LETTER P	[1E72 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF50, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_115)
{
    // FF50 0041;	
    // (ｐ) FULLWIDTH LATIN SMALL LETTER P	[1E72 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF50, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_116)
{
    // 1DEE 0061;	
    // (ᷮ) COMBINING LATIN SMALL LETTER P	[1E72 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DEE, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_117)
{
    // 1DEE 0041;	
    // (ᷮ) COMBINING LATIN SMALL LETTER P	[1E72 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1DEE, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_118)
{
    // 1D429 0061;	
    // (𝐩) MATHEMATICAL BOLD SMALL P	[1E72 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D429, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_119)
{
    // 1D45D 0061;	
    // (𝑝) MATHEMATICAL ITALIC SMALL P	[1E72 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D45D, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_120)
{
    // 1D491 0061;	
    // (𝒑) MATHEMATICAL BOLD ITALIC SMALL P	[1E72 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D491, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_121)
{
    // 1D4C5 0061;	
    // (𝓅) MATHEMATICAL SCRIPT SMALL P	[1E72 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4C5, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_122)
{
    // 1D4F9 0061;	
    // (𝓹) MATHEMATICAL BOLD SCRIPT SMALL P	[1E72 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4F9, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_123)
{
    // 1D52D 0061;	
    // (𝔭) MATHEMATICAL FRAKTUR SMALL P	[1E72 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D52D, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_124)
{
    // 1D561 0061;	
    // (𝕡) MATHEMATICAL DOUBLE-STRUCK SMALL P	[1E72 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D561, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_125)
{
    // 1D595 0061;	
    // (𝖕) MATHEMATICAL BOLD FRAKTUR SMALL P	[1E72 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D595, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_126)
{
    // 1D5C9 0061;	
    // (𝗉) MATHEMATICAL SANS-SERIF SMALL P	[1E72 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5C9, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_127)
{
    // 1D5FD 0061;	
    // (𝗽) MATHEMATICAL SANS-SERIF BOLD SMALL P	[1E72 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5FD, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_128)
{
    // 1D631 0061;	
    // (𝘱) MATHEMATICAL SANS-SERIF ITALIC SMALL P	[1E72 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D631, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_129)
{
    // 1D665 0061;	
    // (𝙥) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL P	[1E72 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D665, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_130)
{
    // 1D699 0061;	
    // (𝚙) MATHEMATICAL MONOSPACE SMALL P	[1E72 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D699, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_131)
{
    // 1D429 0041;	
    // (𝐩) MATHEMATICAL BOLD SMALL P	[1E72 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D429, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_132)
{
    // 1D45D 0041;	
    // (𝑝) MATHEMATICAL ITALIC SMALL P	[1E72 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D45D, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_133)
{
    // 1D491 0041;	
    // (𝒑) MATHEMATICAL BOLD ITALIC SMALL P	[1E72 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D491, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_134)
{
    // 1D4C5 0041;	
    // (𝓅) MATHEMATICAL SCRIPT SMALL P	[1E72 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D4C5, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_135)
{
    // 1D4F9 0041;	
    // (𝓹) MATHEMATICAL BOLD SCRIPT SMALL P	[1E72 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D4F9, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_136)
{
    // 1D52D 0041;	
    // (𝔭) MATHEMATICAL FRAKTUR SMALL P	[1E72 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D52D, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_137)
{
    // 1D561 0041;	
    // (𝕡) MATHEMATICAL DOUBLE-STRUCK SMALL P	[1E72 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D561, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_138)
{
    // 1D595 0041;	
    // (𝖕) MATHEMATICAL BOLD FRAKTUR SMALL P	[1E72 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D595, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_139)
{
    // 1D5C9 0041;	
    // (𝗉) MATHEMATICAL SANS-SERIF SMALL P	[1E72 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D5C9, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_140)
{
    // 1D5FD 0041;	
    // (𝗽) MATHEMATICAL SANS-SERIF BOLD SMALL P	[1E72 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D5FD, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_141)
{
    // 1D631 0041;	
    // (𝘱) MATHEMATICAL SANS-SERIF ITALIC SMALL P	[1E72 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D631, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_142)
{
    // 1D665 0041;	
    // (𝙥) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL P	[1E72 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D665, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_143)
{
    // 1D699 0041;	
    // (𝚙) MATHEMATICAL MONOSPACE SMALL P	[1E72 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D699, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_144)
{
    // 24DF 0061;	
    // (ⓟ) CIRCLED LATIN SMALL LETTER P	[1E72 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24DF, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_145)
{
    // 24DF 0041;	
    // (ⓟ) CIRCLED LATIN SMALL LETTER P	[1E72 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x24DF, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_146)
{
    // 0050 0061;	
    // (P) LATIN CAPITAL LETTER P	[1E72 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0050, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_147)
{
    // 0050 0041;	
    // (P) LATIN CAPITAL LETTER P	[1E72 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0050, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_148)
{
    // FF30 0061;	
    // (Ｐ) FULLWIDTH LATIN CAPITAL LETTER P	[1E72 1CAD | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF30, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_149)
{
    // FF30 0041;	
    // (Ｐ) FULLWIDTH LATIN CAPITAL LETTER P	[1E72 1CAD | 0020 0020 | 0009 0008 |]

    uint32_t cps[2] = { 0xFF30, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_150)
{
    // 2119 0061;	
    // (ℙ) DOUBLE-STRUCK CAPITAL P	[1E72 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2119, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_151)
{
    // 1D40F 0061;	
    // (𝐏) MATHEMATICAL BOLD CAPITAL P	[1E72 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D40F, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_152)
{
    // 1D443 0061;	
    // (𝑃) MATHEMATICAL ITALIC CAPITAL P	[1E72 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D443, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_153)
{
    // 1D477 0061;	
    // (𝑷) MATHEMATICAL BOLD ITALIC CAPITAL P	[1E72 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D477, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_154)
{
    // 1D4AB 0061;	
    // (𝒫) MATHEMATICAL SCRIPT CAPITAL P	[1E72 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4AB, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_155)
{
    // 1D4DF 0061;	
    // (𝓟) MATHEMATICAL BOLD SCRIPT CAPITAL P	[1E72 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4DF, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_156)
{
    // 1D513 0061;	
    // (𝔓) MATHEMATICAL FRAKTUR CAPITAL P	[1E72 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D513, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_157)
{
    // 1D57B 0061;	
    // (𝕻) MATHEMATICAL BOLD FRAKTUR CAPITAL P	[1E72 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D57B, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_158)
{
    // 1D5AF 0061;	
    // (𝖯) MATHEMATICAL SANS-SERIF CAPITAL P	[1E72 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5AF, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_159)
{
    // 1D5E3 0061;	
    // (𝗣) MATHEMATICAL SANS-SERIF BOLD CAPITAL P	[1E72 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5E3, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_160)
{
    // 1D617 0061;	
    // (𝘗) MATHEMATICAL SANS-SERIF ITALIC CAPITAL P	[1E72 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D617, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_161)
{
    // 1D64B 0061;	
    // (𝙋) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL P	[1E72 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D64B, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_162)
{
    // 1D67F 0061;	
    // (𝙿) MATHEMATICAL MONOSPACE CAPITAL P	[1E72 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D67F, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_163)
{
    // 2119 0041;	
    // (ℙ) DOUBLE-STRUCK CAPITAL P	[1E72 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x2119, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_164)
{
    // 1D40F 0041;	
    // (𝐏) MATHEMATICAL BOLD CAPITAL P	[1E72 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D40F, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_165)
{
    // 1D443 0041;	
    // (𝑃) MATHEMATICAL ITALIC CAPITAL P	[1E72 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D443, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_166)
{
    // 1D477 0041;	
    // (𝑷) MATHEMATICAL BOLD ITALIC CAPITAL P	[1E72 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D477, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_167)
{
    // 1D4AB 0041;	
    // (𝒫) MATHEMATICAL SCRIPT CAPITAL P	[1E72 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D4AB, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_168)
{
    // 1D4DF 0041;	
    // (𝓟) MATHEMATICAL BOLD SCRIPT CAPITAL P	[1E72 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D4DF, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_169)
{
    // 1D513 0041;	
    // (𝔓) MATHEMATICAL FRAKTUR CAPITAL P	[1E72 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D513, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_170)
{
    // 1D57B 0041;	
    // (𝕻) MATHEMATICAL BOLD FRAKTUR CAPITAL P	[1E72 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D57B, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_171)
{
    // 1D5AF 0041;	
    // (𝖯) MATHEMATICAL SANS-SERIF CAPITAL P	[1E72 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D5AF, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_172)
{
    // 1D5E3 0041;	
    // (𝗣) MATHEMATICAL SANS-SERIF BOLD CAPITAL P	[1E72 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D5E3, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_173)
{
    // 1D617 0041;	
    // (𝘗) MATHEMATICAL SANS-SERIF ITALIC CAPITAL P	[1E72 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D617, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_174)
{
    // 1D64B 0041;	
    // (𝙋) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL P	[1E72 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D64B, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_175)
{
    // 1D67F 0041;	
    // (𝙿) MATHEMATICAL MONOSPACE CAPITAL P	[1E72 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D67F, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_176)
{
    // 24C5 0061;	
    // (Ⓟ) CIRCLED LATIN CAPITAL LETTER P	[1E72 1CAD | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24C5, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_177)
{
    // 1F15F 0061;	
    // (🅟) NEGATIVE CIRCLED LATIN CAPITAL LETTER P	[1E72 1CAD | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F15F, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_178)
{
    // 24C5 0041;	
    // (Ⓟ) CIRCLED LATIN CAPITAL LETTER P	[1E72 1CAD | 0020 0020 | 000C 0008 |]

    uint32_t cps[2] = { 0x24C5, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_179)
{
    // 1F15F 0041;	
    // (🅟) NEGATIVE CIRCLED LATIN CAPITAL LETTER P	[1E72 1CAD | 0020 0020 | 000C 0008 |]

    uint32_t cps[2] = { 0x1F15F, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_180)
{
    // 1D56 0061;	
    // (ᵖ) MODIFIER LETTER SMALL P	[1E72 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D56, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_181)
{
    // 1D56 0041;	
    // (ᵖ) MODIFIER LETTER SMALL P	[1E72 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x1D56, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_182)
{
    // 209A 0061;	
    // (ₚ) LATIN SUBSCRIPT SMALL LETTER P	[1E72 1CAD | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x209A, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_183)
{
    // 209A 0041;	
    // (ₚ) LATIN SUBSCRIPT SMALL LETTER P	[1E72 1CAD | 0020 0020 | 0015 0008 |]

    uint32_t cps[2] = { 0x209A, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_184)
{
    // 1D3E 0061;	
    // (ᴾ) MODIFIER LETTER CAPITAL P	[1E72 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D3E, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_185)
{
    // 1F13F 0061;	
    // (🄿) SQUARED LATIN CAPITAL LETTER P	[1E72 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F13F, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_186)
{
    // 1F17F 0061;	
    // (🅿) NEGATIVE SQUARED LATIN CAPITAL LETTER P	[1E72 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F17F, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_187)
{
    // 1F18A 0061;	
    // (🆊) CROSSED NEGATIVE SQUARED LATIN CAPITAL LETTER P	[1E72 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F18A, 0x0061 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_188)
{
    // 1D3E 0041;	
    // (ᴾ) MODIFIER LETTER CAPITAL P	[1E72 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1D3E, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_189)
{
    // 1F13F 0041;	
    // (🄿) SQUARED LATIN CAPITAL LETTER P	[1E72 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1F13F, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_190)
{
    // 1F17F 0041;	
    // (🅿) NEGATIVE SQUARED LATIN CAPITAL LETTER P	[1E72 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1F17F, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_191)
{
    // 1F18A 0041;	
    // (🆊) CROSSED NEGATIVE SQUARED LATIN CAPITAL LETTER P	[1E72 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1F18A, 0x0041 };
    uint32_t const ces[9] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_192)
{
    // 1E55 0061;	
    // (ṕ) LATIN SMALL LETTER P WITH ACUTE	[1E72 1CAD | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E55, 0x0061 };
    uint32_t const ces[11] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_193)
{
    // 1E55 0041;	
    // (ṕ) LATIN SMALL LETTER P WITH ACUTE	[1E72 1CAD | 0020 0024 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E55, 0x0041 };
    uint32_t const ces[11] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_194)
{
    // 1E54 0061;	
    // (Ṕ) LATIN CAPITAL LETTER P WITH ACUTE	[1E72 1CAD | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E54, 0x0061 };
    uint32_t const ces[11] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_195)
{
    // 1E54 0041;	
    // (Ṕ) LATIN CAPITAL LETTER P WITH ACUTE	[1E72 1CAD | 0020 0024 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1E54, 0x0041 };
    uint32_t const ces[11] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_196)
{
    // 1E57 0061;	
    // (ṗ) LATIN SMALL LETTER P WITH DOT ABOVE	[1E72 1CAD | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E57, 0x0061 };
    uint32_t const ces[11] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_197)
{
    // 1E57 0041;	
    // (ṗ) LATIN SMALL LETTER P WITH DOT ABOVE	[1E72 1CAD | 0020 002E 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E57, 0x0041 };
    uint32_t const ces[11] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_198)
{
    // 1E56 0061;	
    // (Ṗ) LATIN CAPITAL LETTER P WITH DOT ABOVE	[1E72 1CAD | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E56, 0x0061 };
    uint32_t const ces[11] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_199)
{
    // 1E56 0041;	
    // (Ṗ) LATIN CAPITAL LETTER P WITH DOT ABOVE	[1E72 1CAD | 0020 002E 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1E56, 0x0041 };
    uint32_t const ces[11] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_200)
{
    // 3380 0021;	
    // (㎀) SQUARE PA AMPS	[1E72 1CAD 0261 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x3380, 0x0021 };
    uint32_t const ces[12] = { 0x1E72, 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_201)
{
    // 33A9 0021;	
    // (㎩) SQUARE PA	[1E72 1CAD 0261 | 0020 0020 0020 | 001D 001C 0002 |]

    uint32_t cps[2] = { 0x33A9, 0x0021 };
    uint32_t const ces[12] = { 0x1E72, 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_202)
{
    // 1F18C 0021;	
    // (🆌) NEGATIVE SQUARED PA	[1E72 1CAD 0261 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x1F18C, 0x0021 };
    uint32_t const ces[12] = { 0x1E72, 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_203)
{
    // 3380 003F;	
    // (㎀) SQUARE PA AMPS	[1E72 1CAD 0267 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x3380, 0x003F };
    uint32_t const ces[12] = { 0x1E72, 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_204)
{
    // 33A9 003F;	
    // (㎩) SQUARE PA	[1E72 1CAD 0267 | 0020 0020 0020 | 001D 001C 0002 |]

    uint32_t cps[2] = { 0x33A9, 0x003F };
    uint32_t const ces[12] = { 0x1E72, 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_205)
{
    // 1F18C 003F;	
    // (🆌) NEGATIVE SQUARED PA	[1E72 1CAD 0267 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x1F18C, 0x003F };
    uint32_t const ces[12] = { 0x1E72, 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_206)
{
    // 3380 0061;	
    // (㎀) SQUARE PA AMPS	[1E72 1CAD 1CAD | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x3380, 0x0061 };
    uint32_t const ces[12] = { 0x1E72, 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_207)
{
    // 3380 0041;	
    // (㎀) SQUARE PA AMPS	[1E72 1CAD 1CAD | 0020 0020 0020 | 001C 001D 0008 |]

    uint32_t cps[2] = { 0x3380, 0x0041 };
    uint32_t const ces[12] = { 0x1E72, 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_208)
{
    // 33A9 0061;	
    // (㎩) SQUARE PA	[1E72 1CAD 1CAD | 0020 0020 0020 | 001D 001C 0002 |]

    uint32_t cps[2] = { 0x33A9, 0x0061 };
    uint32_t const ces[12] = { 0x1E72, 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_209)
{
    // 33A9 0041;	
    // (㎩) SQUARE PA	[1E72 1CAD 1CAD | 0020 0020 0020 | 001D 001C 0008 |]

    uint32_t cps[2] = { 0x33A9, 0x0041 };
    uint32_t const ces[12] = { 0x1E72, 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_210)
{
    // 1F18C 0061;	
    // (🆌) NEGATIVE SQUARED PA	[1E72 1CAD 1CAD | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x1F18C, 0x0061 };
    uint32_t const ces[12] = { 0x1E72, 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_211)
{
    // 1F18C 0041;	
    // (🆌) NEGATIVE SQUARED PA	[1E72 1CAD 1CAD | 0020 0020 0020 | 001D 001D 0008 |]

    uint32_t cps[2] = { 0x1F18C, 0x0041 };
    uint32_t const ces[12] = { 0x1E72, 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_212)
{
    // 3380 0062;	
    // (㎀) SQUARE PA AMPS	[1E72 1CAD 1CC6 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x3380, 0x0062 };
    uint32_t const ces[12] = { 0x1E72, 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_213)
{
    // 33A9 0062;	
    // (㎩) SQUARE PA	[1E72 1CAD 1CC6 | 0020 0020 0020 | 001D 001C 0002 |]

    uint32_t cps[2] = { 0x33A9, 0x0062 };
    uint32_t const ces[12] = { 0x1E72, 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_214)
{
    // 1F18C 0062;	
    // (🆌) NEGATIVE SQUARED PA	[1E72 1CAD 1CC6 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x1F18C, 0x0062 };
    uint32_t const ces[12] = { 0x1E72, 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_215)
{
    // 0070 0062;	
    // (p) LATIN SMALL LETTER P	[1E72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0070, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_216)
{
    // FF50 0062;	
    // (ｐ) FULLWIDTH LATIN SMALL LETTER P	[1E72 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF50, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_217)
{
    // 1DEE 0062;	
    // (ᷮ) COMBINING LATIN SMALL LETTER P	[1E72 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DEE, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_218)
{
    // 1D429 0062;	
    // (𝐩) MATHEMATICAL BOLD SMALL P	[1E72 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D429, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_219)
{
    // 1D45D 0062;	
    // (𝑝) MATHEMATICAL ITALIC SMALL P	[1E72 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D45D, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_220)
{
    // 1D491 0062;	
    // (𝒑) MATHEMATICAL BOLD ITALIC SMALL P	[1E72 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D491, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_221)
{
    // 1D4C5 0062;	
    // (𝓅) MATHEMATICAL SCRIPT SMALL P	[1E72 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4C5, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_222)
{
    // 1D4F9 0062;	
    // (𝓹) MATHEMATICAL BOLD SCRIPT SMALL P	[1E72 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4F9, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_223)
{
    // 1D52D 0062;	
    // (𝔭) MATHEMATICAL FRAKTUR SMALL P	[1E72 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D52D, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_224)
{
    // 1D561 0062;	
    // (𝕡) MATHEMATICAL DOUBLE-STRUCK SMALL P	[1E72 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D561, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_225)
{
    // 1D595 0062;	
    // (𝖕) MATHEMATICAL BOLD FRAKTUR SMALL P	[1E72 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D595, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_226)
{
    // 1D5C9 0062;	
    // (𝗉) MATHEMATICAL SANS-SERIF SMALL P	[1E72 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5C9, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_227)
{
    // 1D5FD 0062;	
    // (𝗽) MATHEMATICAL SANS-SERIF BOLD SMALL P	[1E72 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5FD, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_228)
{
    // 1D631 0062;	
    // (𝘱) MATHEMATICAL SANS-SERIF ITALIC SMALL P	[1E72 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D631, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_229)
{
    // 1D665 0062;	
    // (𝙥) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL P	[1E72 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D665, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_230)
{
    // 1D699 0062;	
    // (𝚙) MATHEMATICAL MONOSPACE SMALL P	[1E72 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D699, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_231)
{
    // 24DF 0062;	
    // (ⓟ) CIRCLED LATIN SMALL LETTER P	[1E72 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24DF, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_232)
{
    // 0050 0062;	
    // (P) LATIN CAPITAL LETTER P	[1E72 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0050, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_233)
{
    // FF30 0062;	
    // (Ｐ) FULLWIDTH LATIN CAPITAL LETTER P	[1E72 1CC6 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF30, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_234)
{
    // 2119 0062;	
    // (ℙ) DOUBLE-STRUCK CAPITAL P	[1E72 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2119, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_235)
{
    // 1D40F 0062;	
    // (𝐏) MATHEMATICAL BOLD CAPITAL P	[1E72 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D40F, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_236)
{
    // 1D443 0062;	
    // (𝑃) MATHEMATICAL ITALIC CAPITAL P	[1E72 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D443, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_237)
{
    // 1D477 0062;	
    // (𝑷) MATHEMATICAL BOLD ITALIC CAPITAL P	[1E72 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D477, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_238)
{
    // 1D4AB 0062;	
    // (𝒫) MATHEMATICAL SCRIPT CAPITAL P	[1E72 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4AB, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_239)
{
    // 1D4DF 0062;	
    // (𝓟) MATHEMATICAL BOLD SCRIPT CAPITAL P	[1E72 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4DF, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_240)
{
    // 1D513 0062;	
    // (𝔓) MATHEMATICAL FRAKTUR CAPITAL P	[1E72 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D513, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_241)
{
    // 1D57B 0062;	
    // (𝕻) MATHEMATICAL BOLD FRAKTUR CAPITAL P	[1E72 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D57B, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_242)
{
    // 1D5AF 0062;	
    // (𝖯) MATHEMATICAL SANS-SERIF CAPITAL P	[1E72 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5AF, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_243)
{
    // 1D5E3 0062;	
    // (𝗣) MATHEMATICAL SANS-SERIF BOLD CAPITAL P	[1E72 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5E3, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_244)
{
    // 1D617 0062;	
    // (𝘗) MATHEMATICAL SANS-SERIF ITALIC CAPITAL P	[1E72 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D617, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_245)
{
    // 1D64B 0062;	
    // (𝙋) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL P	[1E72 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D64B, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_246)
{
    // 1D67F 0062;	
    // (𝙿) MATHEMATICAL MONOSPACE CAPITAL P	[1E72 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D67F, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_247)
{
    // 24C5 0062;	
    // (Ⓟ) CIRCLED LATIN CAPITAL LETTER P	[1E72 1CC6 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24C5, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_248)
{
    // 1F15F 0062;	
    // (🅟) NEGATIVE CIRCLED LATIN CAPITAL LETTER P	[1E72 1CC6 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F15F, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_249)
{
    // 1D56 0062;	
    // (ᵖ) MODIFIER LETTER SMALL P	[1E72 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D56, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_250)
{
    // 209A 0062;	
    // (ₚ) LATIN SUBSCRIPT SMALL LETTER P	[1E72 1CC6 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x209A, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_251)
{
    // 1D3E 0062;	
    // (ᴾ) MODIFIER LETTER CAPITAL P	[1E72 1CC6 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D3E, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_252)
{
    // 1F13F 0062;	
    // (🄿) SQUARED LATIN CAPITAL LETTER P	[1E72 1CC6 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F13F, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_253)
{
    // 1F17F 0062;	
    // (🅿) NEGATIVE SQUARED LATIN CAPITAL LETTER P	[1E72 1CC6 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F17F, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_254)
{
    // 1F18A 0062;	
    // (🆊) CROSSED NEGATIVE SQUARED LATIN CAPITAL LETTER P	[1E72 1CC6 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F18A, 0x0062 };
    uint32_t const ces[9] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_255)
{
    // 1E55 0062;	
    // (ṕ) LATIN SMALL LETTER P WITH ACUTE	[1E72 1CC6 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E55, 0x0062 };
    uint32_t const ces[11] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_256)
{
    // 1E54 0062;	
    // (Ṕ) LATIN CAPITAL LETTER P WITH ACUTE	[1E72 1CC6 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E54, 0x0062 };
    uint32_t const ces[11] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_257)
{
    // 1E57 0062;	
    // (ṗ) LATIN SMALL LETTER P WITH DOT ABOVE	[1E72 1CC6 | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E57, 0x0062 };
    uint32_t const ces[11] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_258)
{
    // 1E56 0062;	
    // (Ṗ) LATIN CAPITAL LETTER P WITH DOT ABOVE	[1E72 1CC6 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E56, 0x0062 };
    uint32_t const ces[11] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_259)
{
    // 3376 0021;	
    // (㍶) SQUARE PC	[1E72 1CE0 0261 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3376, 0x0021 };
    uint32_t const ces[12] = { 0x1E72, 0x1CE0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_260)
{
    // 3376 003F;	
    // (㍶) SQUARE PC	[1E72 1CE0 0267 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3376, 0x003F };
    uint32_t const ces[12] = { 0x1E72, 0x1CE0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_261)
{
    // 3376 0061;	
    // (㍶) SQUARE PC	[1E72 1CE0 1CAD | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3376, 0x0061 };
    uint32_t const ces[12] = { 0x1E72, 0x1CE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_262)
{
    // 3376 0041;	
    // (㍶) SQUARE PC	[1E72 1CE0 1CAD | 0020 0020 0020 | 001C 001C 0008 |]

    uint32_t cps[2] = { 0x3376, 0x0041 };
    uint32_t const ces[12] = { 0x1E72, 0x1CE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_263)
{
    // 3376 0062;	
    // (㍶) SQUARE PC	[1E72 1CE0 1CC6 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3376, 0x0062 };
    uint32_t const ces[12] = { 0x1E72, 0x1CE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_264)
{
    // 338A 0021;	
    // (㎊) SQUARE PF	[1E72 1D4B 0261 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x338A, 0x0021 };
    uint32_t const ces[12] = { 0x1E72, 0x1D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_265)
{
    // 338A 003F;	
    // (㎊) SQUARE PF	[1E72 1D4B 0267 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x338A, 0x003F };
    uint32_t const ces[12] = { 0x1E72, 0x1D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_266)
{
    // 338A 0061;	
    // (㎊) SQUARE PF	[1E72 1D4B 1CAD | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x338A, 0x0061 };
    uint32_t const ces[12] = { 0x1E72, 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_267)
{
    // 338A 0041;	
    // (㎊) SQUARE PF	[1E72 1D4B 1CAD | 0020 0020 0020 | 001C 001D 0008 |]

    uint32_t cps[2] = { 0x338A, 0x0041 };
    uint32_t const ces[12] = { 0x1E72, 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_268)
{
    // 338A 0062;	
    // (㎊) SQUARE PF	[1E72 1D4B 1CC6 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x338A, 0x0062 };
    uint32_t const ces[12] = { 0x1E72, 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_269)
{
    // 33D7 0021;	
    // (㏗) SQUARE PH	[1E72 1D7E 0261 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x33D7, 0x0021 };
    uint32_t const ces[12] = { 0x1E72, 0x1D7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_270)
{
    // 33D7 003F;	
    // (㏗) SQUARE PH	[1E72 1D7E 0267 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x33D7, 0x003F };
    uint32_t const ces[12] = { 0x1E72, 0x1D7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_271)
{
    // 33D7 0061;	
    // (㏗) SQUARE PH	[1E72 1D7E 1CAD | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x33D7, 0x0061 };
    uint32_t const ces[12] = { 0x1E72, 0x1D7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_272)
{
    // 33D7 0041;	
    // (㏗) SQUARE PH	[1E72 1D7E 1CAD | 0020 0020 0020 | 001D 001D 0008 |]

    uint32_t cps[2] = { 0x33D7, 0x0041 };
    uint32_t const ces[12] = { 0x1E72, 0x1D7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_273)
{
    // 33D7 0062;	
    // (㏗) SQUARE PH	[1E72 1D7E 1CC6 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x33D7, 0x0062 };
    uint32_t const ces[12] = { 0x1E72, 0x1D7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_274)
{
    // 33D9 0021;	
    // (㏙) SQUARE PPM	[1E72 1E72 1E10 0261 | 0020 0020 0020 0020 | 001D 001D 001D 0002 |]

    uint32_t cps[2] = { 0x33D9, 0x0021 };
    uint32_t const ces[15] = { 0x1E72, 0x1E72, 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_275)
{
    // 33D9 003F;	
    // (㏙) SQUARE PPM	[1E72 1E72 1E10 0267 | 0020 0020 0020 0020 | 001D 001D 001D 0002 |]

    uint32_t cps[2] = { 0x33D9, 0x003F };
    uint32_t const ces[15] = { 0x1E72, 0x1E72, 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_276)
{
    // 33D9 0061;	
    // (㏙) SQUARE PPM	[1E72 1E72 1E10 1CAD | 0020 0020 0020 0020 | 001D 001D 001D 0002 |]

    uint32_t cps[2] = { 0x33D9, 0x0061 };
    uint32_t const ces[15] = { 0x1E72, 0x1E72, 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_277)
{
    // 33D9 0041;	
    // (㏙) SQUARE PPM	[1E72 1E72 1E10 1CAD | 0020 0020 0020 0020 | 001D 001D 001D 0008 |]

    uint32_t cps[2] = { 0x33D9, 0x0041 };
    uint32_t const ces[15] = { 0x1E72, 0x1E72, 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_278)
{
    // 33D9 0062;	
    // (㏙) SQUARE PPM	[1E72 1E72 1E10 1CC6 | 0020 0020 0020 0020 | 001D 001D 001D 0002 |]

    uint32_t cps[2] = { 0x33D9, 0x0062 };
    uint32_t const ces[15] = { 0x1E72, 0x1E72, 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_279)
{
    // 1F14E 0021;	
    // (🅎) SQUARED PPV	[1E72 1E72 1F49 0261 | 0020 0020 0020 0020 | 001D 001D 001D 0002 |]

    uint32_t cps[2] = { 0x1F14E, 0x0021 };
    uint32_t const ces[15] = { 0x1E72, 0x1E72, 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_280)
{
    // 1F14E 003F;	
    // (🅎) SQUARED PPV	[1E72 1E72 1F49 0267 | 0020 0020 0020 0020 | 001D 001D 001D 0002 |]

    uint32_t cps[2] = { 0x1F14E, 0x003F };
    uint32_t const ces[15] = { 0x1E72, 0x1E72, 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_281)
{
    // 1F14E 0061;	
    // (🅎) SQUARED PPV	[1E72 1E72 1F49 1CAD | 0020 0020 0020 0020 | 001D 001D 001D 0002 |]

    uint32_t cps[2] = { 0x1F14E, 0x0061 };
    uint32_t const ces[15] = { 0x1E72, 0x1E72, 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_282)
{
    // 1F14E 0041;	
    // (🅎) SQUARED PPV	[1E72 1E72 1F49 1CAD | 0020 0020 0020 0020 | 001D 001D 001D 0008 |]

    uint32_t cps[2] = { 0x1F14E, 0x0041 };
    uint32_t const ces[15] = { 0x1E72, 0x1E72, 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_283)
{
    // 1F14E 0062;	
    // (🅎) SQUARED PPV	[1E72 1E72 1F49 1CC6 | 0020 0020 0020 0020 | 001D 001D 001D 0002 |]

    uint32_t cps[2] = { 0x1F14E, 0x0062 };
    uint32_t const ces[15] = { 0x1E72, 0x1E72, 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_284)
{
    // 33DA 0021;	
    // (㏚) SQUARE PR	[1E72 1E99 0261 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x33DA, 0x0021 };
    uint32_t const ces[12] = { 0x1E72, 0x1E99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_285)
{
    // 33DA 003F;	
    // (㏚) SQUARE PR	[1E72 1E99 0267 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x33DA, 0x003F };
    uint32_t const ces[12] = { 0x1E72, 0x1E99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_286)
{
    // 33DA 0061;	
    // (㏚) SQUARE PR	[1E72 1E99 1CAD | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x33DA, 0x0061 };
    uint32_t const ces[12] = { 0x1E72, 0x1E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_287)
{
    // 33DA 0041;	
    // (㏚) SQUARE PR	[1E72 1E99 1CAD | 0020 0020 0020 | 001D 001D 0008 |]

    uint32_t cps[2] = { 0x33DA, 0x0041 };
    uint32_t const ces[12] = { 0x1E72, 0x1E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_288)
{
    // 33DA 0062;	
    // (㏚) SQUARE PR	[1E72 1E99 1CC6 | 0020 0020 0020 | 001D 001D 0002 |]

    uint32_t cps[2] = { 0x33DA, 0x0062 };
    uint32_t const ces[12] = { 0x1E72, 0x1E99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_289)
{
    // 33B0 0021;	
    // (㎰) SQUARE PS	[1E72 1ED7 0261 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33B0, 0x0021 };
    uint32_t const ces[12] = { 0x1E72, 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_290)
{
    // 33B0 003F;	
    // (㎰) SQUARE PS	[1E72 1ED7 0267 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33B0, 0x003F };
    uint32_t const ces[12] = { 0x1E72, 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_291)
{
    // 33B0 0061;	
    // (㎰) SQUARE PS	[1E72 1ED7 1CAD | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33B0, 0x0061 };
    uint32_t const ces[12] = { 0x1E72, 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_292)
{
    // 33B0 0041;	
    // (㎰) SQUARE PS	[1E72 1ED7 1CAD | 0020 0020 0020 | 001C 001C 0008 |]

    uint32_t cps[2] = { 0x33B0, 0x0041 };
    uint32_t const ces[12] = { 0x1E72, 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_293)
{
    // 33B0 0062;	
    // (㎰) SQUARE PS	[1E72 1ED7 1CC6 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33B0, 0x0062 };
    uint32_t const ces[12] = { 0x1E72, 0x1ED7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_294)
{
    // 3250 0021;	
    // (㉐) PARTNERSHIP SIGN	[1E72 1EFB 1D10 0261 | 0020 0020 0020 0020 | 001D 001D 001D 0002 |]

    uint32_t cps[2] = { 0x3250, 0x0021 };
    uint32_t const ces[15] = { 0x1E72, 0x1EFB, 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_295)
{
    // 3250 003F;	
    // (㉐) PARTNERSHIP SIGN	[1E72 1EFB 1D10 0267 | 0020 0020 0020 0020 | 001D 001D 001D 0002 |]

    uint32_t cps[2] = { 0x3250, 0x003F };
    uint32_t const ces[15] = { 0x1E72, 0x1EFB, 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_296)
{
    // 3250 0061;	
    // (㉐) PARTNERSHIP SIGN	[1E72 1EFB 1D10 1CAD | 0020 0020 0020 0020 | 001D 001D 001D 0002 |]

    uint32_t cps[2] = { 0x3250, 0x0061 };
    uint32_t const ces[15] = { 0x1E72, 0x1EFB, 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_297)
{
    // 3250 0041;	
    // (㉐) PARTNERSHIP SIGN	[1E72 1EFB 1D10 1CAD | 0020 0020 0020 0020 | 001D 001D 001D 0008 |]

    uint32_t cps[2] = { 0x3250, 0x0041 };
    uint32_t const ces[15] = { 0x1E72, 0x1EFB, 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_298)
{
    // 3250 0062;	
    // (㉐) PARTNERSHIP SIGN	[1E72 1EFB 1D10 1CC6 | 0020 0020 0020 0020 | 001D 001D 001D 0002 |]

    uint32_t cps[2] = { 0x3250, 0x0062 };
    uint32_t const ces[15] = { 0x1E72, 0x1EFB, 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_299)
{
    // 33B4 0021;	
    // (㎴) SQUARE PV	[1E72 1F49 0261 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x33B4, 0x0021 };
    uint32_t const ces[12] = { 0x1E72, 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_300)
{
    // 33B4 003F;	
    // (㎴) SQUARE PV	[1E72 1F49 0267 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x33B4, 0x003F };
    uint32_t const ces[12] = { 0x1E72, 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_301)
{
    // 33B4 0061;	
    // (㎴) SQUARE PV	[1E72 1F49 1CAD | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x33B4, 0x0061 };
    uint32_t const ces[12] = { 0x1E72, 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_302)
{
    // 33B4 0041;	
    // (㎴) SQUARE PV	[1E72 1F49 1CAD | 0020 0020 0020 | 001C 001D 0008 |]

    uint32_t cps[2] = { 0x33B4, 0x0041 };
    uint32_t const ces[12] = { 0x1E72, 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_303)
{
    // 33B4 0062;	
    // (㎴) SQUARE PV	[1E72 1F49 1CC6 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x33B4, 0x0062 };
    uint32_t const ces[12] = { 0x1E72, 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_304)
{
    // 33BA 0021;	
    // (㎺) SQUARE PW	[1E72 1F5B 0261 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x33BA, 0x0021 };
    uint32_t const ces[12] = { 0x1E72, 0x1F5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_305)
{
    // 33BA 003F;	
    // (㎺) SQUARE PW	[1E72 1F5B 0267 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x33BA, 0x003F };
    uint32_t const ces[12] = { 0x1E72, 0x1F5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_306)
{
    // 33BA 0061;	
    // (㎺) SQUARE PW	[1E72 1F5B 1CAD | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x33BA, 0x0061 };
    uint32_t const ces[12] = { 0x1E72, 0x1F5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_307)
{
    // 33BA 0041;	
    // (㎺) SQUARE PW	[1E72 1F5B 1CAD | 0020 0020 0020 | 001C 001D 0008 |]

    uint32_t cps[2] = { 0x33BA, 0x0041 };
    uint32_t const ces[12] = { 0x1E72, 0x1F5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_308)
{
    // 33BA 0062;	
    // (㎺) SQUARE PW	[1E72 1F5B 1CC6 | 0020 0020 0020 | 001C 001D 0002 |]

    uint32_t cps[2] = { 0x33BA, 0x0062 };
    uint32_t const ces[12] = { 0x1E72, 0x1F5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_309)
{
    // 1D18 0021;	
    // (ᴘ) LATIN LETTER SMALL CAPITAL P	[1E76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D18, 0x0021 };
    uint32_t const ces[9] = { 0x1E76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_310)
{
    // 1D18 003F;	
    // (ᴘ) LATIN LETTER SMALL CAPITAL P	[1E76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D18, 0x003F };
    uint32_t const ces[9] = { 0x1E76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_311)
{
    // 1D18 0061;	
    // (ᴘ) LATIN LETTER SMALL CAPITAL P	[1E76 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D18, 0x0061 };
    uint32_t const ces[9] = { 0x1E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_312)
{
    // 1D18 0041;	
    // (ᴘ) LATIN LETTER SMALL CAPITAL P	[1E76 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D18, 0x0041 };
    uint32_t const ces[9] = { 0x1E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_313)
{
    // 1D18 0062;	
    // (ᴘ) LATIN LETTER SMALL CAPITAL P	[1E76 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D18, 0x0062 };
    uint32_t const ces[9] = { 0x1E76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_314)
{
    // 1D7D 0021;	
    // (ᵽ) LATIN SMALL LETTER P WITH STROKE	[1E77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D7D, 0x0021 };
    uint32_t const ces[9] = { 0x1E77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_315)
{
    // 2C63 0021;	
    // (Ᵽ) LATIN CAPITAL LETTER P WITH STROKE	[1E77 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C63, 0x0021 };
    uint32_t const ces[9] = { 0x1E77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_316)
{
    // 1D7D 003F;	
    // (ᵽ) LATIN SMALL LETTER P WITH STROKE	[1E77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D7D, 0x003F };
    uint32_t const ces[9] = { 0x1E77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_317)
{
    // 2C63 003F;	
    // (Ᵽ) LATIN CAPITAL LETTER P WITH STROKE	[1E77 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C63, 0x003F };
    uint32_t const ces[9] = { 0x1E77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_318)
{
    // 1D7D 0061;	
    // (ᵽ) LATIN SMALL LETTER P WITH STROKE	[1E77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D7D, 0x0061 };
    uint32_t const ces[9] = { 0x1E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_319)
{
    // 1D7D 0041;	
    // (ᵽ) LATIN SMALL LETTER P WITH STROKE	[1E77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D7D, 0x0041 };
    uint32_t const ces[9] = { 0x1E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_320)
{
    // 2C63 0061;	
    // (Ᵽ) LATIN CAPITAL LETTER P WITH STROKE	[1E77 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C63, 0x0061 };
    uint32_t const ces[9] = { 0x1E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_321)
{
    // 2C63 0041;	
    // (Ᵽ) LATIN CAPITAL LETTER P WITH STROKE	[1E77 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x2C63, 0x0041 };
    uint32_t const ces[9] = { 0x1E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_322)
{
    // 1D7D 0062;	
    // (ᵽ) LATIN SMALL LETTER P WITH STROKE	[1E77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D7D, 0x0062 };
    uint32_t const ces[9] = { 0x1E77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_323)
{
    // 2C63 0062;	
    // (Ᵽ) LATIN CAPITAL LETTER P WITH STROKE	[1E77 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C63, 0x0062 };
    uint32_t const ces[9] = { 0x1E77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_324)
{
    // A751 0021;	
    // (ꝑ) LATIN SMALL LETTER P WITH STROKE THROUGH DESCENDER	[1E78 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA751, 0x0021 };
    uint32_t const ces[9] = { 0x1E78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_325)
{
    // A750 0021;	
    // (Ꝑ) LATIN CAPITAL LETTER P WITH STROKE THROUGH DESCENDER	[1E78 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA750, 0x0021 };
    uint32_t const ces[9] = { 0x1E78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_326)
{
    // A751 003F;	
    // (ꝑ) LATIN SMALL LETTER P WITH STROKE THROUGH DESCENDER	[1E78 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA751, 0x003F };
    uint32_t const ces[9] = { 0x1E78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_327)
{
    // A750 003F;	
    // (Ꝑ) LATIN CAPITAL LETTER P WITH STROKE THROUGH DESCENDER	[1E78 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA750, 0x003F };
    uint32_t const ces[9] = { 0x1E78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_328)
{
    // A751 0061;	
    // (ꝑ) LATIN SMALL LETTER P WITH STROKE THROUGH DESCENDER	[1E78 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA751, 0x0061 };
    uint32_t const ces[9] = { 0x1E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_329)
{
    // A751 0041;	
    // (ꝑ) LATIN SMALL LETTER P WITH STROKE THROUGH DESCENDER	[1E78 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA751, 0x0041 };
    uint32_t const ces[9] = { 0x1E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_330)
{
    // A750 0061;	
    // (Ꝑ) LATIN CAPITAL LETTER P WITH STROKE THROUGH DESCENDER	[1E78 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA750, 0x0061 };
    uint32_t const ces[9] = { 0x1E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_331)
{
    // A750 0041;	
    // (Ꝑ) LATIN CAPITAL LETTER P WITH STROKE THROUGH DESCENDER	[1E78 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA750, 0x0041 };
    uint32_t const ces[9] = { 0x1E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_332)
{
    // A751 0062;	
    // (ꝑ) LATIN SMALL LETTER P WITH STROKE THROUGH DESCENDER	[1E78 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA751, 0x0062 };
    uint32_t const ces[9] = { 0x1E78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_333)
{
    // A750 0062;	
    // (Ꝑ) LATIN CAPITAL LETTER P WITH STROKE THROUGH DESCENDER	[1E78 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA750, 0x0062 };
    uint32_t const ces[9] = { 0x1E78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_334)
{
    // 1D71 0021;	
    // (ᵱ) LATIN SMALL LETTER P WITH MIDDLE TILDE	[1E79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D71, 0x0021 };
    uint32_t const ces[9] = { 0x1E79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_335)
{
    // 1D71 003F;	
    // (ᵱ) LATIN SMALL LETTER P WITH MIDDLE TILDE	[1E79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D71, 0x003F };
    uint32_t const ces[9] = { 0x1E79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_336)
{
    // 1D71 0061;	
    // (ᵱ) LATIN SMALL LETTER P WITH MIDDLE TILDE	[1E79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D71, 0x0061 };
    uint32_t const ces[9] = { 0x1E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_337)
{
    // 1D71 0041;	
    // (ᵱ) LATIN SMALL LETTER P WITH MIDDLE TILDE	[1E79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D71, 0x0041 };
    uint32_t const ces[9] = { 0x1E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_338)
{
    // 1D71 0062;	
    // (ᵱ) LATIN SMALL LETTER P WITH MIDDLE TILDE	[1E79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D71, 0x0062 };
    uint32_t const ces[9] = { 0x1E79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_339)
{
    // 1D88 0021;	
    // (ᶈ) LATIN SMALL LETTER P WITH PALATAL HOOK	[1E7A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D88, 0x0021 };
    uint32_t const ces[9] = { 0x1E7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_340)
{
    // 1D88 003F;	
    // (ᶈ) LATIN SMALL LETTER P WITH PALATAL HOOK	[1E7A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D88, 0x003F };
    uint32_t const ces[9] = { 0x1E7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_341)
{
    // 1D88 0061;	
    // (ᶈ) LATIN SMALL LETTER P WITH PALATAL HOOK	[1E7A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D88, 0x0061 };
    uint32_t const ces[9] = { 0x1E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_342)
{
    // 1D88 0041;	
    // (ᶈ) LATIN SMALL LETTER P WITH PALATAL HOOK	[1E7A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D88, 0x0041 };
    uint32_t const ces[9] = { 0x1E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_343)
{
    // 1D88 0062;	
    // (ᶈ) LATIN SMALL LETTER P WITH PALATAL HOOK	[1E7A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D88, 0x0062 };
    uint32_t const ces[9] = { 0x1E7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_344)
{
    // 01A5 0021;	
    // (ƥ) LATIN SMALL LETTER P WITH HOOK	[1E7B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01A5, 0x0021 };
    uint32_t const ces[9] = { 0x1E7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_345)
{
    // 01A4 0021;	
    // (Ƥ) LATIN CAPITAL LETTER P WITH HOOK	[1E7B 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01A4, 0x0021 };
    uint32_t const ces[9] = { 0x1E7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_346)
{
    // 01A5 003F;	
    // (ƥ) LATIN SMALL LETTER P WITH HOOK	[1E7B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01A5, 0x003F };
    uint32_t const ces[9] = { 0x1E7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_347)
{
    // 01A4 003F;	
    // (Ƥ) LATIN CAPITAL LETTER P WITH HOOK	[1E7B 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01A4, 0x003F };
    uint32_t const ces[9] = { 0x1E7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_348)
{
    // 01A5 0061;	
    // (ƥ) LATIN SMALL LETTER P WITH HOOK	[1E7B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01A5, 0x0061 };
    uint32_t const ces[9] = { 0x1E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_349)
{
    // 01A5 0041;	
    // (ƥ) LATIN SMALL LETTER P WITH HOOK	[1E7B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x01A5, 0x0041 };
    uint32_t const ces[9] = { 0x1E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_350)
{
    // 01A4 0061;	
    // (Ƥ) LATIN CAPITAL LETTER P WITH HOOK	[1E7B 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01A4, 0x0061 };
    uint32_t const ces[9] = { 0x1E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_351)
{
    // 01A4 0041;	
    // (Ƥ) LATIN CAPITAL LETTER P WITH HOOK	[1E7B 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x01A4, 0x0041 };
    uint32_t const ces[9] = { 0x1E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_352)
{
    // 01A5 0062;	
    // (ƥ) LATIN SMALL LETTER P WITH HOOK	[1E7B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01A5, 0x0062 };
    uint32_t const ces[9] = { 0x1E7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_353)
{
    // 01A4 0062;	
    // (Ƥ) LATIN CAPITAL LETTER P WITH HOOK	[1E7B 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01A4, 0x0062 };
    uint32_t const ces[9] = { 0x1E7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_354)
{
    // A753 0021;	
    // (ꝓ) LATIN SMALL LETTER P WITH FLOURISH	[1E7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA753, 0x0021 };
    uint32_t const ces[9] = { 0x1E7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_355)
{
    // A752 0021;	
    // (Ꝓ) LATIN CAPITAL LETTER P WITH FLOURISH	[1E7F 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA752, 0x0021 };
    uint32_t const ces[9] = { 0x1E7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_356)
{
    // A753 003F;	
    // (ꝓ) LATIN SMALL LETTER P WITH FLOURISH	[1E7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA753, 0x003F };
    uint32_t const ces[9] = { 0x1E7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_357)
{
    // A752 003F;	
    // (Ꝓ) LATIN CAPITAL LETTER P WITH FLOURISH	[1E7F 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA752, 0x003F };
    uint32_t const ces[9] = { 0x1E7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_358)
{
    // A753 0061;	
    // (ꝓ) LATIN SMALL LETTER P WITH FLOURISH	[1E7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA753, 0x0061 };
    uint32_t const ces[9] = { 0x1E7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_359)
{
    // A753 0041;	
    // (ꝓ) LATIN SMALL LETTER P WITH FLOURISH	[1E7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA753, 0x0041 };
    uint32_t const ces[9] = { 0x1E7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_360)
{
    // A752 0061;	
    // (Ꝓ) LATIN CAPITAL LETTER P WITH FLOURISH	[1E7F 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA752, 0x0061 };
    uint32_t const ces[9] = { 0x1E7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_361)
{
    // A752 0041;	
    // (Ꝓ) LATIN CAPITAL LETTER P WITH FLOURISH	[1E7F 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA752, 0x0041 };
    uint32_t const ces[9] = { 0x1E7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_362)
{
    // A753 0062;	
    // (ꝓ) LATIN SMALL LETTER P WITH FLOURISH	[1E7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA753, 0x0062 };
    uint32_t const ces[9] = { 0x1E7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_363)
{
    // A752 0062;	
    // (Ꝓ) LATIN CAPITAL LETTER P WITH FLOURISH	[1E7F 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA752, 0x0062 };
    uint32_t const ces[9] = { 0x1E7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_364)
{
    // A755 0021;	
    // (ꝕ) LATIN SMALL LETTER P WITH SQUIRREL TAIL	[1E80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA755, 0x0021 };
    uint32_t const ces[9] = { 0x1E80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_365)
{
    // A754 0021;	
    // (Ꝕ) LATIN CAPITAL LETTER P WITH SQUIRREL TAIL	[1E80 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA754, 0x0021 };
    uint32_t const ces[9] = { 0x1E80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_366)
{
    // A755 003F;	
    // (ꝕ) LATIN SMALL LETTER P WITH SQUIRREL TAIL	[1E80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA755, 0x003F };
    uint32_t const ces[9] = { 0x1E80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_367)
{
    // A754 003F;	
    // (Ꝕ) LATIN CAPITAL LETTER P WITH SQUIRREL TAIL	[1E80 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA754, 0x003F };
    uint32_t const ces[9] = { 0x1E80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_368)
{
    // A755 0061;	
    // (ꝕ) LATIN SMALL LETTER P WITH SQUIRREL TAIL	[1E80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA755, 0x0061 };
    uint32_t const ces[9] = { 0x1E80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_369)
{
    // A755 0041;	
    // (ꝕ) LATIN SMALL LETTER P WITH SQUIRREL TAIL	[1E80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA755, 0x0041 };
    uint32_t const ces[9] = { 0x1E80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_370)
{
    // A754 0061;	
    // (Ꝕ) LATIN CAPITAL LETTER P WITH SQUIRREL TAIL	[1E80 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA754, 0x0061 };
    uint32_t const ces[9] = { 0x1E80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_371)
{
    // A754 0041;	
    // (Ꝕ) LATIN CAPITAL LETTER P WITH SQUIRREL TAIL	[1E80 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA754, 0x0041 };
    uint32_t const ces[9] = { 0x1E80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_372)
{
    // A755 0062;	
    // (ꝕ) LATIN SMALL LETTER P WITH SQUIRREL TAIL	[1E80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA755, 0x0062 };
    uint32_t const ces[9] = { 0x1E80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_373)
{
    // A754 0062;	
    // (Ꝕ) LATIN CAPITAL LETTER P WITH SQUIRREL TAIL	[1E80 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA754, 0x0062 };
    uint32_t const ces[9] = { 0x1E80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_374)
{
    // A7FC 0021;	
    // (ꟼ) LATIN EPIGRAPHIC LETTER REVERSED P	[1E81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA7FC, 0x0021 };
    uint32_t const ces[9] = { 0x1E81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_375)
{
    // A7FC 003F;	
    // (ꟼ) LATIN EPIGRAPHIC LETTER REVERSED P	[1E81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA7FC, 0x003F };
    uint32_t const ces[9] = { 0x1E81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_376)
{
    // A7FC 0061;	
    // (ꟼ) LATIN EPIGRAPHIC LETTER REVERSED P	[1E81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA7FC, 0x0061 };
    uint32_t const ces[9] = { 0x1E81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_377)
{
    // A7FC 0041;	
    // (ꟼ) LATIN EPIGRAPHIC LETTER REVERSED P	[1E81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA7FC, 0x0041 };
    uint32_t const ces[9] = { 0x1E81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_378)
{
    // A7FC 0062;	
    // (ꟼ) LATIN EPIGRAPHIC LETTER REVERSED P	[1E81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA7FC, 0x0062 };
    uint32_t const ces[9] = { 0x1E81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_379)
{
    // 0278 0021;	
    // (ɸ) LATIN SMALL LETTER PHI	[1E82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0278, 0x0021 };
    uint32_t const ces[9] = { 0x1E82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_380)
{
    // 1DB2 0021;	
    // (ᶲ) MODIFIER LETTER SMALL PHI	[1E82 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DB2, 0x0021 };
    uint32_t const ces[9] = { 0x1E82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_381)
{
    // 0278 003F;	
    // (ɸ) LATIN SMALL LETTER PHI	[1E82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0278, 0x003F };
    uint32_t const ces[9] = { 0x1E82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_382)
{
    // 1DB2 003F;	
    // (ᶲ) MODIFIER LETTER SMALL PHI	[1E82 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DB2, 0x003F };
    uint32_t const ces[9] = { 0x1E82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_383)
{
    // 0278 0061;	
    // (ɸ) LATIN SMALL LETTER PHI	[1E82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0278, 0x0061 };
    uint32_t const ces[9] = { 0x1E82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_384)
{
    // 0278 0041;	
    // (ɸ) LATIN SMALL LETTER PHI	[1E82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0278, 0x0041 };
    uint32_t const ces[9] = { 0x1E82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_385)
{
    // 1DB2 0061;	
    // (ᶲ) MODIFIER LETTER SMALL PHI	[1E82 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DB2, 0x0061 };
    uint32_t const ces[9] = { 0x1E82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_386)
{
    // 1DB2 0041;	
    // (ᶲ) MODIFIER LETTER SMALL PHI	[1E82 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x1DB2, 0x0041 };
    uint32_t const ces[9] = { 0x1E82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_387)
{
    // 0278 0062;	
    // (ɸ) LATIN SMALL LETTER PHI	[1E82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0278, 0x0062 };
    uint32_t const ces[9] = { 0x1E82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_388)
{
    // 1DB2 0062;	
    // (ᶲ) MODIFIER LETTER SMALL PHI	[1E82 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1DB2, 0x0062 };
    uint32_t const ces[9] = { 0x1E82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_389)
{
    // 2C77 0021;	
    // (ⱷ) LATIN SMALL LETTER TAILLESS PHI	[1E86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C77, 0x0021 };
    uint32_t const ces[9] = { 0x1E86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_390)
{
    // 2C77 003F;	
    // (ⱷ) LATIN SMALL LETTER TAILLESS PHI	[1E86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C77, 0x003F };
    uint32_t const ces[9] = { 0x1E86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_391)
{
    // 2C77 0061;	
    // (ⱷ) LATIN SMALL LETTER TAILLESS PHI	[1E86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C77, 0x0061 };
    uint32_t const ces[9] = { 0x1E86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_392)
{
    // 2C77 0041;	
    // (ⱷ) LATIN SMALL LETTER TAILLESS PHI	[1E86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2C77, 0x0041 };
    uint32_t const ces[9] = { 0x1E86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_393)
{
    // 2C77 0062;	
    // (ⱷ) LATIN SMALL LETTER TAILLESS PHI	[1E86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C77, 0x0062 };
    uint32_t const ces[9] = { 0x1E86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_394)
{
    // 0071 0021;	
    // (q) LATIN SMALL LETTER Q	[1E87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0071, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_395)
{
    // FF51 0021;	
    // (ｑ) FULLWIDTH LATIN SMALL LETTER Q	[1E87 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF51, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_396)
{
    // 1D42A 0021;	
    // (𝐪) MATHEMATICAL BOLD SMALL Q	[1E87 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D42A, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_397)
{
    // 1D45E 0021;	
    // (𝑞) MATHEMATICAL ITALIC SMALL Q	[1E87 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D45E, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_398)
{
    // 1D492 0021;	
    // (𝒒) MATHEMATICAL BOLD ITALIC SMALL Q	[1E87 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D492, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_399)
{
    // 1D4C6 0021;	
    // (𝓆) MATHEMATICAL SCRIPT SMALL Q	[1E87 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4C6, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_400)
{
    // 1D4FA 0021;	
    // (𝓺) MATHEMATICAL BOLD SCRIPT SMALL Q	[1E87 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4FA, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_401)
{
    // 1D52E 0021;	
    // (𝔮) MATHEMATICAL FRAKTUR SMALL Q	[1E87 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D52E, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_402)
{
    // 1D562 0021;	
    // (𝕢) MATHEMATICAL DOUBLE-STRUCK SMALL Q	[1E87 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D562, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_403)
{
    // 1D596 0021;	
    // (𝖖) MATHEMATICAL BOLD FRAKTUR SMALL Q	[1E87 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D596, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_404)
{
    // 1D5CA 0021;	
    // (𝗊) MATHEMATICAL SANS-SERIF SMALL Q	[1E87 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5CA, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_405)
{
    // 1D5FE 0021;	
    // (𝗾) MATHEMATICAL SANS-SERIF BOLD SMALL Q	[1E87 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5FE, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_406)
{
    // 1D632 0021;	
    // (𝘲) MATHEMATICAL SANS-SERIF ITALIC SMALL Q	[1E87 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D632, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_407)
{
    // 1D666 0021;	
    // (𝙦) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Q	[1E87 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D666, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_408)
{
    // 1D69A 0021;	
    // (𝚚) MATHEMATICAL MONOSPACE SMALL Q	[1E87 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D69A, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_409)
{
    // 24E0 0021;	
    // (ⓠ) CIRCLED LATIN SMALL LETTER Q	[1E87 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24E0, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_410)
{
    // 0051 0021;	
    // (Q) LATIN CAPITAL LETTER Q	[1E87 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0051, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_411)
{
    // FF31 0021;	
    // (Ｑ) FULLWIDTH LATIN CAPITAL LETTER Q	[1E87 0261 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF31, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_412)
{
    // 211A 0021;	
    // (ℚ) DOUBLE-STRUCK CAPITAL Q	[1E87 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x211A, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_413)
{
    // 1D410 0021;	
    // (𝐐) MATHEMATICAL BOLD CAPITAL Q	[1E87 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D410, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_414)
{
    // 1D444 0021;	
    // (𝑄) MATHEMATICAL ITALIC CAPITAL Q	[1E87 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D444, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_415)
{
    // 1D478 0021;	
    // (𝑸) MATHEMATICAL BOLD ITALIC CAPITAL Q	[1E87 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D478, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_416)
{
    // 1D4AC 0021;	
    // (𝒬) MATHEMATICAL SCRIPT CAPITAL Q	[1E87 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4AC, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_417)
{
    // 1D4E0 0021;	
    // (𝓠) MATHEMATICAL BOLD SCRIPT CAPITAL Q	[1E87 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4E0, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_418)
{
    // 1D514 0021;	
    // (𝔔) MATHEMATICAL FRAKTUR CAPITAL Q	[1E87 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D514, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_419)
{
    // 1D57C 0021;	
    // (𝕼) MATHEMATICAL BOLD FRAKTUR CAPITAL Q	[1E87 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D57C, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_420)
{
    // 1D5B0 0021;	
    // (𝖰) MATHEMATICAL SANS-SERIF CAPITAL Q	[1E87 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5B0, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_421)
{
    // 1D5E4 0021;	
    // (𝗤) MATHEMATICAL SANS-SERIF BOLD CAPITAL Q	[1E87 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5E4, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_422)
{
    // 1D618 0021;	
    // (𝘘) MATHEMATICAL SANS-SERIF ITALIC CAPITAL Q	[1E87 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D618, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_423)
{
    // 1D64C 0021;	
    // (𝙌) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Q	[1E87 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D64C, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_424)
{
    // 1D680 0021;	
    // (𝚀) MATHEMATICAL MONOSPACE CAPITAL Q	[1E87 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D680, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_425)
{
    // 24C6 0021;	
    // (Ⓠ) CIRCLED LATIN CAPITAL LETTER Q	[1E87 0261 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24C6, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_426)
{
    // 1F160 0021;	
    // (🅠) NEGATIVE CIRCLED LATIN CAPITAL LETTER Q	[1E87 0261 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F160, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_427)
{
    // 1F140 0021;	
    // (🅀) SQUARED LATIN CAPITAL LETTER Q	[1E87 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F140, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_428)
{
    // 1F180 0021;	
    // (🆀) NEGATIVE SQUARED LATIN CAPITAL LETTER Q	[1E87 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F180, 0x0021 };
    uint32_t const ces[9] = { 0x1E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_429)
{
    // 0071 003F;	
    // (q) LATIN SMALL LETTER Q	[1E87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0071, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_430)
{
    // FF51 003F;	
    // (ｑ) FULLWIDTH LATIN SMALL LETTER Q	[1E87 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF51, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_431)
{
    // 1D42A 003F;	
    // (𝐪) MATHEMATICAL BOLD SMALL Q	[1E87 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D42A, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_432)
{
    // 1D45E 003F;	
    // (𝑞) MATHEMATICAL ITALIC SMALL Q	[1E87 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D45E, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_433)
{
    // 1D492 003F;	
    // (𝒒) MATHEMATICAL BOLD ITALIC SMALL Q	[1E87 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D492, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_434)
{
    // 1D4C6 003F;	
    // (𝓆) MATHEMATICAL SCRIPT SMALL Q	[1E87 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4C6, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_435)
{
    // 1D4FA 003F;	
    // (𝓺) MATHEMATICAL BOLD SCRIPT SMALL Q	[1E87 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4FA, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_436)
{
    // 1D52E 003F;	
    // (𝔮) MATHEMATICAL FRAKTUR SMALL Q	[1E87 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D52E, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_437)
{
    // 1D562 003F;	
    // (𝕢) MATHEMATICAL DOUBLE-STRUCK SMALL Q	[1E87 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D562, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_438)
{
    // 1D596 003F;	
    // (𝖖) MATHEMATICAL BOLD FRAKTUR SMALL Q	[1E87 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D596, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_439)
{
    // 1D5CA 003F;	
    // (𝗊) MATHEMATICAL SANS-SERIF SMALL Q	[1E87 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5CA, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_440)
{
    // 1D5FE 003F;	
    // (𝗾) MATHEMATICAL SANS-SERIF BOLD SMALL Q	[1E87 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5FE, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_441)
{
    // 1D632 003F;	
    // (𝘲) MATHEMATICAL SANS-SERIF ITALIC SMALL Q	[1E87 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D632, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_442)
{
    // 1D666 003F;	
    // (𝙦) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Q	[1E87 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D666, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_443)
{
    // 1D69A 003F;	
    // (𝚚) MATHEMATICAL MONOSPACE SMALL Q	[1E87 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D69A, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_444)
{
    // 24E0 003F;	
    // (ⓠ) CIRCLED LATIN SMALL LETTER Q	[1E87 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24E0, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_445)
{
    // 0051 003F;	
    // (Q) LATIN CAPITAL LETTER Q	[1E87 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0051, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_446)
{
    // FF31 003F;	
    // (Ｑ) FULLWIDTH LATIN CAPITAL LETTER Q	[1E87 0267 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF31, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_447)
{
    // 211A 003F;	
    // (ℚ) DOUBLE-STRUCK CAPITAL Q	[1E87 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x211A, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_448)
{
    // 1D410 003F;	
    // (𝐐) MATHEMATICAL BOLD CAPITAL Q	[1E87 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D410, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_449)
{
    // 1D444 003F;	
    // (𝑄) MATHEMATICAL ITALIC CAPITAL Q	[1E87 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D444, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_450)
{
    // 1D478 003F;	
    // (𝑸) MATHEMATICAL BOLD ITALIC CAPITAL Q	[1E87 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D478, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_451)
{
    // 1D4AC 003F;	
    // (𝒬) MATHEMATICAL SCRIPT CAPITAL Q	[1E87 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4AC, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_452)
{
    // 1D4E0 003F;	
    // (𝓠) MATHEMATICAL BOLD SCRIPT CAPITAL Q	[1E87 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4E0, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_453)
{
    // 1D514 003F;	
    // (𝔔) MATHEMATICAL FRAKTUR CAPITAL Q	[1E87 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D514, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_454)
{
    // 1D57C 003F;	
    // (𝕼) MATHEMATICAL BOLD FRAKTUR CAPITAL Q	[1E87 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D57C, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_455)
{
    // 1D5B0 003F;	
    // (𝖰) MATHEMATICAL SANS-SERIF CAPITAL Q	[1E87 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5B0, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_456)
{
    // 1D5E4 003F;	
    // (𝗤) MATHEMATICAL SANS-SERIF BOLD CAPITAL Q	[1E87 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5E4, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_457)
{
    // 1D618 003F;	
    // (𝘘) MATHEMATICAL SANS-SERIF ITALIC CAPITAL Q	[1E87 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D618, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_458)
{
    // 1D64C 003F;	
    // (𝙌) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Q	[1E87 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D64C, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_459)
{
    // 1D680 003F;	
    // (𝚀) MATHEMATICAL MONOSPACE CAPITAL Q	[1E87 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D680, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_460)
{
    // 24C6 003F;	
    // (Ⓠ) CIRCLED LATIN CAPITAL LETTER Q	[1E87 0267 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24C6, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_461)
{
    // 1F160 003F;	
    // (🅠) NEGATIVE CIRCLED LATIN CAPITAL LETTER Q	[1E87 0267 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F160, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_462)
{
    // 1F140 003F;	
    // (🅀) SQUARED LATIN CAPITAL LETTER Q	[1E87 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F140, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_463)
{
    // 1F180 003F;	
    // (🆀) NEGATIVE SQUARED LATIN CAPITAL LETTER Q	[1E87 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F180, 0x003F };
    uint32_t const ces[9] = { 0x1E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_464)
{
    // 0071 0061;	
    // (q) LATIN SMALL LETTER Q	[1E87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0071, 0x0061 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_465)
{
    // 0071 0041;	
    // (q) LATIN SMALL LETTER Q	[1E87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0071, 0x0041 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_466)
{
    // FF51 0061;	
    // (ｑ) FULLWIDTH LATIN SMALL LETTER Q	[1E87 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF51, 0x0061 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_467)
{
    // FF51 0041;	
    // (ｑ) FULLWIDTH LATIN SMALL LETTER Q	[1E87 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF51, 0x0041 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_468)
{
    // 1D42A 0061;	
    // (𝐪) MATHEMATICAL BOLD SMALL Q	[1E87 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D42A, 0x0061 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_469)
{
    // 1D45E 0061;	
    // (𝑞) MATHEMATICAL ITALIC SMALL Q	[1E87 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D45E, 0x0061 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_470)
{
    // 1D492 0061;	
    // (𝒒) MATHEMATICAL BOLD ITALIC SMALL Q	[1E87 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D492, 0x0061 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_471)
{
    // 1D4C6 0061;	
    // (𝓆) MATHEMATICAL SCRIPT SMALL Q	[1E87 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4C6, 0x0061 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_472)
{
    // 1D4FA 0061;	
    // (𝓺) MATHEMATICAL BOLD SCRIPT SMALL Q	[1E87 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4FA, 0x0061 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_473)
{
    // 1D52E 0061;	
    // (𝔮) MATHEMATICAL FRAKTUR SMALL Q	[1E87 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D52E, 0x0061 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_474)
{
    // 1D562 0061;	
    // (𝕢) MATHEMATICAL DOUBLE-STRUCK SMALL Q	[1E87 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D562, 0x0061 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_475)
{
    // 1D596 0061;	
    // (𝖖) MATHEMATICAL BOLD FRAKTUR SMALL Q	[1E87 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D596, 0x0061 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_476)
{
    // 1D5CA 0061;	
    // (𝗊) MATHEMATICAL SANS-SERIF SMALL Q	[1E87 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5CA, 0x0061 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_477)
{
    // 1D5FE 0061;	
    // (𝗾) MATHEMATICAL SANS-SERIF BOLD SMALL Q	[1E87 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5FE, 0x0061 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_478)
{
    // 1D632 0061;	
    // (𝘲) MATHEMATICAL SANS-SERIF ITALIC SMALL Q	[1E87 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D632, 0x0061 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_479)
{
    // 1D666 0061;	
    // (𝙦) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Q	[1E87 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D666, 0x0061 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_480)
{
    // 1D69A 0061;	
    // (𝚚) MATHEMATICAL MONOSPACE SMALL Q	[1E87 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D69A, 0x0061 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_481)
{
    // 1D42A 0041;	
    // (𝐪) MATHEMATICAL BOLD SMALL Q	[1E87 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D42A, 0x0041 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_482)
{
    // 1D45E 0041;	
    // (𝑞) MATHEMATICAL ITALIC SMALL Q	[1E87 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D45E, 0x0041 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_483)
{
    // 1D492 0041;	
    // (𝒒) MATHEMATICAL BOLD ITALIC SMALL Q	[1E87 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D492, 0x0041 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_484)
{
    // 1D4C6 0041;	
    // (𝓆) MATHEMATICAL SCRIPT SMALL Q	[1E87 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D4C6, 0x0041 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_485)
{
    // 1D4FA 0041;	
    // (𝓺) MATHEMATICAL BOLD SCRIPT SMALL Q	[1E87 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D4FA, 0x0041 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_486)
{
    // 1D52E 0041;	
    // (𝔮) MATHEMATICAL FRAKTUR SMALL Q	[1E87 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D52E, 0x0041 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_487)
{
    // 1D562 0041;	
    // (𝕢) MATHEMATICAL DOUBLE-STRUCK SMALL Q	[1E87 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D562, 0x0041 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_488)
{
    // 1D596 0041;	
    // (𝖖) MATHEMATICAL BOLD FRAKTUR SMALL Q	[1E87 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D596, 0x0041 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_489)
{
    // 1D5CA 0041;	
    // (𝗊) MATHEMATICAL SANS-SERIF SMALL Q	[1E87 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D5CA, 0x0041 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_490)
{
    // 1D5FE 0041;	
    // (𝗾) MATHEMATICAL SANS-SERIF BOLD SMALL Q	[1E87 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D5FE, 0x0041 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_491)
{
    // 1D632 0041;	
    // (𝘲) MATHEMATICAL SANS-SERIF ITALIC SMALL Q	[1E87 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D632, 0x0041 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_492)
{
    // 1D666 0041;	
    // (𝙦) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Q	[1E87 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D666, 0x0041 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_493)
{
    // 1D69A 0041;	
    // (𝚚) MATHEMATICAL MONOSPACE SMALL Q	[1E87 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D69A, 0x0041 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_494)
{
    // 24E0 0061;	
    // (ⓠ) CIRCLED LATIN SMALL LETTER Q	[1E87 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24E0, 0x0061 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_495)
{
    // 24E0 0041;	
    // (ⓠ) CIRCLED LATIN SMALL LETTER Q	[1E87 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x24E0, 0x0041 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_496)
{
    // 0051 0061;	
    // (Q) LATIN CAPITAL LETTER Q	[1E87 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0051, 0x0061 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_497)
{
    // 0051 0041;	
    // (Q) LATIN CAPITAL LETTER Q	[1E87 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0051, 0x0041 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_498)
{
    // FF31 0061;	
    // (Ｑ) FULLWIDTH LATIN CAPITAL LETTER Q	[1E87 1CAD | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF31, 0x0061 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_117_499)
{
    // FF31 0041;	
    // (Ｑ) FULLWIDTH LATIN CAPITAL LETTER Q	[1E87 1CAD | 0020 0020 | 0009 0008 |]

    uint32_t cps[2] = { 0xFF31, 0x0041 };
    uint32_t const ces[9] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

