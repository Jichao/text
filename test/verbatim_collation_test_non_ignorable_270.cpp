// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_270_000)
{
    // 102BF 003F;	
    // (êäø) CARIAN LETTER UU	[461F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102BF, 0x003F };
    uint32_t const ces[9] = { 0x461F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_001)
{
    // 102BF 0061;	
    // (êäø) CARIAN LETTER UU	[461F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102BF, 0x0061 };
    uint32_t const ces[9] = { 0x461F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_002)
{
    // 102BF 0041;	
    // (êäø) CARIAN LETTER UU	[461F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102BF, 0x0041 };
    uint32_t const ces[9] = { 0x461F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_003)
{
    // 102BF 0062;	
    // (êäø) CARIAN LETTER UU	[461F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102BF, 0x0062 };
    uint32_t const ces[9] = { 0x461F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_004)
{
    // 102C0 0021;	
    // (êãÄ) CARIAN LETTER G	[4620 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C0, 0x0021 };
    uint32_t const ces[9] = { 0x4620, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_005)
{
    // 102C0 003F;	
    // (êãÄ) CARIAN LETTER G	[4620 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C0, 0x003F };
    uint32_t const ces[9] = { 0x4620, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_006)
{
    // 102C0 0061;	
    // (êãÄ) CARIAN LETTER G	[4620 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C0, 0x0061 };
    uint32_t const ces[9] = { 0x4620, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_007)
{
    // 102C0 0041;	
    // (êãÄ) CARIAN LETTER G	[4620 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102C0, 0x0041 };
    uint32_t const ces[9] = { 0x4620, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_008)
{
    // 102C0 0062;	
    // (êãÄ) CARIAN LETTER G	[4620 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C0, 0x0062 };
    uint32_t const ces[9] = { 0x4620, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_009)
{
    // 102C1 0021;	
    // (êãÅ) CARIAN LETTER G2	[4621 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C1, 0x0021 };
    uint32_t const ces[9] = { 0x4621, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_010)
{
    // 102C1 003F;	
    // (êãÅ) CARIAN LETTER G2	[4621 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C1, 0x003F };
    uint32_t const ces[9] = { 0x4621, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_011)
{
    // 102C1 0061;	
    // (êãÅ) CARIAN LETTER G2	[4621 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C1, 0x0061 };
    uint32_t const ces[9] = { 0x4621, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_012)
{
    // 102C1 0041;	
    // (êãÅ) CARIAN LETTER G2	[4621 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102C1, 0x0041 };
    uint32_t const ces[9] = { 0x4621, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_013)
{
    // 102C1 0062;	
    // (êãÅ) CARIAN LETTER G2	[4621 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C1, 0x0062 };
    uint32_t const ces[9] = { 0x4621, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_014)
{
    // 102C2 0021;	
    // (êãÇ) CARIAN LETTER ST	[4622 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C2, 0x0021 };
    uint32_t const ces[9] = { 0x4622, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_015)
{
    // 102C2 003F;	
    // (êãÇ) CARIAN LETTER ST	[4622 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C2, 0x003F };
    uint32_t const ces[9] = { 0x4622, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_016)
{
    // 102C2 0061;	
    // (êãÇ) CARIAN LETTER ST	[4622 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C2, 0x0061 };
    uint32_t const ces[9] = { 0x4622, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_017)
{
    // 102C2 0041;	
    // (êãÇ) CARIAN LETTER ST	[4622 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102C2, 0x0041 };
    uint32_t const ces[9] = { 0x4622, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_018)
{
    // 102C2 0062;	
    // (êãÇ) CARIAN LETTER ST	[4622 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C2, 0x0062 };
    uint32_t const ces[9] = { 0x4622, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_019)
{
    // 102C3 0021;	
    // (êãÉ) CARIAN LETTER ST2	[4623 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C3, 0x0021 };
    uint32_t const ces[9] = { 0x4623, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_020)
{
    // 102C3 003F;	
    // (êãÉ) CARIAN LETTER ST2	[4623 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C3, 0x003F };
    uint32_t const ces[9] = { 0x4623, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_021)
{
    // 102C3 0061;	
    // (êãÉ) CARIAN LETTER ST2	[4623 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C3, 0x0061 };
    uint32_t const ces[9] = { 0x4623, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_022)
{
    // 102C3 0041;	
    // (êãÉ) CARIAN LETTER ST2	[4623 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102C3, 0x0041 };
    uint32_t const ces[9] = { 0x4623, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_023)
{
    // 102C3 0062;	
    // (êãÉ) CARIAN LETTER ST2	[4623 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C3, 0x0062 };
    uint32_t const ces[9] = { 0x4623, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_024)
{
    // 102C4 0021;	
    // (êãÑ) CARIAN LETTER NG	[4624 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C4, 0x0021 };
    uint32_t const ces[9] = { 0x4624, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_025)
{
    // 102C4 003F;	
    // (êãÑ) CARIAN LETTER NG	[4624 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C4, 0x003F };
    uint32_t const ces[9] = { 0x4624, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_026)
{
    // 102C4 0061;	
    // (êãÑ) CARIAN LETTER NG	[4624 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C4, 0x0061 };
    uint32_t const ces[9] = { 0x4624, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_027)
{
    // 102C4 0041;	
    // (êãÑ) CARIAN LETTER NG	[4624 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102C4, 0x0041 };
    uint32_t const ces[9] = { 0x4624, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_028)
{
    // 102C4 0062;	
    // (êãÑ) CARIAN LETTER NG	[4624 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C4, 0x0062 };
    uint32_t const ces[9] = { 0x4624, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_029)
{
    // 102C5 0021;	
    // (êãÖ) CARIAN LETTER II	[4625 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C5, 0x0021 };
    uint32_t const ces[9] = { 0x4625, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_030)
{
    // 102C5 003F;	
    // (êãÖ) CARIAN LETTER II	[4625 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C5, 0x003F };
    uint32_t const ces[9] = { 0x4625, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_031)
{
    // 102C5 0061;	
    // (êãÖ) CARIAN LETTER II	[4625 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C5, 0x0061 };
    uint32_t const ces[9] = { 0x4625, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_032)
{
    // 102C5 0041;	
    // (êãÖ) CARIAN LETTER II	[4625 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102C5, 0x0041 };
    uint32_t const ces[9] = { 0x4625, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_033)
{
    // 102C5 0062;	
    // (êãÖ) CARIAN LETTER II	[4625 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C5, 0x0062 };
    uint32_t const ces[9] = { 0x4625, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_034)
{
    // 102C6 0021;	
    // (êãÜ) CARIAN LETTER C-39	[4626 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C6, 0x0021 };
    uint32_t const ces[9] = { 0x4626, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_035)
{
    // 102C6 003F;	
    // (êãÜ) CARIAN LETTER C-39	[4626 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C6, 0x003F };
    uint32_t const ces[9] = { 0x4626, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_036)
{
    // 102C6 0061;	
    // (êãÜ) CARIAN LETTER C-39	[4626 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C6, 0x0061 };
    uint32_t const ces[9] = { 0x4626, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_037)
{
    // 102C6 0041;	
    // (êãÜ) CARIAN LETTER C-39	[4626 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102C6, 0x0041 };
    uint32_t const ces[9] = { 0x4626, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_038)
{
    // 102C6 0062;	
    // (êãÜ) CARIAN LETTER C-39	[4626 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C6, 0x0062 };
    uint32_t const ces[9] = { 0x4626, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_039)
{
    // 102C7 0021;	
    // (êãá) CARIAN LETTER TT	[4627 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C7, 0x0021 };
    uint32_t const ces[9] = { 0x4627, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_040)
{
    // 102C7 003F;	
    // (êãá) CARIAN LETTER TT	[4627 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C7, 0x003F };
    uint32_t const ces[9] = { 0x4627, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_041)
{
    // 102C7 0061;	
    // (êãá) CARIAN LETTER TT	[4627 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C7, 0x0061 };
    uint32_t const ces[9] = { 0x4627, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_042)
{
    // 102C7 0041;	
    // (êãá) CARIAN LETTER TT	[4627 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102C7, 0x0041 };
    uint32_t const ces[9] = { 0x4627, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_043)
{
    // 102C7 0062;	
    // (êãá) CARIAN LETTER TT	[4627 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C7, 0x0062 };
    uint32_t const ces[9] = { 0x4627, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_044)
{
    // 102C8 0021;	
    // (êãà) CARIAN LETTER UUU2	[4628 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C8, 0x0021 };
    uint32_t const ces[9] = { 0x4628, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_045)
{
    // 102C8 003F;	
    // (êãà) CARIAN LETTER UUU2	[4628 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C8, 0x003F };
    uint32_t const ces[9] = { 0x4628, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_046)
{
    // 102C8 0061;	
    // (êãà) CARIAN LETTER UUU2	[4628 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C8, 0x0061 };
    uint32_t const ces[9] = { 0x4628, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_047)
{
    // 102C8 0041;	
    // (êãà) CARIAN LETTER UUU2	[4628 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102C8, 0x0041 };
    uint32_t const ces[9] = { 0x4628, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_048)
{
    // 102C8 0062;	
    // (êãà) CARIAN LETTER UUU2	[4628 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C8, 0x0062 };
    uint32_t const ces[9] = { 0x4628, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_049)
{
    // 102C9 0021;	
    // (êãâ) CARIAN LETTER RR	[4629 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C9, 0x0021 };
    uint32_t const ces[9] = { 0x4629, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_050)
{
    // 102C9 003F;	
    // (êãâ) CARIAN LETTER RR	[4629 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C9, 0x003F };
    uint32_t const ces[9] = { 0x4629, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_051)
{
    // 102C9 0061;	
    // (êãâ) CARIAN LETTER RR	[4629 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C9, 0x0061 };
    uint32_t const ces[9] = { 0x4629, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_052)
{
    // 102C9 0041;	
    // (êãâ) CARIAN LETTER RR	[4629 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102C9, 0x0041 };
    uint32_t const ces[9] = { 0x4629, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_053)
{
    // 102C9 0062;	
    // (êãâ) CARIAN LETTER RR	[4629 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C9, 0x0062 };
    uint32_t const ces[9] = { 0x4629, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_054)
{
    // 102CA 0021;	
    // (êãä) CARIAN LETTER MB	[462A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102CA, 0x0021 };
    uint32_t const ces[9] = { 0x462A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_055)
{
    // 102CA 003F;	
    // (êãä) CARIAN LETTER MB	[462A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102CA, 0x003F };
    uint32_t const ces[9] = { 0x462A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_056)
{
    // 102CA 0061;	
    // (êãä) CARIAN LETTER MB	[462A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102CA, 0x0061 };
    uint32_t const ces[9] = { 0x462A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_057)
{
    // 102CA 0041;	
    // (êãä) CARIAN LETTER MB	[462A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102CA, 0x0041 };
    uint32_t const ces[9] = { 0x462A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_058)
{
    // 102CA 0062;	
    // (êãä) CARIAN LETTER MB	[462A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102CA, 0x0062 };
    uint32_t const ces[9] = { 0x462A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_059)
{
    // 102CB 0021;	
    // (êãã) CARIAN LETTER MB2	[462B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102CB, 0x0021 };
    uint32_t const ces[9] = { 0x462B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_060)
{
    // 102CB 003F;	
    // (êãã) CARIAN LETTER MB2	[462B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102CB, 0x003F };
    uint32_t const ces[9] = { 0x462B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_061)
{
    // 102CB 0061;	
    // (êãã) CARIAN LETTER MB2	[462B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102CB, 0x0061 };
    uint32_t const ces[9] = { 0x462B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_062)
{
    // 102CB 0041;	
    // (êãã) CARIAN LETTER MB2	[462B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102CB, 0x0041 };
    uint32_t const ces[9] = { 0x462B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_063)
{
    // 102CB 0062;	
    // (êãã) CARIAN LETTER MB2	[462B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102CB, 0x0062 };
    uint32_t const ces[9] = { 0x462B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_064)
{
    // 102CC 0021;	
    // (êãå) CARIAN LETTER MB3	[462C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102CC, 0x0021 };
    uint32_t const ces[9] = { 0x462C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_065)
{
    // 102CC 003F;	
    // (êãå) CARIAN LETTER MB3	[462C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102CC, 0x003F };
    uint32_t const ces[9] = { 0x462C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_066)
{
    // 102CC 0061;	
    // (êãå) CARIAN LETTER MB3	[462C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102CC, 0x0061 };
    uint32_t const ces[9] = { 0x462C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_067)
{
    // 102CC 0041;	
    // (êãå) CARIAN LETTER MB3	[462C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102CC, 0x0041 };
    uint32_t const ces[9] = { 0x462C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_068)
{
    // 102CC 0062;	
    // (êãå) CARIAN LETTER MB3	[462C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102CC, 0x0062 };
    uint32_t const ces[9] = { 0x462C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_069)
{
    // 102CD 0021;	
    // (êãç) CARIAN LETTER MB4	[462D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102CD, 0x0021 };
    uint32_t const ces[9] = { 0x462D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_070)
{
    // 102CD 003F;	
    // (êãç) CARIAN LETTER MB4	[462D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102CD, 0x003F };
    uint32_t const ces[9] = { 0x462D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_071)
{
    // 102CD 0061;	
    // (êãç) CARIAN LETTER MB4	[462D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102CD, 0x0061 };
    uint32_t const ces[9] = { 0x462D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_072)
{
    // 102CD 0041;	
    // (êãç) CARIAN LETTER MB4	[462D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102CD, 0x0041 };
    uint32_t const ces[9] = { 0x462D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_073)
{
    // 102CD 0062;	
    // (êãç) CARIAN LETTER MB4	[462D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102CD, 0x0062 };
    uint32_t const ces[9] = { 0x462D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_074)
{
    // 102CE 0021;	
    // (êãé) CARIAN LETTER LD2	[462E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102CE, 0x0021 };
    uint32_t const ces[9] = { 0x462E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_075)
{
    // 102CE 003F;	
    // (êãé) CARIAN LETTER LD2	[462E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102CE, 0x003F };
    uint32_t const ces[9] = { 0x462E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_076)
{
    // 102CE 0061;	
    // (êãé) CARIAN LETTER LD2	[462E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102CE, 0x0061 };
    uint32_t const ces[9] = { 0x462E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_077)
{
    // 102CE 0041;	
    // (êãé) CARIAN LETTER LD2	[462E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102CE, 0x0041 };
    uint32_t const ces[9] = { 0x462E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_078)
{
    // 102CE 0062;	
    // (êãé) CARIAN LETTER LD2	[462E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102CE, 0x0062 };
    uint32_t const ces[9] = { 0x462E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_079)
{
    // 102CF 0021;	
    // (êãè) CARIAN LETTER E2	[462F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102CF, 0x0021 };
    uint32_t const ces[9] = { 0x462F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_080)
{
    // 102CF 003F;	
    // (êãè) CARIAN LETTER E2	[462F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102CF, 0x003F };
    uint32_t const ces[9] = { 0x462F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_081)
{
    // 102CF 0061;	
    // (êãè) CARIAN LETTER E2	[462F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102CF, 0x0061 };
    uint32_t const ces[9] = { 0x462F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_082)
{
    // 102CF 0041;	
    // (êãè) CARIAN LETTER E2	[462F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102CF, 0x0041 };
    uint32_t const ces[9] = { 0x462F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_083)
{
    // 102CF 0062;	
    // (êãè) CARIAN LETTER E2	[462F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102CF, 0x0062 };
    uint32_t const ces[9] = { 0x462F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_084)
{
    // 102D0 0021;	
    // (êãê) CARIAN LETTER UUU3	[4630 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102D0, 0x0021 };
    uint32_t const ces[9] = { 0x4630, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_085)
{
    // 102D0 003F;	
    // (êãê) CARIAN LETTER UUU3	[4630 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102D0, 0x003F };
    uint32_t const ces[9] = { 0x4630, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_086)
{
    // 102D0 0061;	
    // (êãê) CARIAN LETTER UUU3	[4630 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102D0, 0x0061 };
    uint32_t const ces[9] = { 0x4630, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_087)
{
    // 102D0 0041;	
    // (êãê) CARIAN LETTER UUU3	[4630 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102D0, 0x0041 };
    uint32_t const ces[9] = { 0x4630, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_088)
{
    // 102D0 0062;	
    // (êãê) CARIAN LETTER UUU3	[4630 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102D0, 0x0062 };
    uint32_t const ces[9] = { 0x4630, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_089)
{
    // 10920 0021;	
    // (‚Äé‚Äéê§†‚Äé‚Äé) LYDIAN LETTER A	[4631 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10920, 0x0021 };
    uint32_t const ces[9] = { 0x4631, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_090)
{
    // 10920 003F;	
    // (‚Äé‚Äéê§†‚Äé‚Äé) LYDIAN LETTER A	[4631 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10920, 0x003F };
    uint32_t const ces[9] = { 0x4631, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_091)
{
    // 10920 0061;	
    // (‚Äé‚Äéê§†‚Äé‚Äé) LYDIAN LETTER A	[4631 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10920, 0x0061 };
    uint32_t const ces[9] = { 0x4631, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_092)
{
    // 10920 0041;	
    // (‚Äé‚Äéê§†‚Äé‚Äé) LYDIAN LETTER A	[4631 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10920, 0x0041 };
    uint32_t const ces[9] = { 0x4631, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_093)
{
    // 10920 0062;	
    // (‚Äé‚Äéê§†‚Äé‚Äé) LYDIAN LETTER A	[4631 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10920, 0x0062 };
    uint32_t const ces[9] = { 0x4631, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_094)
{
    // 10921 0021;	
    // (‚Äé‚Äéê§°‚Äé‚Äé) LYDIAN LETTER B	[4632 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10921, 0x0021 };
    uint32_t const ces[9] = { 0x4632, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_095)
{
    // 10921 003F;	
    // (‚Äé‚Äéê§°‚Äé‚Äé) LYDIAN LETTER B	[4632 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10921, 0x003F };
    uint32_t const ces[9] = { 0x4632, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_096)
{
    // 10921 0061;	
    // (‚Äé‚Äéê§°‚Äé‚Äé) LYDIAN LETTER B	[4632 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10921, 0x0061 };
    uint32_t const ces[9] = { 0x4632, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_097)
{
    // 10921 0041;	
    // (‚Äé‚Äéê§°‚Äé‚Äé) LYDIAN LETTER B	[4632 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10921, 0x0041 };
    uint32_t const ces[9] = { 0x4632, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_098)
{
    // 10921 0062;	
    // (‚Äé‚Äéê§°‚Äé‚Äé) LYDIAN LETTER B	[4632 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10921, 0x0062 };
    uint32_t const ces[9] = { 0x4632, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_099)
{
    // 10922 0021;	
    // (‚Äé‚Äéê§¢‚Äé‚Äé) LYDIAN LETTER G	[4633 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10922, 0x0021 };
    uint32_t const ces[9] = { 0x4633, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_100)
{
    // 10922 003F;	
    // (‚Äé‚Äéê§¢‚Äé‚Äé) LYDIAN LETTER G	[4633 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10922, 0x003F };
    uint32_t const ces[9] = { 0x4633, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_101)
{
    // 10922 0061;	
    // (‚Äé‚Äéê§¢‚Äé‚Äé) LYDIAN LETTER G	[4633 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10922, 0x0061 };
    uint32_t const ces[9] = { 0x4633, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_102)
{
    // 10922 0041;	
    // (‚Äé‚Äéê§¢‚Äé‚Äé) LYDIAN LETTER G	[4633 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10922, 0x0041 };
    uint32_t const ces[9] = { 0x4633, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_103)
{
    // 10922 0062;	
    // (‚Äé‚Äéê§¢‚Äé‚Äé) LYDIAN LETTER G	[4633 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10922, 0x0062 };
    uint32_t const ces[9] = { 0x4633, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_104)
{
    // 10923 0021;	
    // (‚Äé‚Äéê§£‚Äé‚Äé) LYDIAN LETTER D	[4634 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10923, 0x0021 };
    uint32_t const ces[9] = { 0x4634, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_105)
{
    // 10923 003F;	
    // (‚Äé‚Äéê§£‚Äé‚Äé) LYDIAN LETTER D	[4634 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10923, 0x003F };
    uint32_t const ces[9] = { 0x4634, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_106)
{
    // 10923 0061;	
    // (‚Äé‚Äéê§£‚Äé‚Äé) LYDIAN LETTER D	[4634 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10923, 0x0061 };
    uint32_t const ces[9] = { 0x4634, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_107)
{
    // 10923 0041;	
    // (‚Äé‚Äéê§£‚Äé‚Äé) LYDIAN LETTER D	[4634 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10923, 0x0041 };
    uint32_t const ces[9] = { 0x4634, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_108)
{
    // 10923 0062;	
    // (‚Äé‚Äéê§£‚Äé‚Äé) LYDIAN LETTER D	[4634 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10923, 0x0062 };
    uint32_t const ces[9] = { 0x4634, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_109)
{
    // 10924 0021;	
    // (‚Äé‚Äéê§§‚Äé‚Äé) LYDIAN LETTER E	[4635 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10924, 0x0021 };
    uint32_t const ces[9] = { 0x4635, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_110)
{
    // 10924 003F;	
    // (‚Äé‚Äéê§§‚Äé‚Äé) LYDIAN LETTER E	[4635 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10924, 0x003F };
    uint32_t const ces[9] = { 0x4635, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_111)
{
    // 10924 0061;	
    // (‚Äé‚Äéê§§‚Äé‚Äé) LYDIAN LETTER E	[4635 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10924, 0x0061 };
    uint32_t const ces[9] = { 0x4635, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_112)
{
    // 10924 0041;	
    // (‚Äé‚Äéê§§‚Äé‚Äé) LYDIAN LETTER E	[4635 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10924, 0x0041 };
    uint32_t const ces[9] = { 0x4635, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_113)
{
    // 10924 0062;	
    // (‚Äé‚Äéê§§‚Äé‚Äé) LYDIAN LETTER E	[4635 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10924, 0x0062 };
    uint32_t const ces[9] = { 0x4635, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_114)
{
    // 10925 0021;	
    // (‚Äé‚Äéê§•‚Äé‚Äé) LYDIAN LETTER V	[4636 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10925, 0x0021 };
    uint32_t const ces[9] = { 0x4636, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_115)
{
    // 10925 003F;	
    // (‚Äé‚Äéê§•‚Äé‚Äé) LYDIAN LETTER V	[4636 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10925, 0x003F };
    uint32_t const ces[9] = { 0x4636, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_116)
{
    // 10925 0061;	
    // (‚Äé‚Äéê§•‚Äé‚Äé) LYDIAN LETTER V	[4636 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10925, 0x0061 };
    uint32_t const ces[9] = { 0x4636, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_117)
{
    // 10925 0041;	
    // (‚Äé‚Äéê§•‚Äé‚Äé) LYDIAN LETTER V	[4636 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10925, 0x0041 };
    uint32_t const ces[9] = { 0x4636, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_118)
{
    // 10925 0062;	
    // (‚Äé‚Äéê§•‚Äé‚Äé) LYDIAN LETTER V	[4636 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10925, 0x0062 };
    uint32_t const ces[9] = { 0x4636, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_119)
{
    // 10926 0021;	
    // (‚Äé‚Äéê§¶‚Äé‚Äé) LYDIAN LETTER I	[4637 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10926, 0x0021 };
    uint32_t const ces[9] = { 0x4637, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_120)
{
    // 10926 003F;	
    // (‚Äé‚Äéê§¶‚Äé‚Äé) LYDIAN LETTER I	[4637 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10926, 0x003F };
    uint32_t const ces[9] = { 0x4637, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_121)
{
    // 10926 0061;	
    // (‚Äé‚Äéê§¶‚Äé‚Äé) LYDIAN LETTER I	[4637 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10926, 0x0061 };
    uint32_t const ces[9] = { 0x4637, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_122)
{
    // 10926 0041;	
    // (‚Äé‚Äéê§¶‚Äé‚Äé) LYDIAN LETTER I	[4637 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10926, 0x0041 };
    uint32_t const ces[9] = { 0x4637, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_123)
{
    // 10926 0062;	
    // (‚Äé‚Äéê§¶‚Äé‚Äé) LYDIAN LETTER I	[4637 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10926, 0x0062 };
    uint32_t const ces[9] = { 0x4637, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_124)
{
    // 10927 0021;	
    // (‚Äé‚Äéê§ß‚Äé‚Äé) LYDIAN LETTER Y	[4638 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10927, 0x0021 };
    uint32_t const ces[9] = { 0x4638, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_125)
{
    // 10927 003F;	
    // (‚Äé‚Äéê§ß‚Äé‚Äé) LYDIAN LETTER Y	[4638 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10927, 0x003F };
    uint32_t const ces[9] = { 0x4638, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_126)
{
    // 10927 0061;	
    // (‚Äé‚Äéê§ß‚Äé‚Äé) LYDIAN LETTER Y	[4638 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10927, 0x0061 };
    uint32_t const ces[9] = { 0x4638, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_127)
{
    // 10927 0041;	
    // (‚Äé‚Äéê§ß‚Äé‚Äé) LYDIAN LETTER Y	[4638 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10927, 0x0041 };
    uint32_t const ces[9] = { 0x4638, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_128)
{
    // 10927 0062;	
    // (‚Äé‚Äéê§ß‚Äé‚Äé) LYDIAN LETTER Y	[4638 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10927, 0x0062 };
    uint32_t const ces[9] = { 0x4638, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_129)
{
    // 10928 0021;	
    // (‚Äé‚Äéê§®‚Äé‚Äé) LYDIAN LETTER K	[4639 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10928, 0x0021 };
    uint32_t const ces[9] = { 0x4639, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_130)
{
    // 10928 003F;	
    // (‚Äé‚Äéê§®‚Äé‚Äé) LYDIAN LETTER K	[4639 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10928, 0x003F };
    uint32_t const ces[9] = { 0x4639, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_131)
{
    // 10928 0061;	
    // (‚Äé‚Äéê§®‚Äé‚Äé) LYDIAN LETTER K	[4639 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10928, 0x0061 };
    uint32_t const ces[9] = { 0x4639, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_132)
{
    // 10928 0041;	
    // (‚Äé‚Äéê§®‚Äé‚Äé) LYDIAN LETTER K	[4639 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10928, 0x0041 };
    uint32_t const ces[9] = { 0x4639, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_133)
{
    // 10928 0062;	
    // (‚Äé‚Äéê§®‚Äé‚Äé) LYDIAN LETTER K	[4639 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10928, 0x0062 };
    uint32_t const ces[9] = { 0x4639, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_134)
{
    // 10929 0021;	
    // (‚Äé‚Äéê§©‚Äé‚Äé) LYDIAN LETTER L	[463A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10929, 0x0021 };
    uint32_t const ces[9] = { 0x463A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_135)
{
    // 10929 003F;	
    // (‚Äé‚Äéê§©‚Äé‚Äé) LYDIAN LETTER L	[463A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10929, 0x003F };
    uint32_t const ces[9] = { 0x463A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_136)
{
    // 10929 0061;	
    // (‚Äé‚Äéê§©‚Äé‚Äé) LYDIAN LETTER L	[463A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10929, 0x0061 };
    uint32_t const ces[9] = { 0x463A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_137)
{
    // 10929 0041;	
    // (‚Äé‚Äéê§©‚Äé‚Äé) LYDIAN LETTER L	[463A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10929, 0x0041 };
    uint32_t const ces[9] = { 0x463A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_138)
{
    // 10929 0062;	
    // (‚Äé‚Äéê§©‚Äé‚Äé) LYDIAN LETTER L	[463A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10929, 0x0062 };
    uint32_t const ces[9] = { 0x463A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_139)
{
    // 1092A 0021;	
    // (‚Äé‚Äéê§™‚Äé‚Äé) LYDIAN LETTER M	[463B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1092A, 0x0021 };
    uint32_t const ces[9] = { 0x463B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_140)
{
    // 1092A 003F;	
    // (‚Äé‚Äéê§™‚Äé‚Äé) LYDIAN LETTER M	[463B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1092A, 0x003F };
    uint32_t const ces[9] = { 0x463B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_141)
{
    // 1092A 0061;	
    // (‚Äé‚Äéê§™‚Äé‚Äé) LYDIAN LETTER M	[463B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1092A, 0x0061 };
    uint32_t const ces[9] = { 0x463B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_142)
{
    // 1092A 0041;	
    // (‚Äé‚Äéê§™‚Äé‚Äé) LYDIAN LETTER M	[463B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1092A, 0x0041 };
    uint32_t const ces[9] = { 0x463B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_143)
{
    // 1092A 0062;	
    // (‚Äé‚Äéê§™‚Äé‚Äé) LYDIAN LETTER M	[463B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1092A, 0x0062 };
    uint32_t const ces[9] = { 0x463B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_144)
{
    // 1092B 0021;	
    // (‚Äé‚Äéê§´‚Äé‚Äé) LYDIAN LETTER N	[463C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1092B, 0x0021 };
    uint32_t const ces[9] = { 0x463C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_145)
{
    // 1092B 003F;	
    // (‚Äé‚Äéê§´‚Äé‚Äé) LYDIAN LETTER N	[463C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1092B, 0x003F };
    uint32_t const ces[9] = { 0x463C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_146)
{
    // 1092B 0061;	
    // (‚Äé‚Äéê§´‚Äé‚Äé) LYDIAN LETTER N	[463C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1092B, 0x0061 };
    uint32_t const ces[9] = { 0x463C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_147)
{
    // 1092B 0041;	
    // (‚Äé‚Äéê§´‚Äé‚Äé) LYDIAN LETTER N	[463C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1092B, 0x0041 };
    uint32_t const ces[9] = { 0x463C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_148)
{
    // 1092B 0062;	
    // (‚Äé‚Äéê§´‚Äé‚Äé) LYDIAN LETTER N	[463C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1092B, 0x0062 };
    uint32_t const ces[9] = { 0x463C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_149)
{
    // 1092C 0021;	
    // (‚Äé‚Äéê§¨‚Äé‚Äé) LYDIAN LETTER O	[463D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1092C, 0x0021 };
    uint32_t const ces[9] = { 0x463D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_150)
{
    // 1092C 003F;	
    // (‚Äé‚Äéê§¨‚Äé‚Äé) LYDIAN LETTER O	[463D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1092C, 0x003F };
    uint32_t const ces[9] = { 0x463D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_151)
{
    // 1092C 0061;	
    // (‚Äé‚Äéê§¨‚Äé‚Äé) LYDIAN LETTER O	[463D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1092C, 0x0061 };
    uint32_t const ces[9] = { 0x463D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_152)
{
    // 1092C 0041;	
    // (‚Äé‚Äéê§¨‚Äé‚Äé) LYDIAN LETTER O	[463D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1092C, 0x0041 };
    uint32_t const ces[9] = { 0x463D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_153)
{
    // 1092C 0062;	
    // (‚Äé‚Äéê§¨‚Äé‚Äé) LYDIAN LETTER O	[463D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1092C, 0x0062 };
    uint32_t const ces[9] = { 0x463D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_154)
{
    // 1092D 0021;	
    // (‚Äé‚Äéê§≠‚Äé‚Äé) LYDIAN LETTER R	[463E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1092D, 0x0021 };
    uint32_t const ces[9] = { 0x463E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_155)
{
    // 1092D 003F;	
    // (‚Äé‚Äéê§≠‚Äé‚Äé) LYDIAN LETTER R	[463E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1092D, 0x003F };
    uint32_t const ces[9] = { 0x463E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_156)
{
    // 1092D 0061;	
    // (‚Äé‚Äéê§≠‚Äé‚Äé) LYDIAN LETTER R	[463E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1092D, 0x0061 };
    uint32_t const ces[9] = { 0x463E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_157)
{
    // 1092D 0041;	
    // (‚Äé‚Äéê§≠‚Äé‚Äé) LYDIAN LETTER R	[463E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1092D, 0x0041 };
    uint32_t const ces[9] = { 0x463E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_158)
{
    // 1092D 0062;	
    // (‚Äé‚Äéê§≠‚Äé‚Äé) LYDIAN LETTER R	[463E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1092D, 0x0062 };
    uint32_t const ces[9] = { 0x463E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_159)
{
    // 1092E 0021;	
    // (‚Äé‚Äéê§Æ‚Äé‚Äé) LYDIAN LETTER SS	[463F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1092E, 0x0021 };
    uint32_t const ces[9] = { 0x463F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_160)
{
    // 1092E 003F;	
    // (‚Äé‚Äéê§Æ‚Äé‚Äé) LYDIAN LETTER SS	[463F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1092E, 0x003F };
    uint32_t const ces[9] = { 0x463F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_161)
{
    // 1092E 0061;	
    // (‚Äé‚Äéê§Æ‚Äé‚Äé) LYDIAN LETTER SS	[463F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1092E, 0x0061 };
    uint32_t const ces[9] = { 0x463F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_162)
{
    // 1092E 0041;	
    // (‚Äé‚Äéê§Æ‚Äé‚Äé) LYDIAN LETTER SS	[463F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1092E, 0x0041 };
    uint32_t const ces[9] = { 0x463F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_163)
{
    // 1092E 0062;	
    // (‚Äé‚Äéê§Æ‚Äé‚Äé) LYDIAN LETTER SS	[463F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1092E, 0x0062 };
    uint32_t const ces[9] = { 0x463F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_164)
{
    // 1092F 0021;	
    // (‚Äé‚Äéê§Ø‚Äé‚Äé) LYDIAN LETTER T	[4640 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1092F, 0x0021 };
    uint32_t const ces[9] = { 0x4640, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_165)
{
    // 1092F 003F;	
    // (‚Äé‚Äéê§Ø‚Äé‚Äé) LYDIAN LETTER T	[4640 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1092F, 0x003F };
    uint32_t const ces[9] = { 0x4640, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_166)
{
    // 1092F 0061;	
    // (‚Äé‚Äéê§Ø‚Äé‚Äé) LYDIAN LETTER T	[4640 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1092F, 0x0061 };
    uint32_t const ces[9] = { 0x4640, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_167)
{
    // 1092F 0041;	
    // (‚Äé‚Äéê§Ø‚Äé‚Äé) LYDIAN LETTER T	[4640 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1092F, 0x0041 };
    uint32_t const ces[9] = { 0x4640, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_168)
{
    // 1092F 0062;	
    // (‚Äé‚Äéê§Ø‚Äé‚Äé) LYDIAN LETTER T	[4640 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1092F, 0x0062 };
    uint32_t const ces[9] = { 0x4640, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_169)
{
    // 10930 0021;	
    // (‚Äé‚Äéê§∞‚Äé‚Äé) LYDIAN LETTER U	[4641 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10930, 0x0021 };
    uint32_t const ces[9] = { 0x4641, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_170)
{
    // 10930 003F;	
    // (‚Äé‚Äéê§∞‚Äé‚Äé) LYDIAN LETTER U	[4641 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10930, 0x003F };
    uint32_t const ces[9] = { 0x4641, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_171)
{
    // 10930 0061;	
    // (‚Äé‚Äéê§∞‚Äé‚Äé) LYDIAN LETTER U	[4641 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10930, 0x0061 };
    uint32_t const ces[9] = { 0x4641, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_172)
{
    // 10930 0041;	
    // (‚Äé‚Äéê§∞‚Äé‚Äé) LYDIAN LETTER U	[4641 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10930, 0x0041 };
    uint32_t const ces[9] = { 0x4641, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_173)
{
    // 10930 0062;	
    // (‚Äé‚Äéê§∞‚Äé‚Äé) LYDIAN LETTER U	[4641 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10930, 0x0062 };
    uint32_t const ces[9] = { 0x4641, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_174)
{
    // 10931 0021;	
    // (‚Äé‚Äéê§±‚Äé‚Äé) LYDIAN LETTER F	[4642 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10931, 0x0021 };
    uint32_t const ces[9] = { 0x4642, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_175)
{
    // 10931 003F;	
    // (‚Äé‚Äéê§±‚Äé‚Äé) LYDIAN LETTER F	[4642 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10931, 0x003F };
    uint32_t const ces[9] = { 0x4642, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_176)
{
    // 10931 0061;	
    // (‚Äé‚Äéê§±‚Äé‚Äé) LYDIAN LETTER F	[4642 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10931, 0x0061 };
    uint32_t const ces[9] = { 0x4642, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_177)
{
    // 10931 0041;	
    // (‚Äé‚Äéê§±‚Äé‚Äé) LYDIAN LETTER F	[4642 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10931, 0x0041 };
    uint32_t const ces[9] = { 0x4642, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_178)
{
    // 10931 0062;	
    // (‚Äé‚Äéê§±‚Äé‚Äé) LYDIAN LETTER F	[4642 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10931, 0x0062 };
    uint32_t const ces[9] = { 0x4642, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_179)
{
    // 10932 0021;	
    // (‚Äé‚Äéê§≤‚Äé‚Äé) LYDIAN LETTER Q	[4643 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10932, 0x0021 };
    uint32_t const ces[9] = { 0x4643, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_180)
{
    // 10932 003F;	
    // (‚Äé‚Äéê§≤‚Äé‚Äé) LYDIAN LETTER Q	[4643 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10932, 0x003F };
    uint32_t const ces[9] = { 0x4643, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_181)
{
    // 10932 0061;	
    // (‚Äé‚Äéê§≤‚Äé‚Äé) LYDIAN LETTER Q	[4643 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10932, 0x0061 };
    uint32_t const ces[9] = { 0x4643, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_182)
{
    // 10932 0041;	
    // (‚Äé‚Äéê§≤‚Äé‚Äé) LYDIAN LETTER Q	[4643 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10932, 0x0041 };
    uint32_t const ces[9] = { 0x4643, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_183)
{
    // 10932 0062;	
    // (‚Äé‚Äéê§≤‚Äé‚Äé) LYDIAN LETTER Q	[4643 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10932, 0x0062 };
    uint32_t const ces[9] = { 0x4643, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_184)
{
    // 10933 0021;	
    // (‚Äé‚Äéê§≥‚Äé‚Äé) LYDIAN LETTER S	[4644 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10933, 0x0021 };
    uint32_t const ces[9] = { 0x4644, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_185)
{
    // 10933 003F;	
    // (‚Äé‚Äéê§≥‚Äé‚Äé) LYDIAN LETTER S	[4644 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10933, 0x003F };
    uint32_t const ces[9] = { 0x4644, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_186)
{
    // 10933 0061;	
    // (‚Äé‚Äéê§≥‚Äé‚Äé) LYDIAN LETTER S	[4644 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10933, 0x0061 };
    uint32_t const ces[9] = { 0x4644, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_187)
{
    // 10933 0041;	
    // (‚Äé‚Äéê§≥‚Äé‚Äé) LYDIAN LETTER S	[4644 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10933, 0x0041 };
    uint32_t const ces[9] = { 0x4644, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_188)
{
    // 10933 0062;	
    // (‚Äé‚Äéê§≥‚Äé‚Äé) LYDIAN LETTER S	[4644 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10933, 0x0062 };
    uint32_t const ces[9] = { 0x4644, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_189)
{
    // 10934 0021;	
    // (‚Äé‚Äéê§¥‚Äé‚Äé) LYDIAN LETTER TT	[4645 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10934, 0x0021 };
    uint32_t const ces[9] = { 0x4645, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_190)
{
    // 10934 003F;	
    // (‚Äé‚Äéê§¥‚Äé‚Äé) LYDIAN LETTER TT	[4645 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10934, 0x003F };
    uint32_t const ces[9] = { 0x4645, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_191)
{
    // 10934 0061;	
    // (‚Äé‚Äéê§¥‚Äé‚Äé) LYDIAN LETTER TT	[4645 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10934, 0x0061 };
    uint32_t const ces[9] = { 0x4645, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_192)
{
    // 10934 0041;	
    // (‚Äé‚Äéê§¥‚Äé‚Äé) LYDIAN LETTER TT	[4645 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10934, 0x0041 };
    uint32_t const ces[9] = { 0x4645, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_193)
{
    // 10934 0062;	
    // (‚Äé‚Äéê§¥‚Äé‚Äé) LYDIAN LETTER TT	[4645 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10934, 0x0062 };
    uint32_t const ces[9] = { 0x4645, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_194)
{
    // 10935 0021;	
    // (‚Äé‚Äéê§µ‚Äé‚Äé) LYDIAN LETTER AN	[4646 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10935, 0x0021 };
    uint32_t const ces[9] = { 0x4646, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_195)
{
    // 10935 003F;	
    // (‚Äé‚Äéê§µ‚Äé‚Äé) LYDIAN LETTER AN	[4646 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10935, 0x003F };
    uint32_t const ces[9] = { 0x4646, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_196)
{
    // 10935 0061;	
    // (‚Äé‚Äéê§µ‚Äé‚Äé) LYDIAN LETTER AN	[4646 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10935, 0x0061 };
    uint32_t const ces[9] = { 0x4646, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_197)
{
    // 10935 0041;	
    // (‚Äé‚Äéê§µ‚Äé‚Äé) LYDIAN LETTER AN	[4646 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10935, 0x0041 };
    uint32_t const ces[9] = { 0x4646, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_198)
{
    // 10935 0062;	
    // (‚Äé‚Äéê§µ‚Äé‚Äé) LYDIAN LETTER AN	[4646 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10935, 0x0062 };
    uint32_t const ces[9] = { 0x4646, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_199)
{
    // 10936 0021;	
    // (‚Äé‚Äéê§∂‚Äé‚Äé) LYDIAN LETTER EN	[4647 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10936, 0x0021 };
    uint32_t const ces[9] = { 0x4647, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_200)
{
    // 10936 003F;	
    // (‚Äé‚Äéê§∂‚Äé‚Äé) LYDIAN LETTER EN	[4647 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10936, 0x003F };
    uint32_t const ces[9] = { 0x4647, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_201)
{
    // 10936 0061;	
    // (‚Äé‚Äéê§∂‚Äé‚Äé) LYDIAN LETTER EN	[4647 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10936, 0x0061 };
    uint32_t const ces[9] = { 0x4647, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_202)
{
    // 10936 0041;	
    // (‚Äé‚Äéê§∂‚Äé‚Äé) LYDIAN LETTER EN	[4647 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10936, 0x0041 };
    uint32_t const ces[9] = { 0x4647, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_203)
{
    // 10936 0062;	
    // (‚Äé‚Äéê§∂‚Äé‚Äé) LYDIAN LETTER EN	[4647 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10936, 0x0062 };
    uint32_t const ces[9] = { 0x4647, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_204)
{
    // 10937 0021;	
    // (‚Äé‚Äéê§∑‚Äé‚Äé) LYDIAN LETTER LY	[4648 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10937, 0x0021 };
    uint32_t const ces[9] = { 0x4648, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_205)
{
    // 10937 003F;	
    // (‚Äé‚Äéê§∑‚Äé‚Äé) LYDIAN LETTER LY	[4648 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10937, 0x003F };
    uint32_t const ces[9] = { 0x4648, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_206)
{
    // 10937 0061;	
    // (‚Äé‚Äéê§∑‚Äé‚Äé) LYDIAN LETTER LY	[4648 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10937, 0x0061 };
    uint32_t const ces[9] = { 0x4648, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_207)
{
    // 10937 0041;	
    // (‚Äé‚Äéê§∑‚Äé‚Äé) LYDIAN LETTER LY	[4648 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10937, 0x0041 };
    uint32_t const ces[9] = { 0x4648, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_208)
{
    // 10937 0062;	
    // (‚Äé‚Äéê§∑‚Äé‚Äé) LYDIAN LETTER LY	[4648 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10937, 0x0062 };
    uint32_t const ces[9] = { 0x4648, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_209)
{
    // 10938 0021;	
    // (‚Äé‚Äéê§∏‚Äé‚Äé) LYDIAN LETTER NN	[4649 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10938, 0x0021 };
    uint32_t const ces[9] = { 0x4649, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_210)
{
    // 10938 003F;	
    // (‚Äé‚Äéê§∏‚Äé‚Äé) LYDIAN LETTER NN	[4649 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10938, 0x003F };
    uint32_t const ces[9] = { 0x4649, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_211)
{
    // 10938 0061;	
    // (‚Äé‚Äéê§∏‚Äé‚Äé) LYDIAN LETTER NN	[4649 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10938, 0x0061 };
    uint32_t const ces[9] = { 0x4649, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_212)
{
    // 10938 0041;	
    // (‚Äé‚Äéê§∏‚Äé‚Äé) LYDIAN LETTER NN	[4649 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10938, 0x0041 };
    uint32_t const ces[9] = { 0x4649, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_213)
{
    // 10938 0062;	
    // (‚Äé‚Äéê§∏‚Äé‚Äé) LYDIAN LETTER NN	[4649 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10938, 0x0062 };
    uint32_t const ces[9] = { 0x4649, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_214)
{
    // 10939 0021;	
    // (‚Äé‚Äéê§π‚Äé‚Äé) LYDIAN LETTER C	[464A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10939, 0x0021 };
    uint32_t const ces[9] = { 0x464A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_215)
{
    // 10939 003F;	
    // (‚Äé‚Äéê§π‚Äé‚Äé) LYDIAN LETTER C	[464A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10939, 0x003F };
    uint32_t const ces[9] = { 0x464A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_216)
{
    // 10939 0061;	
    // (‚Äé‚Äéê§π‚Äé‚Äé) LYDIAN LETTER C	[464A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10939, 0x0061 };
    uint32_t const ces[9] = { 0x464A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_217)
{
    // 10939 0041;	
    // (‚Äé‚Äéê§π‚Äé‚Äé) LYDIAN LETTER C	[464A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10939, 0x0041 };
    uint32_t const ces[9] = { 0x464A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_218)
{
    // 10939 0062;	
    // (‚Äé‚Äéê§π‚Äé‚Äé) LYDIAN LETTER C	[464A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10939, 0x0062 };
    uint32_t const ces[9] = { 0x464A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_219)
{
    // 10300 0021;	
    // (êåÄ) OLD ITALIC LETTER A	[464B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10300, 0x0021 };
    uint32_t const ces[9] = { 0x464B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_220)
{
    // 10300 003F;	
    // (êåÄ) OLD ITALIC LETTER A	[464B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10300, 0x003F };
    uint32_t const ces[9] = { 0x464B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_221)
{
    // 10300 0061;	
    // (êåÄ) OLD ITALIC LETTER A	[464B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10300, 0x0061 };
    uint32_t const ces[9] = { 0x464B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_222)
{
    // 10300 0041;	
    // (êåÄ) OLD ITALIC LETTER A	[464B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10300, 0x0041 };
    uint32_t const ces[9] = { 0x464B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_223)
{
    // 10300 0062;	
    // (êåÄ) OLD ITALIC LETTER A	[464B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10300, 0x0062 };
    uint32_t const ces[9] = { 0x464B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_224)
{
    // 10301 0021;	
    // (êåÅ) OLD ITALIC LETTER BE	[464C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10301, 0x0021 };
    uint32_t const ces[9] = { 0x464C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_225)
{
    // 10301 003F;	
    // (êåÅ) OLD ITALIC LETTER BE	[464C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10301, 0x003F };
    uint32_t const ces[9] = { 0x464C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_226)
{
    // 10301 0061;	
    // (êåÅ) OLD ITALIC LETTER BE	[464C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10301, 0x0061 };
    uint32_t const ces[9] = { 0x464C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_227)
{
    // 10301 0041;	
    // (êåÅ) OLD ITALIC LETTER BE	[464C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10301, 0x0041 };
    uint32_t const ces[9] = { 0x464C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_228)
{
    // 10301 0062;	
    // (êåÅ) OLD ITALIC LETTER BE	[464C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10301, 0x0062 };
    uint32_t const ces[9] = { 0x464C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_229)
{
    // 10302 0021;	
    // (êåÇ) OLD ITALIC LETTER KE	[464D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10302, 0x0021 };
    uint32_t const ces[9] = { 0x464D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_230)
{
    // 10302 003F;	
    // (êåÇ) OLD ITALIC LETTER KE	[464D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10302, 0x003F };
    uint32_t const ces[9] = { 0x464D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_231)
{
    // 10302 0061;	
    // (êåÇ) OLD ITALIC LETTER KE	[464D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10302, 0x0061 };
    uint32_t const ces[9] = { 0x464D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_232)
{
    // 10302 0041;	
    // (êåÇ) OLD ITALIC LETTER KE	[464D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10302, 0x0041 };
    uint32_t const ces[9] = { 0x464D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_233)
{
    // 10302 0062;	
    // (êåÇ) OLD ITALIC LETTER KE	[464D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10302, 0x0062 };
    uint32_t const ces[9] = { 0x464D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_234)
{
    // 10303 0021;	
    // (êåÉ) OLD ITALIC LETTER DE	[464E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10303, 0x0021 };
    uint32_t const ces[9] = { 0x464E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_235)
{
    // 10303 003F;	
    // (êåÉ) OLD ITALIC LETTER DE	[464E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10303, 0x003F };
    uint32_t const ces[9] = { 0x464E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_236)
{
    // 10303 0061;	
    // (êåÉ) OLD ITALIC LETTER DE	[464E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10303, 0x0061 };
    uint32_t const ces[9] = { 0x464E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_237)
{
    // 10303 0041;	
    // (êåÉ) OLD ITALIC LETTER DE	[464E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10303, 0x0041 };
    uint32_t const ces[9] = { 0x464E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_238)
{
    // 10303 0062;	
    // (êåÉ) OLD ITALIC LETTER DE	[464E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10303, 0x0062 };
    uint32_t const ces[9] = { 0x464E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_239)
{
    // 10304 0021;	
    // (êåÑ) OLD ITALIC LETTER E	[464F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10304, 0x0021 };
    uint32_t const ces[9] = { 0x464F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_240)
{
    // 10304 003F;	
    // (êåÑ) OLD ITALIC LETTER E	[464F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10304, 0x003F };
    uint32_t const ces[9] = { 0x464F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_241)
{
    // 10304 0061;	
    // (êåÑ) OLD ITALIC LETTER E	[464F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10304, 0x0061 };
    uint32_t const ces[9] = { 0x464F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_242)
{
    // 10304 0041;	
    // (êåÑ) OLD ITALIC LETTER E	[464F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10304, 0x0041 };
    uint32_t const ces[9] = { 0x464F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_243)
{
    // 10304 0062;	
    // (êåÑ) OLD ITALIC LETTER E	[464F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10304, 0x0062 };
    uint32_t const ces[9] = { 0x464F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_244)
{
    // 10305 0021;	
    // (êåÖ) OLD ITALIC LETTER VE	[4650 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10305, 0x0021 };
    uint32_t const ces[9] = { 0x4650, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_245)
{
    // 10305 003F;	
    // (êåÖ) OLD ITALIC LETTER VE	[4650 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10305, 0x003F };
    uint32_t const ces[9] = { 0x4650, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_246)
{
    // 10305 0061;	
    // (êåÖ) OLD ITALIC LETTER VE	[4650 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10305, 0x0061 };
    uint32_t const ces[9] = { 0x4650, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_247)
{
    // 10305 0041;	
    // (êåÖ) OLD ITALIC LETTER VE	[4650 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10305, 0x0041 };
    uint32_t const ces[9] = { 0x4650, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_248)
{
    // 10305 0062;	
    // (êåÖ) OLD ITALIC LETTER VE	[4650 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10305, 0x0062 };
    uint32_t const ces[9] = { 0x4650, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_249)
{
    // 10306 0021;	
    // (êåÜ) OLD ITALIC LETTER ZE	[4651 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10306, 0x0021 };
    uint32_t const ces[9] = { 0x4651, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_250)
{
    // 10306 003F;	
    // (êåÜ) OLD ITALIC LETTER ZE	[4651 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10306, 0x003F };
    uint32_t const ces[9] = { 0x4651, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_251)
{
    // 10306 0061;	
    // (êåÜ) OLD ITALIC LETTER ZE	[4651 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10306, 0x0061 };
    uint32_t const ces[9] = { 0x4651, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_252)
{
    // 10306 0041;	
    // (êåÜ) OLD ITALIC LETTER ZE	[4651 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10306, 0x0041 };
    uint32_t const ces[9] = { 0x4651, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_253)
{
    // 10306 0062;	
    // (êåÜ) OLD ITALIC LETTER ZE	[4651 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10306, 0x0062 };
    uint32_t const ces[9] = { 0x4651, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_254)
{
    // 10307 0021;	
    // (êåá) OLD ITALIC LETTER HE	[4652 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10307, 0x0021 };
    uint32_t const ces[9] = { 0x4652, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_255)
{
    // 10307 003F;	
    // (êåá) OLD ITALIC LETTER HE	[4652 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10307, 0x003F };
    uint32_t const ces[9] = { 0x4652, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_256)
{
    // 10307 0061;	
    // (êåá) OLD ITALIC LETTER HE	[4652 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10307, 0x0061 };
    uint32_t const ces[9] = { 0x4652, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_257)
{
    // 10307 0041;	
    // (êåá) OLD ITALIC LETTER HE	[4652 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10307, 0x0041 };
    uint32_t const ces[9] = { 0x4652, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_258)
{
    // 10307 0062;	
    // (êåá) OLD ITALIC LETTER HE	[4652 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10307, 0x0062 };
    uint32_t const ces[9] = { 0x4652, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_259)
{
    // 10308 0021;	
    // (êåà) OLD ITALIC LETTER THE	[4653 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10308, 0x0021 };
    uint32_t const ces[9] = { 0x4653, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_260)
{
    // 10308 003F;	
    // (êåà) OLD ITALIC LETTER THE	[4653 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10308, 0x003F };
    uint32_t const ces[9] = { 0x4653, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_261)
{
    // 10308 0061;	
    // (êåà) OLD ITALIC LETTER THE	[4653 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10308, 0x0061 };
    uint32_t const ces[9] = { 0x4653, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_262)
{
    // 10308 0041;	
    // (êåà) OLD ITALIC LETTER THE	[4653 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10308, 0x0041 };
    uint32_t const ces[9] = { 0x4653, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_263)
{
    // 10308 0062;	
    // (êåà) OLD ITALIC LETTER THE	[4653 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10308, 0x0062 };
    uint32_t const ces[9] = { 0x4653, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_264)
{
    // 10309 0021;	
    // (êåâ) OLD ITALIC LETTER I	[4654 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10309, 0x0021 };
    uint32_t const ces[9] = { 0x4654, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_265)
{
    // 10309 003F;	
    // (êåâ) OLD ITALIC LETTER I	[4654 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10309, 0x003F };
    uint32_t const ces[9] = { 0x4654, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_266)
{
    // 10309 0061;	
    // (êåâ) OLD ITALIC LETTER I	[4654 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10309, 0x0061 };
    uint32_t const ces[9] = { 0x4654, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_267)
{
    // 10309 0041;	
    // (êåâ) OLD ITALIC LETTER I	[4654 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10309, 0x0041 };
    uint32_t const ces[9] = { 0x4654, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_268)
{
    // 10309 0062;	
    // (êåâ) OLD ITALIC LETTER I	[4654 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10309, 0x0062 };
    uint32_t const ces[9] = { 0x4654, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_269)
{
    // 1030A 0021;	
    // (êåä) OLD ITALIC LETTER KA	[4655 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1030A, 0x0021 };
    uint32_t const ces[9] = { 0x4655, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_270)
{
    // 1030A 003F;	
    // (êåä) OLD ITALIC LETTER KA	[4655 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1030A, 0x003F };
    uint32_t const ces[9] = { 0x4655, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_271)
{
    // 1030A 0061;	
    // (êåä) OLD ITALIC LETTER KA	[4655 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1030A, 0x0061 };
    uint32_t const ces[9] = { 0x4655, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_272)
{
    // 1030A 0041;	
    // (êåä) OLD ITALIC LETTER KA	[4655 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1030A, 0x0041 };
    uint32_t const ces[9] = { 0x4655, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_273)
{
    // 1030A 0062;	
    // (êåä) OLD ITALIC LETTER KA	[4655 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1030A, 0x0062 };
    uint32_t const ces[9] = { 0x4655, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_274)
{
    // 1030B 0021;	
    // (êåã) OLD ITALIC LETTER EL	[4656 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1030B, 0x0021 };
    uint32_t const ces[9] = { 0x4656, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_275)
{
    // 1030B 003F;	
    // (êåã) OLD ITALIC LETTER EL	[4656 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1030B, 0x003F };
    uint32_t const ces[9] = { 0x4656, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_276)
{
    // 1030B 0061;	
    // (êåã) OLD ITALIC LETTER EL	[4656 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1030B, 0x0061 };
    uint32_t const ces[9] = { 0x4656, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_277)
{
    // 1030B 0041;	
    // (êåã) OLD ITALIC LETTER EL	[4656 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1030B, 0x0041 };
    uint32_t const ces[9] = { 0x4656, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_278)
{
    // 1030B 0062;	
    // (êåã) OLD ITALIC LETTER EL	[4656 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1030B, 0x0062 };
    uint32_t const ces[9] = { 0x4656, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_279)
{
    // 1030C 0021;	
    // (êåå) OLD ITALIC LETTER EM	[4657 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1030C, 0x0021 };
    uint32_t const ces[9] = { 0x4657, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_280)
{
    // 1030C 003F;	
    // (êåå) OLD ITALIC LETTER EM	[4657 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1030C, 0x003F };
    uint32_t const ces[9] = { 0x4657, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_281)
{
    // 1030C 0061;	
    // (êåå) OLD ITALIC LETTER EM	[4657 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1030C, 0x0061 };
    uint32_t const ces[9] = { 0x4657, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_282)
{
    // 1030C 0041;	
    // (êåå) OLD ITALIC LETTER EM	[4657 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1030C, 0x0041 };
    uint32_t const ces[9] = { 0x4657, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_283)
{
    // 1030C 0062;	
    // (êåå) OLD ITALIC LETTER EM	[4657 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1030C, 0x0062 };
    uint32_t const ces[9] = { 0x4657, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_284)
{
    // 1030D 0021;	
    // (êåç) OLD ITALIC LETTER EN	[4658 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1030D, 0x0021 };
    uint32_t const ces[9] = { 0x4658, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_285)
{
    // 1030D 003F;	
    // (êåç) OLD ITALIC LETTER EN	[4658 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1030D, 0x003F };
    uint32_t const ces[9] = { 0x4658, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_286)
{
    // 1030D 0061;	
    // (êåç) OLD ITALIC LETTER EN	[4658 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1030D, 0x0061 };
    uint32_t const ces[9] = { 0x4658, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_287)
{
    // 1030D 0041;	
    // (êåç) OLD ITALIC LETTER EN	[4658 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1030D, 0x0041 };
    uint32_t const ces[9] = { 0x4658, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_288)
{
    // 1030D 0062;	
    // (êåç) OLD ITALIC LETTER EN	[4658 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1030D, 0x0062 };
    uint32_t const ces[9] = { 0x4658, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_289)
{
    // 1030E 0021;	
    // (êåé) OLD ITALIC LETTER ESH	[4659 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1030E, 0x0021 };
    uint32_t const ces[9] = { 0x4659, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_290)
{
    // 1030E 003F;	
    // (êåé) OLD ITALIC LETTER ESH	[4659 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1030E, 0x003F };
    uint32_t const ces[9] = { 0x4659, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_291)
{
    // 1030E 0061;	
    // (êåé) OLD ITALIC LETTER ESH	[4659 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1030E, 0x0061 };
    uint32_t const ces[9] = { 0x4659, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_292)
{
    // 1030E 0041;	
    // (êåé) OLD ITALIC LETTER ESH	[4659 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1030E, 0x0041 };
    uint32_t const ces[9] = { 0x4659, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_293)
{
    // 1030E 0062;	
    // (êåé) OLD ITALIC LETTER ESH	[4659 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1030E, 0x0062 };
    uint32_t const ces[9] = { 0x4659, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_294)
{
    // 1031F 0021;	
    // (êåü) OLD ITALIC LETTER ESS	[465A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1031F, 0x0021 };
    uint32_t const ces[9] = { 0x465A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_295)
{
    // 1031F 003F;	
    // (êåü) OLD ITALIC LETTER ESS	[465A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1031F, 0x003F };
    uint32_t const ces[9] = { 0x465A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_296)
{
    // 1031F 0061;	
    // (êåü) OLD ITALIC LETTER ESS	[465A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1031F, 0x0061 };
    uint32_t const ces[9] = { 0x465A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_297)
{
    // 1031F 0041;	
    // (êåü) OLD ITALIC LETTER ESS	[465A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1031F, 0x0041 };
    uint32_t const ces[9] = { 0x465A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_298)
{
    // 1031F 0062;	
    // (êåü) OLD ITALIC LETTER ESS	[465A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1031F, 0x0062 };
    uint32_t const ces[9] = { 0x465A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_299)
{
    // 1030F 0021;	
    // (êåè) OLD ITALIC LETTER O	[465B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1030F, 0x0021 };
    uint32_t const ces[9] = { 0x465B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_300)
{
    // 1030F 003F;	
    // (êåè) OLD ITALIC LETTER O	[465B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1030F, 0x003F };
    uint32_t const ces[9] = { 0x465B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_301)
{
    // 1030F 0061;	
    // (êåè) OLD ITALIC LETTER O	[465B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1030F, 0x0061 };
    uint32_t const ces[9] = { 0x465B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_302)
{
    // 1030F 0041;	
    // (êåè) OLD ITALIC LETTER O	[465B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1030F, 0x0041 };
    uint32_t const ces[9] = { 0x465B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_303)
{
    // 1030F 0062;	
    // (êåè) OLD ITALIC LETTER O	[465B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1030F, 0x0062 };
    uint32_t const ces[9] = { 0x465B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_304)
{
    // 10310 0021;	
    // (êåê) OLD ITALIC LETTER PE	[465C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10310, 0x0021 };
    uint32_t const ces[9] = { 0x465C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_305)
{
    // 10310 003F;	
    // (êåê) OLD ITALIC LETTER PE	[465C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10310, 0x003F };
    uint32_t const ces[9] = { 0x465C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_306)
{
    // 10310 0061;	
    // (êåê) OLD ITALIC LETTER PE	[465C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10310, 0x0061 };
    uint32_t const ces[9] = { 0x465C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_307)
{
    // 10310 0041;	
    // (êåê) OLD ITALIC LETTER PE	[465C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10310, 0x0041 };
    uint32_t const ces[9] = { 0x465C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_308)
{
    // 10310 0062;	
    // (êåê) OLD ITALIC LETTER PE	[465C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10310, 0x0062 };
    uint32_t const ces[9] = { 0x465C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_309)
{
    // 10311 0021;	
    // (êåë) OLD ITALIC LETTER SHE	[465D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10311, 0x0021 };
    uint32_t const ces[9] = { 0x465D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_310)
{
    // 10311 003F;	
    // (êåë) OLD ITALIC LETTER SHE	[465D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10311, 0x003F };
    uint32_t const ces[9] = { 0x465D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_311)
{
    // 10311 0061;	
    // (êåë) OLD ITALIC LETTER SHE	[465D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10311, 0x0061 };
    uint32_t const ces[9] = { 0x465D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_312)
{
    // 10311 0041;	
    // (êåë) OLD ITALIC LETTER SHE	[465D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10311, 0x0041 };
    uint32_t const ces[9] = { 0x465D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_313)
{
    // 10311 0062;	
    // (êåë) OLD ITALIC LETTER SHE	[465D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10311, 0x0062 };
    uint32_t const ces[9] = { 0x465D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_314)
{
    // 10312 0021;	
    // (êåí) OLD ITALIC LETTER KU	[465E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10312, 0x0021 };
    uint32_t const ces[9] = { 0x465E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_315)
{
    // 10312 003F;	
    // (êåí) OLD ITALIC LETTER KU	[465E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10312, 0x003F };
    uint32_t const ces[9] = { 0x465E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_316)
{
    // 10312 0061;	
    // (êåí) OLD ITALIC LETTER KU	[465E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10312, 0x0061 };
    uint32_t const ces[9] = { 0x465E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_317)
{
    // 10312 0041;	
    // (êåí) OLD ITALIC LETTER KU	[465E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10312, 0x0041 };
    uint32_t const ces[9] = { 0x465E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_318)
{
    // 10312 0062;	
    // (êåí) OLD ITALIC LETTER KU	[465E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10312, 0x0062 };
    uint32_t const ces[9] = { 0x465E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_319)
{
    // 10313 0021;	
    // (êåì) OLD ITALIC LETTER ER	[465F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10313, 0x0021 };
    uint32_t const ces[9] = { 0x465F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_320)
{
    // 10313 003F;	
    // (êåì) OLD ITALIC LETTER ER	[465F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10313, 0x003F };
    uint32_t const ces[9] = { 0x465F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_321)
{
    // 10313 0061;	
    // (êåì) OLD ITALIC LETTER ER	[465F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10313, 0x0061 };
    uint32_t const ces[9] = { 0x465F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_322)
{
    // 10313 0041;	
    // (êåì) OLD ITALIC LETTER ER	[465F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10313, 0x0041 };
    uint32_t const ces[9] = { 0x465F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_323)
{
    // 10313 0062;	
    // (êåì) OLD ITALIC LETTER ER	[465F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10313, 0x0062 };
    uint32_t const ces[9] = { 0x465F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_324)
{
    // 10314 0021;	
    // (êåî) OLD ITALIC LETTER ES	[4660 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10314, 0x0021 };
    uint32_t const ces[9] = { 0x4660, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_325)
{
    // 10314 003F;	
    // (êåî) OLD ITALIC LETTER ES	[4660 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10314, 0x003F };
    uint32_t const ces[9] = { 0x4660, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_326)
{
    // 10314 0061;	
    // (êåî) OLD ITALIC LETTER ES	[4660 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10314, 0x0061 };
    uint32_t const ces[9] = { 0x4660, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_327)
{
    // 10314 0041;	
    // (êåî) OLD ITALIC LETTER ES	[4660 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10314, 0x0041 };
    uint32_t const ces[9] = { 0x4660, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_328)
{
    // 10314 0062;	
    // (êåî) OLD ITALIC LETTER ES	[4660 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10314, 0x0062 };
    uint32_t const ces[9] = { 0x4660, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_329)
{
    // 10315 0021;	
    // (êåï) OLD ITALIC LETTER TE	[4661 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10315, 0x0021 };
    uint32_t const ces[9] = { 0x4661, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_330)
{
    // 10315 003F;	
    // (êåï) OLD ITALIC LETTER TE	[4661 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10315, 0x003F };
    uint32_t const ces[9] = { 0x4661, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_331)
{
    // 10315 0061;	
    // (êåï) OLD ITALIC LETTER TE	[4661 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10315, 0x0061 };
    uint32_t const ces[9] = { 0x4661, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_332)
{
    // 10315 0041;	
    // (êåï) OLD ITALIC LETTER TE	[4661 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10315, 0x0041 };
    uint32_t const ces[9] = { 0x4661, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_333)
{
    // 10315 0062;	
    // (êåï) OLD ITALIC LETTER TE	[4661 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10315, 0x0062 };
    uint32_t const ces[9] = { 0x4661, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_334)
{
    // 10316 0021;	
    // (êåñ) OLD ITALIC LETTER U	[4662 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10316, 0x0021 };
    uint32_t const ces[9] = { 0x4662, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_335)
{
    // 10316 003F;	
    // (êåñ) OLD ITALIC LETTER U	[4662 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10316, 0x003F };
    uint32_t const ces[9] = { 0x4662, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_336)
{
    // 10316 0061;	
    // (êåñ) OLD ITALIC LETTER U	[4662 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10316, 0x0061 };
    uint32_t const ces[9] = { 0x4662, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_337)
{
    // 10316 0041;	
    // (êåñ) OLD ITALIC LETTER U	[4662 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10316, 0x0041 };
    uint32_t const ces[9] = { 0x4662, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_338)
{
    // 10316 0062;	
    // (êåñ) OLD ITALIC LETTER U	[4662 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10316, 0x0062 };
    uint32_t const ces[9] = { 0x4662, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_339)
{
    // 10317 0021;	
    // (êåó) OLD ITALIC LETTER EKS	[4663 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10317, 0x0021 };
    uint32_t const ces[9] = { 0x4663, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_340)
{
    // 10317 003F;	
    // (êåó) OLD ITALIC LETTER EKS	[4663 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10317, 0x003F };
    uint32_t const ces[9] = { 0x4663, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_341)
{
    // 10317 0061;	
    // (êåó) OLD ITALIC LETTER EKS	[4663 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10317, 0x0061 };
    uint32_t const ces[9] = { 0x4663, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_342)
{
    // 10317 0041;	
    // (êåó) OLD ITALIC LETTER EKS	[4663 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10317, 0x0041 };
    uint32_t const ces[9] = { 0x4663, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_343)
{
    // 10317 0062;	
    // (êåó) OLD ITALIC LETTER EKS	[4663 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10317, 0x0062 };
    uint32_t const ces[9] = { 0x4663, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_344)
{
    // 10318 0021;	
    // (êåò) OLD ITALIC LETTER PHE	[4664 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10318, 0x0021 };
    uint32_t const ces[9] = { 0x4664, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_345)
{
    // 10318 003F;	
    // (êåò) OLD ITALIC LETTER PHE	[4664 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10318, 0x003F };
    uint32_t const ces[9] = { 0x4664, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_346)
{
    // 10318 0061;	
    // (êåò) OLD ITALIC LETTER PHE	[4664 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10318, 0x0061 };
    uint32_t const ces[9] = { 0x4664, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_347)
{
    // 10318 0041;	
    // (êåò) OLD ITALIC LETTER PHE	[4664 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10318, 0x0041 };
    uint32_t const ces[9] = { 0x4664, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_348)
{
    // 10318 0062;	
    // (êåò) OLD ITALIC LETTER PHE	[4664 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10318, 0x0062 };
    uint32_t const ces[9] = { 0x4664, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_349)
{
    // 10319 0021;	
    // (êåô) OLD ITALIC LETTER KHE	[4665 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10319, 0x0021 };
    uint32_t const ces[9] = { 0x4665, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_350)
{
    // 10319 003F;	
    // (êåô) OLD ITALIC LETTER KHE	[4665 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10319, 0x003F };
    uint32_t const ces[9] = { 0x4665, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_351)
{
    // 10319 0061;	
    // (êåô) OLD ITALIC LETTER KHE	[4665 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10319, 0x0061 };
    uint32_t const ces[9] = { 0x4665, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_352)
{
    // 10319 0041;	
    // (êåô) OLD ITALIC LETTER KHE	[4665 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10319, 0x0041 };
    uint32_t const ces[9] = { 0x4665, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_353)
{
    // 10319 0062;	
    // (êåô) OLD ITALIC LETTER KHE	[4665 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10319, 0x0062 };
    uint32_t const ces[9] = { 0x4665, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_354)
{
    // 1031A 0021;	
    // (êåö) OLD ITALIC LETTER EF	[4666 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1031A, 0x0021 };
    uint32_t const ces[9] = { 0x4666, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_355)
{
    // 1031A 003F;	
    // (êåö) OLD ITALIC LETTER EF	[4666 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1031A, 0x003F };
    uint32_t const ces[9] = { 0x4666, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_356)
{
    // 1031A 0061;	
    // (êåö) OLD ITALIC LETTER EF	[4666 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1031A, 0x0061 };
    uint32_t const ces[9] = { 0x4666, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_357)
{
    // 1031A 0041;	
    // (êåö) OLD ITALIC LETTER EF	[4666 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1031A, 0x0041 };
    uint32_t const ces[9] = { 0x4666, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_358)
{
    // 1031A 0062;	
    // (êåö) OLD ITALIC LETTER EF	[4666 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1031A, 0x0062 };
    uint32_t const ces[9] = { 0x4666, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_359)
{
    // 1031B 0021;	
    // (êåõ) OLD ITALIC LETTER ERS	[4667 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1031B, 0x0021 };
    uint32_t const ces[9] = { 0x4667, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_360)
{
    // 1031B 003F;	
    // (êåõ) OLD ITALIC LETTER ERS	[4667 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1031B, 0x003F };
    uint32_t const ces[9] = { 0x4667, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_361)
{
    // 1031B 0061;	
    // (êåõ) OLD ITALIC LETTER ERS	[4667 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1031B, 0x0061 };
    uint32_t const ces[9] = { 0x4667, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_362)
{
    // 1031B 0041;	
    // (êåõ) OLD ITALIC LETTER ERS	[4667 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1031B, 0x0041 };
    uint32_t const ces[9] = { 0x4667, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_363)
{
    // 1031B 0062;	
    // (êåõ) OLD ITALIC LETTER ERS	[4667 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1031B, 0x0062 };
    uint32_t const ces[9] = { 0x4667, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_364)
{
    // 1031C 0021;	
    // (êåú) OLD ITALIC LETTER CHE	[4668 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1031C, 0x0021 };
    uint32_t const ces[9] = { 0x4668, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_365)
{
    // 1031C 003F;	
    // (êåú) OLD ITALIC LETTER CHE	[4668 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1031C, 0x003F };
    uint32_t const ces[9] = { 0x4668, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_366)
{
    // 1031C 0061;	
    // (êåú) OLD ITALIC LETTER CHE	[4668 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1031C, 0x0061 };
    uint32_t const ces[9] = { 0x4668, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_367)
{
    // 1031C 0041;	
    // (êåú) OLD ITALIC LETTER CHE	[4668 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1031C, 0x0041 };
    uint32_t const ces[9] = { 0x4668, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_368)
{
    // 1031C 0062;	
    // (êåú) OLD ITALIC LETTER CHE	[4668 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1031C, 0x0062 };
    uint32_t const ces[9] = { 0x4668, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_369)
{
    // 1031D 0021;	
    // (êåù) OLD ITALIC LETTER II	[4669 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1031D, 0x0021 };
    uint32_t const ces[9] = { 0x4669, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_370)
{
    // 1031D 003F;	
    // (êåù) OLD ITALIC LETTER II	[4669 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1031D, 0x003F };
    uint32_t const ces[9] = { 0x4669, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_371)
{
    // 1031D 0061;	
    // (êåù) OLD ITALIC LETTER II	[4669 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1031D, 0x0061 };
    uint32_t const ces[9] = { 0x4669, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_372)
{
    // 1031D 0041;	
    // (êåù) OLD ITALIC LETTER II	[4669 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1031D, 0x0041 };
    uint32_t const ces[9] = { 0x4669, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_373)
{
    // 1031D 0062;	
    // (êåù) OLD ITALIC LETTER II	[4669 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1031D, 0x0062 };
    uint32_t const ces[9] = { 0x4669, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_374)
{
    // 1031E 0021;	
    // (êåû) OLD ITALIC LETTER UU	[466A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1031E, 0x0021 };
    uint32_t const ces[9] = { 0x466A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_375)
{
    // 1031E 003F;	
    // (êåû) OLD ITALIC LETTER UU	[466A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1031E, 0x003F };
    uint32_t const ces[9] = { 0x466A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_376)
{
    // 1031E 0061;	
    // (êåû) OLD ITALIC LETTER UU	[466A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1031E, 0x0061 };
    uint32_t const ces[9] = { 0x466A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_377)
{
    // 1031E 0041;	
    // (êåû) OLD ITALIC LETTER UU	[466A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1031E, 0x0041 };
    uint32_t const ces[9] = { 0x466A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_378)
{
    // 1031E 0062;	
    // (êåû) OLD ITALIC LETTER UU	[466A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1031E, 0x0062 };
    uint32_t const ces[9] = { 0x466A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_379)
{
    // 1032D 0021;	
    // (êå≠) OLD ITALIC LETTER YE	[466B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1032D, 0x0021 };
    uint32_t const ces[9] = { 0x466B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_380)
{
    // 1032D 003F;	
    // (êå≠) OLD ITALIC LETTER YE	[466B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1032D, 0x003F };
    uint32_t const ces[9] = { 0x466B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_381)
{
    // 1032D 0061;	
    // (êå≠) OLD ITALIC LETTER YE	[466B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1032D, 0x0061 };
    uint32_t const ces[9] = { 0x466B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_382)
{
    // 1032D 0041;	
    // (êå≠) OLD ITALIC LETTER YE	[466B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1032D, 0x0041 };
    uint32_t const ces[9] = { 0x466B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_383)
{
    // 1032D 0062;	
    // (êå≠) OLD ITALIC LETTER YE	[466B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1032D, 0x0062 };
    uint32_t const ces[9] = { 0x466B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_384)
{
    // 1032E 0021;	
    // (êåÆ) OLD ITALIC LETTER NORTHERN TSE	[466C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1032E, 0x0021 };
    uint32_t const ces[9] = { 0x466C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_385)
{
    // 1032E 003F;	
    // (êåÆ) OLD ITALIC LETTER NORTHERN TSE	[466C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1032E, 0x003F };
    uint32_t const ces[9] = { 0x466C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_386)
{
    // 1032E 0061;	
    // (êåÆ) OLD ITALIC LETTER NORTHERN TSE	[466C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1032E, 0x0061 };
    uint32_t const ces[9] = { 0x466C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_387)
{
    // 1032E 0041;	
    // (êåÆ) OLD ITALIC LETTER NORTHERN TSE	[466C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1032E, 0x0041 };
    uint32_t const ces[9] = { 0x466C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_388)
{
    // 1032E 0062;	
    // (êåÆ) OLD ITALIC LETTER NORTHERN TSE	[466C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1032E, 0x0062 };
    uint32_t const ces[9] = { 0x466C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_389)
{
    // 1032F 0021;	
    // (êåØ) OLD ITALIC LETTER SOUTHERN TSE	[466D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1032F, 0x0021 };
    uint32_t const ces[9] = { 0x466D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_390)
{
    // 1032F 003F;	
    // (êåØ) OLD ITALIC LETTER SOUTHERN TSE	[466D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1032F, 0x003F };
    uint32_t const ces[9] = { 0x466D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_391)
{
    // 1032F 0061;	
    // (êåØ) OLD ITALIC LETTER SOUTHERN TSE	[466D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1032F, 0x0061 };
    uint32_t const ces[9] = { 0x466D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_392)
{
    // 1032F 0041;	
    // (êåØ) OLD ITALIC LETTER SOUTHERN TSE	[466D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1032F, 0x0041 };
    uint32_t const ces[9] = { 0x466D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_393)
{
    // 1032F 0062;	
    // (êåØ) OLD ITALIC LETTER SOUTHERN TSE	[466D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1032F, 0x0062 };
    uint32_t const ces[9] = { 0x466D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_394)
{
    // 10330 0021;	
    // (êå∞) GOTHIC LETTER AHSA	[466E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10330, 0x0021 };
    uint32_t const ces[9] = { 0x466E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_395)
{
    // 10330 003F;	
    // (êå∞) GOTHIC LETTER AHSA	[466E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10330, 0x003F };
    uint32_t const ces[9] = { 0x466E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_396)
{
    // 10330 0061;	
    // (êå∞) GOTHIC LETTER AHSA	[466E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10330, 0x0061 };
    uint32_t const ces[9] = { 0x466E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_397)
{
    // 10330 0041;	
    // (êå∞) GOTHIC LETTER AHSA	[466E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10330, 0x0041 };
    uint32_t const ces[9] = { 0x466E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_398)
{
    // 10330 0062;	
    // (êå∞) GOTHIC LETTER AHSA	[466E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10330, 0x0062 };
    uint32_t const ces[9] = { 0x466E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_399)
{
    // 10331 0021;	
    // (êå±) GOTHIC LETTER BAIRKAN	[466F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10331, 0x0021 };
    uint32_t const ces[9] = { 0x466F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_400)
{
    // 10331 003F;	
    // (êå±) GOTHIC LETTER BAIRKAN	[466F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10331, 0x003F };
    uint32_t const ces[9] = { 0x466F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_401)
{
    // 10331 0061;	
    // (êå±) GOTHIC LETTER BAIRKAN	[466F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10331, 0x0061 };
    uint32_t const ces[9] = { 0x466F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_402)
{
    // 10331 0041;	
    // (êå±) GOTHIC LETTER BAIRKAN	[466F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10331, 0x0041 };
    uint32_t const ces[9] = { 0x466F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_403)
{
    // 10331 0062;	
    // (êå±) GOTHIC LETTER BAIRKAN	[466F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10331, 0x0062 };
    uint32_t const ces[9] = { 0x466F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_404)
{
    // 10332 0021;	
    // (êå≤) GOTHIC LETTER GIBA	[4670 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10332, 0x0021 };
    uint32_t const ces[9] = { 0x4670, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_405)
{
    // 10332 003F;	
    // (êå≤) GOTHIC LETTER GIBA	[4670 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10332, 0x003F };
    uint32_t const ces[9] = { 0x4670, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_406)
{
    // 10332 0061;	
    // (êå≤) GOTHIC LETTER GIBA	[4670 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10332, 0x0061 };
    uint32_t const ces[9] = { 0x4670, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_407)
{
    // 10332 0041;	
    // (êå≤) GOTHIC LETTER GIBA	[4670 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10332, 0x0041 };
    uint32_t const ces[9] = { 0x4670, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_408)
{
    // 10332 0062;	
    // (êå≤) GOTHIC LETTER GIBA	[4670 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10332, 0x0062 };
    uint32_t const ces[9] = { 0x4670, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_409)
{
    // 10333 0021;	
    // (êå≥) GOTHIC LETTER DAGS	[4671 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10333, 0x0021 };
    uint32_t const ces[9] = { 0x4671, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_410)
{
    // 10333 003F;	
    // (êå≥) GOTHIC LETTER DAGS	[4671 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10333, 0x003F };
    uint32_t const ces[9] = { 0x4671, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_411)
{
    // 10333 0061;	
    // (êå≥) GOTHIC LETTER DAGS	[4671 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10333, 0x0061 };
    uint32_t const ces[9] = { 0x4671, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_412)
{
    // 10333 0041;	
    // (êå≥) GOTHIC LETTER DAGS	[4671 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10333, 0x0041 };
    uint32_t const ces[9] = { 0x4671, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_413)
{
    // 10333 0062;	
    // (êå≥) GOTHIC LETTER DAGS	[4671 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10333, 0x0062 };
    uint32_t const ces[9] = { 0x4671, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_414)
{
    // 10334 0021;	
    // (êå¥) GOTHIC LETTER AIHVUS	[4672 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10334, 0x0021 };
    uint32_t const ces[9] = { 0x4672, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_415)
{
    // 10334 003F;	
    // (êå¥) GOTHIC LETTER AIHVUS	[4672 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10334, 0x003F };
    uint32_t const ces[9] = { 0x4672, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_416)
{
    // 10334 0061;	
    // (êå¥) GOTHIC LETTER AIHVUS	[4672 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10334, 0x0061 };
    uint32_t const ces[9] = { 0x4672, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_417)
{
    // 10334 0041;	
    // (êå¥) GOTHIC LETTER AIHVUS	[4672 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10334, 0x0041 };
    uint32_t const ces[9] = { 0x4672, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_418)
{
    // 10334 0062;	
    // (êå¥) GOTHIC LETTER AIHVUS	[4672 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10334, 0x0062 };
    uint32_t const ces[9] = { 0x4672, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_419)
{
    // 10335 0021;	
    // (êåµ) GOTHIC LETTER QAIRTHRA	[4673 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10335, 0x0021 };
    uint32_t const ces[9] = { 0x4673, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_420)
{
    // 10335 003F;	
    // (êåµ) GOTHIC LETTER QAIRTHRA	[4673 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10335, 0x003F };
    uint32_t const ces[9] = { 0x4673, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_421)
{
    // 10335 0061;	
    // (êåµ) GOTHIC LETTER QAIRTHRA	[4673 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10335, 0x0061 };
    uint32_t const ces[9] = { 0x4673, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_422)
{
    // 10335 0041;	
    // (êåµ) GOTHIC LETTER QAIRTHRA	[4673 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10335, 0x0041 };
    uint32_t const ces[9] = { 0x4673, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_423)
{
    // 10335 0062;	
    // (êåµ) GOTHIC LETTER QAIRTHRA	[4673 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10335, 0x0062 };
    uint32_t const ces[9] = { 0x4673, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_424)
{
    // 10336 0021;	
    // (êå∂) GOTHIC LETTER IUJA	[4674 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10336, 0x0021 };
    uint32_t const ces[9] = { 0x4674, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_425)
{
    // 10336 003F;	
    // (êå∂) GOTHIC LETTER IUJA	[4674 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10336, 0x003F };
    uint32_t const ces[9] = { 0x4674, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_426)
{
    // 10336 0061;	
    // (êå∂) GOTHIC LETTER IUJA	[4674 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10336, 0x0061 };
    uint32_t const ces[9] = { 0x4674, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_427)
{
    // 10336 0041;	
    // (êå∂) GOTHIC LETTER IUJA	[4674 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10336, 0x0041 };
    uint32_t const ces[9] = { 0x4674, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_428)
{
    // 10336 0062;	
    // (êå∂) GOTHIC LETTER IUJA	[4674 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10336, 0x0062 };
    uint32_t const ces[9] = { 0x4674, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_429)
{
    // 10337 0021;	
    // (êå∑) GOTHIC LETTER HAGL	[4675 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10337, 0x0021 };
    uint32_t const ces[9] = { 0x4675, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_430)
{
    // 10337 003F;	
    // (êå∑) GOTHIC LETTER HAGL	[4675 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10337, 0x003F };
    uint32_t const ces[9] = { 0x4675, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_431)
{
    // 10337 0061;	
    // (êå∑) GOTHIC LETTER HAGL	[4675 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10337, 0x0061 };
    uint32_t const ces[9] = { 0x4675, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_432)
{
    // 10337 0041;	
    // (êå∑) GOTHIC LETTER HAGL	[4675 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10337, 0x0041 };
    uint32_t const ces[9] = { 0x4675, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_433)
{
    // 10337 0062;	
    // (êå∑) GOTHIC LETTER HAGL	[4675 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10337, 0x0062 };
    uint32_t const ces[9] = { 0x4675, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_434)
{
    // 10338 0021;	
    // (êå∏) GOTHIC LETTER THIUTH	[4676 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10338, 0x0021 };
    uint32_t const ces[9] = { 0x4676, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_435)
{
    // 10338 003F;	
    // (êå∏) GOTHIC LETTER THIUTH	[4676 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10338, 0x003F };
    uint32_t const ces[9] = { 0x4676, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_436)
{
    // 10338 0061;	
    // (êå∏) GOTHIC LETTER THIUTH	[4676 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10338, 0x0061 };
    uint32_t const ces[9] = { 0x4676, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_437)
{
    // 10338 0041;	
    // (êå∏) GOTHIC LETTER THIUTH	[4676 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10338, 0x0041 };
    uint32_t const ces[9] = { 0x4676, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_438)
{
    // 10338 0062;	
    // (êå∏) GOTHIC LETTER THIUTH	[4676 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10338, 0x0062 };
    uint32_t const ces[9] = { 0x4676, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_439)
{
    // 10339 0021;	
    // (êåπ) GOTHIC LETTER EIS	[4677 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10339, 0x0021 };
    uint32_t const ces[9] = { 0x4677, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_440)
{
    // 10339 003F;	
    // (êåπ) GOTHIC LETTER EIS	[4677 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10339, 0x003F };
    uint32_t const ces[9] = { 0x4677, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_441)
{
    // 10339 0061;	
    // (êåπ) GOTHIC LETTER EIS	[4677 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10339, 0x0061 };
    uint32_t const ces[9] = { 0x4677, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_442)
{
    // 10339 0041;	
    // (êåπ) GOTHIC LETTER EIS	[4677 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10339, 0x0041 };
    uint32_t const ces[9] = { 0x4677, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_443)
{
    // 10339 0062;	
    // (êåπ) GOTHIC LETTER EIS	[4677 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10339, 0x0062 };
    uint32_t const ces[9] = { 0x4677, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_444)
{
    // 1033A 0021;	
    // (êå∫) GOTHIC LETTER KUSMA	[4678 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1033A, 0x0021 };
    uint32_t const ces[9] = { 0x4678, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_445)
{
    // 1033A 003F;	
    // (êå∫) GOTHIC LETTER KUSMA	[4678 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1033A, 0x003F };
    uint32_t const ces[9] = { 0x4678, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_446)
{
    // 1033A 0061;	
    // (êå∫) GOTHIC LETTER KUSMA	[4678 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1033A, 0x0061 };
    uint32_t const ces[9] = { 0x4678, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_447)
{
    // 1033A 0041;	
    // (êå∫) GOTHIC LETTER KUSMA	[4678 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1033A, 0x0041 };
    uint32_t const ces[9] = { 0x4678, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_448)
{
    // 1033A 0062;	
    // (êå∫) GOTHIC LETTER KUSMA	[4678 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1033A, 0x0062 };
    uint32_t const ces[9] = { 0x4678, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_449)
{
    // 1033B 0021;	
    // (êåª) GOTHIC LETTER LAGUS	[4679 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1033B, 0x0021 };
    uint32_t const ces[9] = { 0x4679, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_450)
{
    // 1033B 003F;	
    // (êåª) GOTHIC LETTER LAGUS	[4679 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1033B, 0x003F };
    uint32_t const ces[9] = { 0x4679, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_451)
{
    // 1033B 0061;	
    // (êåª) GOTHIC LETTER LAGUS	[4679 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1033B, 0x0061 };
    uint32_t const ces[9] = { 0x4679, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_452)
{
    // 1033B 0041;	
    // (êåª) GOTHIC LETTER LAGUS	[4679 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1033B, 0x0041 };
    uint32_t const ces[9] = { 0x4679, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_453)
{
    // 1033B 0062;	
    // (êåª) GOTHIC LETTER LAGUS	[4679 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1033B, 0x0062 };
    uint32_t const ces[9] = { 0x4679, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_454)
{
    // 1033C 0021;	
    // (êåº) GOTHIC LETTER MANNA	[467A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1033C, 0x0021 };
    uint32_t const ces[9] = { 0x467A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_455)
{
    // 1033C 003F;	
    // (êåº) GOTHIC LETTER MANNA	[467A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1033C, 0x003F };
    uint32_t const ces[9] = { 0x467A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_456)
{
    // 1033C 0061;	
    // (êåº) GOTHIC LETTER MANNA	[467A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1033C, 0x0061 };
    uint32_t const ces[9] = { 0x467A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_457)
{
    // 1033C 0041;	
    // (êåº) GOTHIC LETTER MANNA	[467A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1033C, 0x0041 };
    uint32_t const ces[9] = { 0x467A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_458)
{
    // 1033C 0062;	
    // (êåº) GOTHIC LETTER MANNA	[467A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1033C, 0x0062 };
    uint32_t const ces[9] = { 0x467A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_459)
{
    // 1033D 0021;	
    // (êåΩ) GOTHIC LETTER NAUTHS	[467B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1033D, 0x0021 };
    uint32_t const ces[9] = { 0x467B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_460)
{
    // 1033D 003F;	
    // (êåΩ) GOTHIC LETTER NAUTHS	[467B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1033D, 0x003F };
    uint32_t const ces[9] = { 0x467B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_461)
{
    // 1033D 0061;	
    // (êåΩ) GOTHIC LETTER NAUTHS	[467B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1033D, 0x0061 };
    uint32_t const ces[9] = { 0x467B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_462)
{
    // 1033D 0041;	
    // (êåΩ) GOTHIC LETTER NAUTHS	[467B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1033D, 0x0041 };
    uint32_t const ces[9] = { 0x467B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_463)
{
    // 1033D 0062;	
    // (êåΩ) GOTHIC LETTER NAUTHS	[467B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1033D, 0x0062 };
    uint32_t const ces[9] = { 0x467B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_464)
{
    // 1033E 0021;	
    // (êåæ) GOTHIC LETTER JER	[467C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1033E, 0x0021 };
    uint32_t const ces[9] = { 0x467C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_465)
{
    // 1033E 003F;	
    // (êåæ) GOTHIC LETTER JER	[467C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1033E, 0x003F };
    uint32_t const ces[9] = { 0x467C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_466)
{
    // 1033E 0061;	
    // (êåæ) GOTHIC LETTER JER	[467C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1033E, 0x0061 };
    uint32_t const ces[9] = { 0x467C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_467)
{
    // 1033E 0041;	
    // (êåæ) GOTHIC LETTER JER	[467C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1033E, 0x0041 };
    uint32_t const ces[9] = { 0x467C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_468)
{
    // 1033E 0062;	
    // (êåæ) GOTHIC LETTER JER	[467C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1033E, 0x0062 };
    uint32_t const ces[9] = { 0x467C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_469)
{
    // 1033F 0021;	
    // (êåø) GOTHIC LETTER URUS	[467D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1033F, 0x0021 };
    uint32_t const ces[9] = { 0x467D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_470)
{
    // 1033F 003F;	
    // (êåø) GOTHIC LETTER URUS	[467D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1033F, 0x003F };
    uint32_t const ces[9] = { 0x467D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_471)
{
    // 1033F 0061;	
    // (êåø) GOTHIC LETTER URUS	[467D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1033F, 0x0061 };
    uint32_t const ces[9] = { 0x467D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_472)
{
    // 1033F 0041;	
    // (êåø) GOTHIC LETTER URUS	[467D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1033F, 0x0041 };
    uint32_t const ces[9] = { 0x467D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_473)
{
    // 1033F 0062;	
    // (êåø) GOTHIC LETTER URUS	[467D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1033F, 0x0062 };
    uint32_t const ces[9] = { 0x467D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_474)
{
    // 10340 0021;	
    // (êçÄ) GOTHIC LETTER PAIRTHRA	[467E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10340, 0x0021 };
    uint32_t const ces[9] = { 0x467E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_475)
{
    // 10340 003F;	
    // (êçÄ) GOTHIC LETTER PAIRTHRA	[467E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10340, 0x003F };
    uint32_t const ces[9] = { 0x467E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_476)
{
    // 10340 0061;	
    // (êçÄ) GOTHIC LETTER PAIRTHRA	[467E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10340, 0x0061 };
    uint32_t const ces[9] = { 0x467E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_477)
{
    // 10340 0041;	
    // (êçÄ) GOTHIC LETTER PAIRTHRA	[467E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10340, 0x0041 };
    uint32_t const ces[9] = { 0x467E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_478)
{
    // 10340 0062;	
    // (êçÄ) GOTHIC LETTER PAIRTHRA	[467E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10340, 0x0062 };
    uint32_t const ces[9] = { 0x467E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_479)
{
    // 10341 0021;	
    // (êçÅ) GOTHIC LETTER NINETY	[467F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10341, 0x0021 };
    uint32_t const ces[9] = { 0x467F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_480)
{
    // 10341 003F;	
    // (êçÅ) GOTHIC LETTER NINETY	[467F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10341, 0x003F };
    uint32_t const ces[9] = { 0x467F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_481)
{
    // 10341 0061;	
    // (êçÅ) GOTHIC LETTER NINETY	[467F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10341, 0x0061 };
    uint32_t const ces[9] = { 0x467F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_482)
{
    // 10341 0041;	
    // (êçÅ) GOTHIC LETTER NINETY	[467F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10341, 0x0041 };
    uint32_t const ces[9] = { 0x467F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_483)
{
    // 10341 0062;	
    // (êçÅ) GOTHIC LETTER NINETY	[467F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10341, 0x0062 };
    uint32_t const ces[9] = { 0x467F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_484)
{
    // 10342 0021;	
    // (êçÇ) GOTHIC LETTER RAIDA	[4680 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10342, 0x0021 };
    uint32_t const ces[9] = { 0x4680, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_485)
{
    // 10342 003F;	
    // (êçÇ) GOTHIC LETTER RAIDA	[4680 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10342, 0x003F };
    uint32_t const ces[9] = { 0x4680, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_486)
{
    // 10342 0061;	
    // (êçÇ) GOTHIC LETTER RAIDA	[4680 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10342, 0x0061 };
    uint32_t const ces[9] = { 0x4680, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_487)
{
    // 10342 0041;	
    // (êçÇ) GOTHIC LETTER RAIDA	[4680 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10342, 0x0041 };
    uint32_t const ces[9] = { 0x4680, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_488)
{
    // 10342 0062;	
    // (êçÇ) GOTHIC LETTER RAIDA	[4680 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10342, 0x0062 };
    uint32_t const ces[9] = { 0x4680, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_489)
{
    // 10343 0021;	
    // (êçÉ) GOTHIC LETTER SAUIL	[4681 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10343, 0x0021 };
    uint32_t const ces[9] = { 0x4681, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_490)
{
    // 10343 003F;	
    // (êçÉ) GOTHIC LETTER SAUIL	[4681 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10343, 0x003F };
    uint32_t const ces[9] = { 0x4681, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_491)
{
    // 10343 0061;	
    // (êçÉ) GOTHIC LETTER SAUIL	[4681 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10343, 0x0061 };
    uint32_t const ces[9] = { 0x4681, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_492)
{
    // 10343 0041;	
    // (êçÉ) GOTHIC LETTER SAUIL	[4681 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10343, 0x0041 };
    uint32_t const ces[9] = { 0x4681, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_493)
{
    // 10343 0062;	
    // (êçÉ) GOTHIC LETTER SAUIL	[4681 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10343, 0x0062 };
    uint32_t const ces[9] = { 0x4681, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_494)
{
    // 10344 0021;	
    // (êçÑ) GOTHIC LETTER TEIWS	[4682 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10344, 0x0021 };
    uint32_t const ces[9] = { 0x4682, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_495)
{
    // 10344 003F;	
    // (êçÑ) GOTHIC LETTER TEIWS	[4682 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10344, 0x003F };
    uint32_t const ces[9] = { 0x4682, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_496)
{
    // 10344 0061;	
    // (êçÑ) GOTHIC LETTER TEIWS	[4682 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10344, 0x0061 };
    uint32_t const ces[9] = { 0x4682, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_497)
{
    // 10344 0041;	
    // (êçÑ) GOTHIC LETTER TEIWS	[4682 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10344, 0x0041 };
    uint32_t const ces[9] = { 0x4682, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_498)
{
    // 10344 0062;	
    // (êçÑ) GOTHIC LETTER TEIWS	[4682 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10344, 0x0062 };
    uint32_t const ces[9] = { 0x4682, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_270_499)
{
    // 10345 0021;	
    // (êçÖ) GOTHIC LETTER WINJA	[4683 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10345, 0x0021 };
    uint32_t const ces[9] = { 0x4683, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

