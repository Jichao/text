// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_060_000)
{
    // 2505  ; [*0834.0020.0002] 
    // BOX DRAWINGS HEAVY TRIPLE DASH HORIZONTAL

    uint32_t const cps[1] = { 0x2505 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x834), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_001)
{
    // 2506  ; [*0835.0020.0002] 
    // BOX DRAWINGS LIGHT TRIPLE DASH VERTICAL

    uint32_t const cps[1] = { 0x2506 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x835), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_002)
{
    // 2507  ; [*0836.0020.0002] 
    // BOX DRAWINGS HEAVY TRIPLE DASH VERTICAL

    uint32_t const cps[1] = { 0x2507 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x836), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_003)
{
    // 2508  ; [*0837.0020.0002] 
    // BOX DRAWINGS LIGHT QUADRUPLE DASH HORIZONTAL

    uint32_t const cps[1] = { 0x2508 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x837), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_004)
{
    // 2509  ; [*0838.0020.0002] 
    // BOX DRAWINGS HEAVY QUADRUPLE DASH HORIZONTAL

    uint32_t const cps[1] = { 0x2509 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x838), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_005)
{
    // 250A  ; [*0839.0020.0002] 
    // BOX DRAWINGS LIGHT QUADRUPLE DASH VERTICAL

    uint32_t const cps[1] = { 0x250a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x839), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_006)
{
    // 250B  ; [*083A.0020.0002] 
    // BOX DRAWINGS HEAVY QUADRUPLE DASH VERTICAL

    uint32_t const cps[1] = { 0x250b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x83a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_007)
{
    // 250C  ; [*083B.0020.0002] 
    // BOX DRAWINGS LIGHT DOWN AND RIGHT

    uint32_t const cps[1] = { 0x250c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x83b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_008)
{
    // 250D  ; [*083C.0020.0002] 
    // BOX DRAWINGS DOWN LIGHT AND RIGHT HEAVY

    uint32_t const cps[1] = { 0x250d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x83c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_009)
{
    // 250E  ; [*083D.0020.0002] 
    // BOX DRAWINGS DOWN HEAVY AND RIGHT LIGHT

    uint32_t const cps[1] = { 0x250e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x83d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_010)
{
    // 250F  ; [*083E.0020.0002] 
    // BOX DRAWINGS HEAVY DOWN AND RIGHT

    uint32_t const cps[1] = { 0x250f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x83e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_011)
{
    // 2510  ; [*083F.0020.0002] 
    // BOX DRAWINGS LIGHT DOWN AND LEFT

    uint32_t const cps[1] = { 0x2510 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x83f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_012)
{
    // 2511  ; [*0840.0020.0002] 
    // BOX DRAWINGS DOWN LIGHT AND LEFT HEAVY

    uint32_t const cps[1] = { 0x2511 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x840), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_013)
{
    // 2512  ; [*0841.0020.0002] 
    // BOX DRAWINGS DOWN HEAVY AND LEFT LIGHT

    uint32_t const cps[1] = { 0x2512 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x841), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_014)
{
    // 2513  ; [*0842.0020.0002] 
    // BOX DRAWINGS HEAVY DOWN AND LEFT

    uint32_t const cps[1] = { 0x2513 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x842), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_015)
{
    // 2514  ; [*0843.0020.0002] 
    // BOX DRAWINGS LIGHT UP AND RIGHT

    uint32_t const cps[1] = { 0x2514 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x843), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_016)
{
    // 2515  ; [*0844.0020.0002] 
    // BOX DRAWINGS UP LIGHT AND RIGHT HEAVY

    uint32_t const cps[1] = { 0x2515 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x844), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_017)
{
    // 2516  ; [*0845.0020.0002] 
    // BOX DRAWINGS UP HEAVY AND RIGHT LIGHT

    uint32_t const cps[1] = { 0x2516 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x845), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_018)
{
    // 2517  ; [*0846.0020.0002] 
    // BOX DRAWINGS HEAVY UP AND RIGHT

    uint32_t const cps[1] = { 0x2517 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x846), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_019)
{
    // 2518  ; [*0847.0020.0002] 
    // BOX DRAWINGS LIGHT UP AND LEFT

    uint32_t const cps[1] = { 0x2518 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x847), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_020)
{
    // 2519  ; [*0848.0020.0002] 
    // BOX DRAWINGS UP LIGHT AND LEFT HEAVY

    uint32_t const cps[1] = { 0x2519 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x848), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_021)
{
    // 251A  ; [*0849.0020.0002] 
    // BOX DRAWINGS UP HEAVY AND LEFT LIGHT

    uint32_t const cps[1] = { 0x251a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x849), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_022)
{
    // 251B  ; [*084A.0020.0002] 
    // BOX DRAWINGS HEAVY UP AND LEFT

    uint32_t const cps[1] = { 0x251b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x84a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_023)
{
    // 251C  ; [*084B.0020.0002] 
    // BOX DRAWINGS LIGHT VERTICAL AND RIGHT

    uint32_t const cps[1] = { 0x251c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x84b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_024)
{
    // 251D  ; [*084C.0020.0002] 
    // BOX DRAWINGS VERTICAL LIGHT AND RIGHT HEAVY

    uint32_t const cps[1] = { 0x251d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x84c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_025)
{
    // 251E  ; [*084D.0020.0002] 
    // BOX DRAWINGS UP HEAVY AND RIGHT DOWN LIGHT

    uint32_t const cps[1] = { 0x251e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x84d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_026)
{
    // 251F  ; [*084E.0020.0002] 
    // BOX DRAWINGS DOWN HEAVY AND RIGHT UP LIGHT

    uint32_t const cps[1] = { 0x251f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x84e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_027)
{
    // 2520  ; [*084F.0020.0002] 
    // BOX DRAWINGS VERTICAL HEAVY AND RIGHT LIGHT

    uint32_t const cps[1] = { 0x2520 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x84f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_028)
{
    // 2521  ; [*0850.0020.0002] 
    // BOX DRAWINGS DOWN LIGHT AND RIGHT UP HEAVY

    uint32_t const cps[1] = { 0x2521 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x850), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_029)
{
    // 2522  ; [*0851.0020.0002] 
    // BOX DRAWINGS UP LIGHT AND RIGHT DOWN HEAVY

    uint32_t const cps[1] = { 0x2522 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x851), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_030)
{
    // 2523  ; [*0852.0020.0002] 
    // BOX DRAWINGS HEAVY VERTICAL AND RIGHT

    uint32_t const cps[1] = { 0x2523 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x852), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_031)
{
    // 2524  ; [*0853.0020.0002] 
    // BOX DRAWINGS LIGHT VERTICAL AND LEFT

    uint32_t const cps[1] = { 0x2524 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x853), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_032)
{
    // 2525  ; [*0854.0020.0002] 
    // BOX DRAWINGS VERTICAL LIGHT AND LEFT HEAVY

    uint32_t const cps[1] = { 0x2525 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x854), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_033)
{
    // 2526  ; [*0855.0020.0002] 
    // BOX DRAWINGS UP HEAVY AND LEFT DOWN LIGHT

    uint32_t const cps[1] = { 0x2526 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x855), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_034)
{
    // 2527  ; [*0856.0020.0002] 
    // BOX DRAWINGS DOWN HEAVY AND LEFT UP LIGHT

    uint32_t const cps[1] = { 0x2527 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x856), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_035)
{
    // 2528  ; [*0857.0020.0002] 
    // BOX DRAWINGS VERTICAL HEAVY AND LEFT LIGHT

    uint32_t const cps[1] = { 0x2528 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x857), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_036)
{
    // 2529  ; [*0858.0020.0002] 
    // BOX DRAWINGS DOWN LIGHT AND LEFT UP HEAVY

    uint32_t const cps[1] = { 0x2529 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x858), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_037)
{
    // 252A  ; [*0859.0020.0002] 
    // BOX DRAWINGS UP LIGHT AND LEFT DOWN HEAVY

    uint32_t const cps[1] = { 0x252a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x859), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_038)
{
    // 252B  ; [*085A.0020.0002] 
    // BOX DRAWINGS HEAVY VERTICAL AND LEFT

    uint32_t const cps[1] = { 0x252b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x85a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_039)
{
    // 252C  ; [*085B.0020.0002] 
    // BOX DRAWINGS LIGHT DOWN AND HORIZONTAL

    uint32_t const cps[1] = { 0x252c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x85b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_040)
{
    // 252D  ; [*085C.0020.0002] 
    // BOX DRAWINGS LEFT HEAVY AND RIGHT DOWN LIGHT

    uint32_t const cps[1] = { 0x252d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x85c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_041)
{
    // 252E  ; [*085D.0020.0002] 
    // BOX DRAWINGS RIGHT HEAVY AND LEFT DOWN LIGHT

    uint32_t const cps[1] = { 0x252e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x85d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_042)
{
    // 252F  ; [*085E.0020.0002] 
    // BOX DRAWINGS DOWN LIGHT AND HORIZONTAL HEAVY

    uint32_t const cps[1] = { 0x252f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x85e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_043)
{
    // 2530  ; [*085F.0020.0002] 
    // BOX DRAWINGS DOWN HEAVY AND HORIZONTAL LIGHT

    uint32_t const cps[1] = { 0x2530 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x85f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_044)
{
    // 2531  ; [*0860.0020.0002] 
    // BOX DRAWINGS RIGHT LIGHT AND LEFT DOWN HEAVY

    uint32_t const cps[1] = { 0x2531 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x860), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_045)
{
    // 2532  ; [*0861.0020.0002] 
    // BOX DRAWINGS LEFT LIGHT AND RIGHT DOWN HEAVY

    uint32_t const cps[1] = { 0x2532 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x861), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_046)
{
    // 2533  ; [*0862.0020.0002] 
    // BOX DRAWINGS HEAVY DOWN AND HORIZONTAL

    uint32_t const cps[1] = { 0x2533 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x862), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_047)
{
    // 2534  ; [*0863.0020.0002] 
    // BOX DRAWINGS LIGHT UP AND HORIZONTAL

    uint32_t const cps[1] = { 0x2534 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x863), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_048)
{
    // 2535  ; [*0864.0020.0002] 
    // BOX DRAWINGS LEFT HEAVY AND RIGHT UP LIGHT

    uint32_t const cps[1] = { 0x2535 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x864), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_049)
{
    // 2536  ; [*0865.0020.0002] 
    // BOX DRAWINGS RIGHT HEAVY AND LEFT UP LIGHT

    uint32_t const cps[1] = { 0x2536 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x865), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_050)
{
    // 2537  ; [*0866.0020.0002] 
    // BOX DRAWINGS UP LIGHT AND HORIZONTAL HEAVY

    uint32_t const cps[1] = { 0x2537 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x866), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_051)
{
    // 2538  ; [*0867.0020.0002] 
    // BOX DRAWINGS UP HEAVY AND HORIZONTAL LIGHT

    uint32_t const cps[1] = { 0x2538 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x867), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_052)
{
    // 2539  ; [*0868.0020.0002] 
    // BOX DRAWINGS RIGHT LIGHT AND LEFT UP HEAVY

    uint32_t const cps[1] = { 0x2539 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x868), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_053)
{
    // 253A  ; [*0869.0020.0002] 
    // BOX DRAWINGS LEFT LIGHT AND RIGHT UP HEAVY

    uint32_t const cps[1] = { 0x253a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x869), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_054)
{
    // 253B  ; [*086A.0020.0002] 
    // BOX DRAWINGS HEAVY UP AND HORIZONTAL

    uint32_t const cps[1] = { 0x253b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x86a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_055)
{
    // 253C  ; [*086B.0020.0002] 
    // BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL

    uint32_t const cps[1] = { 0x253c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x86b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_056)
{
    // 253D  ; [*086C.0020.0002] 
    // BOX DRAWINGS LEFT HEAVY AND RIGHT VERTICAL LIGHT

    uint32_t const cps[1] = { 0x253d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x86c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_057)
{
    // 253E  ; [*086D.0020.0002] 
    // BOX DRAWINGS RIGHT HEAVY AND LEFT VERTICAL LIGHT

    uint32_t const cps[1] = { 0x253e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x86d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_058)
{
    // 253F  ; [*086E.0020.0002] 
    // BOX DRAWINGS VERTICAL LIGHT AND HORIZONTAL HEAVY

    uint32_t const cps[1] = { 0x253f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x86e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_059)
{
    // 2540  ; [*086F.0020.0002] 
    // BOX DRAWINGS UP HEAVY AND DOWN HORIZONTAL LIGHT

    uint32_t const cps[1] = { 0x2540 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x86f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_060)
{
    // 2541  ; [*0870.0020.0002] 
    // BOX DRAWINGS DOWN HEAVY AND UP HORIZONTAL LIGHT

    uint32_t const cps[1] = { 0x2541 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x870), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_061)
{
    // 2542  ; [*0871.0020.0002] 
    // BOX DRAWINGS VERTICAL HEAVY AND HORIZONTAL LIGHT

    uint32_t const cps[1] = { 0x2542 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x871), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_062)
{
    // 2543  ; [*0872.0020.0002] 
    // BOX DRAWINGS LEFT UP HEAVY AND RIGHT DOWN LIGHT

    uint32_t const cps[1] = { 0x2543 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x872), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_063)
{
    // 2544  ; [*0873.0020.0002] 
    // BOX DRAWINGS RIGHT UP HEAVY AND LEFT DOWN LIGHT

    uint32_t const cps[1] = { 0x2544 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x873), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_064)
{
    // 2545  ; [*0874.0020.0002] 
    // BOX DRAWINGS LEFT DOWN HEAVY AND RIGHT UP LIGHT

    uint32_t const cps[1] = { 0x2545 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x874), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_065)
{
    // 2546  ; [*0875.0020.0002] 
    // BOX DRAWINGS RIGHT DOWN HEAVY AND LEFT UP LIGHT

    uint32_t const cps[1] = { 0x2546 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x875), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_066)
{
    // 2547  ; [*0876.0020.0002] 
    // BOX DRAWINGS DOWN LIGHT AND UP HORIZONTAL HEAVY

    uint32_t const cps[1] = { 0x2547 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x876), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_067)
{
    // 2548  ; [*0877.0020.0002] 
    // BOX DRAWINGS UP LIGHT AND DOWN HORIZONTAL HEAVY

    uint32_t const cps[1] = { 0x2548 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x877), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_068)
{
    // 2549  ; [*0878.0020.0002] 
    // BOX DRAWINGS RIGHT LIGHT AND LEFT VERTICAL HEAVY

    uint32_t const cps[1] = { 0x2549 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x878), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_069)
{
    // 254A  ; [*0879.0020.0002] 
    // BOX DRAWINGS LEFT LIGHT AND RIGHT VERTICAL HEAVY

    uint32_t const cps[1] = { 0x254a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x879), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_070)
{
    // 254B  ; [*087A.0020.0002] 
    // BOX DRAWINGS HEAVY VERTICAL AND HORIZONTAL

    uint32_t const cps[1] = { 0x254b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x87a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_071)
{
    // 254C  ; [*087B.0020.0002] 
    // BOX DRAWINGS LIGHT DOUBLE DASH HORIZONTAL

    uint32_t const cps[1] = { 0x254c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x87b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_072)
{
    // 254D  ; [*087C.0020.0002] 
    // BOX DRAWINGS HEAVY DOUBLE DASH HORIZONTAL

    uint32_t const cps[1] = { 0x254d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x87c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_073)
{
    // 254E  ; [*087D.0020.0002] 
    // BOX DRAWINGS LIGHT DOUBLE DASH VERTICAL

    uint32_t const cps[1] = { 0x254e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x87d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_074)
{
    // 254F  ; [*087E.0020.0002] 
    // BOX DRAWINGS HEAVY DOUBLE DASH VERTICAL

    uint32_t const cps[1] = { 0x254f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x87e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_075)
{
    // 2550  ; [*087F.0020.0002] 
    // BOX DRAWINGS DOUBLE HORIZONTAL

    uint32_t const cps[1] = { 0x2550 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x87f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_076)
{
    // 2551  ; [*0880.0020.0002] 
    // BOX DRAWINGS DOUBLE VERTICAL

    uint32_t const cps[1] = { 0x2551 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x880), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_077)
{
    // 2552  ; [*0881.0020.0002] 
    // BOX DRAWINGS DOWN SINGLE AND RIGHT DOUBLE

    uint32_t const cps[1] = { 0x2552 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x881), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_078)
{
    // 2553  ; [*0882.0020.0002] 
    // BOX DRAWINGS DOWN DOUBLE AND RIGHT SINGLE

    uint32_t const cps[1] = { 0x2553 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x882), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_079)
{
    // 2554  ; [*0883.0020.0002] 
    // BOX DRAWINGS DOUBLE DOWN AND RIGHT

    uint32_t const cps[1] = { 0x2554 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x883), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_080)
{
    // 2555  ; [*0884.0020.0002] 
    // BOX DRAWINGS DOWN SINGLE AND LEFT DOUBLE

    uint32_t const cps[1] = { 0x2555 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x884), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_081)
{
    // 2556  ; [*0885.0020.0002] 
    // BOX DRAWINGS DOWN DOUBLE AND LEFT SINGLE

    uint32_t const cps[1] = { 0x2556 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x885), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_082)
{
    // 2557  ; [*0886.0020.0002] 
    // BOX DRAWINGS DOUBLE DOWN AND LEFT

    uint32_t const cps[1] = { 0x2557 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x886), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_083)
{
    // 2558  ; [*0887.0020.0002] 
    // BOX DRAWINGS UP SINGLE AND RIGHT DOUBLE

    uint32_t const cps[1] = { 0x2558 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x887), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_084)
{
    // 2559  ; [*0888.0020.0002] 
    // BOX DRAWINGS UP DOUBLE AND RIGHT SINGLE

    uint32_t const cps[1] = { 0x2559 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x888), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_085)
{
    // 255A  ; [*0889.0020.0002] 
    // BOX DRAWINGS DOUBLE UP AND RIGHT

    uint32_t const cps[1] = { 0x255a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x889), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_086)
{
    // 255B  ; [*088A.0020.0002] 
    // BOX DRAWINGS UP SINGLE AND LEFT DOUBLE

    uint32_t const cps[1] = { 0x255b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x88a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_087)
{
    // 255C  ; [*088B.0020.0002] 
    // BOX DRAWINGS UP DOUBLE AND LEFT SINGLE

    uint32_t const cps[1] = { 0x255c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x88b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_088)
{
    // 255D  ; [*088C.0020.0002] 
    // BOX DRAWINGS DOUBLE UP AND LEFT

    uint32_t const cps[1] = { 0x255d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x88c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_089)
{
    // 255E  ; [*088D.0020.0002] 
    // BOX DRAWINGS VERTICAL SINGLE AND RIGHT DOUBLE

    uint32_t const cps[1] = { 0x255e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x88d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_090)
{
    // 255F  ; [*088E.0020.0002] 
    // BOX DRAWINGS VERTICAL DOUBLE AND RIGHT SINGLE

    uint32_t const cps[1] = { 0x255f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x88e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_091)
{
    // 2560  ; [*088F.0020.0002] 
    // BOX DRAWINGS DOUBLE VERTICAL AND RIGHT

    uint32_t const cps[1] = { 0x2560 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x88f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_092)
{
    // 2561  ; [*0890.0020.0002] 
    // BOX DRAWINGS VERTICAL SINGLE AND LEFT DOUBLE

    uint32_t const cps[1] = { 0x2561 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x890), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_093)
{
    // 2562  ; [*0891.0020.0002] 
    // BOX DRAWINGS VERTICAL DOUBLE AND LEFT SINGLE

    uint32_t const cps[1] = { 0x2562 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x891), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_094)
{
    // 2563  ; [*0892.0020.0002] 
    // BOX DRAWINGS DOUBLE VERTICAL AND LEFT

    uint32_t const cps[1] = { 0x2563 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x892), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_095)
{
    // 2564  ; [*0893.0020.0002] 
    // BOX DRAWINGS DOWN SINGLE AND HORIZONTAL DOUBLE

    uint32_t const cps[1] = { 0x2564 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x893), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_096)
{
    // 2565  ; [*0894.0020.0002] 
    // BOX DRAWINGS DOWN DOUBLE AND HORIZONTAL SINGLE

    uint32_t const cps[1] = { 0x2565 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x894), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_097)
{
    // 2566  ; [*0895.0020.0002] 
    // BOX DRAWINGS DOUBLE DOWN AND HORIZONTAL

    uint32_t const cps[1] = { 0x2566 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x895), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_098)
{
    // 2567  ; [*0896.0020.0002] 
    // BOX DRAWINGS UP SINGLE AND HORIZONTAL DOUBLE

    uint32_t const cps[1] = { 0x2567 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x896), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_099)
{
    // 2568  ; [*0897.0020.0002] 
    // BOX DRAWINGS UP DOUBLE AND HORIZONTAL SINGLE

    uint32_t const cps[1] = { 0x2568 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x897), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_100)
{
    // 2569  ; [*0898.0020.0002] 
    // BOX DRAWINGS DOUBLE UP AND HORIZONTAL

    uint32_t const cps[1] = { 0x2569 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x898), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_101)
{
    // 256A  ; [*0899.0020.0002] 
    // BOX DRAWINGS VERTICAL SINGLE AND HORIZONTAL DOUBLE

    uint32_t const cps[1] = { 0x256a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x899), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_102)
{
    // 256B  ; [*089A.0020.0002] 
    // BOX DRAWINGS VERTICAL DOUBLE AND HORIZONTAL SINGLE

    uint32_t const cps[1] = { 0x256b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x89a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_103)
{
    // 256C  ; [*089B.0020.0002] 
    // BOX DRAWINGS DOUBLE VERTICAL AND HORIZONTAL

    uint32_t const cps[1] = { 0x256c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x89b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_104)
{
    // 256D  ; [*089C.0020.0002] 
    // BOX DRAWINGS LIGHT ARC DOWN AND RIGHT

    uint32_t const cps[1] = { 0x256d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x89c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_105)
{
    // 256E  ; [*089D.0020.0002] 
    // BOX DRAWINGS LIGHT ARC DOWN AND LEFT

    uint32_t const cps[1] = { 0x256e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x89d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_106)
{
    // 256F  ; [*089E.0020.0002] 
    // BOX DRAWINGS LIGHT ARC UP AND LEFT

    uint32_t const cps[1] = { 0x256f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x89e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_107)
{
    // 2570  ; [*089F.0020.0002] 
    // BOX DRAWINGS LIGHT ARC UP AND RIGHT

    uint32_t const cps[1] = { 0x2570 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x89f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_108)
{
    // 2571  ; [*08A0.0020.0002] 
    // BOX DRAWINGS LIGHT DIAGONAL UPPER RIGHT TO LOWER LEFT

    uint32_t const cps[1] = { 0x2571 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8a0), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_109)
{
    // 2572  ; [*08A1.0020.0002] 
    // BOX DRAWINGS LIGHT DIAGONAL UPPER LEFT TO LOWER RIGHT

    uint32_t const cps[1] = { 0x2572 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8a1), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_110)
{
    // 2573  ; [*08A2.0020.0002] 
    // BOX DRAWINGS LIGHT DIAGONAL CROSS

    uint32_t const cps[1] = { 0x2573 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8a2), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_111)
{
    // 2574  ; [*08A3.0020.0002] 
    // BOX DRAWINGS LIGHT LEFT

    uint32_t const cps[1] = { 0x2574 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8a3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_112)
{
    // 2575  ; [*08A4.0020.0002] 
    // BOX DRAWINGS LIGHT UP

    uint32_t const cps[1] = { 0x2575 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8a4), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_113)
{
    // 2576  ; [*08A5.0020.0002] 
    // BOX DRAWINGS LIGHT RIGHT

    uint32_t const cps[1] = { 0x2576 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8a5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_114)
{
    // 2577  ; [*08A6.0020.0002] 
    // BOX DRAWINGS LIGHT DOWN

    uint32_t const cps[1] = { 0x2577 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8a6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_115)
{
    // 2578  ; [*08A7.0020.0002] 
    // BOX DRAWINGS HEAVY LEFT

    uint32_t const cps[1] = { 0x2578 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8a7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_116)
{
    // 2579  ; [*08A8.0020.0002] 
    // BOX DRAWINGS HEAVY UP

    uint32_t const cps[1] = { 0x2579 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8a8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_117)
{
    // 257A  ; [*08A9.0020.0002] 
    // BOX DRAWINGS HEAVY RIGHT

    uint32_t const cps[1] = { 0x257a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8a9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_118)
{
    // 257B  ; [*08AA.0020.0002] 
    // BOX DRAWINGS HEAVY DOWN

    uint32_t const cps[1] = { 0x257b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8aa), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_119)
{
    // 257C  ; [*08AB.0020.0002] 
    // BOX DRAWINGS LIGHT LEFT AND HEAVY RIGHT

    uint32_t const cps[1] = { 0x257c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8ab), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_120)
{
    // 257D  ; [*08AC.0020.0002] 
    // BOX DRAWINGS LIGHT UP AND HEAVY DOWN

    uint32_t const cps[1] = { 0x257d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8ac), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_121)
{
    // 257E  ; [*08AD.0020.0002] 
    // BOX DRAWINGS HEAVY LEFT AND LIGHT RIGHT

    uint32_t const cps[1] = { 0x257e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8ad), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_122)
{
    // 257F  ; [*08AE.0020.0002] 
    // BOX DRAWINGS HEAVY UP AND LIGHT DOWN

    uint32_t const cps[1] = { 0x257f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8ae), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_123)
{
    // 2580  ; [*08AF.0020.0002] 
    // UPPER HALF BLOCK

    uint32_t const cps[1] = { 0x2580 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8af), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_124)
{
    // 2581  ; [*08B0.0020.0002] 
    // LOWER ONE EIGHTH BLOCK

    uint32_t const cps[1] = { 0x2581 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8b0), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_125)
{
    // 2582  ; [*08B1.0020.0002] 
    // LOWER ONE QUARTER BLOCK

    uint32_t const cps[1] = { 0x2582 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8b1), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_126)
{
    // 2583  ; [*08B2.0020.0002] 
    // LOWER THREE EIGHTHS BLOCK

    uint32_t const cps[1] = { 0x2583 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8b2), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_127)
{
    // 2584  ; [*08B3.0020.0002] 
    // LOWER HALF BLOCK

    uint32_t const cps[1] = { 0x2584 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8b3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_128)
{
    // 2585  ; [*08B4.0020.0002] 
    // LOWER FIVE EIGHTHS BLOCK

    uint32_t const cps[1] = { 0x2585 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8b4), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_129)
{
    // 2586  ; [*08B5.0020.0002] 
    // LOWER THREE QUARTERS BLOCK

    uint32_t const cps[1] = { 0x2586 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8b5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_130)
{
    // 2587  ; [*08B6.0020.0002] 
    // LOWER SEVEN EIGHTHS BLOCK

    uint32_t const cps[1] = { 0x2587 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8b6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_131)
{
    // 2588  ; [*08B7.0020.0002] 
    // FULL BLOCK

    uint32_t const cps[1] = { 0x2588 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8b7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_132)
{
    // 2589  ; [*08B8.0020.0002] 
    // LEFT SEVEN EIGHTHS BLOCK

    uint32_t const cps[1] = { 0x2589 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8b8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_133)
{
    // 258A  ; [*08B9.0020.0002] 
    // LEFT THREE QUARTERS BLOCK

    uint32_t const cps[1] = { 0x258a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8b9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_134)
{
    // 258B  ; [*08BA.0020.0002] 
    // LEFT FIVE EIGHTHS BLOCK

    uint32_t const cps[1] = { 0x258b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8ba), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_135)
{
    // 258C  ; [*08BB.0020.0002] 
    // LEFT HALF BLOCK

    uint32_t const cps[1] = { 0x258c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8bb), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_136)
{
    // 258D  ; [*08BC.0020.0002] 
    // LEFT THREE EIGHTHS BLOCK

    uint32_t const cps[1] = { 0x258d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8bc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_137)
{
    // 258E  ; [*08BD.0020.0002] 
    // LEFT ONE QUARTER BLOCK

    uint32_t const cps[1] = { 0x258e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8bd), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_138)
{
    // 258F  ; [*08BE.0020.0002] 
    // LEFT ONE EIGHTH BLOCK

    uint32_t const cps[1] = { 0x258f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8be), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_139)
{
    // 2590  ; [*08BF.0020.0002] 
    // RIGHT HALF BLOCK

    uint32_t const cps[1] = { 0x2590 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8bf), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_140)
{
    // 2591  ; [*08C0.0020.0002] 
    // LIGHT SHADE

    uint32_t const cps[1] = { 0x2591 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8c0), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_141)
{
    // 2592  ; [*08C1.0020.0002] 
    // MEDIUM SHADE

    uint32_t const cps[1] = { 0x2592 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8c1), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_142)
{
    // 2593  ; [*08C2.0020.0002] 
    // DARK SHADE

    uint32_t const cps[1] = { 0x2593 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8c2), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_143)
{
    // 2594  ; [*08C3.0020.0002] 
    // UPPER ONE EIGHTH BLOCK

    uint32_t const cps[1] = { 0x2594 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8c3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_144)
{
    // 2595  ; [*08C4.0020.0002] 
    // RIGHT ONE EIGHTH BLOCK

    uint32_t const cps[1] = { 0x2595 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8c4), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_145)
{
    // 2596  ; [*08C5.0020.0002] 
    // QUADRANT LOWER LEFT

    uint32_t const cps[1] = { 0x2596 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8c5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_146)
{
    // 2597  ; [*08C6.0020.0002] 
    // QUADRANT LOWER RIGHT

    uint32_t const cps[1] = { 0x2597 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8c6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_147)
{
    // 2598  ; [*08C7.0020.0002] 
    // QUADRANT UPPER LEFT

    uint32_t const cps[1] = { 0x2598 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_148)
{
    // 2599  ; [*08C8.0020.0002] 
    // QUADRANT UPPER LEFT AND LOWER LEFT AND LOWER RIGHT

    uint32_t const cps[1] = { 0x2599 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_060_149)
{
    // 259A  ; [*08C9.0020.0002] 
    // QUADRANT UPPER LEFT AND LOWER RIGHT

    uint32_t const cps[1] = { 0x259a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x8c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

