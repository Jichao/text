// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_186_000)
{
    // 0E44 0E10 0021;	
    // (ไฐ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER THO THAN	[2E2F 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E10, 0x0021 };
    uint32_t const ces[12] = { 0x2E2F, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_001)
{
    // 0E44 0E10 003F;	
    // (ไฐ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER THO THAN	[2E2F 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E10, 0x003F };
    uint32_t const ces[12] = { 0x2E2F, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_002)
{
    // 0E44 0E10 0061;	
    // (ไฐ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER THO THAN	[2E2F 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E10, 0x0061 };
    uint32_t const ces[12] = { 0x2E2F, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_003)
{
    // 0E44 0E10 0041;	
    // (ไฐ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER THO THAN	[2E2F 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E10, 0x0041 };
    uint32_t const ces[12] = { 0x2E2F, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_004)
{
    // 0E44 0E10 0062;	
    // (ไฐ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER THO THAN	[2E2F 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E10, 0x0062 };
    uint32_t const ces[12] = { 0x2E2F, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_005)
{
    // 0E11 0021;	
    // (ฑ) THAI CHARACTER THO NANGMONTHO	[2E30 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E11, 0x0021 };
    uint32_t const ces[9] = { 0x2E30, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_006)
{
    // 0E11 003F;	
    // (ฑ) THAI CHARACTER THO NANGMONTHO	[2E30 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E11, 0x003F };
    uint32_t const ces[9] = { 0x2E30, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_007)
{
    // 0E11 0061;	
    // (ฑ) THAI CHARACTER THO NANGMONTHO	[2E30 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E11, 0x0061 };
    uint32_t const ces[9] = { 0x2E30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_008)
{
    // 0E11 0041;	
    // (ฑ) THAI CHARACTER THO NANGMONTHO	[2E30 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E11, 0x0041 };
    uint32_t const ces[9] = { 0x2E30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_009)
{
    // 0E11 0062;	
    // (ฑ) THAI CHARACTER THO NANGMONTHO	[2E30 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E11, 0x0062 };
    uint32_t const ces[9] = { 0x2E30, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_010)
{
    // 0E40 0E11 0021;	
    // (เฑ) THAI CHARACTER SARA E, THAI CHARACTER THO NANGMONTHO	[2E30 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E11, 0x0021 };
    uint32_t const ces[12] = { 0x2E30, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_011)
{
    // 0E40 0E11 003F;	
    // (เฑ) THAI CHARACTER SARA E, THAI CHARACTER THO NANGMONTHO	[2E30 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E11, 0x003F };
    uint32_t const ces[12] = { 0x2E30, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_012)
{
    // 0E40 0E11 0061;	
    // (เฑ) THAI CHARACTER SARA E, THAI CHARACTER THO NANGMONTHO	[2E30 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E11, 0x0061 };
    uint32_t const ces[12] = { 0x2E30, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_013)
{
    // 0E40 0E11 0041;	
    // (เฑ) THAI CHARACTER SARA E, THAI CHARACTER THO NANGMONTHO	[2E30 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E11, 0x0041 };
    uint32_t const ces[12] = { 0x2E30, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_014)
{
    // 0E40 0E11 0062;	
    // (เฑ) THAI CHARACTER SARA E, THAI CHARACTER THO NANGMONTHO	[2E30 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E11, 0x0062 };
    uint32_t const ces[12] = { 0x2E30, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_015)
{
    // 0E41 0E11 0021;	
    // (แฑ) THAI CHARACTER SARA AE, THAI CHARACTER THO NANGMONTHO	[2E30 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E11, 0x0021 };
    uint32_t const ces[12] = { 0x2E30, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_016)
{
    // 0E41 0E11 003F;	
    // (แฑ) THAI CHARACTER SARA AE, THAI CHARACTER THO NANGMONTHO	[2E30 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E11, 0x003F };
    uint32_t const ces[12] = { 0x2E30, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_017)
{
    // 0E41 0E11 0061;	
    // (แฑ) THAI CHARACTER SARA AE, THAI CHARACTER THO NANGMONTHO	[2E30 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E11, 0x0061 };
    uint32_t const ces[12] = { 0x2E30, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_018)
{
    // 0E41 0E11 0041;	
    // (แฑ) THAI CHARACTER SARA AE, THAI CHARACTER THO NANGMONTHO	[2E30 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E11, 0x0041 };
    uint32_t const ces[12] = { 0x2E30, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_019)
{
    // 0E41 0E11 0062;	
    // (แฑ) THAI CHARACTER SARA AE, THAI CHARACTER THO NANGMONTHO	[2E30 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E11, 0x0062 };
    uint32_t const ces[12] = { 0x2E30, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_020)
{
    // 0E42 0E11 0021;	
    // (โฑ) THAI CHARACTER SARA O, THAI CHARACTER THO NANGMONTHO	[2E30 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E11, 0x0021 };
    uint32_t const ces[12] = { 0x2E30, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_021)
{
    // 0E42 0E11 003F;	
    // (โฑ) THAI CHARACTER SARA O, THAI CHARACTER THO NANGMONTHO	[2E30 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E11, 0x003F };
    uint32_t const ces[12] = { 0x2E30, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_022)
{
    // 0E42 0E11 0061;	
    // (โฑ) THAI CHARACTER SARA O, THAI CHARACTER THO NANGMONTHO	[2E30 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E11, 0x0061 };
    uint32_t const ces[12] = { 0x2E30, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_023)
{
    // 0E42 0E11 0041;	
    // (โฑ) THAI CHARACTER SARA O, THAI CHARACTER THO NANGMONTHO	[2E30 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E11, 0x0041 };
    uint32_t const ces[12] = { 0x2E30, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_024)
{
    // 0E42 0E11 0062;	
    // (โฑ) THAI CHARACTER SARA O, THAI CHARACTER THO NANGMONTHO	[2E30 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E11, 0x0062 };
    uint32_t const ces[12] = { 0x2E30, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_025)
{
    // 0E43 0E11 0021;	
    // (ใฑ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER THO NANGMONTHO	[2E30 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E11, 0x0021 };
    uint32_t const ces[12] = { 0x2E30, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_026)
{
    // 0E43 0E11 003F;	
    // (ใฑ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER THO NANGMONTHO	[2E30 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E11, 0x003F };
    uint32_t const ces[12] = { 0x2E30, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_027)
{
    // 0E43 0E11 0061;	
    // (ใฑ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER THO NANGMONTHO	[2E30 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E11, 0x0061 };
    uint32_t const ces[12] = { 0x2E30, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_028)
{
    // 0E43 0E11 0041;	
    // (ใฑ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER THO NANGMONTHO	[2E30 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E11, 0x0041 };
    uint32_t const ces[12] = { 0x2E30, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_029)
{
    // 0E43 0E11 0062;	
    // (ใฑ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER THO NANGMONTHO	[2E30 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E11, 0x0062 };
    uint32_t const ces[12] = { 0x2E30, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_030)
{
    // 0E44 0E11 0021;	
    // (ไฑ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER THO NANGMONTHO	[2E30 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E11, 0x0021 };
    uint32_t const ces[12] = { 0x2E30, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_031)
{
    // 0E44 0E11 003F;	
    // (ไฑ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER THO NANGMONTHO	[2E30 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E11, 0x003F };
    uint32_t const ces[12] = { 0x2E30, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_032)
{
    // 0E44 0E11 0061;	
    // (ไฑ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER THO NANGMONTHO	[2E30 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E11, 0x0061 };
    uint32_t const ces[12] = { 0x2E30, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_033)
{
    // 0E44 0E11 0041;	
    // (ไฑ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER THO NANGMONTHO	[2E30 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E11, 0x0041 };
    uint32_t const ces[12] = { 0x2E30, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_034)
{
    // 0E44 0E11 0062;	
    // (ไฑ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER THO NANGMONTHO	[2E30 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E11, 0x0062 };
    uint32_t const ces[12] = { 0x2E30, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_035)
{
    // 0E12 0021;	
    // (ฒ) THAI CHARACTER THO PHUTHAO	[2E31 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E12, 0x0021 };
    uint32_t const ces[9] = { 0x2E31, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_036)
{
    // 0E12 003F;	
    // (ฒ) THAI CHARACTER THO PHUTHAO	[2E31 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E12, 0x003F };
    uint32_t const ces[9] = { 0x2E31, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_037)
{
    // 0E12 0061;	
    // (ฒ) THAI CHARACTER THO PHUTHAO	[2E31 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E12, 0x0061 };
    uint32_t const ces[9] = { 0x2E31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_038)
{
    // 0E12 0041;	
    // (ฒ) THAI CHARACTER THO PHUTHAO	[2E31 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E12, 0x0041 };
    uint32_t const ces[9] = { 0x2E31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_039)
{
    // 0E12 0062;	
    // (ฒ) THAI CHARACTER THO PHUTHAO	[2E31 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E12, 0x0062 };
    uint32_t const ces[9] = { 0x2E31, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_040)
{
    // 0E40 0E12 0021;	
    // (เฒ) THAI CHARACTER SARA E, THAI CHARACTER THO PHUTHAO	[2E31 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E12, 0x0021 };
    uint32_t const ces[12] = { 0x2E31, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_041)
{
    // 0E40 0E12 003F;	
    // (เฒ) THAI CHARACTER SARA E, THAI CHARACTER THO PHUTHAO	[2E31 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E12, 0x003F };
    uint32_t const ces[12] = { 0x2E31, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_042)
{
    // 0E40 0E12 0061;	
    // (เฒ) THAI CHARACTER SARA E, THAI CHARACTER THO PHUTHAO	[2E31 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E12, 0x0061 };
    uint32_t const ces[12] = { 0x2E31, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_043)
{
    // 0E40 0E12 0041;	
    // (เฒ) THAI CHARACTER SARA E, THAI CHARACTER THO PHUTHAO	[2E31 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E12, 0x0041 };
    uint32_t const ces[12] = { 0x2E31, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_044)
{
    // 0E40 0E12 0062;	
    // (เฒ) THAI CHARACTER SARA E, THAI CHARACTER THO PHUTHAO	[2E31 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E12, 0x0062 };
    uint32_t const ces[12] = { 0x2E31, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_045)
{
    // 0E41 0E12 0021;	
    // (แฒ) THAI CHARACTER SARA AE, THAI CHARACTER THO PHUTHAO	[2E31 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E12, 0x0021 };
    uint32_t const ces[12] = { 0x2E31, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_046)
{
    // 0E41 0E12 003F;	
    // (แฒ) THAI CHARACTER SARA AE, THAI CHARACTER THO PHUTHAO	[2E31 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E12, 0x003F };
    uint32_t const ces[12] = { 0x2E31, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_047)
{
    // 0E41 0E12 0061;	
    // (แฒ) THAI CHARACTER SARA AE, THAI CHARACTER THO PHUTHAO	[2E31 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E12, 0x0061 };
    uint32_t const ces[12] = { 0x2E31, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_048)
{
    // 0E41 0E12 0041;	
    // (แฒ) THAI CHARACTER SARA AE, THAI CHARACTER THO PHUTHAO	[2E31 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E12, 0x0041 };
    uint32_t const ces[12] = { 0x2E31, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_049)
{
    // 0E41 0E12 0062;	
    // (แฒ) THAI CHARACTER SARA AE, THAI CHARACTER THO PHUTHAO	[2E31 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E12, 0x0062 };
    uint32_t const ces[12] = { 0x2E31, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_050)
{
    // 0E42 0E12 0021;	
    // (โฒ) THAI CHARACTER SARA O, THAI CHARACTER THO PHUTHAO	[2E31 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E12, 0x0021 };
    uint32_t const ces[12] = { 0x2E31, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_051)
{
    // 0E42 0E12 003F;	
    // (โฒ) THAI CHARACTER SARA O, THAI CHARACTER THO PHUTHAO	[2E31 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E12, 0x003F };
    uint32_t const ces[12] = { 0x2E31, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_052)
{
    // 0E42 0E12 0061;	
    // (โฒ) THAI CHARACTER SARA O, THAI CHARACTER THO PHUTHAO	[2E31 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E12, 0x0061 };
    uint32_t const ces[12] = { 0x2E31, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_053)
{
    // 0E42 0E12 0041;	
    // (โฒ) THAI CHARACTER SARA O, THAI CHARACTER THO PHUTHAO	[2E31 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E12, 0x0041 };
    uint32_t const ces[12] = { 0x2E31, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_054)
{
    // 0E42 0E12 0062;	
    // (โฒ) THAI CHARACTER SARA O, THAI CHARACTER THO PHUTHAO	[2E31 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E12, 0x0062 };
    uint32_t const ces[12] = { 0x2E31, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_055)
{
    // 0E43 0E12 0021;	
    // (ใฒ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER THO PHUTHAO	[2E31 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E12, 0x0021 };
    uint32_t const ces[12] = { 0x2E31, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_056)
{
    // 0E43 0E12 003F;	
    // (ใฒ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER THO PHUTHAO	[2E31 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E12, 0x003F };
    uint32_t const ces[12] = { 0x2E31, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_057)
{
    // 0E43 0E12 0061;	
    // (ใฒ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER THO PHUTHAO	[2E31 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E12, 0x0061 };
    uint32_t const ces[12] = { 0x2E31, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_058)
{
    // 0E43 0E12 0041;	
    // (ใฒ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER THO PHUTHAO	[2E31 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E12, 0x0041 };
    uint32_t const ces[12] = { 0x2E31, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_059)
{
    // 0E43 0E12 0062;	
    // (ใฒ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER THO PHUTHAO	[2E31 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E12, 0x0062 };
    uint32_t const ces[12] = { 0x2E31, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_060)
{
    // 0E44 0E12 0021;	
    // (ไฒ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER THO PHUTHAO	[2E31 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E12, 0x0021 };
    uint32_t const ces[12] = { 0x2E31, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_061)
{
    // 0E44 0E12 003F;	
    // (ไฒ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER THO PHUTHAO	[2E31 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E12, 0x003F };
    uint32_t const ces[12] = { 0x2E31, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_062)
{
    // 0E44 0E12 0061;	
    // (ไฒ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER THO PHUTHAO	[2E31 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E12, 0x0061 };
    uint32_t const ces[12] = { 0x2E31, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_063)
{
    // 0E44 0E12 0041;	
    // (ไฒ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER THO PHUTHAO	[2E31 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E12, 0x0041 };
    uint32_t const ces[12] = { 0x2E31, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_064)
{
    // 0E44 0E12 0062;	
    // (ไฒ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER THO PHUTHAO	[2E31 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E12, 0x0062 };
    uint32_t const ces[12] = { 0x2E31, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_065)
{
    // 0E13 0021;	
    // (ณ) THAI CHARACTER NO NEN	[2E32 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E13, 0x0021 };
    uint32_t const ces[9] = { 0x2E32, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_066)
{
    // 0E13 003F;	
    // (ณ) THAI CHARACTER NO NEN	[2E32 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E13, 0x003F };
    uint32_t const ces[9] = { 0x2E32, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_067)
{
    // 0E13 0061;	
    // (ณ) THAI CHARACTER NO NEN	[2E32 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E13, 0x0061 };
    uint32_t const ces[9] = { 0x2E32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_068)
{
    // 0E13 0041;	
    // (ณ) THAI CHARACTER NO NEN	[2E32 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E13, 0x0041 };
    uint32_t const ces[9] = { 0x2E32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_069)
{
    // 0E13 0062;	
    // (ณ) THAI CHARACTER NO NEN	[2E32 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E13, 0x0062 };
    uint32_t const ces[9] = { 0x2E32, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_070)
{
    // 0E40 0E13 0021;	
    // (เณ) THAI CHARACTER SARA E, THAI CHARACTER NO NEN	[2E32 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E13, 0x0021 };
    uint32_t const ces[12] = { 0x2E32, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_071)
{
    // 0E40 0E13 003F;	
    // (เณ) THAI CHARACTER SARA E, THAI CHARACTER NO NEN	[2E32 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E13, 0x003F };
    uint32_t const ces[12] = { 0x2E32, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_072)
{
    // 0E40 0E13 0061;	
    // (เณ) THAI CHARACTER SARA E, THAI CHARACTER NO NEN	[2E32 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E13, 0x0061 };
    uint32_t const ces[12] = { 0x2E32, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_073)
{
    // 0E40 0E13 0041;	
    // (เณ) THAI CHARACTER SARA E, THAI CHARACTER NO NEN	[2E32 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E13, 0x0041 };
    uint32_t const ces[12] = { 0x2E32, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_074)
{
    // 0E40 0E13 0062;	
    // (เณ) THAI CHARACTER SARA E, THAI CHARACTER NO NEN	[2E32 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E13, 0x0062 };
    uint32_t const ces[12] = { 0x2E32, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_075)
{
    // 0E41 0E13 0021;	
    // (แณ) THAI CHARACTER SARA AE, THAI CHARACTER NO NEN	[2E32 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E13, 0x0021 };
    uint32_t const ces[12] = { 0x2E32, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_076)
{
    // 0E41 0E13 003F;	
    // (แณ) THAI CHARACTER SARA AE, THAI CHARACTER NO NEN	[2E32 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E13, 0x003F };
    uint32_t const ces[12] = { 0x2E32, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_077)
{
    // 0E41 0E13 0061;	
    // (แณ) THAI CHARACTER SARA AE, THAI CHARACTER NO NEN	[2E32 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E13, 0x0061 };
    uint32_t const ces[12] = { 0x2E32, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_078)
{
    // 0E41 0E13 0041;	
    // (แณ) THAI CHARACTER SARA AE, THAI CHARACTER NO NEN	[2E32 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E13, 0x0041 };
    uint32_t const ces[12] = { 0x2E32, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_079)
{
    // 0E41 0E13 0062;	
    // (แณ) THAI CHARACTER SARA AE, THAI CHARACTER NO NEN	[2E32 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E13, 0x0062 };
    uint32_t const ces[12] = { 0x2E32, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_080)
{
    // 0E42 0E13 0021;	
    // (โณ) THAI CHARACTER SARA O, THAI CHARACTER NO NEN	[2E32 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E13, 0x0021 };
    uint32_t const ces[12] = { 0x2E32, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_081)
{
    // 0E42 0E13 003F;	
    // (โณ) THAI CHARACTER SARA O, THAI CHARACTER NO NEN	[2E32 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E13, 0x003F };
    uint32_t const ces[12] = { 0x2E32, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_082)
{
    // 0E42 0E13 0061;	
    // (โณ) THAI CHARACTER SARA O, THAI CHARACTER NO NEN	[2E32 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E13, 0x0061 };
    uint32_t const ces[12] = { 0x2E32, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_083)
{
    // 0E42 0E13 0041;	
    // (โณ) THAI CHARACTER SARA O, THAI CHARACTER NO NEN	[2E32 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E13, 0x0041 };
    uint32_t const ces[12] = { 0x2E32, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_084)
{
    // 0E42 0E13 0062;	
    // (โณ) THAI CHARACTER SARA O, THAI CHARACTER NO NEN	[2E32 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E13, 0x0062 };
    uint32_t const ces[12] = { 0x2E32, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_085)
{
    // 0E43 0E13 0021;	
    // (ใณ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER NO NEN	[2E32 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E13, 0x0021 };
    uint32_t const ces[12] = { 0x2E32, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_086)
{
    // 0E43 0E13 003F;	
    // (ใณ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER NO NEN	[2E32 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E13, 0x003F };
    uint32_t const ces[12] = { 0x2E32, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_087)
{
    // 0E43 0E13 0061;	
    // (ใณ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER NO NEN	[2E32 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E13, 0x0061 };
    uint32_t const ces[12] = { 0x2E32, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_088)
{
    // 0E43 0E13 0041;	
    // (ใณ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER NO NEN	[2E32 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E13, 0x0041 };
    uint32_t const ces[12] = { 0x2E32, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_089)
{
    // 0E43 0E13 0062;	
    // (ใณ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER NO NEN	[2E32 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E13, 0x0062 };
    uint32_t const ces[12] = { 0x2E32, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_090)
{
    // 0E44 0E13 0021;	
    // (ไณ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER NO NEN	[2E32 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E13, 0x0021 };
    uint32_t const ces[12] = { 0x2E32, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_091)
{
    // 0E44 0E13 003F;	
    // (ไณ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER NO NEN	[2E32 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E13, 0x003F };
    uint32_t const ces[12] = { 0x2E32, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_092)
{
    // 0E44 0E13 0061;	
    // (ไณ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER NO NEN	[2E32 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E13, 0x0061 };
    uint32_t const ces[12] = { 0x2E32, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_093)
{
    // 0E44 0E13 0041;	
    // (ไณ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER NO NEN	[2E32 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E13, 0x0041 };
    uint32_t const ces[12] = { 0x2E32, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_094)
{
    // 0E44 0E13 0062;	
    // (ไณ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER NO NEN	[2E32 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E13, 0x0062 };
    uint32_t const ces[12] = { 0x2E32, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_095)
{
    // 0E14 0021;	
    // (ด) THAI CHARACTER DO DEK	[2E33 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E14, 0x0021 };
    uint32_t const ces[9] = { 0x2E33, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_096)
{
    // 0E14 003F;	
    // (ด) THAI CHARACTER DO DEK	[2E33 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E14, 0x003F };
    uint32_t const ces[9] = { 0x2E33, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_097)
{
    // 0E14 0061;	
    // (ด) THAI CHARACTER DO DEK	[2E33 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E14, 0x0061 };
    uint32_t const ces[9] = { 0x2E33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_098)
{
    // 0E14 0041;	
    // (ด) THAI CHARACTER DO DEK	[2E33 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E14, 0x0041 };
    uint32_t const ces[9] = { 0x2E33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_099)
{
    // 0E14 0062;	
    // (ด) THAI CHARACTER DO DEK	[2E33 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E14, 0x0062 };
    uint32_t const ces[9] = { 0x2E33, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_100)
{
    // 0E40 0E14 0021;	
    // (เด) THAI CHARACTER SARA E, THAI CHARACTER DO DEK	[2E33 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E14, 0x0021 };
    uint32_t const ces[12] = { 0x2E33, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_101)
{
    // 0E40 0E14 003F;	
    // (เด) THAI CHARACTER SARA E, THAI CHARACTER DO DEK	[2E33 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E14, 0x003F };
    uint32_t const ces[12] = { 0x2E33, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_102)
{
    // 0E40 0E14 0061;	
    // (เด) THAI CHARACTER SARA E, THAI CHARACTER DO DEK	[2E33 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E14, 0x0061 };
    uint32_t const ces[12] = { 0x2E33, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_103)
{
    // 0E40 0E14 0041;	
    // (เด) THAI CHARACTER SARA E, THAI CHARACTER DO DEK	[2E33 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E14, 0x0041 };
    uint32_t const ces[12] = { 0x2E33, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_104)
{
    // 0E40 0E14 0062;	
    // (เด) THAI CHARACTER SARA E, THAI CHARACTER DO DEK	[2E33 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E14, 0x0062 };
    uint32_t const ces[12] = { 0x2E33, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_105)
{
    // 0E41 0E14 0021;	
    // (แด) THAI CHARACTER SARA AE, THAI CHARACTER DO DEK	[2E33 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E14, 0x0021 };
    uint32_t const ces[12] = { 0x2E33, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_106)
{
    // 0E41 0E14 003F;	
    // (แด) THAI CHARACTER SARA AE, THAI CHARACTER DO DEK	[2E33 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E14, 0x003F };
    uint32_t const ces[12] = { 0x2E33, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_107)
{
    // 0E41 0E14 0061;	
    // (แด) THAI CHARACTER SARA AE, THAI CHARACTER DO DEK	[2E33 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E14, 0x0061 };
    uint32_t const ces[12] = { 0x2E33, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_108)
{
    // 0E41 0E14 0041;	
    // (แด) THAI CHARACTER SARA AE, THAI CHARACTER DO DEK	[2E33 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E14, 0x0041 };
    uint32_t const ces[12] = { 0x2E33, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_109)
{
    // 0E41 0E14 0062;	
    // (แด) THAI CHARACTER SARA AE, THAI CHARACTER DO DEK	[2E33 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E14, 0x0062 };
    uint32_t const ces[12] = { 0x2E33, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_110)
{
    // 0E42 0E14 0021;	
    // (โด) THAI CHARACTER SARA O, THAI CHARACTER DO DEK	[2E33 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E14, 0x0021 };
    uint32_t const ces[12] = { 0x2E33, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_111)
{
    // 0E42 0E14 003F;	
    // (โด) THAI CHARACTER SARA O, THAI CHARACTER DO DEK	[2E33 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E14, 0x003F };
    uint32_t const ces[12] = { 0x2E33, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_112)
{
    // 0E42 0E14 0061;	
    // (โด) THAI CHARACTER SARA O, THAI CHARACTER DO DEK	[2E33 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E14, 0x0061 };
    uint32_t const ces[12] = { 0x2E33, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_113)
{
    // 0E42 0E14 0041;	
    // (โด) THAI CHARACTER SARA O, THAI CHARACTER DO DEK	[2E33 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E14, 0x0041 };
    uint32_t const ces[12] = { 0x2E33, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_114)
{
    // 0E42 0E14 0062;	
    // (โด) THAI CHARACTER SARA O, THAI CHARACTER DO DEK	[2E33 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E14, 0x0062 };
    uint32_t const ces[12] = { 0x2E33, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_115)
{
    // 0E43 0E14 0021;	
    // (ใด) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER DO DEK	[2E33 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E14, 0x0021 };
    uint32_t const ces[12] = { 0x2E33, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_116)
{
    // 0E43 0E14 003F;	
    // (ใด) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER DO DEK	[2E33 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E14, 0x003F };
    uint32_t const ces[12] = { 0x2E33, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_117)
{
    // 0E43 0E14 0061;	
    // (ใด) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER DO DEK	[2E33 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E14, 0x0061 };
    uint32_t const ces[12] = { 0x2E33, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_118)
{
    // 0E43 0E14 0041;	
    // (ใด) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER DO DEK	[2E33 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E14, 0x0041 };
    uint32_t const ces[12] = { 0x2E33, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_119)
{
    // 0E43 0E14 0062;	
    // (ใด) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER DO DEK	[2E33 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E14, 0x0062 };
    uint32_t const ces[12] = { 0x2E33, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_120)
{
    // 0E44 0E14 0021;	
    // (ได) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER DO DEK	[2E33 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E14, 0x0021 };
    uint32_t const ces[12] = { 0x2E33, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_121)
{
    // 0E44 0E14 003F;	
    // (ได) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER DO DEK	[2E33 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E14, 0x003F };
    uint32_t const ces[12] = { 0x2E33, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_122)
{
    // 0E44 0E14 0061;	
    // (ได) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER DO DEK	[2E33 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E14, 0x0061 };
    uint32_t const ces[12] = { 0x2E33, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_123)
{
    // 0E44 0E14 0041;	
    // (ได) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER DO DEK	[2E33 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E14, 0x0041 };
    uint32_t const ces[12] = { 0x2E33, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_124)
{
    // 0E44 0E14 0062;	
    // (ได) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER DO DEK	[2E33 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E14, 0x0062 };
    uint32_t const ces[12] = { 0x2E33, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_125)
{
    // 0E15 0021;	
    // (ต) THAI CHARACTER TO TAO	[2E34 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E15, 0x0021 };
    uint32_t const ces[9] = { 0x2E34, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_126)
{
    // 0E15 003F;	
    // (ต) THAI CHARACTER TO TAO	[2E34 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E15, 0x003F };
    uint32_t const ces[9] = { 0x2E34, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_127)
{
    // 0E15 0061;	
    // (ต) THAI CHARACTER TO TAO	[2E34 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E15, 0x0061 };
    uint32_t const ces[9] = { 0x2E34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_128)
{
    // 0E15 0041;	
    // (ต) THAI CHARACTER TO TAO	[2E34 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E15, 0x0041 };
    uint32_t const ces[9] = { 0x2E34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_129)
{
    // 0E15 0062;	
    // (ต) THAI CHARACTER TO TAO	[2E34 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E15, 0x0062 };
    uint32_t const ces[9] = { 0x2E34, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_130)
{
    // 0E40 0E15 0021;	
    // (เต) THAI CHARACTER SARA E, THAI CHARACTER TO TAO	[2E34 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E15, 0x0021 };
    uint32_t const ces[12] = { 0x2E34, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_131)
{
    // 0E40 0E15 003F;	
    // (เต) THAI CHARACTER SARA E, THAI CHARACTER TO TAO	[2E34 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E15, 0x003F };
    uint32_t const ces[12] = { 0x2E34, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_132)
{
    // 0E40 0E15 0061;	
    // (เต) THAI CHARACTER SARA E, THAI CHARACTER TO TAO	[2E34 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E15, 0x0061 };
    uint32_t const ces[12] = { 0x2E34, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_133)
{
    // 0E40 0E15 0041;	
    // (เต) THAI CHARACTER SARA E, THAI CHARACTER TO TAO	[2E34 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E15, 0x0041 };
    uint32_t const ces[12] = { 0x2E34, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_134)
{
    // 0E40 0E15 0062;	
    // (เต) THAI CHARACTER SARA E, THAI CHARACTER TO TAO	[2E34 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E15, 0x0062 };
    uint32_t const ces[12] = { 0x2E34, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_135)
{
    // 0E41 0E15 0021;	
    // (แต) THAI CHARACTER SARA AE, THAI CHARACTER TO TAO	[2E34 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E15, 0x0021 };
    uint32_t const ces[12] = { 0x2E34, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_136)
{
    // 0E41 0E15 003F;	
    // (แต) THAI CHARACTER SARA AE, THAI CHARACTER TO TAO	[2E34 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E15, 0x003F };
    uint32_t const ces[12] = { 0x2E34, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_137)
{
    // 0E41 0E15 0061;	
    // (แต) THAI CHARACTER SARA AE, THAI CHARACTER TO TAO	[2E34 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E15, 0x0061 };
    uint32_t const ces[12] = { 0x2E34, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_138)
{
    // 0E41 0E15 0041;	
    // (แต) THAI CHARACTER SARA AE, THAI CHARACTER TO TAO	[2E34 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E15, 0x0041 };
    uint32_t const ces[12] = { 0x2E34, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_139)
{
    // 0E41 0E15 0062;	
    // (แต) THAI CHARACTER SARA AE, THAI CHARACTER TO TAO	[2E34 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E15, 0x0062 };
    uint32_t const ces[12] = { 0x2E34, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_140)
{
    // 0E42 0E15 0021;	
    // (โต) THAI CHARACTER SARA O, THAI CHARACTER TO TAO	[2E34 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E15, 0x0021 };
    uint32_t const ces[12] = { 0x2E34, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_141)
{
    // 0E42 0E15 003F;	
    // (โต) THAI CHARACTER SARA O, THAI CHARACTER TO TAO	[2E34 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E15, 0x003F };
    uint32_t const ces[12] = { 0x2E34, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_142)
{
    // 0E42 0E15 0061;	
    // (โต) THAI CHARACTER SARA O, THAI CHARACTER TO TAO	[2E34 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E15, 0x0061 };
    uint32_t const ces[12] = { 0x2E34, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_143)
{
    // 0E42 0E15 0041;	
    // (โต) THAI CHARACTER SARA O, THAI CHARACTER TO TAO	[2E34 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E15, 0x0041 };
    uint32_t const ces[12] = { 0x2E34, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_144)
{
    // 0E42 0E15 0062;	
    // (โต) THAI CHARACTER SARA O, THAI CHARACTER TO TAO	[2E34 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E15, 0x0062 };
    uint32_t const ces[12] = { 0x2E34, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_145)
{
    // 0E43 0E15 0021;	
    // (ใต) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER TO TAO	[2E34 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E15, 0x0021 };
    uint32_t const ces[12] = { 0x2E34, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_146)
{
    // 0E43 0E15 003F;	
    // (ใต) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER TO TAO	[2E34 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E15, 0x003F };
    uint32_t const ces[12] = { 0x2E34, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_147)
{
    // 0E43 0E15 0061;	
    // (ใต) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER TO TAO	[2E34 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E15, 0x0061 };
    uint32_t const ces[12] = { 0x2E34, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_148)
{
    // 0E43 0E15 0041;	
    // (ใต) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER TO TAO	[2E34 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E15, 0x0041 };
    uint32_t const ces[12] = { 0x2E34, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_149)
{
    // 0E43 0E15 0062;	
    // (ใต) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER TO TAO	[2E34 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E15, 0x0062 };
    uint32_t const ces[12] = { 0x2E34, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_150)
{
    // 0E44 0E15 0021;	
    // (ไต) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER TO TAO	[2E34 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E15, 0x0021 };
    uint32_t const ces[12] = { 0x2E34, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_151)
{
    // 0E44 0E15 003F;	
    // (ไต) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER TO TAO	[2E34 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E15, 0x003F };
    uint32_t const ces[12] = { 0x2E34, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_152)
{
    // 0E44 0E15 0061;	
    // (ไต) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER TO TAO	[2E34 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E15, 0x0061 };
    uint32_t const ces[12] = { 0x2E34, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_153)
{
    // 0E44 0E15 0041;	
    // (ไต) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER TO TAO	[2E34 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E15, 0x0041 };
    uint32_t const ces[12] = { 0x2E34, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_154)
{
    // 0E44 0E15 0062;	
    // (ไต) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER TO TAO	[2E34 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E15, 0x0062 };
    uint32_t const ces[12] = { 0x2E34, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_155)
{
    // 0E16 0021;	
    // (ถ) THAI CHARACTER THO THUNG	[2E35 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E16, 0x0021 };
    uint32_t const ces[9] = { 0x2E35, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_156)
{
    // 0E16 003F;	
    // (ถ) THAI CHARACTER THO THUNG	[2E35 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E16, 0x003F };
    uint32_t const ces[9] = { 0x2E35, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_157)
{
    // 0E16 0061;	
    // (ถ) THAI CHARACTER THO THUNG	[2E35 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E16, 0x0061 };
    uint32_t const ces[9] = { 0x2E35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_158)
{
    // 0E16 0041;	
    // (ถ) THAI CHARACTER THO THUNG	[2E35 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E16, 0x0041 };
    uint32_t const ces[9] = { 0x2E35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_159)
{
    // 0E16 0062;	
    // (ถ) THAI CHARACTER THO THUNG	[2E35 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E16, 0x0062 };
    uint32_t const ces[9] = { 0x2E35, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_160)
{
    // 0E40 0E16 0021;	
    // (เถ) THAI CHARACTER SARA E, THAI CHARACTER THO THUNG	[2E35 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E16, 0x0021 };
    uint32_t const ces[12] = { 0x2E35, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_161)
{
    // 0E40 0E16 003F;	
    // (เถ) THAI CHARACTER SARA E, THAI CHARACTER THO THUNG	[2E35 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E16, 0x003F };
    uint32_t const ces[12] = { 0x2E35, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_162)
{
    // 0E40 0E16 0061;	
    // (เถ) THAI CHARACTER SARA E, THAI CHARACTER THO THUNG	[2E35 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E16, 0x0061 };
    uint32_t const ces[12] = { 0x2E35, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_163)
{
    // 0E40 0E16 0041;	
    // (เถ) THAI CHARACTER SARA E, THAI CHARACTER THO THUNG	[2E35 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E16, 0x0041 };
    uint32_t const ces[12] = { 0x2E35, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_164)
{
    // 0E40 0E16 0062;	
    // (เถ) THAI CHARACTER SARA E, THAI CHARACTER THO THUNG	[2E35 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E16, 0x0062 };
    uint32_t const ces[12] = { 0x2E35, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_165)
{
    // 0E41 0E16 0021;	
    // (แถ) THAI CHARACTER SARA AE, THAI CHARACTER THO THUNG	[2E35 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E16, 0x0021 };
    uint32_t const ces[12] = { 0x2E35, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_166)
{
    // 0E41 0E16 003F;	
    // (แถ) THAI CHARACTER SARA AE, THAI CHARACTER THO THUNG	[2E35 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E16, 0x003F };
    uint32_t const ces[12] = { 0x2E35, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_167)
{
    // 0E41 0E16 0061;	
    // (แถ) THAI CHARACTER SARA AE, THAI CHARACTER THO THUNG	[2E35 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E16, 0x0061 };
    uint32_t const ces[12] = { 0x2E35, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_168)
{
    // 0E41 0E16 0041;	
    // (แถ) THAI CHARACTER SARA AE, THAI CHARACTER THO THUNG	[2E35 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E16, 0x0041 };
    uint32_t const ces[12] = { 0x2E35, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_169)
{
    // 0E41 0E16 0062;	
    // (แถ) THAI CHARACTER SARA AE, THAI CHARACTER THO THUNG	[2E35 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E16, 0x0062 };
    uint32_t const ces[12] = { 0x2E35, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_170)
{
    // 0E42 0E16 0021;	
    // (โถ) THAI CHARACTER SARA O, THAI CHARACTER THO THUNG	[2E35 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E16, 0x0021 };
    uint32_t const ces[12] = { 0x2E35, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_171)
{
    // 0E42 0E16 003F;	
    // (โถ) THAI CHARACTER SARA O, THAI CHARACTER THO THUNG	[2E35 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E16, 0x003F };
    uint32_t const ces[12] = { 0x2E35, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_172)
{
    // 0E42 0E16 0061;	
    // (โถ) THAI CHARACTER SARA O, THAI CHARACTER THO THUNG	[2E35 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E16, 0x0061 };
    uint32_t const ces[12] = { 0x2E35, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_173)
{
    // 0E42 0E16 0041;	
    // (โถ) THAI CHARACTER SARA O, THAI CHARACTER THO THUNG	[2E35 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E16, 0x0041 };
    uint32_t const ces[12] = { 0x2E35, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_174)
{
    // 0E42 0E16 0062;	
    // (โถ) THAI CHARACTER SARA O, THAI CHARACTER THO THUNG	[2E35 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E16, 0x0062 };
    uint32_t const ces[12] = { 0x2E35, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_175)
{
    // 0E43 0E16 0021;	
    // (ใถ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER THO THUNG	[2E35 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E16, 0x0021 };
    uint32_t const ces[12] = { 0x2E35, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_176)
{
    // 0E43 0E16 003F;	
    // (ใถ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER THO THUNG	[2E35 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E16, 0x003F };
    uint32_t const ces[12] = { 0x2E35, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_177)
{
    // 0E43 0E16 0061;	
    // (ใถ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER THO THUNG	[2E35 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E16, 0x0061 };
    uint32_t const ces[12] = { 0x2E35, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_178)
{
    // 0E43 0E16 0041;	
    // (ใถ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER THO THUNG	[2E35 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E16, 0x0041 };
    uint32_t const ces[12] = { 0x2E35, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_179)
{
    // 0E43 0E16 0062;	
    // (ใถ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER THO THUNG	[2E35 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E16, 0x0062 };
    uint32_t const ces[12] = { 0x2E35, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_180)
{
    // 0E44 0E16 0021;	
    // (ไถ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER THO THUNG	[2E35 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E16, 0x0021 };
    uint32_t const ces[12] = { 0x2E35, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_181)
{
    // 0E44 0E16 003F;	
    // (ไถ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER THO THUNG	[2E35 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E16, 0x003F };
    uint32_t const ces[12] = { 0x2E35, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_182)
{
    // 0E44 0E16 0061;	
    // (ไถ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER THO THUNG	[2E35 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E16, 0x0061 };
    uint32_t const ces[12] = { 0x2E35, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_183)
{
    // 0E44 0E16 0041;	
    // (ไถ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER THO THUNG	[2E35 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E16, 0x0041 };
    uint32_t const ces[12] = { 0x2E35, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_184)
{
    // 0E44 0E16 0062;	
    // (ไถ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER THO THUNG	[2E35 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E16, 0x0062 };
    uint32_t const ces[12] = { 0x2E35, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_185)
{
    // 0E17 0021;	
    // (ท) THAI CHARACTER THO THAHAN	[2E36 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E17, 0x0021 };
    uint32_t const ces[9] = { 0x2E36, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_186)
{
    // 0E17 003F;	
    // (ท) THAI CHARACTER THO THAHAN	[2E36 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E17, 0x003F };
    uint32_t const ces[9] = { 0x2E36, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_187)
{
    // 0E17 0061;	
    // (ท) THAI CHARACTER THO THAHAN	[2E36 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E17, 0x0061 };
    uint32_t const ces[9] = { 0x2E36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_188)
{
    // 0E17 0041;	
    // (ท) THAI CHARACTER THO THAHAN	[2E36 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E17, 0x0041 };
    uint32_t const ces[9] = { 0x2E36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_189)
{
    // 0E17 0062;	
    // (ท) THAI CHARACTER THO THAHAN	[2E36 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E17, 0x0062 };
    uint32_t const ces[9] = { 0x2E36, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_190)
{
    // 0E40 0E17 0021;	
    // (เท) THAI CHARACTER SARA E, THAI CHARACTER THO THAHAN	[2E36 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E17, 0x0021 };
    uint32_t const ces[12] = { 0x2E36, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_191)
{
    // 0E40 0E17 003F;	
    // (เท) THAI CHARACTER SARA E, THAI CHARACTER THO THAHAN	[2E36 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E17, 0x003F };
    uint32_t const ces[12] = { 0x2E36, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_192)
{
    // 0E40 0E17 0061;	
    // (เท) THAI CHARACTER SARA E, THAI CHARACTER THO THAHAN	[2E36 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E17, 0x0061 };
    uint32_t const ces[12] = { 0x2E36, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_193)
{
    // 0E40 0E17 0041;	
    // (เท) THAI CHARACTER SARA E, THAI CHARACTER THO THAHAN	[2E36 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E17, 0x0041 };
    uint32_t const ces[12] = { 0x2E36, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_194)
{
    // 0E40 0E17 0062;	
    // (เท) THAI CHARACTER SARA E, THAI CHARACTER THO THAHAN	[2E36 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E17, 0x0062 };
    uint32_t const ces[12] = { 0x2E36, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_195)
{
    // 0E41 0E17 0021;	
    // (แท) THAI CHARACTER SARA AE, THAI CHARACTER THO THAHAN	[2E36 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E17, 0x0021 };
    uint32_t const ces[12] = { 0x2E36, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_196)
{
    // 0E41 0E17 003F;	
    // (แท) THAI CHARACTER SARA AE, THAI CHARACTER THO THAHAN	[2E36 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E17, 0x003F };
    uint32_t const ces[12] = { 0x2E36, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_197)
{
    // 0E41 0E17 0061;	
    // (แท) THAI CHARACTER SARA AE, THAI CHARACTER THO THAHAN	[2E36 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E17, 0x0061 };
    uint32_t const ces[12] = { 0x2E36, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_198)
{
    // 0E41 0E17 0041;	
    // (แท) THAI CHARACTER SARA AE, THAI CHARACTER THO THAHAN	[2E36 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E17, 0x0041 };
    uint32_t const ces[12] = { 0x2E36, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_199)
{
    // 0E41 0E17 0062;	
    // (แท) THAI CHARACTER SARA AE, THAI CHARACTER THO THAHAN	[2E36 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E17, 0x0062 };
    uint32_t const ces[12] = { 0x2E36, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_200)
{
    // 0E42 0E17 0021;	
    // (โท) THAI CHARACTER SARA O, THAI CHARACTER THO THAHAN	[2E36 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E17, 0x0021 };
    uint32_t const ces[12] = { 0x2E36, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_201)
{
    // 0E42 0E17 003F;	
    // (โท) THAI CHARACTER SARA O, THAI CHARACTER THO THAHAN	[2E36 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E17, 0x003F };
    uint32_t const ces[12] = { 0x2E36, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_202)
{
    // 0E42 0E17 0061;	
    // (โท) THAI CHARACTER SARA O, THAI CHARACTER THO THAHAN	[2E36 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E17, 0x0061 };
    uint32_t const ces[12] = { 0x2E36, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_203)
{
    // 0E42 0E17 0041;	
    // (โท) THAI CHARACTER SARA O, THAI CHARACTER THO THAHAN	[2E36 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E17, 0x0041 };
    uint32_t const ces[12] = { 0x2E36, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_204)
{
    // 0E42 0E17 0062;	
    // (โท) THAI CHARACTER SARA O, THAI CHARACTER THO THAHAN	[2E36 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E17, 0x0062 };
    uint32_t const ces[12] = { 0x2E36, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_205)
{
    // 0E43 0E17 0021;	
    // (ใท) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER THO THAHAN	[2E36 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E17, 0x0021 };
    uint32_t const ces[12] = { 0x2E36, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_206)
{
    // 0E43 0E17 003F;	
    // (ใท) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER THO THAHAN	[2E36 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E17, 0x003F };
    uint32_t const ces[12] = { 0x2E36, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_207)
{
    // 0E43 0E17 0061;	
    // (ใท) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER THO THAHAN	[2E36 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E17, 0x0061 };
    uint32_t const ces[12] = { 0x2E36, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_208)
{
    // 0E43 0E17 0041;	
    // (ใท) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER THO THAHAN	[2E36 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E17, 0x0041 };
    uint32_t const ces[12] = { 0x2E36, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_209)
{
    // 0E43 0E17 0062;	
    // (ใท) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER THO THAHAN	[2E36 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E17, 0x0062 };
    uint32_t const ces[12] = { 0x2E36, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_210)
{
    // 0E44 0E17 0021;	
    // (ไท) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER THO THAHAN	[2E36 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E17, 0x0021 };
    uint32_t const ces[12] = { 0x2E36, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_211)
{
    // 0E44 0E17 003F;	
    // (ไท) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER THO THAHAN	[2E36 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E17, 0x003F };
    uint32_t const ces[12] = { 0x2E36, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_212)
{
    // 0E44 0E17 0061;	
    // (ไท) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER THO THAHAN	[2E36 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E17, 0x0061 };
    uint32_t const ces[12] = { 0x2E36, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_213)
{
    // 0E44 0E17 0041;	
    // (ไท) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER THO THAHAN	[2E36 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E17, 0x0041 };
    uint32_t const ces[12] = { 0x2E36, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_214)
{
    // 0E44 0E17 0062;	
    // (ไท) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER THO THAHAN	[2E36 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E17, 0x0062 };
    uint32_t const ces[12] = { 0x2E36, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_215)
{
    // 0E18 0021;	
    // (ธ) THAI CHARACTER THO THONG	[2E37 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E18, 0x0021 };
    uint32_t const ces[9] = { 0x2E37, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_216)
{
    // 0E18 003F;	
    // (ธ) THAI CHARACTER THO THONG	[2E37 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E18, 0x003F };
    uint32_t const ces[9] = { 0x2E37, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_217)
{
    // 0E18 0061;	
    // (ธ) THAI CHARACTER THO THONG	[2E37 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E18, 0x0061 };
    uint32_t const ces[9] = { 0x2E37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_218)
{
    // 0E18 0041;	
    // (ธ) THAI CHARACTER THO THONG	[2E37 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E18, 0x0041 };
    uint32_t const ces[9] = { 0x2E37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_219)
{
    // 0E18 0062;	
    // (ธ) THAI CHARACTER THO THONG	[2E37 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E18, 0x0062 };
    uint32_t const ces[9] = { 0x2E37, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_220)
{
    // 0E40 0E18 0021;	
    // (เธ) THAI CHARACTER SARA E, THAI CHARACTER THO THONG	[2E37 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E18, 0x0021 };
    uint32_t const ces[12] = { 0x2E37, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_221)
{
    // 0E40 0E18 003F;	
    // (เธ) THAI CHARACTER SARA E, THAI CHARACTER THO THONG	[2E37 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E18, 0x003F };
    uint32_t const ces[12] = { 0x2E37, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_222)
{
    // 0E40 0E18 0061;	
    // (เธ) THAI CHARACTER SARA E, THAI CHARACTER THO THONG	[2E37 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E18, 0x0061 };
    uint32_t const ces[12] = { 0x2E37, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_223)
{
    // 0E40 0E18 0041;	
    // (เธ) THAI CHARACTER SARA E, THAI CHARACTER THO THONG	[2E37 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E18, 0x0041 };
    uint32_t const ces[12] = { 0x2E37, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_224)
{
    // 0E40 0E18 0062;	
    // (เธ) THAI CHARACTER SARA E, THAI CHARACTER THO THONG	[2E37 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E18, 0x0062 };
    uint32_t const ces[12] = { 0x2E37, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_225)
{
    // 0E41 0E18 0021;	
    // (แธ) THAI CHARACTER SARA AE, THAI CHARACTER THO THONG	[2E37 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E18, 0x0021 };
    uint32_t const ces[12] = { 0x2E37, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_226)
{
    // 0E41 0E18 003F;	
    // (แธ) THAI CHARACTER SARA AE, THAI CHARACTER THO THONG	[2E37 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E18, 0x003F };
    uint32_t const ces[12] = { 0x2E37, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_227)
{
    // 0E41 0E18 0061;	
    // (แธ) THAI CHARACTER SARA AE, THAI CHARACTER THO THONG	[2E37 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E18, 0x0061 };
    uint32_t const ces[12] = { 0x2E37, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_228)
{
    // 0E41 0E18 0041;	
    // (แธ) THAI CHARACTER SARA AE, THAI CHARACTER THO THONG	[2E37 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E18, 0x0041 };
    uint32_t const ces[12] = { 0x2E37, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_229)
{
    // 0E41 0E18 0062;	
    // (แธ) THAI CHARACTER SARA AE, THAI CHARACTER THO THONG	[2E37 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E18, 0x0062 };
    uint32_t const ces[12] = { 0x2E37, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_230)
{
    // 0E42 0E18 0021;	
    // (โธ) THAI CHARACTER SARA O, THAI CHARACTER THO THONG	[2E37 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E18, 0x0021 };
    uint32_t const ces[12] = { 0x2E37, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_231)
{
    // 0E42 0E18 003F;	
    // (โธ) THAI CHARACTER SARA O, THAI CHARACTER THO THONG	[2E37 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E18, 0x003F };
    uint32_t const ces[12] = { 0x2E37, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_232)
{
    // 0E42 0E18 0061;	
    // (โธ) THAI CHARACTER SARA O, THAI CHARACTER THO THONG	[2E37 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E18, 0x0061 };
    uint32_t const ces[12] = { 0x2E37, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_233)
{
    // 0E42 0E18 0041;	
    // (โธ) THAI CHARACTER SARA O, THAI CHARACTER THO THONG	[2E37 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E18, 0x0041 };
    uint32_t const ces[12] = { 0x2E37, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_234)
{
    // 0E42 0E18 0062;	
    // (โธ) THAI CHARACTER SARA O, THAI CHARACTER THO THONG	[2E37 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E18, 0x0062 };
    uint32_t const ces[12] = { 0x2E37, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_235)
{
    // 0E43 0E18 0021;	
    // (ใธ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER THO THONG	[2E37 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E18, 0x0021 };
    uint32_t const ces[12] = { 0x2E37, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_236)
{
    // 0E43 0E18 003F;	
    // (ใธ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER THO THONG	[2E37 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E18, 0x003F };
    uint32_t const ces[12] = { 0x2E37, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_237)
{
    // 0E43 0E18 0061;	
    // (ใธ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER THO THONG	[2E37 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E18, 0x0061 };
    uint32_t const ces[12] = { 0x2E37, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_238)
{
    // 0E43 0E18 0041;	
    // (ใธ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER THO THONG	[2E37 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E18, 0x0041 };
    uint32_t const ces[12] = { 0x2E37, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_239)
{
    // 0E43 0E18 0062;	
    // (ใธ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER THO THONG	[2E37 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E18, 0x0062 };
    uint32_t const ces[12] = { 0x2E37, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_240)
{
    // 0E44 0E18 0021;	
    // (ไธ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER THO THONG	[2E37 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E18, 0x0021 };
    uint32_t const ces[12] = { 0x2E37, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_241)
{
    // 0E44 0E18 003F;	
    // (ไธ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER THO THONG	[2E37 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E18, 0x003F };
    uint32_t const ces[12] = { 0x2E37, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_242)
{
    // 0E44 0E18 0061;	
    // (ไธ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER THO THONG	[2E37 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E18, 0x0061 };
    uint32_t const ces[12] = { 0x2E37, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_243)
{
    // 0E44 0E18 0041;	
    // (ไธ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER THO THONG	[2E37 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E18, 0x0041 };
    uint32_t const ces[12] = { 0x2E37, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_244)
{
    // 0E44 0E18 0062;	
    // (ไธ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER THO THONG	[2E37 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E18, 0x0062 };
    uint32_t const ces[12] = { 0x2E37, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_245)
{
    // 0E19 0021;	
    // (น) THAI CHARACTER NO NU	[2E38 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E19, 0x0021 };
    uint32_t const ces[9] = { 0x2E38, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_246)
{
    // 0E19 003F;	
    // (น) THAI CHARACTER NO NU	[2E38 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E19, 0x003F };
    uint32_t const ces[9] = { 0x2E38, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_247)
{
    // 0E19 0061;	
    // (น) THAI CHARACTER NO NU	[2E38 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E19, 0x0061 };
    uint32_t const ces[9] = { 0x2E38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_248)
{
    // 0E19 0041;	
    // (น) THAI CHARACTER NO NU	[2E38 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E19, 0x0041 };
    uint32_t const ces[9] = { 0x2E38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_249)
{
    // 0E19 0062;	
    // (น) THAI CHARACTER NO NU	[2E38 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E19, 0x0062 };
    uint32_t const ces[9] = { 0x2E38, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_250)
{
    // 0E40 0E19 0021;	
    // (เน) THAI CHARACTER SARA E, THAI CHARACTER NO NU	[2E38 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E19, 0x0021 };
    uint32_t const ces[12] = { 0x2E38, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_251)
{
    // 0E40 0E19 003F;	
    // (เน) THAI CHARACTER SARA E, THAI CHARACTER NO NU	[2E38 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E19, 0x003F };
    uint32_t const ces[12] = { 0x2E38, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_252)
{
    // 0E40 0E19 0061;	
    // (เน) THAI CHARACTER SARA E, THAI CHARACTER NO NU	[2E38 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E19, 0x0061 };
    uint32_t const ces[12] = { 0x2E38, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_253)
{
    // 0E40 0E19 0041;	
    // (เน) THAI CHARACTER SARA E, THAI CHARACTER NO NU	[2E38 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E19, 0x0041 };
    uint32_t const ces[12] = { 0x2E38, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_254)
{
    // 0E40 0E19 0062;	
    // (เน) THAI CHARACTER SARA E, THAI CHARACTER NO NU	[2E38 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E19, 0x0062 };
    uint32_t const ces[12] = { 0x2E38, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_255)
{
    // 0E41 0E19 0021;	
    // (แน) THAI CHARACTER SARA AE, THAI CHARACTER NO NU	[2E38 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E19, 0x0021 };
    uint32_t const ces[12] = { 0x2E38, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_256)
{
    // 0E41 0E19 003F;	
    // (แน) THAI CHARACTER SARA AE, THAI CHARACTER NO NU	[2E38 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E19, 0x003F };
    uint32_t const ces[12] = { 0x2E38, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_257)
{
    // 0E41 0E19 0061;	
    // (แน) THAI CHARACTER SARA AE, THAI CHARACTER NO NU	[2E38 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E19, 0x0061 };
    uint32_t const ces[12] = { 0x2E38, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_258)
{
    // 0E41 0E19 0041;	
    // (แน) THAI CHARACTER SARA AE, THAI CHARACTER NO NU	[2E38 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E19, 0x0041 };
    uint32_t const ces[12] = { 0x2E38, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_259)
{
    // 0E41 0E19 0062;	
    // (แน) THAI CHARACTER SARA AE, THAI CHARACTER NO NU	[2E38 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E19, 0x0062 };
    uint32_t const ces[12] = { 0x2E38, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_260)
{
    // 0E42 0E19 0021;	
    // (โน) THAI CHARACTER SARA O, THAI CHARACTER NO NU	[2E38 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E19, 0x0021 };
    uint32_t const ces[12] = { 0x2E38, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_261)
{
    // 0E42 0E19 003F;	
    // (โน) THAI CHARACTER SARA O, THAI CHARACTER NO NU	[2E38 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E19, 0x003F };
    uint32_t const ces[12] = { 0x2E38, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_262)
{
    // 0E42 0E19 0061;	
    // (โน) THAI CHARACTER SARA O, THAI CHARACTER NO NU	[2E38 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E19, 0x0061 };
    uint32_t const ces[12] = { 0x2E38, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_263)
{
    // 0E42 0E19 0041;	
    // (โน) THAI CHARACTER SARA O, THAI CHARACTER NO NU	[2E38 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E19, 0x0041 };
    uint32_t const ces[12] = { 0x2E38, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_264)
{
    // 0E42 0E19 0062;	
    // (โน) THAI CHARACTER SARA O, THAI CHARACTER NO NU	[2E38 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E19, 0x0062 };
    uint32_t const ces[12] = { 0x2E38, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_265)
{
    // 0E43 0E19 0021;	
    // (ใน) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER NO NU	[2E38 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E19, 0x0021 };
    uint32_t const ces[12] = { 0x2E38, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_266)
{
    // 0E43 0E19 003F;	
    // (ใน) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER NO NU	[2E38 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E19, 0x003F };
    uint32_t const ces[12] = { 0x2E38, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_267)
{
    // 0E43 0E19 0061;	
    // (ใน) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER NO NU	[2E38 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E19, 0x0061 };
    uint32_t const ces[12] = { 0x2E38, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_268)
{
    // 0E43 0E19 0041;	
    // (ใน) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER NO NU	[2E38 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E19, 0x0041 };
    uint32_t const ces[12] = { 0x2E38, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_269)
{
    // 0E43 0E19 0062;	
    // (ใน) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER NO NU	[2E38 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E19, 0x0062 };
    uint32_t const ces[12] = { 0x2E38, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_270)
{
    // 0E44 0E19 0021;	
    // (ไน) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER NO NU	[2E38 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E19, 0x0021 };
    uint32_t const ces[12] = { 0x2E38, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_271)
{
    // 0E44 0E19 003F;	
    // (ไน) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER NO NU	[2E38 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E19, 0x003F };
    uint32_t const ces[12] = { 0x2E38, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_272)
{
    // 0E44 0E19 0061;	
    // (ไน) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER NO NU	[2E38 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E19, 0x0061 };
    uint32_t const ces[12] = { 0x2E38, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_273)
{
    // 0E44 0E19 0041;	
    // (ไน) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER NO NU	[2E38 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E19, 0x0041 };
    uint32_t const ces[12] = { 0x2E38, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_274)
{
    // 0E44 0E19 0062;	
    // (ไน) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER NO NU	[2E38 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E19, 0x0062 };
    uint32_t const ces[12] = { 0x2E38, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_275)
{
    // 0E1A 0021;	
    // (บ) THAI CHARACTER BO BAIMAI	[2E39 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E1A, 0x0021 };
    uint32_t const ces[9] = { 0x2E39, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_276)
{
    // 0E1A 003F;	
    // (บ) THAI CHARACTER BO BAIMAI	[2E39 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E1A, 0x003F };
    uint32_t const ces[9] = { 0x2E39, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_277)
{
    // 0E1A 0061;	
    // (บ) THAI CHARACTER BO BAIMAI	[2E39 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E1A, 0x0061 };
    uint32_t const ces[9] = { 0x2E39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_278)
{
    // 0E1A 0041;	
    // (บ) THAI CHARACTER BO BAIMAI	[2E39 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E1A, 0x0041 };
    uint32_t const ces[9] = { 0x2E39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_279)
{
    // 0E1A 0062;	
    // (บ) THAI CHARACTER BO BAIMAI	[2E39 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E1A, 0x0062 };
    uint32_t const ces[9] = { 0x2E39, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_280)
{
    // 0E40 0E1A 0021;	
    // (เบ) THAI CHARACTER SARA E, THAI CHARACTER BO BAIMAI	[2E39 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E1A, 0x0021 };
    uint32_t const ces[12] = { 0x2E39, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_281)
{
    // 0E40 0E1A 003F;	
    // (เบ) THAI CHARACTER SARA E, THAI CHARACTER BO BAIMAI	[2E39 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E1A, 0x003F };
    uint32_t const ces[12] = { 0x2E39, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_282)
{
    // 0E40 0E1A 0061;	
    // (เบ) THAI CHARACTER SARA E, THAI CHARACTER BO BAIMAI	[2E39 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E1A, 0x0061 };
    uint32_t const ces[12] = { 0x2E39, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_283)
{
    // 0E40 0E1A 0041;	
    // (เบ) THAI CHARACTER SARA E, THAI CHARACTER BO BAIMAI	[2E39 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E1A, 0x0041 };
    uint32_t const ces[12] = { 0x2E39, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_284)
{
    // 0E40 0E1A 0062;	
    // (เบ) THAI CHARACTER SARA E, THAI CHARACTER BO BAIMAI	[2E39 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E1A, 0x0062 };
    uint32_t const ces[12] = { 0x2E39, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_285)
{
    // 0E41 0E1A 0021;	
    // (แบ) THAI CHARACTER SARA AE, THAI CHARACTER BO BAIMAI	[2E39 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E1A, 0x0021 };
    uint32_t const ces[12] = { 0x2E39, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_286)
{
    // 0E41 0E1A 003F;	
    // (แบ) THAI CHARACTER SARA AE, THAI CHARACTER BO BAIMAI	[2E39 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E1A, 0x003F };
    uint32_t const ces[12] = { 0x2E39, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_287)
{
    // 0E41 0E1A 0061;	
    // (แบ) THAI CHARACTER SARA AE, THAI CHARACTER BO BAIMAI	[2E39 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E1A, 0x0061 };
    uint32_t const ces[12] = { 0x2E39, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_288)
{
    // 0E41 0E1A 0041;	
    // (แบ) THAI CHARACTER SARA AE, THAI CHARACTER BO BAIMAI	[2E39 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E1A, 0x0041 };
    uint32_t const ces[12] = { 0x2E39, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_289)
{
    // 0E41 0E1A 0062;	
    // (แบ) THAI CHARACTER SARA AE, THAI CHARACTER BO BAIMAI	[2E39 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E1A, 0x0062 };
    uint32_t const ces[12] = { 0x2E39, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_290)
{
    // 0E42 0E1A 0021;	
    // (โบ) THAI CHARACTER SARA O, THAI CHARACTER BO BAIMAI	[2E39 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E1A, 0x0021 };
    uint32_t const ces[12] = { 0x2E39, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_291)
{
    // 0E42 0E1A 003F;	
    // (โบ) THAI CHARACTER SARA O, THAI CHARACTER BO BAIMAI	[2E39 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E1A, 0x003F };
    uint32_t const ces[12] = { 0x2E39, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_292)
{
    // 0E42 0E1A 0061;	
    // (โบ) THAI CHARACTER SARA O, THAI CHARACTER BO BAIMAI	[2E39 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E1A, 0x0061 };
    uint32_t const ces[12] = { 0x2E39, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_293)
{
    // 0E42 0E1A 0041;	
    // (โบ) THAI CHARACTER SARA O, THAI CHARACTER BO BAIMAI	[2E39 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E1A, 0x0041 };
    uint32_t const ces[12] = { 0x2E39, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_294)
{
    // 0E42 0E1A 0062;	
    // (โบ) THAI CHARACTER SARA O, THAI CHARACTER BO BAIMAI	[2E39 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E1A, 0x0062 };
    uint32_t const ces[12] = { 0x2E39, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_295)
{
    // 0E43 0E1A 0021;	
    // (ใบ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER BO BAIMAI	[2E39 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E1A, 0x0021 };
    uint32_t const ces[12] = { 0x2E39, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_296)
{
    // 0E43 0E1A 003F;	
    // (ใบ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER BO BAIMAI	[2E39 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E1A, 0x003F };
    uint32_t const ces[12] = { 0x2E39, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_297)
{
    // 0E43 0E1A 0061;	
    // (ใบ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER BO BAIMAI	[2E39 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E1A, 0x0061 };
    uint32_t const ces[12] = { 0x2E39, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_298)
{
    // 0E43 0E1A 0041;	
    // (ใบ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER BO BAIMAI	[2E39 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E1A, 0x0041 };
    uint32_t const ces[12] = { 0x2E39, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_299)
{
    // 0E43 0E1A 0062;	
    // (ใบ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER BO BAIMAI	[2E39 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E1A, 0x0062 };
    uint32_t const ces[12] = { 0x2E39, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_300)
{
    // 0E44 0E1A 0021;	
    // (ไบ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER BO BAIMAI	[2E39 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E1A, 0x0021 };
    uint32_t const ces[12] = { 0x2E39, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_301)
{
    // 0E44 0E1A 003F;	
    // (ไบ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER BO BAIMAI	[2E39 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E1A, 0x003F };
    uint32_t const ces[12] = { 0x2E39, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_302)
{
    // 0E44 0E1A 0061;	
    // (ไบ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER BO BAIMAI	[2E39 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E1A, 0x0061 };
    uint32_t const ces[12] = { 0x2E39, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_303)
{
    // 0E44 0E1A 0041;	
    // (ไบ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER BO BAIMAI	[2E39 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E1A, 0x0041 };
    uint32_t const ces[12] = { 0x2E39, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_304)
{
    // 0E44 0E1A 0062;	
    // (ไบ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER BO BAIMAI	[2E39 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E1A, 0x0062 };
    uint32_t const ces[12] = { 0x2E39, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_305)
{
    // 0E1B 0021;	
    // (ป) THAI CHARACTER PO PLA	[2E3A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E1B, 0x0021 };
    uint32_t const ces[9] = { 0x2E3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_306)
{
    // 0E1B 003F;	
    // (ป) THAI CHARACTER PO PLA	[2E3A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E1B, 0x003F };
    uint32_t const ces[9] = { 0x2E3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_307)
{
    // 0E1B 0061;	
    // (ป) THAI CHARACTER PO PLA	[2E3A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E1B, 0x0061 };
    uint32_t const ces[9] = { 0x2E3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_308)
{
    // 0E1B 0041;	
    // (ป) THAI CHARACTER PO PLA	[2E3A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E1B, 0x0041 };
    uint32_t const ces[9] = { 0x2E3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_309)
{
    // 0E1B 0062;	
    // (ป) THAI CHARACTER PO PLA	[2E3A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E1B, 0x0062 };
    uint32_t const ces[9] = { 0x2E3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_310)
{
    // 0E40 0E1B 0021;	
    // (เป) THAI CHARACTER SARA E, THAI CHARACTER PO PLA	[2E3A 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E1B, 0x0021 };
    uint32_t const ces[12] = { 0x2E3A, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_311)
{
    // 0E40 0E1B 003F;	
    // (เป) THAI CHARACTER SARA E, THAI CHARACTER PO PLA	[2E3A 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E1B, 0x003F };
    uint32_t const ces[12] = { 0x2E3A, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_312)
{
    // 0E40 0E1B 0061;	
    // (เป) THAI CHARACTER SARA E, THAI CHARACTER PO PLA	[2E3A 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E1B, 0x0061 };
    uint32_t const ces[12] = { 0x2E3A, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_313)
{
    // 0E40 0E1B 0041;	
    // (เป) THAI CHARACTER SARA E, THAI CHARACTER PO PLA	[2E3A 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E1B, 0x0041 };
    uint32_t const ces[12] = { 0x2E3A, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_314)
{
    // 0E40 0E1B 0062;	
    // (เป) THAI CHARACTER SARA E, THAI CHARACTER PO PLA	[2E3A 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E1B, 0x0062 };
    uint32_t const ces[12] = { 0x2E3A, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_315)
{
    // 0E41 0E1B 0021;	
    // (แป) THAI CHARACTER SARA AE, THAI CHARACTER PO PLA	[2E3A 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E1B, 0x0021 };
    uint32_t const ces[12] = { 0x2E3A, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_316)
{
    // 0E41 0E1B 003F;	
    // (แป) THAI CHARACTER SARA AE, THAI CHARACTER PO PLA	[2E3A 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E1B, 0x003F };
    uint32_t const ces[12] = { 0x2E3A, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_317)
{
    // 0E41 0E1B 0061;	
    // (แป) THAI CHARACTER SARA AE, THAI CHARACTER PO PLA	[2E3A 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E1B, 0x0061 };
    uint32_t const ces[12] = { 0x2E3A, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_318)
{
    // 0E41 0E1B 0041;	
    // (แป) THAI CHARACTER SARA AE, THAI CHARACTER PO PLA	[2E3A 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E1B, 0x0041 };
    uint32_t const ces[12] = { 0x2E3A, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_319)
{
    // 0E41 0E1B 0062;	
    // (แป) THAI CHARACTER SARA AE, THAI CHARACTER PO PLA	[2E3A 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E1B, 0x0062 };
    uint32_t const ces[12] = { 0x2E3A, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_320)
{
    // 0E42 0E1B 0021;	
    // (โป) THAI CHARACTER SARA O, THAI CHARACTER PO PLA	[2E3A 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E1B, 0x0021 };
    uint32_t const ces[12] = { 0x2E3A, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_321)
{
    // 0E42 0E1B 003F;	
    // (โป) THAI CHARACTER SARA O, THAI CHARACTER PO PLA	[2E3A 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E1B, 0x003F };
    uint32_t const ces[12] = { 0x2E3A, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_322)
{
    // 0E42 0E1B 0061;	
    // (โป) THAI CHARACTER SARA O, THAI CHARACTER PO PLA	[2E3A 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E1B, 0x0061 };
    uint32_t const ces[12] = { 0x2E3A, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_323)
{
    // 0E42 0E1B 0041;	
    // (โป) THAI CHARACTER SARA O, THAI CHARACTER PO PLA	[2E3A 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E1B, 0x0041 };
    uint32_t const ces[12] = { 0x2E3A, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_324)
{
    // 0E42 0E1B 0062;	
    // (โป) THAI CHARACTER SARA O, THAI CHARACTER PO PLA	[2E3A 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E1B, 0x0062 };
    uint32_t const ces[12] = { 0x2E3A, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_325)
{
    // 0E43 0E1B 0021;	
    // (ใป) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER PO PLA	[2E3A 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E1B, 0x0021 };
    uint32_t const ces[12] = { 0x2E3A, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_326)
{
    // 0E43 0E1B 003F;	
    // (ใป) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER PO PLA	[2E3A 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E1B, 0x003F };
    uint32_t const ces[12] = { 0x2E3A, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_327)
{
    // 0E43 0E1B 0061;	
    // (ใป) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER PO PLA	[2E3A 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E1B, 0x0061 };
    uint32_t const ces[12] = { 0x2E3A, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_328)
{
    // 0E43 0E1B 0041;	
    // (ใป) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER PO PLA	[2E3A 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E1B, 0x0041 };
    uint32_t const ces[12] = { 0x2E3A, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_329)
{
    // 0E43 0E1B 0062;	
    // (ใป) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER PO PLA	[2E3A 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E1B, 0x0062 };
    uint32_t const ces[12] = { 0x2E3A, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_330)
{
    // 0E44 0E1B 0021;	
    // (ไป) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER PO PLA	[2E3A 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E1B, 0x0021 };
    uint32_t const ces[12] = { 0x2E3A, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_331)
{
    // 0E44 0E1B 003F;	
    // (ไป) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER PO PLA	[2E3A 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E1B, 0x003F };
    uint32_t const ces[12] = { 0x2E3A, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_332)
{
    // 0E44 0E1B 0061;	
    // (ไป) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER PO PLA	[2E3A 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E1B, 0x0061 };
    uint32_t const ces[12] = { 0x2E3A, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_333)
{
    // 0E44 0E1B 0041;	
    // (ไป) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER PO PLA	[2E3A 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E1B, 0x0041 };
    uint32_t const ces[12] = { 0x2E3A, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_334)
{
    // 0E44 0E1B 0062;	
    // (ไป) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER PO PLA	[2E3A 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E1B, 0x0062 };
    uint32_t const ces[12] = { 0x2E3A, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_335)
{
    // 0E1C 0021;	
    // (ผ) THAI CHARACTER PHO PHUNG	[2E3B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E1C, 0x0021 };
    uint32_t const ces[9] = { 0x2E3B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_336)
{
    // 0E1C 003F;	
    // (ผ) THAI CHARACTER PHO PHUNG	[2E3B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E1C, 0x003F };
    uint32_t const ces[9] = { 0x2E3B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_337)
{
    // 0E1C 0061;	
    // (ผ) THAI CHARACTER PHO PHUNG	[2E3B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E1C, 0x0061 };
    uint32_t const ces[9] = { 0x2E3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_338)
{
    // 0E1C 0041;	
    // (ผ) THAI CHARACTER PHO PHUNG	[2E3B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E1C, 0x0041 };
    uint32_t const ces[9] = { 0x2E3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_339)
{
    // 0E1C 0062;	
    // (ผ) THAI CHARACTER PHO PHUNG	[2E3B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E1C, 0x0062 };
    uint32_t const ces[9] = { 0x2E3B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_340)
{
    // 0E40 0E1C 0021;	
    // (เผ) THAI CHARACTER SARA E, THAI CHARACTER PHO PHUNG	[2E3B 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E1C, 0x0021 };
    uint32_t const ces[12] = { 0x2E3B, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_341)
{
    // 0E40 0E1C 003F;	
    // (เผ) THAI CHARACTER SARA E, THAI CHARACTER PHO PHUNG	[2E3B 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E1C, 0x003F };
    uint32_t const ces[12] = { 0x2E3B, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_342)
{
    // 0E40 0E1C 0061;	
    // (เผ) THAI CHARACTER SARA E, THAI CHARACTER PHO PHUNG	[2E3B 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E1C, 0x0061 };
    uint32_t const ces[12] = { 0x2E3B, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_343)
{
    // 0E40 0E1C 0041;	
    // (เผ) THAI CHARACTER SARA E, THAI CHARACTER PHO PHUNG	[2E3B 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E1C, 0x0041 };
    uint32_t const ces[12] = { 0x2E3B, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_344)
{
    // 0E40 0E1C 0062;	
    // (เผ) THAI CHARACTER SARA E, THAI CHARACTER PHO PHUNG	[2E3B 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E1C, 0x0062 };
    uint32_t const ces[12] = { 0x2E3B, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_345)
{
    // 0E41 0E1C 0021;	
    // (แผ) THAI CHARACTER SARA AE, THAI CHARACTER PHO PHUNG	[2E3B 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E1C, 0x0021 };
    uint32_t const ces[12] = { 0x2E3B, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_346)
{
    // 0E41 0E1C 003F;	
    // (แผ) THAI CHARACTER SARA AE, THAI CHARACTER PHO PHUNG	[2E3B 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E1C, 0x003F };
    uint32_t const ces[12] = { 0x2E3B, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_347)
{
    // 0E41 0E1C 0061;	
    // (แผ) THAI CHARACTER SARA AE, THAI CHARACTER PHO PHUNG	[2E3B 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E1C, 0x0061 };
    uint32_t const ces[12] = { 0x2E3B, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_348)
{
    // 0E41 0E1C 0041;	
    // (แผ) THAI CHARACTER SARA AE, THAI CHARACTER PHO PHUNG	[2E3B 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E1C, 0x0041 };
    uint32_t const ces[12] = { 0x2E3B, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_349)
{
    // 0E41 0E1C 0062;	
    // (แผ) THAI CHARACTER SARA AE, THAI CHARACTER PHO PHUNG	[2E3B 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E1C, 0x0062 };
    uint32_t const ces[12] = { 0x2E3B, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_350)
{
    // 0E42 0E1C 0021;	
    // (โผ) THAI CHARACTER SARA O, THAI CHARACTER PHO PHUNG	[2E3B 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E1C, 0x0021 };
    uint32_t const ces[12] = { 0x2E3B, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_351)
{
    // 0E42 0E1C 003F;	
    // (โผ) THAI CHARACTER SARA O, THAI CHARACTER PHO PHUNG	[2E3B 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E1C, 0x003F };
    uint32_t const ces[12] = { 0x2E3B, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_352)
{
    // 0E42 0E1C 0061;	
    // (โผ) THAI CHARACTER SARA O, THAI CHARACTER PHO PHUNG	[2E3B 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E1C, 0x0061 };
    uint32_t const ces[12] = { 0x2E3B, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_353)
{
    // 0E42 0E1C 0041;	
    // (โผ) THAI CHARACTER SARA O, THAI CHARACTER PHO PHUNG	[2E3B 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E1C, 0x0041 };
    uint32_t const ces[12] = { 0x2E3B, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_354)
{
    // 0E42 0E1C 0062;	
    // (โผ) THAI CHARACTER SARA O, THAI CHARACTER PHO PHUNG	[2E3B 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E1C, 0x0062 };
    uint32_t const ces[12] = { 0x2E3B, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_355)
{
    // 0E43 0E1C 0021;	
    // (ใผ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER PHO PHUNG	[2E3B 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E1C, 0x0021 };
    uint32_t const ces[12] = { 0x2E3B, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_356)
{
    // 0E43 0E1C 003F;	
    // (ใผ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER PHO PHUNG	[2E3B 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E1C, 0x003F };
    uint32_t const ces[12] = { 0x2E3B, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_357)
{
    // 0E43 0E1C 0061;	
    // (ใผ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER PHO PHUNG	[2E3B 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E1C, 0x0061 };
    uint32_t const ces[12] = { 0x2E3B, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_358)
{
    // 0E43 0E1C 0041;	
    // (ใผ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER PHO PHUNG	[2E3B 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E1C, 0x0041 };
    uint32_t const ces[12] = { 0x2E3B, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_359)
{
    // 0E43 0E1C 0062;	
    // (ใผ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER PHO PHUNG	[2E3B 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E1C, 0x0062 };
    uint32_t const ces[12] = { 0x2E3B, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_360)
{
    // 0E44 0E1C 0021;	
    // (ไผ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER PHO PHUNG	[2E3B 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E1C, 0x0021 };
    uint32_t const ces[12] = { 0x2E3B, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_361)
{
    // 0E44 0E1C 003F;	
    // (ไผ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER PHO PHUNG	[2E3B 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E1C, 0x003F };
    uint32_t const ces[12] = { 0x2E3B, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_362)
{
    // 0E44 0E1C 0061;	
    // (ไผ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER PHO PHUNG	[2E3B 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E1C, 0x0061 };
    uint32_t const ces[12] = { 0x2E3B, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_363)
{
    // 0E44 0E1C 0041;	
    // (ไผ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER PHO PHUNG	[2E3B 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E1C, 0x0041 };
    uint32_t const ces[12] = { 0x2E3B, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_364)
{
    // 0E44 0E1C 0062;	
    // (ไผ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER PHO PHUNG	[2E3B 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E1C, 0x0062 };
    uint32_t const ces[12] = { 0x2E3B, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_365)
{
    // 0E1D 0021;	
    // (ฝ) THAI CHARACTER FO FA	[2E3C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E1D, 0x0021 };
    uint32_t const ces[9] = { 0x2E3C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_366)
{
    // 0E1D 003F;	
    // (ฝ) THAI CHARACTER FO FA	[2E3C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E1D, 0x003F };
    uint32_t const ces[9] = { 0x2E3C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_367)
{
    // 0E1D 0061;	
    // (ฝ) THAI CHARACTER FO FA	[2E3C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E1D, 0x0061 };
    uint32_t const ces[9] = { 0x2E3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_368)
{
    // 0E1D 0041;	
    // (ฝ) THAI CHARACTER FO FA	[2E3C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E1D, 0x0041 };
    uint32_t const ces[9] = { 0x2E3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_369)
{
    // 0E1D 0062;	
    // (ฝ) THAI CHARACTER FO FA	[2E3C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E1D, 0x0062 };
    uint32_t const ces[9] = { 0x2E3C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_370)
{
    // 0E40 0E1D 0021;	
    // (เฝ) THAI CHARACTER SARA E, THAI CHARACTER FO FA	[2E3C 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E1D, 0x0021 };
    uint32_t const ces[12] = { 0x2E3C, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_371)
{
    // 0E40 0E1D 003F;	
    // (เฝ) THAI CHARACTER SARA E, THAI CHARACTER FO FA	[2E3C 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E1D, 0x003F };
    uint32_t const ces[12] = { 0x2E3C, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_372)
{
    // 0E40 0E1D 0061;	
    // (เฝ) THAI CHARACTER SARA E, THAI CHARACTER FO FA	[2E3C 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E1D, 0x0061 };
    uint32_t const ces[12] = { 0x2E3C, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_373)
{
    // 0E40 0E1D 0041;	
    // (เฝ) THAI CHARACTER SARA E, THAI CHARACTER FO FA	[2E3C 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E1D, 0x0041 };
    uint32_t const ces[12] = { 0x2E3C, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_374)
{
    // 0E40 0E1D 0062;	
    // (เฝ) THAI CHARACTER SARA E, THAI CHARACTER FO FA	[2E3C 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E1D, 0x0062 };
    uint32_t const ces[12] = { 0x2E3C, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_375)
{
    // 0E41 0E1D 0021;	
    // (แฝ) THAI CHARACTER SARA AE, THAI CHARACTER FO FA	[2E3C 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E1D, 0x0021 };
    uint32_t const ces[12] = { 0x2E3C, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_376)
{
    // 0E41 0E1D 003F;	
    // (แฝ) THAI CHARACTER SARA AE, THAI CHARACTER FO FA	[2E3C 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E1D, 0x003F };
    uint32_t const ces[12] = { 0x2E3C, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_377)
{
    // 0E41 0E1D 0061;	
    // (แฝ) THAI CHARACTER SARA AE, THAI CHARACTER FO FA	[2E3C 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E1D, 0x0061 };
    uint32_t const ces[12] = { 0x2E3C, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_378)
{
    // 0E41 0E1D 0041;	
    // (แฝ) THAI CHARACTER SARA AE, THAI CHARACTER FO FA	[2E3C 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E1D, 0x0041 };
    uint32_t const ces[12] = { 0x2E3C, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_379)
{
    // 0E41 0E1D 0062;	
    // (แฝ) THAI CHARACTER SARA AE, THAI CHARACTER FO FA	[2E3C 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E1D, 0x0062 };
    uint32_t const ces[12] = { 0x2E3C, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_380)
{
    // 0E42 0E1D 0021;	
    // (โฝ) THAI CHARACTER SARA O, THAI CHARACTER FO FA	[2E3C 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E1D, 0x0021 };
    uint32_t const ces[12] = { 0x2E3C, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_381)
{
    // 0E42 0E1D 003F;	
    // (โฝ) THAI CHARACTER SARA O, THAI CHARACTER FO FA	[2E3C 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E1D, 0x003F };
    uint32_t const ces[12] = { 0x2E3C, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_382)
{
    // 0E42 0E1D 0061;	
    // (โฝ) THAI CHARACTER SARA O, THAI CHARACTER FO FA	[2E3C 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E1D, 0x0061 };
    uint32_t const ces[12] = { 0x2E3C, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_383)
{
    // 0E42 0E1D 0041;	
    // (โฝ) THAI CHARACTER SARA O, THAI CHARACTER FO FA	[2E3C 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E1D, 0x0041 };
    uint32_t const ces[12] = { 0x2E3C, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_384)
{
    // 0E42 0E1D 0062;	
    // (โฝ) THAI CHARACTER SARA O, THAI CHARACTER FO FA	[2E3C 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E1D, 0x0062 };
    uint32_t const ces[12] = { 0x2E3C, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_385)
{
    // 0E43 0E1D 0021;	
    // (ใฝ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER FO FA	[2E3C 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E1D, 0x0021 };
    uint32_t const ces[12] = { 0x2E3C, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_386)
{
    // 0E43 0E1D 003F;	
    // (ใฝ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER FO FA	[2E3C 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E1D, 0x003F };
    uint32_t const ces[12] = { 0x2E3C, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_387)
{
    // 0E43 0E1D 0061;	
    // (ใฝ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER FO FA	[2E3C 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E1D, 0x0061 };
    uint32_t const ces[12] = { 0x2E3C, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_388)
{
    // 0E43 0E1D 0041;	
    // (ใฝ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER FO FA	[2E3C 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E1D, 0x0041 };
    uint32_t const ces[12] = { 0x2E3C, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_389)
{
    // 0E43 0E1D 0062;	
    // (ใฝ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER FO FA	[2E3C 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E1D, 0x0062 };
    uint32_t const ces[12] = { 0x2E3C, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_390)
{
    // 0E44 0E1D 0021;	
    // (ไฝ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER FO FA	[2E3C 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E1D, 0x0021 };
    uint32_t const ces[12] = { 0x2E3C, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_391)
{
    // 0E44 0E1D 003F;	
    // (ไฝ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER FO FA	[2E3C 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E1D, 0x003F };
    uint32_t const ces[12] = { 0x2E3C, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_392)
{
    // 0E44 0E1D 0061;	
    // (ไฝ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER FO FA	[2E3C 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E1D, 0x0061 };
    uint32_t const ces[12] = { 0x2E3C, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_393)
{
    // 0E44 0E1D 0041;	
    // (ไฝ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER FO FA	[2E3C 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E1D, 0x0041 };
    uint32_t const ces[12] = { 0x2E3C, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_394)
{
    // 0E44 0E1D 0062;	
    // (ไฝ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER FO FA	[2E3C 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E1D, 0x0062 };
    uint32_t const ces[12] = { 0x2E3C, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_395)
{
    // 0E1E 0021;	
    // (พ) THAI CHARACTER PHO PHAN	[2E3D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E1E, 0x0021 };
    uint32_t const ces[9] = { 0x2E3D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_396)
{
    // 0E1E 003F;	
    // (พ) THAI CHARACTER PHO PHAN	[2E3D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E1E, 0x003F };
    uint32_t const ces[9] = { 0x2E3D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_397)
{
    // 0E1E 0061;	
    // (พ) THAI CHARACTER PHO PHAN	[2E3D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E1E, 0x0061 };
    uint32_t const ces[9] = { 0x2E3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_398)
{
    // 0E1E 0041;	
    // (พ) THAI CHARACTER PHO PHAN	[2E3D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E1E, 0x0041 };
    uint32_t const ces[9] = { 0x2E3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_399)
{
    // 0E1E 0062;	
    // (พ) THAI CHARACTER PHO PHAN	[2E3D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E1E, 0x0062 };
    uint32_t const ces[9] = { 0x2E3D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_400)
{
    // 0E40 0E1E 0021;	
    // (เพ) THAI CHARACTER SARA E, THAI CHARACTER PHO PHAN	[2E3D 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E1E, 0x0021 };
    uint32_t const ces[12] = { 0x2E3D, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_401)
{
    // 0E40 0E1E 003F;	
    // (เพ) THAI CHARACTER SARA E, THAI CHARACTER PHO PHAN	[2E3D 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E1E, 0x003F };
    uint32_t const ces[12] = { 0x2E3D, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_402)
{
    // 0E40 0E1E 0061;	
    // (เพ) THAI CHARACTER SARA E, THAI CHARACTER PHO PHAN	[2E3D 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E1E, 0x0061 };
    uint32_t const ces[12] = { 0x2E3D, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_403)
{
    // 0E40 0E1E 0041;	
    // (เพ) THAI CHARACTER SARA E, THAI CHARACTER PHO PHAN	[2E3D 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E1E, 0x0041 };
    uint32_t const ces[12] = { 0x2E3D, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_404)
{
    // 0E40 0E1E 0062;	
    // (เพ) THAI CHARACTER SARA E, THAI CHARACTER PHO PHAN	[2E3D 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E1E, 0x0062 };
    uint32_t const ces[12] = { 0x2E3D, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_405)
{
    // 0E41 0E1E 0021;	
    // (แพ) THAI CHARACTER SARA AE, THAI CHARACTER PHO PHAN	[2E3D 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E1E, 0x0021 };
    uint32_t const ces[12] = { 0x2E3D, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_406)
{
    // 0E41 0E1E 003F;	
    // (แพ) THAI CHARACTER SARA AE, THAI CHARACTER PHO PHAN	[2E3D 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E1E, 0x003F };
    uint32_t const ces[12] = { 0x2E3D, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_407)
{
    // 0E41 0E1E 0061;	
    // (แพ) THAI CHARACTER SARA AE, THAI CHARACTER PHO PHAN	[2E3D 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E1E, 0x0061 };
    uint32_t const ces[12] = { 0x2E3D, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_408)
{
    // 0E41 0E1E 0041;	
    // (แพ) THAI CHARACTER SARA AE, THAI CHARACTER PHO PHAN	[2E3D 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E1E, 0x0041 };
    uint32_t const ces[12] = { 0x2E3D, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_409)
{
    // 0E41 0E1E 0062;	
    // (แพ) THAI CHARACTER SARA AE, THAI CHARACTER PHO PHAN	[2E3D 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E1E, 0x0062 };
    uint32_t const ces[12] = { 0x2E3D, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_410)
{
    // 0E42 0E1E 0021;	
    // (โพ) THAI CHARACTER SARA O, THAI CHARACTER PHO PHAN	[2E3D 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E1E, 0x0021 };
    uint32_t const ces[12] = { 0x2E3D, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_411)
{
    // 0E42 0E1E 003F;	
    // (โพ) THAI CHARACTER SARA O, THAI CHARACTER PHO PHAN	[2E3D 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E1E, 0x003F };
    uint32_t const ces[12] = { 0x2E3D, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_412)
{
    // 0E42 0E1E 0061;	
    // (โพ) THAI CHARACTER SARA O, THAI CHARACTER PHO PHAN	[2E3D 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E1E, 0x0061 };
    uint32_t const ces[12] = { 0x2E3D, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_413)
{
    // 0E42 0E1E 0041;	
    // (โพ) THAI CHARACTER SARA O, THAI CHARACTER PHO PHAN	[2E3D 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E1E, 0x0041 };
    uint32_t const ces[12] = { 0x2E3D, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_414)
{
    // 0E42 0E1E 0062;	
    // (โพ) THAI CHARACTER SARA O, THAI CHARACTER PHO PHAN	[2E3D 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E1E, 0x0062 };
    uint32_t const ces[12] = { 0x2E3D, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_415)
{
    // 0E43 0E1E 0021;	
    // (ใพ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER PHO PHAN	[2E3D 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E1E, 0x0021 };
    uint32_t const ces[12] = { 0x2E3D, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_416)
{
    // 0E43 0E1E 003F;	
    // (ใพ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER PHO PHAN	[2E3D 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E1E, 0x003F };
    uint32_t const ces[12] = { 0x2E3D, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_417)
{
    // 0E43 0E1E 0061;	
    // (ใพ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER PHO PHAN	[2E3D 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E1E, 0x0061 };
    uint32_t const ces[12] = { 0x2E3D, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_418)
{
    // 0E43 0E1E 0041;	
    // (ใพ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER PHO PHAN	[2E3D 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E1E, 0x0041 };
    uint32_t const ces[12] = { 0x2E3D, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_419)
{
    // 0E43 0E1E 0062;	
    // (ใพ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER PHO PHAN	[2E3D 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E1E, 0x0062 };
    uint32_t const ces[12] = { 0x2E3D, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_420)
{
    // 0E44 0E1E 0021;	
    // (ไพ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER PHO PHAN	[2E3D 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E1E, 0x0021 };
    uint32_t const ces[12] = { 0x2E3D, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_421)
{
    // 0E44 0E1E 003F;	
    // (ไพ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER PHO PHAN	[2E3D 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E1E, 0x003F };
    uint32_t const ces[12] = { 0x2E3D, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_422)
{
    // 0E44 0E1E 0061;	
    // (ไพ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER PHO PHAN	[2E3D 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E1E, 0x0061 };
    uint32_t const ces[12] = { 0x2E3D, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_423)
{
    // 0E44 0E1E 0041;	
    // (ไพ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER PHO PHAN	[2E3D 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E1E, 0x0041 };
    uint32_t const ces[12] = { 0x2E3D, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_424)
{
    // 0E44 0E1E 0062;	
    // (ไพ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER PHO PHAN	[2E3D 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E1E, 0x0062 };
    uint32_t const ces[12] = { 0x2E3D, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_425)
{
    // 0E1F 0021;	
    // (ฟ) THAI CHARACTER FO FAN	[2E3E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E1F, 0x0021 };
    uint32_t const ces[9] = { 0x2E3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_426)
{
    // 0E1F 003F;	
    // (ฟ) THAI CHARACTER FO FAN	[2E3E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E1F, 0x003F };
    uint32_t const ces[9] = { 0x2E3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_427)
{
    // 0E1F 0061;	
    // (ฟ) THAI CHARACTER FO FAN	[2E3E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E1F, 0x0061 };
    uint32_t const ces[9] = { 0x2E3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_428)
{
    // 0E1F 0041;	
    // (ฟ) THAI CHARACTER FO FAN	[2E3E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E1F, 0x0041 };
    uint32_t const ces[9] = { 0x2E3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_429)
{
    // 0E1F 0062;	
    // (ฟ) THAI CHARACTER FO FAN	[2E3E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E1F, 0x0062 };
    uint32_t const ces[9] = { 0x2E3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_430)
{
    // 0E40 0E1F 0021;	
    // (เฟ) THAI CHARACTER SARA E, THAI CHARACTER FO FAN	[2E3E 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E1F, 0x0021 };
    uint32_t const ces[12] = { 0x2E3E, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_431)
{
    // 0E40 0E1F 003F;	
    // (เฟ) THAI CHARACTER SARA E, THAI CHARACTER FO FAN	[2E3E 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E1F, 0x003F };
    uint32_t const ces[12] = { 0x2E3E, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_432)
{
    // 0E40 0E1F 0061;	
    // (เฟ) THAI CHARACTER SARA E, THAI CHARACTER FO FAN	[2E3E 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E1F, 0x0061 };
    uint32_t const ces[12] = { 0x2E3E, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_433)
{
    // 0E40 0E1F 0041;	
    // (เฟ) THAI CHARACTER SARA E, THAI CHARACTER FO FAN	[2E3E 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E1F, 0x0041 };
    uint32_t const ces[12] = { 0x2E3E, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_434)
{
    // 0E40 0E1F 0062;	
    // (เฟ) THAI CHARACTER SARA E, THAI CHARACTER FO FAN	[2E3E 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E1F, 0x0062 };
    uint32_t const ces[12] = { 0x2E3E, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_435)
{
    // 0E41 0E1F 0021;	
    // (แฟ) THAI CHARACTER SARA AE, THAI CHARACTER FO FAN	[2E3E 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E1F, 0x0021 };
    uint32_t const ces[12] = { 0x2E3E, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_436)
{
    // 0E41 0E1F 003F;	
    // (แฟ) THAI CHARACTER SARA AE, THAI CHARACTER FO FAN	[2E3E 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E1F, 0x003F };
    uint32_t const ces[12] = { 0x2E3E, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_437)
{
    // 0E41 0E1F 0061;	
    // (แฟ) THAI CHARACTER SARA AE, THAI CHARACTER FO FAN	[2E3E 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E1F, 0x0061 };
    uint32_t const ces[12] = { 0x2E3E, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_438)
{
    // 0E41 0E1F 0041;	
    // (แฟ) THAI CHARACTER SARA AE, THAI CHARACTER FO FAN	[2E3E 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E1F, 0x0041 };
    uint32_t const ces[12] = { 0x2E3E, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_439)
{
    // 0E41 0E1F 0062;	
    // (แฟ) THAI CHARACTER SARA AE, THAI CHARACTER FO FAN	[2E3E 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E1F, 0x0062 };
    uint32_t const ces[12] = { 0x2E3E, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_440)
{
    // 0E42 0E1F 0021;	
    // (โฟ) THAI CHARACTER SARA O, THAI CHARACTER FO FAN	[2E3E 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E1F, 0x0021 };
    uint32_t const ces[12] = { 0x2E3E, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_441)
{
    // 0E42 0E1F 003F;	
    // (โฟ) THAI CHARACTER SARA O, THAI CHARACTER FO FAN	[2E3E 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E1F, 0x003F };
    uint32_t const ces[12] = { 0x2E3E, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_442)
{
    // 0E42 0E1F 0061;	
    // (โฟ) THAI CHARACTER SARA O, THAI CHARACTER FO FAN	[2E3E 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E1F, 0x0061 };
    uint32_t const ces[12] = { 0x2E3E, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_443)
{
    // 0E42 0E1F 0041;	
    // (โฟ) THAI CHARACTER SARA O, THAI CHARACTER FO FAN	[2E3E 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E1F, 0x0041 };
    uint32_t const ces[12] = { 0x2E3E, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_444)
{
    // 0E42 0E1F 0062;	
    // (โฟ) THAI CHARACTER SARA O, THAI CHARACTER FO FAN	[2E3E 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E1F, 0x0062 };
    uint32_t const ces[12] = { 0x2E3E, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_445)
{
    // 0E43 0E1F 0021;	
    // (ใฟ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER FO FAN	[2E3E 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E1F, 0x0021 };
    uint32_t const ces[12] = { 0x2E3E, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_446)
{
    // 0E43 0E1F 003F;	
    // (ใฟ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER FO FAN	[2E3E 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E1F, 0x003F };
    uint32_t const ces[12] = { 0x2E3E, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_447)
{
    // 0E43 0E1F 0061;	
    // (ใฟ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER FO FAN	[2E3E 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E1F, 0x0061 };
    uint32_t const ces[12] = { 0x2E3E, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_448)
{
    // 0E43 0E1F 0041;	
    // (ใฟ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER FO FAN	[2E3E 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E1F, 0x0041 };
    uint32_t const ces[12] = { 0x2E3E, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_449)
{
    // 0E43 0E1F 0062;	
    // (ใฟ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER FO FAN	[2E3E 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E1F, 0x0062 };
    uint32_t const ces[12] = { 0x2E3E, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_450)
{
    // 0E44 0E1F 0021;	
    // (ไฟ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER FO FAN	[2E3E 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E1F, 0x0021 };
    uint32_t const ces[12] = { 0x2E3E, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_451)
{
    // 0E44 0E1F 003F;	
    // (ไฟ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER FO FAN	[2E3E 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E1F, 0x003F };
    uint32_t const ces[12] = { 0x2E3E, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_452)
{
    // 0E44 0E1F 0061;	
    // (ไฟ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER FO FAN	[2E3E 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E1F, 0x0061 };
    uint32_t const ces[12] = { 0x2E3E, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_453)
{
    // 0E44 0E1F 0041;	
    // (ไฟ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER FO FAN	[2E3E 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E1F, 0x0041 };
    uint32_t const ces[12] = { 0x2E3E, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_454)
{
    // 0E44 0E1F 0062;	
    // (ไฟ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER FO FAN	[2E3E 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E1F, 0x0062 };
    uint32_t const ces[12] = { 0x2E3E, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_455)
{
    // 0E20 0021;	
    // (ภ) THAI CHARACTER PHO SAMPHAO	[2E3F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E20, 0x0021 };
    uint32_t const ces[9] = { 0x2E3F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_456)
{
    // 0E20 003F;	
    // (ภ) THAI CHARACTER PHO SAMPHAO	[2E3F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E20, 0x003F };
    uint32_t const ces[9] = { 0x2E3F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_457)
{
    // 0E20 0061;	
    // (ภ) THAI CHARACTER PHO SAMPHAO	[2E3F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E20, 0x0061 };
    uint32_t const ces[9] = { 0x2E3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_458)
{
    // 0E20 0041;	
    // (ภ) THAI CHARACTER PHO SAMPHAO	[2E3F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E20, 0x0041 };
    uint32_t const ces[9] = { 0x2E3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_459)
{
    // 0E20 0062;	
    // (ภ) THAI CHARACTER PHO SAMPHAO	[2E3F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E20, 0x0062 };
    uint32_t const ces[9] = { 0x2E3F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_460)
{
    // 0E40 0E20 0021;	
    // (เภ) THAI CHARACTER SARA E, THAI CHARACTER PHO SAMPHAO	[2E3F 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E20, 0x0021 };
    uint32_t const ces[12] = { 0x2E3F, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_461)
{
    // 0E40 0E20 003F;	
    // (เภ) THAI CHARACTER SARA E, THAI CHARACTER PHO SAMPHAO	[2E3F 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E20, 0x003F };
    uint32_t const ces[12] = { 0x2E3F, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_462)
{
    // 0E40 0E20 0061;	
    // (เภ) THAI CHARACTER SARA E, THAI CHARACTER PHO SAMPHAO	[2E3F 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E20, 0x0061 };
    uint32_t const ces[12] = { 0x2E3F, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_463)
{
    // 0E40 0E20 0041;	
    // (เภ) THAI CHARACTER SARA E, THAI CHARACTER PHO SAMPHAO	[2E3F 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E20, 0x0041 };
    uint32_t const ces[12] = { 0x2E3F, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_464)
{
    // 0E40 0E20 0062;	
    // (เภ) THAI CHARACTER SARA E, THAI CHARACTER PHO SAMPHAO	[2E3F 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E20, 0x0062 };
    uint32_t const ces[12] = { 0x2E3F, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_465)
{
    // 0E41 0E20 0021;	
    // (แภ) THAI CHARACTER SARA AE, THAI CHARACTER PHO SAMPHAO	[2E3F 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E20, 0x0021 };
    uint32_t const ces[12] = { 0x2E3F, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_466)
{
    // 0E41 0E20 003F;	
    // (แภ) THAI CHARACTER SARA AE, THAI CHARACTER PHO SAMPHAO	[2E3F 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E20, 0x003F };
    uint32_t const ces[12] = { 0x2E3F, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_467)
{
    // 0E41 0E20 0061;	
    // (แภ) THAI CHARACTER SARA AE, THAI CHARACTER PHO SAMPHAO	[2E3F 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E20, 0x0061 };
    uint32_t const ces[12] = { 0x2E3F, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_468)
{
    // 0E41 0E20 0041;	
    // (แภ) THAI CHARACTER SARA AE, THAI CHARACTER PHO SAMPHAO	[2E3F 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E20, 0x0041 };
    uint32_t const ces[12] = { 0x2E3F, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_469)
{
    // 0E41 0E20 0062;	
    // (แภ) THAI CHARACTER SARA AE, THAI CHARACTER PHO SAMPHAO	[2E3F 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E20, 0x0062 };
    uint32_t const ces[12] = { 0x2E3F, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_470)
{
    // 0E42 0E20 0021;	
    // (โภ) THAI CHARACTER SARA O, THAI CHARACTER PHO SAMPHAO	[2E3F 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E20, 0x0021 };
    uint32_t const ces[12] = { 0x2E3F, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_471)
{
    // 0E42 0E20 003F;	
    // (โภ) THAI CHARACTER SARA O, THAI CHARACTER PHO SAMPHAO	[2E3F 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E20, 0x003F };
    uint32_t const ces[12] = { 0x2E3F, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_472)
{
    // 0E42 0E20 0061;	
    // (โภ) THAI CHARACTER SARA O, THAI CHARACTER PHO SAMPHAO	[2E3F 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E20, 0x0061 };
    uint32_t const ces[12] = { 0x2E3F, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_473)
{
    // 0E42 0E20 0041;	
    // (โภ) THAI CHARACTER SARA O, THAI CHARACTER PHO SAMPHAO	[2E3F 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E20, 0x0041 };
    uint32_t const ces[12] = { 0x2E3F, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_474)
{
    // 0E42 0E20 0062;	
    // (โภ) THAI CHARACTER SARA O, THAI CHARACTER PHO SAMPHAO	[2E3F 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E20, 0x0062 };
    uint32_t const ces[12] = { 0x2E3F, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_475)
{
    // 0E43 0E20 0021;	
    // (ใภ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER PHO SAMPHAO	[2E3F 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E20, 0x0021 };
    uint32_t const ces[12] = { 0x2E3F, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_476)
{
    // 0E43 0E20 003F;	
    // (ใภ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER PHO SAMPHAO	[2E3F 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E20, 0x003F };
    uint32_t const ces[12] = { 0x2E3F, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_477)
{
    // 0E43 0E20 0061;	
    // (ใภ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER PHO SAMPHAO	[2E3F 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E20, 0x0061 };
    uint32_t const ces[12] = { 0x2E3F, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_478)
{
    // 0E43 0E20 0041;	
    // (ใภ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER PHO SAMPHAO	[2E3F 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E20, 0x0041 };
    uint32_t const ces[12] = { 0x2E3F, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_479)
{
    // 0E43 0E20 0062;	
    // (ใภ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER PHO SAMPHAO	[2E3F 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E20, 0x0062 };
    uint32_t const ces[12] = { 0x2E3F, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_480)
{
    // 0E44 0E20 0021;	
    // (ไภ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER PHO SAMPHAO	[2E3F 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E20, 0x0021 };
    uint32_t const ces[12] = { 0x2E3F, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_481)
{
    // 0E44 0E20 003F;	
    // (ไภ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER PHO SAMPHAO	[2E3F 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E20, 0x003F };
    uint32_t const ces[12] = { 0x2E3F, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_482)
{
    // 0E44 0E20 0061;	
    // (ไภ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER PHO SAMPHAO	[2E3F 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E20, 0x0061 };
    uint32_t const ces[12] = { 0x2E3F, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_483)
{
    // 0E44 0E20 0041;	
    // (ไภ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER PHO SAMPHAO	[2E3F 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E20, 0x0041 };
    uint32_t const ces[12] = { 0x2E3F, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_484)
{
    // 0E44 0E20 0062;	
    // (ไภ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER PHO SAMPHAO	[2E3F 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E20, 0x0062 };
    uint32_t const ces[12] = { 0x2E3F, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_485)
{
    // 0E21 0021;	
    // (ม) THAI CHARACTER MO MA	[2E40 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E21, 0x0021 };
    uint32_t const ces[9] = { 0x2E40, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_486)
{
    // 0E21 003F;	
    // (ม) THAI CHARACTER MO MA	[2E40 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E21, 0x003F };
    uint32_t const ces[9] = { 0x2E40, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_487)
{
    // 0E21 0061;	
    // (ม) THAI CHARACTER MO MA	[2E40 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E21, 0x0061 };
    uint32_t const ces[9] = { 0x2E40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_488)
{
    // 0E21 0041;	
    // (ม) THAI CHARACTER MO MA	[2E40 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E21, 0x0041 };
    uint32_t const ces[9] = { 0x2E40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_489)
{
    // 0E21 0062;	
    // (ม) THAI CHARACTER MO MA	[2E40 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E21, 0x0062 };
    uint32_t const ces[9] = { 0x2E40, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_490)
{
    // 0E40 0E21 0021;	
    // (เม) THAI CHARACTER SARA E, THAI CHARACTER MO MA	[2E40 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E21, 0x0021 };
    uint32_t const ces[12] = { 0x2E40, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_491)
{
    // 0E40 0E21 003F;	
    // (เม) THAI CHARACTER SARA E, THAI CHARACTER MO MA	[2E40 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E21, 0x003F };
    uint32_t const ces[12] = { 0x2E40, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_492)
{
    // 0E40 0E21 0061;	
    // (เม) THAI CHARACTER SARA E, THAI CHARACTER MO MA	[2E40 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E21, 0x0061 };
    uint32_t const ces[12] = { 0x2E40, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_493)
{
    // 0E40 0E21 0041;	
    // (เม) THAI CHARACTER SARA E, THAI CHARACTER MO MA	[2E40 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E21, 0x0041 };
    uint32_t const ces[12] = { 0x2E40, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_494)
{
    // 0E40 0E21 0062;	
    // (เม) THAI CHARACTER SARA E, THAI CHARACTER MO MA	[2E40 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E21, 0x0062 };
    uint32_t const ces[12] = { 0x2E40, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_495)
{
    // 0E41 0E21 0021;	
    // (แม) THAI CHARACTER SARA AE, THAI CHARACTER MO MA	[2E40 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E21, 0x0021 };
    uint32_t const ces[12] = { 0x2E40, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_496)
{
    // 0E41 0E21 003F;	
    // (แม) THAI CHARACTER SARA AE, THAI CHARACTER MO MA	[2E40 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E21, 0x003F };
    uint32_t const ces[12] = { 0x2E40, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_497)
{
    // 0E41 0E21 0061;	
    // (แม) THAI CHARACTER SARA AE, THAI CHARACTER MO MA	[2E40 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E21, 0x0061 };
    uint32_t const ces[12] = { 0x2E40, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_498)
{
    // 0E41 0E21 0041;	
    // (แม) THAI CHARACTER SARA AE, THAI CHARACTER MO MA	[2E40 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E21, 0x0041 };
    uint32_t const ces[12] = { 0x2E40, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_186_499)
{
    // 0E41 0E21 0062;	
    // (แม) THAI CHARACTER SARA AE, THAI CHARACTER MO MA	[2E40 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E21, 0x0062 };
    uint32_t const ces[12] = { 0x2E40, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

