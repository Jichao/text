// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_168_000)
{
    // 0AB0 003F;	
    // (ર) GUJARATI LETTER RA	[27D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB0, 0x003F };
    uint32_t const ces[9] = { 0x27D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_001)
{
    // 0AB0 0061;	
    // (ર) GUJARATI LETTER RA	[27D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB0, 0x0061 };
    uint32_t const ces[9] = { 0x27D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_002)
{
    // 0AB0 0041;	
    // (ર) GUJARATI LETTER RA	[27D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AB0, 0x0041 };
    uint32_t const ces[9] = { 0x27D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_003)
{
    // 0AB0 0062;	
    // (ર) GUJARATI LETTER RA	[27D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB0, 0x0062 };
    uint32_t const ces[9] = { 0x27D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_004)
{
    // 0AB2 0021;	
    // (લ) GUJARATI LETTER LA	[27D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB2, 0x0021 };
    uint32_t const ces[9] = { 0x27D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_005)
{
    // 0AB2 003F;	
    // (લ) GUJARATI LETTER LA	[27D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB2, 0x003F };
    uint32_t const ces[9] = { 0x27D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_006)
{
    // 0AB2 0061;	
    // (લ) GUJARATI LETTER LA	[27D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB2, 0x0061 };
    uint32_t const ces[9] = { 0x27D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_007)
{
    // 0AB2 0041;	
    // (લ) GUJARATI LETTER LA	[27D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AB2, 0x0041 };
    uint32_t const ces[9] = { 0x27D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_008)
{
    // 0AB2 0062;	
    // (લ) GUJARATI LETTER LA	[27D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB2, 0x0062 };
    uint32_t const ces[9] = { 0x27D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_009)
{
    // 0AB5 0021;	
    // (વ) GUJARATI LETTER VA	[27D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB5, 0x0021 };
    uint32_t const ces[9] = { 0x27D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_010)
{
    // 0AB5 003F;	
    // (વ) GUJARATI LETTER VA	[27D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB5, 0x003F };
    uint32_t const ces[9] = { 0x27D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_011)
{
    // 0AB5 0061;	
    // (વ) GUJARATI LETTER VA	[27D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB5, 0x0061 };
    uint32_t const ces[9] = { 0x27D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_012)
{
    // 0AB5 0041;	
    // (વ) GUJARATI LETTER VA	[27D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AB5, 0x0041 };
    uint32_t const ces[9] = { 0x27D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_013)
{
    // 0AB5 0062;	
    // (વ) GUJARATI LETTER VA	[27D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB5, 0x0062 };
    uint32_t const ces[9] = { 0x27D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_014)
{
    // 0AB6 0021;	
    // (શ) GUJARATI LETTER SHA	[27DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB6, 0x0021 };
    uint32_t const ces[9] = { 0x27DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_015)
{
    // 0AB6 003F;	
    // (શ) GUJARATI LETTER SHA	[27DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB6, 0x003F };
    uint32_t const ces[9] = { 0x27DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_016)
{
    // 0AB6 0061;	
    // (શ) GUJARATI LETTER SHA	[27DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB6, 0x0061 };
    uint32_t const ces[9] = { 0x27DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_017)
{
    // 0AB6 0041;	
    // (શ) GUJARATI LETTER SHA	[27DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AB6, 0x0041 };
    uint32_t const ces[9] = { 0x27DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_018)
{
    // 0AB6 0062;	
    // (શ) GUJARATI LETTER SHA	[27DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB6, 0x0062 };
    uint32_t const ces[9] = { 0x27DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_019)
{
    // 0AB7 0021;	
    // (ષ) GUJARATI LETTER SSA	[27DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB7, 0x0021 };
    uint32_t const ces[9] = { 0x27DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_020)
{
    // 0AB7 003F;	
    // (ષ) GUJARATI LETTER SSA	[27DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB7, 0x003F };
    uint32_t const ces[9] = { 0x27DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_021)
{
    // 0AB7 0061;	
    // (ષ) GUJARATI LETTER SSA	[27DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB7, 0x0061 };
    uint32_t const ces[9] = { 0x27DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_022)
{
    // 0AB7 0041;	
    // (ષ) GUJARATI LETTER SSA	[27DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AB7, 0x0041 };
    uint32_t const ces[9] = { 0x27DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_023)
{
    // 0AB7 0062;	
    // (ષ) GUJARATI LETTER SSA	[27DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB7, 0x0062 };
    uint32_t const ces[9] = { 0x27DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_024)
{
    // 0AB8 0021;	
    // (સ) GUJARATI LETTER SA	[27DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB8, 0x0021 };
    uint32_t const ces[9] = { 0x27DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_025)
{
    // 0AB8 003F;	
    // (સ) GUJARATI LETTER SA	[27DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB8, 0x003F };
    uint32_t const ces[9] = { 0x27DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_026)
{
    // 0AB8 0061;	
    // (સ) GUJARATI LETTER SA	[27DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB8, 0x0061 };
    uint32_t const ces[9] = { 0x27DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_027)
{
    // 0AB8 0041;	
    // (સ) GUJARATI LETTER SA	[27DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AB8, 0x0041 };
    uint32_t const ces[9] = { 0x27DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_028)
{
    // 0AB8 0062;	
    // (સ) GUJARATI LETTER SA	[27DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB8, 0x0062 };
    uint32_t const ces[9] = { 0x27DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_029)
{
    // 0AB9 0021;	
    // (હ) GUJARATI LETTER HA	[27DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB9, 0x0021 };
    uint32_t const ces[9] = { 0x27DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_030)
{
    // 0AB9 003F;	
    // (હ) GUJARATI LETTER HA	[27DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB9, 0x003F };
    uint32_t const ces[9] = { 0x27DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_031)
{
    // 0AB9 0061;	
    // (હ) GUJARATI LETTER HA	[27DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB9, 0x0061 };
    uint32_t const ces[9] = { 0x27DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_032)
{
    // 0AB9 0041;	
    // (હ) GUJARATI LETTER HA	[27DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AB9, 0x0041 };
    uint32_t const ces[9] = { 0x27DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_033)
{
    // 0AB9 0062;	
    // (હ) GUJARATI LETTER HA	[27DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB9, 0x0062 };
    uint32_t const ces[9] = { 0x27DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_034)
{
    // 0AB3 0021;	
    // (ળ) GUJARATI LETTER LLA	[27DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB3, 0x0021 };
    uint32_t const ces[9] = { 0x27DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_035)
{
    // 0AB3 003F;	
    // (ળ) GUJARATI LETTER LLA	[27DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB3, 0x003F };
    uint32_t const ces[9] = { 0x27DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_036)
{
    // 0AB3 0061;	
    // (ળ) GUJARATI LETTER LLA	[27DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB3, 0x0061 };
    uint32_t const ces[9] = { 0x27DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_037)
{
    // 0AB3 0041;	
    // (ળ) GUJARATI LETTER LLA	[27DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AB3, 0x0041 };
    uint32_t const ces[9] = { 0x27DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_038)
{
    // 0AB3 0062;	
    // (ળ) GUJARATI LETTER LLA	[27DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AB3, 0x0062 };
    uint32_t const ces[9] = { 0x27DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_039)
{
    // 0ABD 0021;	
    // (ઽ) GUJARATI SIGN AVAGRAHA	[27DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ABD, 0x0021 };
    uint32_t const ces[9] = { 0x27DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_040)
{
    // 0ABD 003F;	
    // (ઽ) GUJARATI SIGN AVAGRAHA	[27DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ABD, 0x003F };
    uint32_t const ces[9] = { 0x27DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_041)
{
    // 0ABD 0061;	
    // (ઽ) GUJARATI SIGN AVAGRAHA	[27DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ABD, 0x0061 };
    uint32_t const ces[9] = { 0x27DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_042)
{
    // 0ABD 0041;	
    // (ઽ) GUJARATI SIGN AVAGRAHA	[27DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0ABD, 0x0041 };
    uint32_t const ces[9] = { 0x27DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_043)
{
    // 0ABD 0062;	
    // (ઽ) GUJARATI SIGN AVAGRAHA	[27DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ABD, 0x0062 };
    uint32_t const ces[9] = { 0x27DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_044)
{
    // 0ABE 0021;	
    // (ા) GUJARATI VOWEL SIGN AA	[27E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ABE, 0x0021 };
    uint32_t const ces[9] = { 0x27E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_045)
{
    // 0ABE 003F;	
    // (ા) GUJARATI VOWEL SIGN AA	[27E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ABE, 0x003F };
    uint32_t const ces[9] = { 0x27E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_046)
{
    // 0ABE 0061;	
    // (ા) GUJARATI VOWEL SIGN AA	[27E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ABE, 0x0061 };
    uint32_t const ces[9] = { 0x27E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_047)
{
    // 0ABE 0041;	
    // (ા) GUJARATI VOWEL SIGN AA	[27E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0ABE, 0x0041 };
    uint32_t const ces[9] = { 0x27E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_048)
{
    // 0ABE 0062;	
    // (ા) GUJARATI VOWEL SIGN AA	[27E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ABE, 0x0062 };
    uint32_t const ces[9] = { 0x27E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_049)
{
    // 0ABF 0021;	
    // (િ) GUJARATI VOWEL SIGN I	[27E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ABF, 0x0021 };
    uint32_t const ces[9] = { 0x27E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_050)
{
    // 0ABF 003F;	
    // (િ) GUJARATI VOWEL SIGN I	[27E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ABF, 0x003F };
    uint32_t const ces[9] = { 0x27E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_051)
{
    // 0ABF 0061;	
    // (િ) GUJARATI VOWEL SIGN I	[27E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ABF, 0x0061 };
    uint32_t const ces[9] = { 0x27E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_052)
{
    // 0ABF 0041;	
    // (િ) GUJARATI VOWEL SIGN I	[27E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0ABF, 0x0041 };
    uint32_t const ces[9] = { 0x27E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_053)
{
    // 0ABF 0062;	
    // (િ) GUJARATI VOWEL SIGN I	[27E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ABF, 0x0062 };
    uint32_t const ces[9] = { 0x27E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_054)
{
    // 0AC0 0021;	
    // (ી) GUJARATI VOWEL SIGN II	[27E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC0, 0x0021 };
    uint32_t const ces[9] = { 0x27E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_055)
{
    // 0AC0 003F;	
    // (ી) GUJARATI VOWEL SIGN II	[27E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC0, 0x003F };
    uint32_t const ces[9] = { 0x27E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_056)
{
    // 0AC0 0061;	
    // (ી) GUJARATI VOWEL SIGN II	[27E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC0, 0x0061 };
    uint32_t const ces[9] = { 0x27E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_057)
{
    // 0AC0 0041;	
    // (ી) GUJARATI VOWEL SIGN II	[27E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AC0, 0x0041 };
    uint32_t const ces[9] = { 0x27E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_058)
{
    // 0AC0 0062;	
    // (ી) GUJARATI VOWEL SIGN II	[27E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC0, 0x0062 };
    uint32_t const ces[9] = { 0x27E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_059)
{
    // 0AC1 0021;	
    // (ુ) GUJARATI VOWEL SIGN U	[27E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC1, 0x0021 };
    uint32_t const ces[9] = { 0x27E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_060)
{
    // 0AC1 003F;	
    // (ુ) GUJARATI VOWEL SIGN U	[27E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC1, 0x003F };
    uint32_t const ces[9] = { 0x27E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_061)
{
    // 0AC1 0061;	
    // (ુ) GUJARATI VOWEL SIGN U	[27E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC1, 0x0061 };
    uint32_t const ces[9] = { 0x27E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_062)
{
    // 0AC1 0041;	
    // (ુ) GUJARATI VOWEL SIGN U	[27E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AC1, 0x0041 };
    uint32_t const ces[9] = { 0x27E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_063)
{
    // 0AC1 0062;	
    // (ુ) GUJARATI VOWEL SIGN U	[27E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC1, 0x0062 };
    uint32_t const ces[9] = { 0x27E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_064)
{
    // 0AC2 0021;	
    // (ૂ) GUJARATI VOWEL SIGN UU	[27E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC2, 0x0021 };
    uint32_t const ces[9] = { 0x27E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_065)
{
    // 0AC2 003F;	
    // (ૂ) GUJARATI VOWEL SIGN UU	[27E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC2, 0x003F };
    uint32_t const ces[9] = { 0x27E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_066)
{
    // 0AC2 0061;	
    // (ૂ) GUJARATI VOWEL SIGN UU	[27E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC2, 0x0061 };
    uint32_t const ces[9] = { 0x27E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_067)
{
    // 0AC2 0041;	
    // (ૂ) GUJARATI VOWEL SIGN UU	[27E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AC2, 0x0041 };
    uint32_t const ces[9] = { 0x27E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_068)
{
    // 0AC2 0062;	
    // (ૂ) GUJARATI VOWEL SIGN UU	[27E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC2, 0x0062 };
    uint32_t const ces[9] = { 0x27E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_069)
{
    // 0AC3 0021;	
    // (ૃ) GUJARATI VOWEL SIGN VOCALIC R	[27E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC3, 0x0021 };
    uint32_t const ces[9] = { 0x27E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_070)
{
    // 0AC3 003F;	
    // (ૃ) GUJARATI VOWEL SIGN VOCALIC R	[27E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC3, 0x003F };
    uint32_t const ces[9] = { 0x27E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_071)
{
    // 0AC3 0061;	
    // (ૃ) GUJARATI VOWEL SIGN VOCALIC R	[27E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC3, 0x0061 };
    uint32_t const ces[9] = { 0x27E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_072)
{
    // 0AC3 0041;	
    // (ૃ) GUJARATI VOWEL SIGN VOCALIC R	[27E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AC3, 0x0041 };
    uint32_t const ces[9] = { 0x27E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_073)
{
    // 0AC3 0062;	
    // (ૃ) GUJARATI VOWEL SIGN VOCALIC R	[27E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC3, 0x0062 };
    uint32_t const ces[9] = { 0x27E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_074)
{
    // 0AC4 0021;	
    // (ૄ) GUJARATI VOWEL SIGN VOCALIC RR	[27E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC4, 0x0021 };
    uint32_t const ces[9] = { 0x27E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_075)
{
    // 0AC4 003F;	
    // (ૄ) GUJARATI VOWEL SIGN VOCALIC RR	[27E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC4, 0x003F };
    uint32_t const ces[9] = { 0x27E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_076)
{
    // 0AC4 0061;	
    // (ૄ) GUJARATI VOWEL SIGN VOCALIC RR	[27E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC4, 0x0061 };
    uint32_t const ces[9] = { 0x27E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_077)
{
    // 0AC4 0041;	
    // (ૄ) GUJARATI VOWEL SIGN VOCALIC RR	[27E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AC4, 0x0041 };
    uint32_t const ces[9] = { 0x27E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_078)
{
    // 0AC4 0062;	
    // (ૄ) GUJARATI VOWEL SIGN VOCALIC RR	[27E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC4, 0x0062 };
    uint32_t const ces[9] = { 0x27E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_079)
{
    // 0AE2 0021;	
    // (ૢ) GUJARATI VOWEL SIGN VOCALIC L	[27E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AE2, 0x0021 };
    uint32_t const ces[9] = { 0x27E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_080)
{
    // 0AE2 003F;	
    // (ૢ) GUJARATI VOWEL SIGN VOCALIC L	[27E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AE2, 0x003F };
    uint32_t const ces[9] = { 0x27E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_081)
{
    // 0AE2 0061;	
    // (ૢ) GUJARATI VOWEL SIGN VOCALIC L	[27E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AE2, 0x0061 };
    uint32_t const ces[9] = { 0x27E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_082)
{
    // 0AE2 0041;	
    // (ૢ) GUJARATI VOWEL SIGN VOCALIC L	[27E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AE2, 0x0041 };
    uint32_t const ces[9] = { 0x27E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_083)
{
    // 0AE2 0062;	
    // (ૢ) GUJARATI VOWEL SIGN VOCALIC L	[27E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AE2, 0x0062 };
    uint32_t const ces[9] = { 0x27E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_084)
{
    // 0AE3 0021;	
    // (ૣ) GUJARATI VOWEL SIGN VOCALIC LL	[27E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AE3, 0x0021 };
    uint32_t const ces[9] = { 0x27E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_085)
{
    // 0AE3 003F;	
    // (ૣ) GUJARATI VOWEL SIGN VOCALIC LL	[27E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AE3, 0x003F };
    uint32_t const ces[9] = { 0x27E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_086)
{
    // 0AE3 0061;	
    // (ૣ) GUJARATI VOWEL SIGN VOCALIC LL	[27E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AE3, 0x0061 };
    uint32_t const ces[9] = { 0x27E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_087)
{
    // 0AE3 0041;	
    // (ૣ) GUJARATI VOWEL SIGN VOCALIC LL	[27E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AE3, 0x0041 };
    uint32_t const ces[9] = { 0x27E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_088)
{
    // 0AE3 0062;	
    // (ૣ) GUJARATI VOWEL SIGN VOCALIC LL	[27E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AE3, 0x0062 };
    uint32_t const ces[9] = { 0x27E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_089)
{
    // 0AC5 0021;	
    // (ૅ) GUJARATI VOWEL SIGN CANDRA E	[27E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC5, 0x0021 };
    uint32_t const ces[9] = { 0x27E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_090)
{
    // 0AC5 003F;	
    // (ૅ) GUJARATI VOWEL SIGN CANDRA E	[27E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC5, 0x003F };
    uint32_t const ces[9] = { 0x27E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_091)
{
    // 0AC5 0061;	
    // (ૅ) GUJARATI VOWEL SIGN CANDRA E	[27E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC5, 0x0061 };
    uint32_t const ces[9] = { 0x27E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_092)
{
    // 0AC5 0041;	
    // (ૅ) GUJARATI VOWEL SIGN CANDRA E	[27E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AC5, 0x0041 };
    uint32_t const ces[9] = { 0x27E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_093)
{
    // 0AC5 0062;	
    // (ૅ) GUJARATI VOWEL SIGN CANDRA E	[27E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC5, 0x0062 };
    uint32_t const ces[9] = { 0x27E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_094)
{
    // 0AC7 0021;	
    // (ે) GUJARATI VOWEL SIGN E	[27EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC7, 0x0021 };
    uint32_t const ces[9] = { 0x27EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_095)
{
    // 0AC7 003F;	
    // (ે) GUJARATI VOWEL SIGN E	[27EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC7, 0x003F };
    uint32_t const ces[9] = { 0x27EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_096)
{
    // 0AC7 0061;	
    // (ે) GUJARATI VOWEL SIGN E	[27EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC7, 0x0061 };
    uint32_t const ces[9] = { 0x27EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_097)
{
    // 0AC7 0041;	
    // (ે) GUJARATI VOWEL SIGN E	[27EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AC7, 0x0041 };
    uint32_t const ces[9] = { 0x27EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_098)
{
    // 0AC7 0062;	
    // (ે) GUJARATI VOWEL SIGN E	[27EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC7, 0x0062 };
    uint32_t const ces[9] = { 0x27EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_099)
{
    // 0AC8 0021;	
    // (ૈ) GUJARATI VOWEL SIGN AI	[27EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC8, 0x0021 };
    uint32_t const ces[9] = { 0x27EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_100)
{
    // 0AC8 003F;	
    // (ૈ) GUJARATI VOWEL SIGN AI	[27EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC8, 0x003F };
    uint32_t const ces[9] = { 0x27EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_101)
{
    // 0AC8 0061;	
    // (ૈ) GUJARATI VOWEL SIGN AI	[27EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC8, 0x0061 };
    uint32_t const ces[9] = { 0x27EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_102)
{
    // 0AC8 0041;	
    // (ૈ) GUJARATI VOWEL SIGN AI	[27EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AC8, 0x0041 };
    uint32_t const ces[9] = { 0x27EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_103)
{
    // 0AC8 0062;	
    // (ૈ) GUJARATI VOWEL SIGN AI	[27EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC8, 0x0062 };
    uint32_t const ces[9] = { 0x27EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_104)
{
    // 0AC9 0021;	
    // (ૉ) GUJARATI VOWEL SIGN CANDRA O	[27EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC9, 0x0021 };
    uint32_t const ces[9] = { 0x27EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_105)
{
    // 0AC9 003F;	
    // (ૉ) GUJARATI VOWEL SIGN CANDRA O	[27EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC9, 0x003F };
    uint32_t const ces[9] = { 0x27EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_106)
{
    // 0AC9 0061;	
    // (ૉ) GUJARATI VOWEL SIGN CANDRA O	[27EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC9, 0x0061 };
    uint32_t const ces[9] = { 0x27EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_107)
{
    // 0AC9 0041;	
    // (ૉ) GUJARATI VOWEL SIGN CANDRA O	[27EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AC9, 0x0041 };
    uint32_t const ces[9] = { 0x27EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_108)
{
    // 0AC9 0062;	
    // (ૉ) GUJARATI VOWEL SIGN CANDRA O	[27EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AC9, 0x0062 };
    uint32_t const ces[9] = { 0x27EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_109)
{
    // 0ACB 0021;	
    // (ો) GUJARATI VOWEL SIGN O	[27ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ACB, 0x0021 };
    uint32_t const ces[9] = { 0x27ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_110)
{
    // 0ACB 003F;	
    // (ો) GUJARATI VOWEL SIGN O	[27ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ACB, 0x003F };
    uint32_t const ces[9] = { 0x27ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_111)
{
    // 0ACB 0061;	
    // (ો) GUJARATI VOWEL SIGN O	[27ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ACB, 0x0061 };
    uint32_t const ces[9] = { 0x27ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_112)
{
    // 0ACB 0041;	
    // (ો) GUJARATI VOWEL SIGN O	[27ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0ACB, 0x0041 };
    uint32_t const ces[9] = { 0x27ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_113)
{
    // 0ACB 0062;	
    // (ો) GUJARATI VOWEL SIGN O	[27ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ACB, 0x0062 };
    uint32_t const ces[9] = { 0x27ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_114)
{
    // 0ACC 0021;	
    // (ૌ) GUJARATI VOWEL SIGN AU	[27EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ACC, 0x0021 };
    uint32_t const ces[9] = { 0x27EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_115)
{
    // 0ACC 003F;	
    // (ૌ) GUJARATI VOWEL SIGN AU	[27EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ACC, 0x003F };
    uint32_t const ces[9] = { 0x27EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_116)
{
    // 0ACC 0061;	
    // (ૌ) GUJARATI VOWEL SIGN AU	[27EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ACC, 0x0061 };
    uint32_t const ces[9] = { 0x27EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_117)
{
    // 0ACC 0041;	
    // (ૌ) GUJARATI VOWEL SIGN AU	[27EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0ACC, 0x0041 };
    uint32_t const ces[9] = { 0x27EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_118)
{
    // 0ACC 0062;	
    // (ૌ) GUJARATI VOWEL SIGN AU	[27EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ACC, 0x0062 };
    uint32_t const ces[9] = { 0x27EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_119)
{
    // 0334 0ACD;	
    // (્) GUJARATI SIGN VIRAMA	[27EF | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0ACD };
    uint32_t const ces[8] = { 0x27EF, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_120)
{
    // 0ACD 0334;	
    // (્) GUJARATI SIGN VIRAMA	[27EF | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ACD, 0x0334 };
    uint32_t const ces[8] = { 0x27EF, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_121)
{
    // 0ACD 0021;	
    // (્) GUJARATI SIGN VIRAMA	[27EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ACD, 0x0021 };
    uint32_t const ces[9] = { 0x27EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_122)
{
    // 0ACD 003F;	
    // (્) GUJARATI SIGN VIRAMA	[27EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ACD, 0x003F };
    uint32_t const ces[9] = { 0x27EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_123)
{
    // 0ACD 0061;	
    // (્) GUJARATI SIGN VIRAMA	[27EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ACD, 0x0061 };
    uint32_t const ces[9] = { 0x27EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_124)
{
    // 0ACD 0041;	
    // (્) GUJARATI SIGN VIRAMA	[27EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0ACD, 0x0041 };
    uint32_t const ces[9] = { 0x27EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_125)
{
    // 0ACD 0062;	
    // (્) GUJARATI SIGN VIRAMA	[27EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ACD, 0x0062 };
    uint32_t const ces[9] = { 0x27EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_126)
{
    // 0B05 0021;	
    // (ଅ) ORIYA LETTER A	[27F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B05, 0x0021 };
    uint32_t const ces[9] = { 0x27F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_127)
{
    // 0B05 003F;	
    // (ଅ) ORIYA LETTER A	[27F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B05, 0x003F };
    uint32_t const ces[9] = { 0x27F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_128)
{
    // 0B05 0061;	
    // (ଅ) ORIYA LETTER A	[27F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B05, 0x0061 };
    uint32_t const ces[9] = { 0x27F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_129)
{
    // 0B05 0041;	
    // (ଅ) ORIYA LETTER A	[27F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B05, 0x0041 };
    uint32_t const ces[9] = { 0x27F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_130)
{
    // 0B05 0062;	
    // (ଅ) ORIYA LETTER A	[27F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B05, 0x0062 };
    uint32_t const ces[9] = { 0x27F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_131)
{
    // 0B06 0021;	
    // (ଆ) ORIYA LETTER AA	[27F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B06, 0x0021 };
    uint32_t const ces[9] = { 0x27F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_132)
{
    // 0B06 003F;	
    // (ଆ) ORIYA LETTER AA	[27F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B06, 0x003F };
    uint32_t const ces[9] = { 0x27F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_133)
{
    // 0B06 0061;	
    // (ଆ) ORIYA LETTER AA	[27F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B06, 0x0061 };
    uint32_t const ces[9] = { 0x27F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_134)
{
    // 0B06 0041;	
    // (ଆ) ORIYA LETTER AA	[27F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B06, 0x0041 };
    uint32_t const ces[9] = { 0x27F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_135)
{
    // 0B06 0062;	
    // (ଆ) ORIYA LETTER AA	[27F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B06, 0x0062 };
    uint32_t const ces[9] = { 0x27F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_136)
{
    // 0B07 0021;	
    // (ଇ) ORIYA LETTER I	[27F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B07, 0x0021 };
    uint32_t const ces[9] = { 0x27F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_137)
{
    // 0B07 003F;	
    // (ଇ) ORIYA LETTER I	[27F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B07, 0x003F };
    uint32_t const ces[9] = { 0x27F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_138)
{
    // 0B07 0061;	
    // (ଇ) ORIYA LETTER I	[27F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B07, 0x0061 };
    uint32_t const ces[9] = { 0x27F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_139)
{
    // 0B07 0041;	
    // (ଇ) ORIYA LETTER I	[27F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B07, 0x0041 };
    uint32_t const ces[9] = { 0x27F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_140)
{
    // 0B07 0062;	
    // (ଇ) ORIYA LETTER I	[27F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B07, 0x0062 };
    uint32_t const ces[9] = { 0x27F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_141)
{
    // 0B08 0021;	
    // (ଈ) ORIYA LETTER II	[27F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B08, 0x0021 };
    uint32_t const ces[9] = { 0x27F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_142)
{
    // 0B08 003F;	
    // (ଈ) ORIYA LETTER II	[27F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B08, 0x003F };
    uint32_t const ces[9] = { 0x27F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_143)
{
    // 0B08 0061;	
    // (ଈ) ORIYA LETTER II	[27F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B08, 0x0061 };
    uint32_t const ces[9] = { 0x27F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_144)
{
    // 0B08 0041;	
    // (ଈ) ORIYA LETTER II	[27F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B08, 0x0041 };
    uint32_t const ces[9] = { 0x27F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_145)
{
    // 0B08 0062;	
    // (ଈ) ORIYA LETTER II	[27F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B08, 0x0062 };
    uint32_t const ces[9] = { 0x27F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_146)
{
    // 0B09 0021;	
    // (ଉ) ORIYA LETTER U	[27F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B09, 0x0021 };
    uint32_t const ces[9] = { 0x27F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_147)
{
    // 0B09 003F;	
    // (ଉ) ORIYA LETTER U	[27F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B09, 0x003F };
    uint32_t const ces[9] = { 0x27F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_148)
{
    // 0B09 0061;	
    // (ଉ) ORIYA LETTER U	[27F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B09, 0x0061 };
    uint32_t const ces[9] = { 0x27F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_149)
{
    // 0B09 0041;	
    // (ଉ) ORIYA LETTER U	[27F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B09, 0x0041 };
    uint32_t const ces[9] = { 0x27F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_150)
{
    // 0B09 0062;	
    // (ଉ) ORIYA LETTER U	[27F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B09, 0x0062 };
    uint32_t const ces[9] = { 0x27F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_151)
{
    // 0B0A 0021;	
    // (ଊ) ORIYA LETTER UU	[27F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B0A, 0x0021 };
    uint32_t const ces[9] = { 0x27F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_152)
{
    // 0B0A 003F;	
    // (ଊ) ORIYA LETTER UU	[27F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B0A, 0x003F };
    uint32_t const ces[9] = { 0x27F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_153)
{
    // 0B0A 0061;	
    // (ଊ) ORIYA LETTER UU	[27F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B0A, 0x0061 };
    uint32_t const ces[9] = { 0x27F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_154)
{
    // 0B0A 0041;	
    // (ଊ) ORIYA LETTER UU	[27F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B0A, 0x0041 };
    uint32_t const ces[9] = { 0x27F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_155)
{
    // 0B0A 0062;	
    // (ଊ) ORIYA LETTER UU	[27F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B0A, 0x0062 };
    uint32_t const ces[9] = { 0x27F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_156)
{
    // 0B0B 0021;	
    // (ଋ) ORIYA LETTER VOCALIC R	[27F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B0B, 0x0021 };
    uint32_t const ces[9] = { 0x27F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_157)
{
    // 0B0B 003F;	
    // (ଋ) ORIYA LETTER VOCALIC R	[27F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B0B, 0x003F };
    uint32_t const ces[9] = { 0x27F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_158)
{
    // 0B0B 0061;	
    // (ଋ) ORIYA LETTER VOCALIC R	[27F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B0B, 0x0061 };
    uint32_t const ces[9] = { 0x27F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_159)
{
    // 0B0B 0041;	
    // (ଋ) ORIYA LETTER VOCALIC R	[27F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B0B, 0x0041 };
    uint32_t const ces[9] = { 0x27F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_160)
{
    // 0B0B 0062;	
    // (ଋ) ORIYA LETTER VOCALIC R	[27F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B0B, 0x0062 };
    uint32_t const ces[9] = { 0x27F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_161)
{
    // 0B60 0021;	
    // (ୠ) ORIYA LETTER VOCALIC RR	[27F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B60, 0x0021 };
    uint32_t const ces[9] = { 0x27F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_162)
{
    // 0B60 003F;	
    // (ୠ) ORIYA LETTER VOCALIC RR	[27F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B60, 0x003F };
    uint32_t const ces[9] = { 0x27F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_163)
{
    // 0B60 0061;	
    // (ୠ) ORIYA LETTER VOCALIC RR	[27F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B60, 0x0061 };
    uint32_t const ces[9] = { 0x27F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_164)
{
    // 0B60 0041;	
    // (ୠ) ORIYA LETTER VOCALIC RR	[27F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B60, 0x0041 };
    uint32_t const ces[9] = { 0x27F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_165)
{
    // 0B60 0062;	
    // (ୠ) ORIYA LETTER VOCALIC RR	[27F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B60, 0x0062 };
    uint32_t const ces[9] = { 0x27F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_166)
{
    // 0B0C 0021;	
    // (ଌ) ORIYA LETTER VOCALIC L	[27F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B0C, 0x0021 };
    uint32_t const ces[9] = { 0x27F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_167)
{
    // 0B0C 003F;	
    // (ଌ) ORIYA LETTER VOCALIC L	[27F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B0C, 0x003F };
    uint32_t const ces[9] = { 0x27F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_168)
{
    // 0B0C 0061;	
    // (ଌ) ORIYA LETTER VOCALIC L	[27F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B0C, 0x0061 };
    uint32_t const ces[9] = { 0x27F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_169)
{
    // 0B0C 0041;	
    // (ଌ) ORIYA LETTER VOCALIC L	[27F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B0C, 0x0041 };
    uint32_t const ces[9] = { 0x27F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_170)
{
    // 0B0C 0062;	
    // (ଌ) ORIYA LETTER VOCALIC L	[27F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B0C, 0x0062 };
    uint32_t const ces[9] = { 0x27F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_171)
{
    // 0B61 0021;	
    // (ୡ) ORIYA LETTER VOCALIC LL	[27F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B61, 0x0021 };
    uint32_t const ces[9] = { 0x27F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_172)
{
    // 0B61 003F;	
    // (ୡ) ORIYA LETTER VOCALIC LL	[27F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B61, 0x003F };
    uint32_t const ces[9] = { 0x27F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_173)
{
    // 0B61 0061;	
    // (ୡ) ORIYA LETTER VOCALIC LL	[27F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B61, 0x0061 };
    uint32_t const ces[9] = { 0x27F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_174)
{
    // 0B61 0041;	
    // (ୡ) ORIYA LETTER VOCALIC LL	[27F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B61, 0x0041 };
    uint32_t const ces[9] = { 0x27F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_175)
{
    // 0B61 0062;	
    // (ୡ) ORIYA LETTER VOCALIC LL	[27F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B61, 0x0062 };
    uint32_t const ces[9] = { 0x27F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_176)
{
    // 0B0F 0021;	
    // (ଏ) ORIYA LETTER E	[27FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B0F, 0x0021 };
    uint32_t const ces[9] = { 0x27FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_177)
{
    // 0B0F 003F;	
    // (ଏ) ORIYA LETTER E	[27FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B0F, 0x003F };
    uint32_t const ces[9] = { 0x27FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_178)
{
    // 0B0F 0061;	
    // (ଏ) ORIYA LETTER E	[27FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B0F, 0x0061 };
    uint32_t const ces[9] = { 0x27FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_179)
{
    // 0B0F 0041;	
    // (ଏ) ORIYA LETTER E	[27FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B0F, 0x0041 };
    uint32_t const ces[9] = { 0x27FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_180)
{
    // 0B0F 0062;	
    // (ଏ) ORIYA LETTER E	[27FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B0F, 0x0062 };
    uint32_t const ces[9] = { 0x27FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_181)
{
    // 0B10 0021;	
    // (ଐ) ORIYA LETTER AI	[27FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B10, 0x0021 };
    uint32_t const ces[9] = { 0x27FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_182)
{
    // 0B10 003F;	
    // (ଐ) ORIYA LETTER AI	[27FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B10, 0x003F };
    uint32_t const ces[9] = { 0x27FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_183)
{
    // 0B10 0061;	
    // (ଐ) ORIYA LETTER AI	[27FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B10, 0x0061 };
    uint32_t const ces[9] = { 0x27FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_184)
{
    // 0B10 0041;	
    // (ଐ) ORIYA LETTER AI	[27FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B10, 0x0041 };
    uint32_t const ces[9] = { 0x27FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_185)
{
    // 0B10 0062;	
    // (ଐ) ORIYA LETTER AI	[27FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B10, 0x0062 };
    uint32_t const ces[9] = { 0x27FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_186)
{
    // 0B13 0021;	
    // (ଓ) ORIYA LETTER O	[27FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B13, 0x0021 };
    uint32_t const ces[9] = { 0x27FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_187)
{
    // 0B13 003F;	
    // (ଓ) ORIYA LETTER O	[27FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B13, 0x003F };
    uint32_t const ces[9] = { 0x27FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_188)
{
    // 0B13 0061;	
    // (ଓ) ORIYA LETTER O	[27FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B13, 0x0061 };
    uint32_t const ces[9] = { 0x27FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_189)
{
    // 0B13 0041;	
    // (ଓ) ORIYA LETTER O	[27FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B13, 0x0041 };
    uint32_t const ces[9] = { 0x27FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_190)
{
    // 0B13 0062;	
    // (ଓ) ORIYA LETTER O	[27FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B13, 0x0062 };
    uint32_t const ces[9] = { 0x27FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_191)
{
    // 0B14 0021;	
    // (ଔ) ORIYA LETTER AU	[27FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B14, 0x0021 };
    uint32_t const ces[9] = { 0x27FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_192)
{
    // 0B14 003F;	
    // (ଔ) ORIYA LETTER AU	[27FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B14, 0x003F };
    uint32_t const ces[9] = { 0x27FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_193)
{
    // 0B14 0061;	
    // (ଔ) ORIYA LETTER AU	[27FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B14, 0x0061 };
    uint32_t const ces[9] = { 0x27FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_194)
{
    // 0B14 0041;	
    // (ଔ) ORIYA LETTER AU	[27FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B14, 0x0041 };
    uint32_t const ces[9] = { 0x27FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_195)
{
    // 0B14 0062;	
    // (ଔ) ORIYA LETTER AU	[27FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B14, 0x0062 };
    uint32_t const ces[9] = { 0x27FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_196)
{
    // 0B15 0021;	
    // (କ) ORIYA LETTER KA	[27FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B15, 0x0021 };
    uint32_t const ces[9] = { 0x27FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_197)
{
    // 0B15 003F;	
    // (କ) ORIYA LETTER KA	[27FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B15, 0x003F };
    uint32_t const ces[9] = { 0x27FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_198)
{
    // 0B15 0061;	
    // (କ) ORIYA LETTER KA	[27FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B15, 0x0061 };
    uint32_t const ces[9] = { 0x27FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_199)
{
    // 0B15 0041;	
    // (କ) ORIYA LETTER KA	[27FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B15, 0x0041 };
    uint32_t const ces[9] = { 0x27FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_200)
{
    // 0B15 0062;	
    // (କ) ORIYA LETTER KA	[27FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B15, 0x0062 };
    uint32_t const ces[9] = { 0x27FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_201)
{
    // 0B16 0021;	
    // (ଖ) ORIYA LETTER KHA	[27FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B16, 0x0021 };
    uint32_t const ces[9] = { 0x27FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_202)
{
    // 0B16 003F;	
    // (ଖ) ORIYA LETTER KHA	[27FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B16, 0x003F };
    uint32_t const ces[9] = { 0x27FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_203)
{
    // 0B16 0061;	
    // (ଖ) ORIYA LETTER KHA	[27FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B16, 0x0061 };
    uint32_t const ces[9] = { 0x27FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_204)
{
    // 0B16 0041;	
    // (ଖ) ORIYA LETTER KHA	[27FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B16, 0x0041 };
    uint32_t const ces[9] = { 0x27FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_205)
{
    // 0B16 0062;	
    // (ଖ) ORIYA LETTER KHA	[27FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B16, 0x0062 };
    uint32_t const ces[9] = { 0x27FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_206)
{
    // 0B17 0021;	
    // (ଗ) ORIYA LETTER GA	[2800 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B17, 0x0021 };
    uint32_t const ces[9] = { 0x2800, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_207)
{
    // 0B17 003F;	
    // (ଗ) ORIYA LETTER GA	[2800 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B17, 0x003F };
    uint32_t const ces[9] = { 0x2800, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_208)
{
    // 0B17 0061;	
    // (ଗ) ORIYA LETTER GA	[2800 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B17, 0x0061 };
    uint32_t const ces[9] = { 0x2800, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_209)
{
    // 0B17 0041;	
    // (ଗ) ORIYA LETTER GA	[2800 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B17, 0x0041 };
    uint32_t const ces[9] = { 0x2800, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_210)
{
    // 0B17 0062;	
    // (ଗ) ORIYA LETTER GA	[2800 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B17, 0x0062 };
    uint32_t const ces[9] = { 0x2800, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_211)
{
    // 0B18 0021;	
    // (ଘ) ORIYA LETTER GHA	[2801 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B18, 0x0021 };
    uint32_t const ces[9] = { 0x2801, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_212)
{
    // 0B18 003F;	
    // (ଘ) ORIYA LETTER GHA	[2801 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B18, 0x003F };
    uint32_t const ces[9] = { 0x2801, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_213)
{
    // 0B18 0061;	
    // (ଘ) ORIYA LETTER GHA	[2801 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B18, 0x0061 };
    uint32_t const ces[9] = { 0x2801, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_214)
{
    // 0B18 0041;	
    // (ଘ) ORIYA LETTER GHA	[2801 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B18, 0x0041 };
    uint32_t const ces[9] = { 0x2801, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_215)
{
    // 0B18 0062;	
    // (ଘ) ORIYA LETTER GHA	[2801 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B18, 0x0062 };
    uint32_t const ces[9] = { 0x2801, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_216)
{
    // 0B19 0021;	
    // (ଙ) ORIYA LETTER NGA	[2802 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B19, 0x0021 };
    uint32_t const ces[9] = { 0x2802, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_217)
{
    // 0B19 003F;	
    // (ଙ) ORIYA LETTER NGA	[2802 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B19, 0x003F };
    uint32_t const ces[9] = { 0x2802, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_218)
{
    // 0B19 0061;	
    // (ଙ) ORIYA LETTER NGA	[2802 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B19, 0x0061 };
    uint32_t const ces[9] = { 0x2802, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_219)
{
    // 0B19 0041;	
    // (ଙ) ORIYA LETTER NGA	[2802 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B19, 0x0041 };
    uint32_t const ces[9] = { 0x2802, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_220)
{
    // 0B19 0062;	
    // (ଙ) ORIYA LETTER NGA	[2802 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B19, 0x0062 };
    uint32_t const ces[9] = { 0x2802, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_221)
{
    // 0B1A 0021;	
    // (ଚ) ORIYA LETTER CA	[2803 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B1A, 0x0021 };
    uint32_t const ces[9] = { 0x2803, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_222)
{
    // 0B1A 003F;	
    // (ଚ) ORIYA LETTER CA	[2803 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B1A, 0x003F };
    uint32_t const ces[9] = { 0x2803, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_223)
{
    // 0B1A 0061;	
    // (ଚ) ORIYA LETTER CA	[2803 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B1A, 0x0061 };
    uint32_t const ces[9] = { 0x2803, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_224)
{
    // 0B1A 0041;	
    // (ଚ) ORIYA LETTER CA	[2803 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B1A, 0x0041 };
    uint32_t const ces[9] = { 0x2803, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_225)
{
    // 0B1A 0062;	
    // (ଚ) ORIYA LETTER CA	[2803 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B1A, 0x0062 };
    uint32_t const ces[9] = { 0x2803, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_226)
{
    // 0B1B 0021;	
    // (ଛ) ORIYA LETTER CHA	[2804 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B1B, 0x0021 };
    uint32_t const ces[9] = { 0x2804, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_227)
{
    // 0B1B 003F;	
    // (ଛ) ORIYA LETTER CHA	[2804 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B1B, 0x003F };
    uint32_t const ces[9] = { 0x2804, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_228)
{
    // 0B1B 0061;	
    // (ଛ) ORIYA LETTER CHA	[2804 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B1B, 0x0061 };
    uint32_t const ces[9] = { 0x2804, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_229)
{
    // 0B1B 0041;	
    // (ଛ) ORIYA LETTER CHA	[2804 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B1B, 0x0041 };
    uint32_t const ces[9] = { 0x2804, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_230)
{
    // 0B1B 0062;	
    // (ଛ) ORIYA LETTER CHA	[2804 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B1B, 0x0062 };
    uint32_t const ces[9] = { 0x2804, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_231)
{
    // 0B1C 0021;	
    // (ଜ) ORIYA LETTER JA	[2805 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B1C, 0x0021 };
    uint32_t const ces[9] = { 0x2805, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_232)
{
    // 0B1C 003F;	
    // (ଜ) ORIYA LETTER JA	[2805 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B1C, 0x003F };
    uint32_t const ces[9] = { 0x2805, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_233)
{
    // 0B1C 0061;	
    // (ଜ) ORIYA LETTER JA	[2805 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B1C, 0x0061 };
    uint32_t const ces[9] = { 0x2805, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_234)
{
    // 0B1C 0041;	
    // (ଜ) ORIYA LETTER JA	[2805 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B1C, 0x0041 };
    uint32_t const ces[9] = { 0x2805, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_235)
{
    // 0B1C 0062;	
    // (ଜ) ORIYA LETTER JA	[2805 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B1C, 0x0062 };
    uint32_t const ces[9] = { 0x2805, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_236)
{
    // 0B1D 0021;	
    // (ଝ) ORIYA LETTER JHA	[2806 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B1D, 0x0021 };
    uint32_t const ces[9] = { 0x2806, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_237)
{
    // 0B1D 003F;	
    // (ଝ) ORIYA LETTER JHA	[2806 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B1D, 0x003F };
    uint32_t const ces[9] = { 0x2806, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_238)
{
    // 0B1D 0061;	
    // (ଝ) ORIYA LETTER JHA	[2806 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B1D, 0x0061 };
    uint32_t const ces[9] = { 0x2806, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_239)
{
    // 0B1D 0041;	
    // (ଝ) ORIYA LETTER JHA	[2806 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B1D, 0x0041 };
    uint32_t const ces[9] = { 0x2806, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_240)
{
    // 0B1D 0062;	
    // (ଝ) ORIYA LETTER JHA	[2806 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B1D, 0x0062 };
    uint32_t const ces[9] = { 0x2806, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_241)
{
    // 0B1E 0021;	
    // (ଞ) ORIYA LETTER NYA	[2807 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B1E, 0x0021 };
    uint32_t const ces[9] = { 0x2807, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_242)
{
    // 0B1E 003F;	
    // (ଞ) ORIYA LETTER NYA	[2807 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B1E, 0x003F };
    uint32_t const ces[9] = { 0x2807, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_243)
{
    // 0B1E 0061;	
    // (ଞ) ORIYA LETTER NYA	[2807 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B1E, 0x0061 };
    uint32_t const ces[9] = { 0x2807, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_244)
{
    // 0B1E 0041;	
    // (ଞ) ORIYA LETTER NYA	[2807 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B1E, 0x0041 };
    uint32_t const ces[9] = { 0x2807, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_245)
{
    // 0B1E 0062;	
    // (ଞ) ORIYA LETTER NYA	[2807 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B1E, 0x0062 };
    uint32_t const ces[9] = { 0x2807, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_246)
{
    // 0B1F 0021;	
    // (ଟ) ORIYA LETTER TTA	[2808 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B1F, 0x0021 };
    uint32_t const ces[9] = { 0x2808, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_247)
{
    // 0B1F 003F;	
    // (ଟ) ORIYA LETTER TTA	[2808 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B1F, 0x003F };
    uint32_t const ces[9] = { 0x2808, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_248)
{
    // 0B1F 0061;	
    // (ଟ) ORIYA LETTER TTA	[2808 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B1F, 0x0061 };
    uint32_t const ces[9] = { 0x2808, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_249)
{
    // 0B1F 0041;	
    // (ଟ) ORIYA LETTER TTA	[2808 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B1F, 0x0041 };
    uint32_t const ces[9] = { 0x2808, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_250)
{
    // 0B1F 0062;	
    // (ଟ) ORIYA LETTER TTA	[2808 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B1F, 0x0062 };
    uint32_t const ces[9] = { 0x2808, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_251)
{
    // 0B20 0021;	
    // (ଠ) ORIYA LETTER TTHA	[2809 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B20, 0x0021 };
    uint32_t const ces[9] = { 0x2809, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_252)
{
    // 0B20 003F;	
    // (ଠ) ORIYA LETTER TTHA	[2809 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B20, 0x003F };
    uint32_t const ces[9] = { 0x2809, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_253)
{
    // 0B20 0061;	
    // (ଠ) ORIYA LETTER TTHA	[2809 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B20, 0x0061 };
    uint32_t const ces[9] = { 0x2809, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_254)
{
    // 0B20 0041;	
    // (ଠ) ORIYA LETTER TTHA	[2809 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B20, 0x0041 };
    uint32_t const ces[9] = { 0x2809, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_255)
{
    // 0B20 0062;	
    // (ଠ) ORIYA LETTER TTHA	[2809 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B20, 0x0062 };
    uint32_t const ces[9] = { 0x2809, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_256)
{
    // 0B21 0334 0B3C;	
    // (ଡ̴) ORIYA LETTER DDA, COMBINING TILDE OVERLAY	[280A | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0B21, 0x0334, 0x0B3C };
    uint32_t const ces[10] = { 0x280A, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_257)
{
    // 0B21 0B3C 0334;	
    // (ଡ଼) ORIYA LETTER DDA, ORIYA SIGN NUKTA	[280A | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0B21, 0x0B3C, 0x0334 };
    uint32_t const ces[10] = { 0x280A, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_258)
{
    // 0B5C 0334;	
    // (ଡ଼) ORIYA LETTER RRA	[280A | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0B5C, 0x0334 };
    uint32_t const ces[10] = { 0x280A, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_259)
{
    // 0B21 0021;	
    // (ଡ) ORIYA LETTER DDA	[280A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B21, 0x0021 };
    uint32_t const ces[9] = { 0x280A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_260)
{
    // 0B5C 0021;	
    // (ଡ଼) ORIYA LETTER RRA	[280A 0261 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0B5C, 0x0021 };
    uint32_t const ces[11] = { 0x280A, 0x0261, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_261)
{
    // 0B21 003F;	
    // (ଡ) ORIYA LETTER DDA	[280A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B21, 0x003F };
    uint32_t const ces[9] = { 0x280A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_262)
{
    // 0B5C 003F;	
    // (ଡ଼) ORIYA LETTER RRA	[280A 0267 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0B5C, 0x003F };
    uint32_t const ces[11] = { 0x280A, 0x0267, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_263)
{
    // 0B21 0061;	
    // (ଡ) ORIYA LETTER DDA	[280A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B21, 0x0061 };
    uint32_t const ces[9] = { 0x280A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_264)
{
    // 0B21 0041;	
    // (ଡ) ORIYA LETTER DDA	[280A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B21, 0x0041 };
    uint32_t const ces[9] = { 0x280A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_265)
{
    // 0B5C 0061;	
    // (ଡ଼) ORIYA LETTER RRA	[280A 1CAD | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0B5C, 0x0061 };
    uint32_t const ces[11] = { 0x280A, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_266)
{
    // 0B5C 0041;	
    // (ଡ଼) ORIYA LETTER RRA	[280A 1CAD | 0020 00C2 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0B5C, 0x0041 };
    uint32_t const ces[11] = { 0x280A, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_267)
{
    // 0B21 0062;	
    // (ଡ) ORIYA LETTER DDA	[280A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B21, 0x0062 };
    uint32_t const ces[9] = { 0x280A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_268)
{
    // 0B5C 0062;	
    // (ଡ଼) ORIYA LETTER RRA	[280A 1CC6 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0B5C, 0x0062 };
    uint32_t const ces[11] = { 0x280A, 0x1CC6, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_269)
{
    // 0B22 0334 0B3C;	
    // (ଢ̴) ORIYA LETTER DDHA, COMBINING TILDE OVERLAY	[280B | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0B22, 0x0334, 0x0B3C };
    uint32_t const ces[10] = { 0x280B, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_270)
{
    // 0B22 0B3C 0334;	
    // (ଢ଼) ORIYA LETTER DDHA, ORIYA SIGN NUKTA	[280B | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0B22, 0x0B3C, 0x0334 };
    uint32_t const ces[10] = { 0x280B, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_271)
{
    // 0B5D 0334;	
    // (ଢ଼) ORIYA LETTER RHA	[280B | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0B5D, 0x0334 };
    uint32_t const ces[10] = { 0x280B, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_272)
{
    // 0B22 0021;	
    // (ଢ) ORIYA LETTER DDHA	[280B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B22, 0x0021 };
    uint32_t const ces[9] = { 0x280B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_273)
{
    // 0B5D 0021;	
    // (ଢ଼) ORIYA LETTER RHA	[280B 0261 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0B5D, 0x0021 };
    uint32_t const ces[11] = { 0x280B, 0x0261, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_274)
{
    // 0B22 003F;	
    // (ଢ) ORIYA LETTER DDHA	[280B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B22, 0x003F };
    uint32_t const ces[9] = { 0x280B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_275)
{
    // 0B5D 003F;	
    // (ଢ଼) ORIYA LETTER RHA	[280B 0267 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0B5D, 0x003F };
    uint32_t const ces[11] = { 0x280B, 0x0267, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_276)
{
    // 0B22 0061;	
    // (ଢ) ORIYA LETTER DDHA	[280B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B22, 0x0061 };
    uint32_t const ces[9] = { 0x280B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_277)
{
    // 0B22 0041;	
    // (ଢ) ORIYA LETTER DDHA	[280B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B22, 0x0041 };
    uint32_t const ces[9] = { 0x280B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_278)
{
    // 0B5D 0061;	
    // (ଢ଼) ORIYA LETTER RHA	[280B 1CAD | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0B5D, 0x0061 };
    uint32_t const ces[11] = { 0x280B, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_279)
{
    // 0B5D 0041;	
    // (ଢ଼) ORIYA LETTER RHA	[280B 1CAD | 0020 00C2 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0B5D, 0x0041 };
    uint32_t const ces[11] = { 0x280B, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_280)
{
    // 0B22 0062;	
    // (ଢ) ORIYA LETTER DDHA	[280B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B22, 0x0062 };
    uint32_t const ces[9] = { 0x280B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_281)
{
    // 0B5D 0062;	
    // (ଢ଼) ORIYA LETTER RHA	[280B 1CC6 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0B5D, 0x0062 };
    uint32_t const ces[11] = { 0x280B, 0x1CC6, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_282)
{
    // 0B23 0021;	
    // (ଣ) ORIYA LETTER NNA	[280C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B23, 0x0021 };
    uint32_t const ces[9] = { 0x280C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_283)
{
    // 0B23 003F;	
    // (ଣ) ORIYA LETTER NNA	[280C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B23, 0x003F };
    uint32_t const ces[9] = { 0x280C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_284)
{
    // 0B23 0061;	
    // (ଣ) ORIYA LETTER NNA	[280C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B23, 0x0061 };
    uint32_t const ces[9] = { 0x280C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_285)
{
    // 0B23 0041;	
    // (ଣ) ORIYA LETTER NNA	[280C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B23, 0x0041 };
    uint32_t const ces[9] = { 0x280C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_286)
{
    // 0B23 0062;	
    // (ଣ) ORIYA LETTER NNA	[280C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B23, 0x0062 };
    uint32_t const ces[9] = { 0x280C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_287)
{
    // 0B24 0021;	
    // (ତ) ORIYA LETTER TA	[280D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B24, 0x0021 };
    uint32_t const ces[9] = { 0x280D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_288)
{
    // 0B24 003F;	
    // (ତ) ORIYA LETTER TA	[280D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B24, 0x003F };
    uint32_t const ces[9] = { 0x280D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_289)
{
    // 0B24 0061;	
    // (ତ) ORIYA LETTER TA	[280D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B24, 0x0061 };
    uint32_t const ces[9] = { 0x280D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_290)
{
    // 0B24 0041;	
    // (ତ) ORIYA LETTER TA	[280D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B24, 0x0041 };
    uint32_t const ces[9] = { 0x280D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_291)
{
    // 0B24 0062;	
    // (ତ) ORIYA LETTER TA	[280D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B24, 0x0062 };
    uint32_t const ces[9] = { 0x280D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_292)
{
    // 0B25 0021;	
    // (ଥ) ORIYA LETTER THA	[280E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B25, 0x0021 };
    uint32_t const ces[9] = { 0x280E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_293)
{
    // 0B25 003F;	
    // (ଥ) ORIYA LETTER THA	[280E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B25, 0x003F };
    uint32_t const ces[9] = { 0x280E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_294)
{
    // 0B25 0061;	
    // (ଥ) ORIYA LETTER THA	[280E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B25, 0x0061 };
    uint32_t const ces[9] = { 0x280E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_295)
{
    // 0B25 0041;	
    // (ଥ) ORIYA LETTER THA	[280E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B25, 0x0041 };
    uint32_t const ces[9] = { 0x280E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_296)
{
    // 0B25 0062;	
    // (ଥ) ORIYA LETTER THA	[280E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B25, 0x0062 };
    uint32_t const ces[9] = { 0x280E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_297)
{
    // 0B26 0021;	
    // (ଦ) ORIYA LETTER DA	[280F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B26, 0x0021 };
    uint32_t const ces[9] = { 0x280F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_298)
{
    // 0B26 003F;	
    // (ଦ) ORIYA LETTER DA	[280F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B26, 0x003F };
    uint32_t const ces[9] = { 0x280F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_299)
{
    // 0B26 0061;	
    // (ଦ) ORIYA LETTER DA	[280F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B26, 0x0061 };
    uint32_t const ces[9] = { 0x280F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_300)
{
    // 0B26 0041;	
    // (ଦ) ORIYA LETTER DA	[280F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B26, 0x0041 };
    uint32_t const ces[9] = { 0x280F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_301)
{
    // 0B26 0062;	
    // (ଦ) ORIYA LETTER DA	[280F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B26, 0x0062 };
    uint32_t const ces[9] = { 0x280F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_302)
{
    // 0B27 0021;	
    // (ଧ) ORIYA LETTER DHA	[2810 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B27, 0x0021 };
    uint32_t const ces[9] = { 0x2810, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_303)
{
    // 0B27 003F;	
    // (ଧ) ORIYA LETTER DHA	[2810 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B27, 0x003F };
    uint32_t const ces[9] = { 0x2810, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_304)
{
    // 0B27 0061;	
    // (ଧ) ORIYA LETTER DHA	[2810 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B27, 0x0061 };
    uint32_t const ces[9] = { 0x2810, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_305)
{
    // 0B27 0041;	
    // (ଧ) ORIYA LETTER DHA	[2810 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B27, 0x0041 };
    uint32_t const ces[9] = { 0x2810, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_306)
{
    // 0B27 0062;	
    // (ଧ) ORIYA LETTER DHA	[2810 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B27, 0x0062 };
    uint32_t const ces[9] = { 0x2810, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_307)
{
    // 0B28 0021;	
    // (ନ) ORIYA LETTER NA	[2811 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B28, 0x0021 };
    uint32_t const ces[9] = { 0x2811, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_308)
{
    // 0B28 003F;	
    // (ନ) ORIYA LETTER NA	[2811 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B28, 0x003F };
    uint32_t const ces[9] = { 0x2811, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_309)
{
    // 0B28 0061;	
    // (ନ) ORIYA LETTER NA	[2811 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B28, 0x0061 };
    uint32_t const ces[9] = { 0x2811, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_310)
{
    // 0B28 0041;	
    // (ନ) ORIYA LETTER NA	[2811 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B28, 0x0041 };
    uint32_t const ces[9] = { 0x2811, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_311)
{
    // 0B28 0062;	
    // (ନ) ORIYA LETTER NA	[2811 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B28, 0x0062 };
    uint32_t const ces[9] = { 0x2811, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_312)
{
    // 0B2A 0021;	
    // (ପ) ORIYA LETTER PA	[2812 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B2A, 0x0021 };
    uint32_t const ces[9] = { 0x2812, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_313)
{
    // 0B2A 003F;	
    // (ପ) ORIYA LETTER PA	[2812 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B2A, 0x003F };
    uint32_t const ces[9] = { 0x2812, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_314)
{
    // 0B2A 0061;	
    // (ପ) ORIYA LETTER PA	[2812 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B2A, 0x0061 };
    uint32_t const ces[9] = { 0x2812, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_315)
{
    // 0B2A 0041;	
    // (ପ) ORIYA LETTER PA	[2812 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B2A, 0x0041 };
    uint32_t const ces[9] = { 0x2812, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_316)
{
    // 0B2A 0062;	
    // (ପ) ORIYA LETTER PA	[2812 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B2A, 0x0062 };
    uint32_t const ces[9] = { 0x2812, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_317)
{
    // 0B2B 0021;	
    // (ଫ) ORIYA LETTER PHA	[2813 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B2B, 0x0021 };
    uint32_t const ces[9] = { 0x2813, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_318)
{
    // 0B2B 003F;	
    // (ଫ) ORIYA LETTER PHA	[2813 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B2B, 0x003F };
    uint32_t const ces[9] = { 0x2813, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_319)
{
    // 0B2B 0061;	
    // (ଫ) ORIYA LETTER PHA	[2813 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B2B, 0x0061 };
    uint32_t const ces[9] = { 0x2813, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_320)
{
    // 0B2B 0041;	
    // (ଫ) ORIYA LETTER PHA	[2813 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B2B, 0x0041 };
    uint32_t const ces[9] = { 0x2813, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_321)
{
    // 0B2B 0062;	
    // (ଫ) ORIYA LETTER PHA	[2813 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B2B, 0x0062 };
    uint32_t const ces[9] = { 0x2813, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_322)
{
    // 0B2C 0021;	
    // (ବ) ORIYA LETTER BA	[2814 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B2C, 0x0021 };
    uint32_t const ces[9] = { 0x2814, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_323)
{
    // 0B2C 003F;	
    // (ବ) ORIYA LETTER BA	[2814 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B2C, 0x003F };
    uint32_t const ces[9] = { 0x2814, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_324)
{
    // 0B2C 0061;	
    // (ବ) ORIYA LETTER BA	[2814 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B2C, 0x0061 };
    uint32_t const ces[9] = { 0x2814, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_325)
{
    // 0B2C 0041;	
    // (ବ) ORIYA LETTER BA	[2814 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B2C, 0x0041 };
    uint32_t const ces[9] = { 0x2814, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_326)
{
    // 0B2C 0062;	
    // (ବ) ORIYA LETTER BA	[2814 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B2C, 0x0062 };
    uint32_t const ces[9] = { 0x2814, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_327)
{
    // 0B2D 0021;	
    // (ଭ) ORIYA LETTER BHA	[2815 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B2D, 0x0021 };
    uint32_t const ces[9] = { 0x2815, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_328)
{
    // 0B2D 003F;	
    // (ଭ) ORIYA LETTER BHA	[2815 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B2D, 0x003F };
    uint32_t const ces[9] = { 0x2815, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_329)
{
    // 0B2D 0061;	
    // (ଭ) ORIYA LETTER BHA	[2815 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B2D, 0x0061 };
    uint32_t const ces[9] = { 0x2815, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_330)
{
    // 0B2D 0041;	
    // (ଭ) ORIYA LETTER BHA	[2815 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B2D, 0x0041 };
    uint32_t const ces[9] = { 0x2815, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_331)
{
    // 0B2D 0062;	
    // (ଭ) ORIYA LETTER BHA	[2815 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B2D, 0x0062 };
    uint32_t const ces[9] = { 0x2815, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_332)
{
    // 0B2E 0021;	
    // (ମ) ORIYA LETTER MA	[2816 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B2E, 0x0021 };
    uint32_t const ces[9] = { 0x2816, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_333)
{
    // 0B2E 003F;	
    // (ମ) ORIYA LETTER MA	[2816 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B2E, 0x003F };
    uint32_t const ces[9] = { 0x2816, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_334)
{
    // 0B2E 0061;	
    // (ମ) ORIYA LETTER MA	[2816 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B2E, 0x0061 };
    uint32_t const ces[9] = { 0x2816, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_335)
{
    // 0B2E 0041;	
    // (ମ) ORIYA LETTER MA	[2816 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B2E, 0x0041 };
    uint32_t const ces[9] = { 0x2816, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_336)
{
    // 0B2E 0062;	
    // (ମ) ORIYA LETTER MA	[2816 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B2E, 0x0062 };
    uint32_t const ces[9] = { 0x2816, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_337)
{
    // 0B2F 0021;	
    // (ଯ) ORIYA LETTER YA	[2817 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B2F, 0x0021 };
    uint32_t const ces[9] = { 0x2817, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_338)
{
    // 0B2F 003F;	
    // (ଯ) ORIYA LETTER YA	[2817 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B2F, 0x003F };
    uint32_t const ces[9] = { 0x2817, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_339)
{
    // 0B2F 0061;	
    // (ଯ) ORIYA LETTER YA	[2817 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B2F, 0x0061 };
    uint32_t const ces[9] = { 0x2817, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_340)
{
    // 0B2F 0041;	
    // (ଯ) ORIYA LETTER YA	[2817 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B2F, 0x0041 };
    uint32_t const ces[9] = { 0x2817, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_341)
{
    // 0B2F 0062;	
    // (ଯ) ORIYA LETTER YA	[2817 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B2F, 0x0062 };
    uint32_t const ces[9] = { 0x2817, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_342)
{
    // 0B5F 0021;	
    // (ୟ) ORIYA LETTER YYA	[2818 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B5F, 0x0021 };
    uint32_t const ces[9] = { 0x2818, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_343)
{
    // 0B5F 003F;	
    // (ୟ) ORIYA LETTER YYA	[2818 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B5F, 0x003F };
    uint32_t const ces[9] = { 0x2818, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_344)
{
    // 0B5F 0061;	
    // (ୟ) ORIYA LETTER YYA	[2818 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B5F, 0x0061 };
    uint32_t const ces[9] = { 0x2818, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_345)
{
    // 0B5F 0041;	
    // (ୟ) ORIYA LETTER YYA	[2818 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B5F, 0x0041 };
    uint32_t const ces[9] = { 0x2818, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_346)
{
    // 0B5F 0062;	
    // (ୟ) ORIYA LETTER YYA	[2818 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B5F, 0x0062 };
    uint32_t const ces[9] = { 0x2818, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_347)
{
    // 0B30 0021;	
    // (ର) ORIYA LETTER RA	[2819 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B30, 0x0021 };
    uint32_t const ces[9] = { 0x2819, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_348)
{
    // 0B30 003F;	
    // (ର) ORIYA LETTER RA	[2819 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B30, 0x003F };
    uint32_t const ces[9] = { 0x2819, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_349)
{
    // 0B30 0061;	
    // (ର) ORIYA LETTER RA	[2819 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B30, 0x0061 };
    uint32_t const ces[9] = { 0x2819, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_350)
{
    // 0B30 0041;	
    // (ର) ORIYA LETTER RA	[2819 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B30, 0x0041 };
    uint32_t const ces[9] = { 0x2819, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_351)
{
    // 0B30 0062;	
    // (ର) ORIYA LETTER RA	[2819 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B30, 0x0062 };
    uint32_t const ces[9] = { 0x2819, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_352)
{
    // 0B32 0021;	
    // (ଲ) ORIYA LETTER LA	[281A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B32, 0x0021 };
    uint32_t const ces[9] = { 0x281A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_353)
{
    // 0B32 003F;	
    // (ଲ) ORIYA LETTER LA	[281A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B32, 0x003F };
    uint32_t const ces[9] = { 0x281A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_354)
{
    // 0B32 0061;	
    // (ଲ) ORIYA LETTER LA	[281A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B32, 0x0061 };
    uint32_t const ces[9] = { 0x281A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_355)
{
    // 0B32 0041;	
    // (ଲ) ORIYA LETTER LA	[281A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B32, 0x0041 };
    uint32_t const ces[9] = { 0x281A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_356)
{
    // 0B32 0062;	
    // (ଲ) ORIYA LETTER LA	[281A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B32, 0x0062 };
    uint32_t const ces[9] = { 0x281A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_357)
{
    // 0B33 0021;	
    // (ଳ) ORIYA LETTER LLA	[281B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B33, 0x0021 };
    uint32_t const ces[9] = { 0x281B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_358)
{
    // 0B33 003F;	
    // (ଳ) ORIYA LETTER LLA	[281B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B33, 0x003F };
    uint32_t const ces[9] = { 0x281B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_359)
{
    // 0B33 0061;	
    // (ଳ) ORIYA LETTER LLA	[281B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B33, 0x0061 };
    uint32_t const ces[9] = { 0x281B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_360)
{
    // 0B33 0041;	
    // (ଳ) ORIYA LETTER LLA	[281B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B33, 0x0041 };
    uint32_t const ces[9] = { 0x281B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_361)
{
    // 0B33 0062;	
    // (ଳ) ORIYA LETTER LLA	[281B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B33, 0x0062 };
    uint32_t const ces[9] = { 0x281B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_362)
{
    // 0B35 0021;	
    // (ଵ) ORIYA LETTER VA	[281C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B35, 0x0021 };
    uint32_t const ces[9] = { 0x281C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_363)
{
    // 0B35 003F;	
    // (ଵ) ORIYA LETTER VA	[281C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B35, 0x003F };
    uint32_t const ces[9] = { 0x281C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_364)
{
    // 0B35 0061;	
    // (ଵ) ORIYA LETTER VA	[281C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B35, 0x0061 };
    uint32_t const ces[9] = { 0x281C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_365)
{
    // 0B35 0041;	
    // (ଵ) ORIYA LETTER VA	[281C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B35, 0x0041 };
    uint32_t const ces[9] = { 0x281C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_366)
{
    // 0B35 0062;	
    // (ଵ) ORIYA LETTER VA	[281C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B35, 0x0062 };
    uint32_t const ces[9] = { 0x281C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_367)
{
    // 0B71 0021;	
    // (ୱ) ORIYA LETTER WA	[281D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B71, 0x0021 };
    uint32_t const ces[9] = { 0x281D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_368)
{
    // 0B71 003F;	
    // (ୱ) ORIYA LETTER WA	[281D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B71, 0x003F };
    uint32_t const ces[9] = { 0x281D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_369)
{
    // 0B71 0061;	
    // (ୱ) ORIYA LETTER WA	[281D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B71, 0x0061 };
    uint32_t const ces[9] = { 0x281D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_370)
{
    // 0B71 0041;	
    // (ୱ) ORIYA LETTER WA	[281D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B71, 0x0041 };
    uint32_t const ces[9] = { 0x281D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_371)
{
    // 0B71 0062;	
    // (ୱ) ORIYA LETTER WA	[281D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B71, 0x0062 };
    uint32_t const ces[9] = { 0x281D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_372)
{
    // 0B36 0021;	
    // (ଶ) ORIYA LETTER SHA	[281E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B36, 0x0021 };
    uint32_t const ces[9] = { 0x281E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_373)
{
    // 0B36 003F;	
    // (ଶ) ORIYA LETTER SHA	[281E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B36, 0x003F };
    uint32_t const ces[9] = { 0x281E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_374)
{
    // 0B36 0061;	
    // (ଶ) ORIYA LETTER SHA	[281E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B36, 0x0061 };
    uint32_t const ces[9] = { 0x281E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_375)
{
    // 0B36 0041;	
    // (ଶ) ORIYA LETTER SHA	[281E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B36, 0x0041 };
    uint32_t const ces[9] = { 0x281E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_376)
{
    // 0B36 0062;	
    // (ଶ) ORIYA LETTER SHA	[281E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B36, 0x0062 };
    uint32_t const ces[9] = { 0x281E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_377)
{
    // 0B37 0021;	
    // (ଷ) ORIYA LETTER SSA	[281F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B37, 0x0021 };
    uint32_t const ces[9] = { 0x281F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_378)
{
    // 0B37 003F;	
    // (ଷ) ORIYA LETTER SSA	[281F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B37, 0x003F };
    uint32_t const ces[9] = { 0x281F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_379)
{
    // 0B37 0061;	
    // (ଷ) ORIYA LETTER SSA	[281F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B37, 0x0061 };
    uint32_t const ces[9] = { 0x281F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_380)
{
    // 0B37 0041;	
    // (ଷ) ORIYA LETTER SSA	[281F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B37, 0x0041 };
    uint32_t const ces[9] = { 0x281F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_381)
{
    // 0B37 0062;	
    // (ଷ) ORIYA LETTER SSA	[281F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B37, 0x0062 };
    uint32_t const ces[9] = { 0x281F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_382)
{
    // 0B38 0021;	
    // (ସ) ORIYA LETTER SA	[2820 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B38, 0x0021 };
    uint32_t const ces[9] = { 0x2820, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_383)
{
    // 0B38 003F;	
    // (ସ) ORIYA LETTER SA	[2820 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B38, 0x003F };
    uint32_t const ces[9] = { 0x2820, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_384)
{
    // 0B38 0061;	
    // (ସ) ORIYA LETTER SA	[2820 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B38, 0x0061 };
    uint32_t const ces[9] = { 0x2820, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_385)
{
    // 0B38 0041;	
    // (ସ) ORIYA LETTER SA	[2820 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B38, 0x0041 };
    uint32_t const ces[9] = { 0x2820, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_386)
{
    // 0B38 0062;	
    // (ସ) ORIYA LETTER SA	[2820 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B38, 0x0062 };
    uint32_t const ces[9] = { 0x2820, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_387)
{
    // 0B39 0021;	
    // (ହ) ORIYA LETTER HA	[2821 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B39, 0x0021 };
    uint32_t const ces[9] = { 0x2821, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_388)
{
    // 0B39 003F;	
    // (ହ) ORIYA LETTER HA	[2821 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B39, 0x003F };
    uint32_t const ces[9] = { 0x2821, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_389)
{
    // 0B39 0061;	
    // (ହ) ORIYA LETTER HA	[2821 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B39, 0x0061 };
    uint32_t const ces[9] = { 0x2821, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_390)
{
    // 0B39 0041;	
    // (ହ) ORIYA LETTER HA	[2821 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B39, 0x0041 };
    uint32_t const ces[9] = { 0x2821, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_391)
{
    // 0B39 0062;	
    // (ହ) ORIYA LETTER HA	[2821 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B39, 0x0062 };
    uint32_t const ces[9] = { 0x2821, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_392)
{
    // 0B3D 0021;	
    // (ଽ) ORIYA SIGN AVAGRAHA	[2822 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B3D, 0x0021 };
    uint32_t const ces[9] = { 0x2822, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_393)
{
    // 0B3D 003F;	
    // (ଽ) ORIYA SIGN AVAGRAHA	[2822 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B3D, 0x003F };
    uint32_t const ces[9] = { 0x2822, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_394)
{
    // 0B3D 0061;	
    // (ଽ) ORIYA SIGN AVAGRAHA	[2822 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B3D, 0x0061 };
    uint32_t const ces[9] = { 0x2822, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_395)
{
    // 0B3D 0041;	
    // (ଽ) ORIYA SIGN AVAGRAHA	[2822 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B3D, 0x0041 };
    uint32_t const ces[9] = { 0x2822, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_396)
{
    // 0B3D 0062;	
    // (ଽ) ORIYA SIGN AVAGRAHA	[2822 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B3D, 0x0062 };
    uint32_t const ces[9] = { 0x2822, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_397)
{
    // 0B3E 0021;	
    // (ା) ORIYA VOWEL SIGN AA	[2823 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B3E, 0x0021 };
    uint32_t const ces[9] = { 0x2823, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_398)
{
    // 0B3E 003F;	
    // (ା) ORIYA VOWEL SIGN AA	[2823 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B3E, 0x003F };
    uint32_t const ces[9] = { 0x2823, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_399)
{
    // 0B3E 0061;	
    // (ା) ORIYA VOWEL SIGN AA	[2823 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B3E, 0x0061 };
    uint32_t const ces[9] = { 0x2823, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_400)
{
    // 0B3E 0041;	
    // (ା) ORIYA VOWEL SIGN AA	[2823 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B3E, 0x0041 };
    uint32_t const ces[9] = { 0x2823, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_401)
{
    // 0B3E 0062;	
    // (ା) ORIYA VOWEL SIGN AA	[2823 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B3E, 0x0062 };
    uint32_t const ces[9] = { 0x2823, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_402)
{
    // 0B3F 0021;	
    // (ି) ORIYA VOWEL SIGN I	[2824 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B3F, 0x0021 };
    uint32_t const ces[9] = { 0x2824, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_403)
{
    // 0B3F 003F;	
    // (ି) ORIYA VOWEL SIGN I	[2824 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B3F, 0x003F };
    uint32_t const ces[9] = { 0x2824, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_404)
{
    // 0B3F 0061;	
    // (ି) ORIYA VOWEL SIGN I	[2824 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B3F, 0x0061 };
    uint32_t const ces[9] = { 0x2824, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_405)
{
    // 0B3F 0041;	
    // (ି) ORIYA VOWEL SIGN I	[2824 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B3F, 0x0041 };
    uint32_t const ces[9] = { 0x2824, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_406)
{
    // 0B3F 0062;	
    // (ି) ORIYA VOWEL SIGN I	[2824 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B3F, 0x0062 };
    uint32_t const ces[9] = { 0x2824, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_407)
{
    // 0B40 0021;	
    // (ୀ) ORIYA VOWEL SIGN II	[2825 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B40, 0x0021 };
    uint32_t const ces[9] = { 0x2825, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_408)
{
    // 0B40 003F;	
    // (ୀ) ORIYA VOWEL SIGN II	[2825 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B40, 0x003F };
    uint32_t const ces[9] = { 0x2825, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_409)
{
    // 0B40 0061;	
    // (ୀ) ORIYA VOWEL SIGN II	[2825 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B40, 0x0061 };
    uint32_t const ces[9] = { 0x2825, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_410)
{
    // 0B40 0041;	
    // (ୀ) ORIYA VOWEL SIGN II	[2825 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B40, 0x0041 };
    uint32_t const ces[9] = { 0x2825, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_411)
{
    // 0B40 0062;	
    // (ୀ) ORIYA VOWEL SIGN II	[2825 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B40, 0x0062 };
    uint32_t const ces[9] = { 0x2825, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_412)
{
    // 0B41 0021;	
    // (ୁ) ORIYA VOWEL SIGN U	[2826 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B41, 0x0021 };
    uint32_t const ces[9] = { 0x2826, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_413)
{
    // 0B41 003F;	
    // (ୁ) ORIYA VOWEL SIGN U	[2826 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B41, 0x003F };
    uint32_t const ces[9] = { 0x2826, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_414)
{
    // 0B41 0061;	
    // (ୁ) ORIYA VOWEL SIGN U	[2826 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B41, 0x0061 };
    uint32_t const ces[9] = { 0x2826, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_415)
{
    // 0B41 0041;	
    // (ୁ) ORIYA VOWEL SIGN U	[2826 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B41, 0x0041 };
    uint32_t const ces[9] = { 0x2826, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_416)
{
    // 0B41 0062;	
    // (ୁ) ORIYA VOWEL SIGN U	[2826 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B41, 0x0062 };
    uint32_t const ces[9] = { 0x2826, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_417)
{
    // 0B42 0021;	
    // (ୂ) ORIYA VOWEL SIGN UU	[2827 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B42, 0x0021 };
    uint32_t const ces[9] = { 0x2827, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_418)
{
    // 0B42 003F;	
    // (ୂ) ORIYA VOWEL SIGN UU	[2827 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B42, 0x003F };
    uint32_t const ces[9] = { 0x2827, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_419)
{
    // 0B42 0061;	
    // (ୂ) ORIYA VOWEL SIGN UU	[2827 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B42, 0x0061 };
    uint32_t const ces[9] = { 0x2827, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_420)
{
    // 0B42 0041;	
    // (ୂ) ORIYA VOWEL SIGN UU	[2827 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B42, 0x0041 };
    uint32_t const ces[9] = { 0x2827, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_421)
{
    // 0B42 0062;	
    // (ୂ) ORIYA VOWEL SIGN UU	[2827 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B42, 0x0062 };
    uint32_t const ces[9] = { 0x2827, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_422)
{
    // 0B43 0021;	
    // (ୃ) ORIYA VOWEL SIGN VOCALIC R	[2828 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B43, 0x0021 };
    uint32_t const ces[9] = { 0x2828, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_423)
{
    // 0B43 003F;	
    // (ୃ) ORIYA VOWEL SIGN VOCALIC R	[2828 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B43, 0x003F };
    uint32_t const ces[9] = { 0x2828, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_424)
{
    // 0B43 0061;	
    // (ୃ) ORIYA VOWEL SIGN VOCALIC R	[2828 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B43, 0x0061 };
    uint32_t const ces[9] = { 0x2828, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_425)
{
    // 0B43 0041;	
    // (ୃ) ORIYA VOWEL SIGN VOCALIC R	[2828 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B43, 0x0041 };
    uint32_t const ces[9] = { 0x2828, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_426)
{
    // 0B43 0062;	
    // (ୃ) ORIYA VOWEL SIGN VOCALIC R	[2828 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B43, 0x0062 };
    uint32_t const ces[9] = { 0x2828, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_427)
{
    // 0B44 0021;	
    // (ୄ) ORIYA VOWEL SIGN VOCALIC RR	[2829 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B44, 0x0021 };
    uint32_t const ces[9] = { 0x2829, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_428)
{
    // 0B44 003F;	
    // (ୄ) ORIYA VOWEL SIGN VOCALIC RR	[2829 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B44, 0x003F };
    uint32_t const ces[9] = { 0x2829, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_429)
{
    // 0B44 0061;	
    // (ୄ) ORIYA VOWEL SIGN VOCALIC RR	[2829 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B44, 0x0061 };
    uint32_t const ces[9] = { 0x2829, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_430)
{
    // 0B44 0041;	
    // (ୄ) ORIYA VOWEL SIGN VOCALIC RR	[2829 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B44, 0x0041 };
    uint32_t const ces[9] = { 0x2829, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_431)
{
    // 0B44 0062;	
    // (ୄ) ORIYA VOWEL SIGN VOCALIC RR	[2829 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B44, 0x0062 };
    uint32_t const ces[9] = { 0x2829, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_432)
{
    // 0B62 0021;	
    // (ୢ) ORIYA VOWEL SIGN VOCALIC L	[282A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B62, 0x0021 };
    uint32_t const ces[9] = { 0x282A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_433)
{
    // 0B62 003F;	
    // (ୢ) ORIYA VOWEL SIGN VOCALIC L	[282A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B62, 0x003F };
    uint32_t const ces[9] = { 0x282A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_434)
{
    // 0B62 0061;	
    // (ୢ) ORIYA VOWEL SIGN VOCALIC L	[282A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B62, 0x0061 };
    uint32_t const ces[9] = { 0x282A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_435)
{
    // 0B62 0041;	
    // (ୢ) ORIYA VOWEL SIGN VOCALIC L	[282A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B62, 0x0041 };
    uint32_t const ces[9] = { 0x282A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_436)
{
    // 0B62 0062;	
    // (ୢ) ORIYA VOWEL SIGN VOCALIC L	[282A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B62, 0x0062 };
    uint32_t const ces[9] = { 0x282A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_437)
{
    // 0B63 0021;	
    // (ୣ) ORIYA VOWEL SIGN VOCALIC LL	[282B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B63, 0x0021 };
    uint32_t const ces[9] = { 0x282B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_438)
{
    // 0B63 003F;	
    // (ୣ) ORIYA VOWEL SIGN VOCALIC LL	[282B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B63, 0x003F };
    uint32_t const ces[9] = { 0x282B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_439)
{
    // 0B63 0061;	
    // (ୣ) ORIYA VOWEL SIGN VOCALIC LL	[282B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B63, 0x0061 };
    uint32_t const ces[9] = { 0x282B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_440)
{
    // 0B63 0041;	
    // (ୣ) ORIYA VOWEL SIGN VOCALIC LL	[282B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B63, 0x0041 };
    uint32_t const ces[9] = { 0x282B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_441)
{
    // 0B63 0062;	
    // (ୣ) ORIYA VOWEL SIGN VOCALIC LL	[282B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B63, 0x0062 };
    uint32_t const ces[9] = { 0x282B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_442)
{
    // 0B47 0021;	
    // (େ) ORIYA VOWEL SIGN E	[282C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B47, 0x0021 };
    uint32_t const ces[9] = { 0x282C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_443)
{
    // 0B47 003F;	
    // (େ) ORIYA VOWEL SIGN E	[282C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B47, 0x003F };
    uint32_t const ces[9] = { 0x282C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_444)
{
    // 0B47 0061;	
    // (େ) ORIYA VOWEL SIGN E	[282C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B47, 0x0061 };
    uint32_t const ces[9] = { 0x282C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_445)
{
    // 0B47 0041;	
    // (େ) ORIYA VOWEL SIGN E	[282C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B47, 0x0041 };
    uint32_t const ces[9] = { 0x282C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_446)
{
    // 0B47 0062;	
    // (େ) ORIYA VOWEL SIGN E	[282C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B47, 0x0062 };
    uint32_t const ces[9] = { 0x282C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_447)
{
    // 0B47 0001 0B3E 0061;	
    // (େ'\u0001'ା) ORIYA VOWEL SIGN E, <START OF HEADING>, ORIYA VOWEL SIGN AA	[282C 2823 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0B47, 0x0001, 0x0B3E, 0x0061 };
    uint32_t const ces[12] = { 0x282C, 0x2823, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_448)
{
    // 0B47 0591 0B3E 0061;	
    // (େ֑ା) ORIYA VOWEL SIGN E, HEBREW ACCENT ETNAHTA, ORIYA VOWEL SIGN AA	[282C 2823 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0B47, 0x0591, 0x0B3E, 0x0061 };
    uint32_t const ces[12] = { 0x282C, 0x2823, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_449)
{
    // 0B47 1D165 0B3E 0061;	
    // (େ𝅥ା) ORIYA VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, ORIYA VOWEL SIGN AA	[282C 2823 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0B47, 0x1D165, 0x0B3E, 0x0061 };
    uint32_t const ces[12] = { 0x282C, 0x2823, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_450)
{
    // 0B47 0001 0B56 0061;	
    // (େ'\u0001'ୖ) ORIYA VOWEL SIGN E, <START OF HEADING>, ORIYA AI LENGTH MARK	[282C 2831 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0B47, 0x0001, 0x0B56, 0x0061 };
    uint32_t const ces[12] = { 0x282C, 0x2831, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_451)
{
    // 0B47 0591 0B56 0061;	
    // (େ֑ୖ) ORIYA VOWEL SIGN E, HEBREW ACCENT ETNAHTA, ORIYA AI LENGTH MARK	[282C 2831 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0B47, 0x0591, 0x0B56, 0x0061 };
    uint32_t const ces[12] = { 0x282C, 0x2831, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_452)
{
    // 0B47 1D165 0B56 0061;	
    // (େ𝅥ୖ) ORIYA VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, ORIYA AI LENGTH MARK	[282C 2831 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0B47, 0x1D165, 0x0B56, 0x0061 };
    uint32_t const ces[12] = { 0x282C, 0x2831, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_453)
{
    // 0B47 0001 0B57 0061;	
    // (େ'\u0001'ୗ) ORIYA VOWEL SIGN E, <START OF HEADING>, ORIYA AU LENGTH MARK	[282C 2832 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0B47, 0x0001, 0x0B57, 0x0061 };
    uint32_t const ces[12] = { 0x282C, 0x2832, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_454)
{
    // 0B47 0591 0B57 0061;	
    // (େ֑ୗ) ORIYA VOWEL SIGN E, HEBREW ACCENT ETNAHTA, ORIYA AU LENGTH MARK	[282C 2832 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0B47, 0x0591, 0x0B57, 0x0061 };
    uint32_t const ces[12] = { 0x282C, 0x2832, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_455)
{
    // 0B47 1D165 0B57 0061;	
    // (େ𝅥ୗ) ORIYA VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, ORIYA AU LENGTH MARK	[282C 2832 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0B47, 0x1D165, 0x0B57, 0x0061 };
    uint32_t const ces[12] = { 0x282C, 0x2832, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_456)
{
    // 0B47 0B56 0021;	
    // (ୈ) ORIYA VOWEL SIGN E, ORIYA AI LENGTH MARK	[282D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0B47, 0x0B56, 0x0021 };
    uint32_t const ces[9] = { 0x282D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_457)
{
    // 0B48 0021;	
    // (ୈ) ORIYA VOWEL SIGN AI	[282D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B48, 0x0021 };
    uint32_t const ces[9] = { 0x282D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_458)
{
    // 0B47 0B56 003F;	
    // (ୈ) ORIYA VOWEL SIGN E, ORIYA AI LENGTH MARK	[282D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0B47, 0x0B56, 0x003F };
    uint32_t const ces[9] = { 0x282D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_459)
{
    // 0B48 003F;	
    // (ୈ) ORIYA VOWEL SIGN AI	[282D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B48, 0x003F };
    uint32_t const ces[9] = { 0x282D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_460)
{
    // 0B47 0B56 0061;	
    // (ୈ) ORIYA VOWEL SIGN E, ORIYA AI LENGTH MARK	[282D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0B47, 0x0B56, 0x0061 };
    uint32_t const ces[9] = { 0x282D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_461)
{
    // 0B48 0061;	
    // (ୈ) ORIYA VOWEL SIGN AI	[282D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B48, 0x0061 };
    uint32_t const ces[9] = { 0x282D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_462)
{
    // 0B47 0B56 0041;	
    // (ୈ) ORIYA VOWEL SIGN E, ORIYA AI LENGTH MARK	[282D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x0B47, 0x0B56, 0x0041 };
    uint32_t const ces[9] = { 0x282D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_463)
{
    // 0B48 0041;	
    // (ୈ) ORIYA VOWEL SIGN AI	[282D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B48, 0x0041 };
    uint32_t const ces[9] = { 0x282D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_464)
{
    // 0B47 0B56 0062;	
    // (ୈ) ORIYA VOWEL SIGN E, ORIYA AI LENGTH MARK	[282D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0B47, 0x0B56, 0x0062 };
    uint32_t const ces[9] = { 0x282D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_465)
{
    // 0B48 0062;	
    // (ୈ) ORIYA VOWEL SIGN AI	[282D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B48, 0x0062 };
    uint32_t const ces[9] = { 0x282D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_466)
{
    // 0B47 0B3E 0021;	
    // (ୋ) ORIYA VOWEL SIGN E, ORIYA VOWEL SIGN AA	[282E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0B47, 0x0B3E, 0x0021 };
    uint32_t const ces[9] = { 0x282E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_467)
{
    // 0B4B 0021;	
    // (ୋ) ORIYA VOWEL SIGN O	[282E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B4B, 0x0021 };
    uint32_t const ces[9] = { 0x282E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_468)
{
    // 0B47 0B3E 003F;	
    // (ୋ) ORIYA VOWEL SIGN E, ORIYA VOWEL SIGN AA	[282E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0B47, 0x0B3E, 0x003F };
    uint32_t const ces[9] = { 0x282E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_469)
{
    // 0B4B 003F;	
    // (ୋ) ORIYA VOWEL SIGN O	[282E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B4B, 0x003F };
    uint32_t const ces[9] = { 0x282E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_470)
{
    // 0B47 0B3E 0061;	
    // (ୋ) ORIYA VOWEL SIGN E, ORIYA VOWEL SIGN AA	[282E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0B47, 0x0B3E, 0x0061 };
    uint32_t const ces[9] = { 0x282E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_471)
{
    // 0B4B 0061;	
    // (ୋ) ORIYA VOWEL SIGN O	[282E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B4B, 0x0061 };
    uint32_t const ces[9] = { 0x282E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_472)
{
    // 0B47 0B3E 0041;	
    // (ୋ) ORIYA VOWEL SIGN E, ORIYA VOWEL SIGN AA	[282E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x0B47, 0x0B3E, 0x0041 };
    uint32_t const ces[9] = { 0x282E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_473)
{
    // 0B4B 0041;	
    // (ୋ) ORIYA VOWEL SIGN O	[282E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B4B, 0x0041 };
    uint32_t const ces[9] = { 0x282E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_474)
{
    // 0B47 0B3E 0062;	
    // (ୋ) ORIYA VOWEL SIGN E, ORIYA VOWEL SIGN AA	[282E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0B47, 0x0B3E, 0x0062 };
    uint32_t const ces[9] = { 0x282E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_475)
{
    // 0B4B 0062;	
    // (ୋ) ORIYA VOWEL SIGN O	[282E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B4B, 0x0062 };
    uint32_t const ces[9] = { 0x282E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_476)
{
    // 0B47 0B57 0021;	
    // (ୌ) ORIYA VOWEL SIGN E, ORIYA AU LENGTH MARK	[282F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0B47, 0x0B57, 0x0021 };
    uint32_t const ces[9] = { 0x282F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_477)
{
    // 0B4C 0021;	
    // (ୌ) ORIYA VOWEL SIGN AU	[282F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B4C, 0x0021 };
    uint32_t const ces[9] = { 0x282F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_478)
{
    // 0B47 0B57 003F;	
    // (ୌ) ORIYA VOWEL SIGN E, ORIYA AU LENGTH MARK	[282F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0B47, 0x0B57, 0x003F };
    uint32_t const ces[9] = { 0x282F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_479)
{
    // 0B4C 003F;	
    // (ୌ) ORIYA VOWEL SIGN AU	[282F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B4C, 0x003F };
    uint32_t const ces[9] = { 0x282F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_480)
{
    // 0B47 0B57 0061;	
    // (ୌ) ORIYA VOWEL SIGN E, ORIYA AU LENGTH MARK	[282F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0B47, 0x0B57, 0x0061 };
    uint32_t const ces[9] = { 0x282F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_481)
{
    // 0B4C 0061;	
    // (ୌ) ORIYA VOWEL SIGN AU	[282F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B4C, 0x0061 };
    uint32_t const ces[9] = { 0x282F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_482)
{
    // 0B47 0B57 0041;	
    // (ୌ) ORIYA VOWEL SIGN E, ORIYA AU LENGTH MARK	[282F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x0B47, 0x0B57, 0x0041 };
    uint32_t const ces[9] = { 0x282F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_483)
{
    // 0B4C 0041;	
    // (ୌ) ORIYA VOWEL SIGN AU	[282F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B4C, 0x0041 };
    uint32_t const ces[9] = { 0x282F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_484)
{
    // 0B47 0B57 0062;	
    // (ୌ) ORIYA VOWEL SIGN E, ORIYA AU LENGTH MARK	[282F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0B47, 0x0B57, 0x0062 };
    uint32_t const ces[9] = { 0x282F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_485)
{
    // 0B4C 0062;	
    // (ୌ) ORIYA VOWEL SIGN AU	[282F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B4C, 0x0062 };
    uint32_t const ces[9] = { 0x282F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_486)
{
    // 0334 0B4D;	
    // (୍) ORIYA SIGN VIRAMA	[2830 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0B4D };
    uint32_t const ces[8] = { 0x2830, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_487)
{
    // 0B4D 0334;	
    // (୍) ORIYA SIGN VIRAMA	[2830 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B4D, 0x0334 };
    uint32_t const ces[8] = { 0x2830, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_488)
{
    // 0B4D 0021;	
    // (୍) ORIYA SIGN VIRAMA	[2830 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B4D, 0x0021 };
    uint32_t const ces[9] = { 0x2830, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_489)
{
    // 0B4D 003F;	
    // (୍) ORIYA SIGN VIRAMA	[2830 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B4D, 0x003F };
    uint32_t const ces[9] = { 0x2830, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_490)
{
    // 0B4D 0061;	
    // (୍) ORIYA SIGN VIRAMA	[2830 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B4D, 0x0061 };
    uint32_t const ces[9] = { 0x2830, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_491)
{
    // 0B4D 0041;	
    // (୍) ORIYA SIGN VIRAMA	[2830 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B4D, 0x0041 };
    uint32_t const ces[9] = { 0x2830, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_492)
{
    // 0B4D 0062;	
    // (୍) ORIYA SIGN VIRAMA	[2830 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B4D, 0x0062 };
    uint32_t const ces[9] = { 0x2830, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_493)
{
    // 0B56 0021;	
    // (ୖ) ORIYA AI LENGTH MARK	[2831 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B56, 0x0021 };
    uint32_t const ces[9] = { 0x2831, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_494)
{
    // 0B56 003F;	
    // (ୖ) ORIYA AI LENGTH MARK	[2831 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B56, 0x003F };
    uint32_t const ces[9] = { 0x2831, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_495)
{
    // 0B56 0061;	
    // (ୖ) ORIYA AI LENGTH MARK	[2831 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B56, 0x0061 };
    uint32_t const ces[9] = { 0x2831, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_496)
{
    // 0B56 0041;	
    // (ୖ) ORIYA AI LENGTH MARK	[2831 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B56, 0x0041 };
    uint32_t const ces[9] = { 0x2831, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_497)
{
    // 0B56 0062;	
    // (ୖ) ORIYA AI LENGTH MARK	[2831 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B56, 0x0062 };
    uint32_t const ces[9] = { 0x2831, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_498)
{
    // 0B57 0021;	
    // (ୗ) ORIYA AU LENGTH MARK	[2832 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B57, 0x0021 };
    uint32_t const ces[9] = { 0x2832, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_168_499)
{
    // 0B57 003F;	
    // (ୗ) ORIYA AU LENGTH MARK	[2832 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B57, 0x003F };
    uint32_t const ces[9] = { 0x2832, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

