// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_177_000)
{
    // 1D50D ; [.1DB2.0020.000B] 
    // MATHEMATICAL FRAKTUR CAPITAL J

    uint32_t const cps[1] = { 0x1d50d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1db2), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_001)
{
    // 1D50E ; [.1DCB.0020.000B] 
    // MATHEMATICAL FRAKTUR CAPITAL K

    uint32_t const cps[1] = { 0x1d50e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_002)
{
    // 1D50F ; [.1DDD.0020.000B] 
    // MATHEMATICAL FRAKTUR CAPITAL L

    uint32_t const cps[1] = { 0x1d50f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_003)
{
    // 1D510 ; [.1E10.0020.000B] 
    // MATHEMATICAL FRAKTUR CAPITAL M

    uint32_t const cps[1] = { 0x1d510 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_004)
{
    // 1D511 ; [.1E1F.0020.000B] 
    // MATHEMATICAL FRAKTUR CAPITAL N

    uint32_t const cps[1] = { 0x1d511 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_005)
{
    // 1D512 ; [.1E43.0020.000B] 
    // MATHEMATICAL FRAKTUR CAPITAL O

    uint32_t const cps[1] = { 0x1d512 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_006)
{
    // 1D513 ; [.1E72.0020.000B] 
    // MATHEMATICAL FRAKTUR CAPITAL P

    uint32_t const cps[1] = { 0x1d513 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_007)
{
    // 1D514 ; [.1E87.0020.000B] 
    // MATHEMATICAL FRAKTUR CAPITAL Q

    uint32_t const cps[1] = { 0x1d514 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e87), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_008)
{
    // 1D516 ; [.1ED7.0020.000B] 
    // MATHEMATICAL FRAKTUR CAPITAL S

    uint32_t const cps[1] = { 0x1d516 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_009)
{
    // 1D517 ; [.1EFB.0020.000B] 
    // MATHEMATICAL FRAKTUR CAPITAL T

    uint32_t const cps[1] = { 0x1d517 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_010)
{
    // 1D518 ; [.1F1B.0020.000B] 
    // MATHEMATICAL FRAKTUR CAPITAL U

    uint32_t const cps[1] = { 0x1d518 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_011)
{
    // 1D519 ; [.1F49.0020.000B] 
    // MATHEMATICAL FRAKTUR CAPITAL V

    uint32_t const cps[1] = { 0x1d519 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_012)
{
    // 1D51A ; [.1F5B.0020.000B] 
    // MATHEMATICAL FRAKTUR CAPITAL W

    uint32_t const cps[1] = { 0x1d51a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_013)
{
    // 1D51B ; [.1F65.0020.000B] 
    // MATHEMATICAL FRAKTUR CAPITAL X

    uint32_t const cps[1] = { 0x1d51b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_014)
{
    // 1D51C ; [.1F71.0020.000B] 
    // MATHEMATICAL FRAKTUR CAPITAL Y

    uint32_t const cps[1] = { 0x1d51c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_015)
{
    // 1D51E ; [.1CAD.0020.0005] 
    // MATHEMATICAL FRAKTUR SMALL A

    uint32_t const cps[1] = { 0x1d51e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_016)
{
    // 1D51F ; [.1CC6.0020.0005] 
    // MATHEMATICAL FRAKTUR SMALL B

    uint32_t const cps[1] = { 0x1d51f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_017)
{
    // 1D520 ; [.1CE0.0020.0005] 
    // MATHEMATICAL FRAKTUR SMALL C

    uint32_t const cps[1] = { 0x1d520 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_018)
{
    // 1D521 ; [.1CF5.0020.0005] 
    // MATHEMATICAL FRAKTUR SMALL D

    uint32_t const cps[1] = { 0x1d521 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_019)
{
    // 1D522 ; [.1D10.0020.0005] 
    // MATHEMATICAL FRAKTUR SMALL E

    uint32_t const cps[1] = { 0x1d522 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_020)
{
    // 1D523 ; [.1D4B.0020.0005] 
    // MATHEMATICAL FRAKTUR SMALL F

    uint32_t const cps[1] = { 0x1d523 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_021)
{
    // 1D524 ; [.1D5A.0020.0005] 
    // MATHEMATICAL FRAKTUR SMALL G

    uint32_t const cps[1] = { 0x1d524 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_022)
{
    // 1D525 ; [.1D7E.0020.0005] 
    // MATHEMATICAL FRAKTUR SMALL H

    uint32_t const cps[1] = { 0x1d525 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_023)
{
    // 1D526 ; [.1D98.0020.0005] 
    // MATHEMATICAL FRAKTUR SMALL I

    uint32_t const cps[1] = { 0x1d526 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_024)
{
    // 1D527 ; [.1DB2.0020.0005] 
    // MATHEMATICAL FRAKTUR SMALL J

    uint32_t const cps[1] = { 0x1d527 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1db2), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_025)
{
    // 1D528 ; [.1DCB.0020.0005] 
    // MATHEMATICAL FRAKTUR SMALL K

    uint32_t const cps[1] = { 0x1d528 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_026)
{
    // 1D529 ; [.1DDD.0020.0005] 
    // MATHEMATICAL FRAKTUR SMALL L

    uint32_t const cps[1] = { 0x1d529 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_027)
{
    // 1D52A ; [.1E10.0020.0005] 
    // MATHEMATICAL FRAKTUR SMALL M

    uint32_t const cps[1] = { 0x1d52a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_028)
{
    // 1D52B ; [.1E1F.0020.0005] 
    // MATHEMATICAL FRAKTUR SMALL N

    uint32_t const cps[1] = { 0x1d52b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_029)
{
    // 1D52C ; [.1E43.0020.0005] 
    // MATHEMATICAL FRAKTUR SMALL O

    uint32_t const cps[1] = { 0x1d52c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_030)
{
    // 1D52D ; [.1E72.0020.0005] 
    // MATHEMATICAL FRAKTUR SMALL P

    uint32_t const cps[1] = { 0x1d52d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_031)
{
    // 1D52E ; [.1E87.0020.0005] 
    // MATHEMATICAL FRAKTUR SMALL Q

    uint32_t const cps[1] = { 0x1d52e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e87), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_032)
{
    // 1D52F ; [.1E99.0020.0005] 
    // MATHEMATICAL FRAKTUR SMALL R

    uint32_t const cps[1] = { 0x1d52f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_033)
{
    // 1D530 ; [.1ED7.0020.0005] 
    // MATHEMATICAL FRAKTUR SMALL S

    uint32_t const cps[1] = { 0x1d530 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_034)
{
    // 1D531 ; [.1EFB.0020.0005] 
    // MATHEMATICAL FRAKTUR SMALL T

    uint32_t const cps[1] = { 0x1d531 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_035)
{
    // 1D532 ; [.1F1B.0020.0005] 
    // MATHEMATICAL FRAKTUR SMALL U

    uint32_t const cps[1] = { 0x1d532 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_036)
{
    // 1D533 ; [.1F49.0020.0005] 
    // MATHEMATICAL FRAKTUR SMALL V

    uint32_t const cps[1] = { 0x1d533 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_037)
{
    // 1D534 ; [.1F5B.0020.0005] 
    // MATHEMATICAL FRAKTUR SMALL W

    uint32_t const cps[1] = { 0x1d534 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_038)
{
    // 1D535 ; [.1F65.0020.0005] 
    // MATHEMATICAL FRAKTUR SMALL X

    uint32_t const cps[1] = { 0x1d535 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_039)
{
    // 1D536 ; [.1F71.0020.0005] 
    // MATHEMATICAL FRAKTUR SMALL Y

    uint32_t const cps[1] = { 0x1d536 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_040)
{
    // 1D537 ; [.1F87.0020.0005] 
    // MATHEMATICAL FRAKTUR SMALL Z

    uint32_t const cps[1] = { 0x1d537 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_041)
{
    // 1D538 ; [.1CAD.0020.000B] 
    // MATHEMATICAL DOUBLE-STRUCK CAPITAL A

    uint32_t const cps[1] = { 0x1d538 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_042)
{
    // 1D539 ; [.1CC6.0020.000B] 
    // MATHEMATICAL DOUBLE-STRUCK CAPITAL B

    uint32_t const cps[1] = { 0x1d539 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_043)
{
    // 1D53B ; [.1CF5.0020.000B] 
    // MATHEMATICAL DOUBLE-STRUCK CAPITAL D

    uint32_t const cps[1] = { 0x1d53b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_044)
{
    // 1D53C ; [.1D10.0020.000B] 
    // MATHEMATICAL DOUBLE-STRUCK CAPITAL E

    uint32_t const cps[1] = { 0x1d53c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_045)
{
    // 1D53D ; [.1D4B.0020.000B] 
    // MATHEMATICAL DOUBLE-STRUCK CAPITAL F

    uint32_t const cps[1] = { 0x1d53d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_046)
{
    // 1D53E ; [.1D5A.0020.000B] 
    // MATHEMATICAL DOUBLE-STRUCK CAPITAL G

    uint32_t const cps[1] = { 0x1d53e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_047)
{
    // 1D540 ; [.1D98.0020.000B] 
    // MATHEMATICAL DOUBLE-STRUCK CAPITAL I

    uint32_t const cps[1] = { 0x1d540 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_048)
{
    // 1D541 ; [.1DB2.0020.000B] 
    // MATHEMATICAL DOUBLE-STRUCK CAPITAL J

    uint32_t const cps[1] = { 0x1d541 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1db2), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_049)
{
    // 1D542 ; [.1DCB.0020.000B] 
    // MATHEMATICAL DOUBLE-STRUCK CAPITAL K

    uint32_t const cps[1] = { 0x1d542 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_050)
{
    // 1D543 ; [.1DDD.0020.000B] 
    // MATHEMATICAL DOUBLE-STRUCK CAPITAL L

    uint32_t const cps[1] = { 0x1d543 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_051)
{
    // 1D544 ; [.1E10.0020.000B] 
    // MATHEMATICAL DOUBLE-STRUCK CAPITAL M

    uint32_t const cps[1] = { 0x1d544 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_052)
{
    // 1D546 ; [.1E43.0020.000B] 
    // MATHEMATICAL DOUBLE-STRUCK CAPITAL O

    uint32_t const cps[1] = { 0x1d546 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_053)
{
    // 1D54A ; [.1ED7.0020.000B] 
    // MATHEMATICAL DOUBLE-STRUCK CAPITAL S

    uint32_t const cps[1] = { 0x1d54a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_054)
{
    // 1D54B ; [.1EFB.0020.000B] 
    // MATHEMATICAL DOUBLE-STRUCK CAPITAL T

    uint32_t const cps[1] = { 0x1d54b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_055)
{
    // 1D54C ; [.1F1B.0020.000B] 
    // MATHEMATICAL DOUBLE-STRUCK CAPITAL U

    uint32_t const cps[1] = { 0x1d54c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_056)
{
    // 1D54D ; [.1F49.0020.000B] 
    // MATHEMATICAL DOUBLE-STRUCK CAPITAL V

    uint32_t const cps[1] = { 0x1d54d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_057)
{
    // 1D54E ; [.1F5B.0020.000B] 
    // MATHEMATICAL DOUBLE-STRUCK CAPITAL W

    uint32_t const cps[1] = { 0x1d54e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_058)
{
    // 1D54F ; [.1F65.0020.000B] 
    // MATHEMATICAL DOUBLE-STRUCK CAPITAL X

    uint32_t const cps[1] = { 0x1d54f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_059)
{
    // 1D550 ; [.1F71.0020.000B] 
    // MATHEMATICAL DOUBLE-STRUCK CAPITAL Y

    uint32_t const cps[1] = { 0x1d550 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_060)
{
    // 1D552 ; [.1CAD.0020.0005] 
    // MATHEMATICAL DOUBLE-STRUCK SMALL A

    uint32_t const cps[1] = { 0x1d552 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_061)
{
    // 1D553 ; [.1CC6.0020.0005] 
    // MATHEMATICAL DOUBLE-STRUCK SMALL B

    uint32_t const cps[1] = { 0x1d553 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_062)
{
    // 1D554 ; [.1CE0.0020.0005] 
    // MATHEMATICAL DOUBLE-STRUCK SMALL C

    uint32_t const cps[1] = { 0x1d554 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_063)
{
    // 1D555 ; [.1CF5.0020.0005] 
    // MATHEMATICAL DOUBLE-STRUCK SMALL D

    uint32_t const cps[1] = { 0x1d555 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_064)
{
    // 1D556 ; [.1D10.0020.0005] 
    // MATHEMATICAL DOUBLE-STRUCK SMALL E

    uint32_t const cps[1] = { 0x1d556 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_065)
{
    // 1D557 ; [.1D4B.0020.0005] 
    // MATHEMATICAL DOUBLE-STRUCK SMALL F

    uint32_t const cps[1] = { 0x1d557 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_066)
{
    // 1D558 ; [.1D5A.0020.0005] 
    // MATHEMATICAL DOUBLE-STRUCK SMALL G

    uint32_t const cps[1] = { 0x1d558 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_067)
{
    // 1D559 ; [.1D7E.0020.0005] 
    // MATHEMATICAL DOUBLE-STRUCK SMALL H

    uint32_t const cps[1] = { 0x1d559 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_068)
{
    // 1D55A ; [.1D98.0020.0005] 
    // MATHEMATICAL DOUBLE-STRUCK SMALL I

    uint32_t const cps[1] = { 0x1d55a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_069)
{
    // 1D55B ; [.1DB2.0020.0005] 
    // MATHEMATICAL DOUBLE-STRUCK SMALL J

    uint32_t const cps[1] = { 0x1d55b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1db2), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_070)
{
    // 1D55C ; [.1DCB.0020.0005] 
    // MATHEMATICAL DOUBLE-STRUCK SMALL K

    uint32_t const cps[1] = { 0x1d55c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_071)
{
    // 1D55D ; [.1DDD.0020.0005] 
    // MATHEMATICAL DOUBLE-STRUCK SMALL L

    uint32_t const cps[1] = { 0x1d55d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_072)
{
    // 1D55E ; [.1E10.0020.0005] 
    // MATHEMATICAL DOUBLE-STRUCK SMALL M

    uint32_t const cps[1] = { 0x1d55e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_073)
{
    // 1D55F ; [.1E1F.0020.0005] 
    // MATHEMATICAL DOUBLE-STRUCK SMALL N

    uint32_t const cps[1] = { 0x1d55f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_074)
{
    // 1D560 ; [.1E43.0020.0005] 
    // MATHEMATICAL DOUBLE-STRUCK SMALL O

    uint32_t const cps[1] = { 0x1d560 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_075)
{
    // 1D561 ; [.1E72.0020.0005] 
    // MATHEMATICAL DOUBLE-STRUCK SMALL P

    uint32_t const cps[1] = { 0x1d561 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_076)
{
    // 1D562 ; [.1E87.0020.0005] 
    // MATHEMATICAL DOUBLE-STRUCK SMALL Q

    uint32_t const cps[1] = { 0x1d562 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e87), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_077)
{
    // 1D563 ; [.1E99.0020.0005] 
    // MATHEMATICAL DOUBLE-STRUCK SMALL R

    uint32_t const cps[1] = { 0x1d563 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_078)
{
    // 1D564 ; [.1ED7.0020.0005] 
    // MATHEMATICAL DOUBLE-STRUCK SMALL S

    uint32_t const cps[1] = { 0x1d564 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_079)
{
    // 1D565 ; [.1EFB.0020.0005] 
    // MATHEMATICAL DOUBLE-STRUCK SMALL T

    uint32_t const cps[1] = { 0x1d565 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_080)
{
    // 1D566 ; [.1F1B.0020.0005] 
    // MATHEMATICAL DOUBLE-STRUCK SMALL U

    uint32_t const cps[1] = { 0x1d566 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_081)
{
    // 1D567 ; [.1F49.0020.0005] 
    // MATHEMATICAL DOUBLE-STRUCK SMALL V

    uint32_t const cps[1] = { 0x1d567 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_082)
{
    // 1D568 ; [.1F5B.0020.0005] 
    // MATHEMATICAL DOUBLE-STRUCK SMALL W

    uint32_t const cps[1] = { 0x1d568 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_083)
{
    // 1D569 ; [.1F65.0020.0005] 
    // MATHEMATICAL DOUBLE-STRUCK SMALL X

    uint32_t const cps[1] = { 0x1d569 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_084)
{
    // 1D56A ; [.1F71.0020.0005] 
    // MATHEMATICAL DOUBLE-STRUCK SMALL Y

    uint32_t const cps[1] = { 0x1d56a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_085)
{
    // 1D56B ; [.1F87.0020.0005] 
    // MATHEMATICAL DOUBLE-STRUCK SMALL Z

    uint32_t const cps[1] = { 0x1d56b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_086)
{
    // 1D56C ; [.1CAD.0020.000B] 
    // MATHEMATICAL BOLD FRAKTUR CAPITAL A

    uint32_t const cps[1] = { 0x1d56c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_087)
{
    // 1D56D ; [.1CC6.0020.000B] 
    // MATHEMATICAL BOLD FRAKTUR CAPITAL B

    uint32_t const cps[1] = { 0x1d56d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_088)
{
    // 1D56E ; [.1CE0.0020.000B] 
    // MATHEMATICAL BOLD FRAKTUR CAPITAL C

    uint32_t const cps[1] = { 0x1d56e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_089)
{
    // 1D56F ; [.1CF5.0020.000B] 
    // MATHEMATICAL BOLD FRAKTUR CAPITAL D

    uint32_t const cps[1] = { 0x1d56f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_090)
{
    // 1D570 ; [.1D10.0020.000B] 
    // MATHEMATICAL BOLD FRAKTUR CAPITAL E

    uint32_t const cps[1] = { 0x1d570 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_091)
{
    // 1D571 ; [.1D4B.0020.000B] 
    // MATHEMATICAL BOLD FRAKTUR CAPITAL F

    uint32_t const cps[1] = { 0x1d571 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_092)
{
    // 1D572 ; [.1D5A.0020.000B] 
    // MATHEMATICAL BOLD FRAKTUR CAPITAL G

    uint32_t const cps[1] = { 0x1d572 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_093)
{
    // 1D573 ; [.1D7E.0020.000B] 
    // MATHEMATICAL BOLD FRAKTUR CAPITAL H

    uint32_t const cps[1] = { 0x1d573 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_094)
{
    // 1D574 ; [.1D98.0020.000B] 
    // MATHEMATICAL BOLD FRAKTUR CAPITAL I

    uint32_t const cps[1] = { 0x1d574 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_095)
{
    // 1D575 ; [.1DB2.0020.000B] 
    // MATHEMATICAL BOLD FRAKTUR CAPITAL J

    uint32_t const cps[1] = { 0x1d575 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1db2), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_096)
{
    // 1D576 ; [.1DCB.0020.000B] 
    // MATHEMATICAL BOLD FRAKTUR CAPITAL K

    uint32_t const cps[1] = { 0x1d576 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_097)
{
    // 1D577 ; [.1DDD.0020.000B] 
    // MATHEMATICAL BOLD FRAKTUR CAPITAL L

    uint32_t const cps[1] = { 0x1d577 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_098)
{
    // 1D578 ; [.1E10.0020.000B] 
    // MATHEMATICAL BOLD FRAKTUR CAPITAL M

    uint32_t const cps[1] = { 0x1d578 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_099)
{
    // 1D579 ; [.1E1F.0020.000B] 
    // MATHEMATICAL BOLD FRAKTUR CAPITAL N

    uint32_t const cps[1] = { 0x1d579 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_100)
{
    // 1D57A ; [.1E43.0020.000B] 
    // MATHEMATICAL BOLD FRAKTUR CAPITAL O

    uint32_t const cps[1] = { 0x1d57a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_101)
{
    // 1D57B ; [.1E72.0020.000B] 
    // MATHEMATICAL BOLD FRAKTUR CAPITAL P

    uint32_t const cps[1] = { 0x1d57b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_102)
{
    // 1D57C ; [.1E87.0020.000B] 
    // MATHEMATICAL BOLD FRAKTUR CAPITAL Q

    uint32_t const cps[1] = { 0x1d57c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e87), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_103)
{
    // 1D57D ; [.1E99.0020.000B] 
    // MATHEMATICAL BOLD FRAKTUR CAPITAL R

    uint32_t const cps[1] = { 0x1d57d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_104)
{
    // 1D57E ; [.1ED7.0020.000B] 
    // MATHEMATICAL BOLD FRAKTUR CAPITAL S

    uint32_t const cps[1] = { 0x1d57e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_105)
{
    // 1D57F ; [.1EFB.0020.000B] 
    // MATHEMATICAL BOLD FRAKTUR CAPITAL T

    uint32_t const cps[1] = { 0x1d57f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_106)
{
    // 1D580 ; [.1F1B.0020.000B] 
    // MATHEMATICAL BOLD FRAKTUR CAPITAL U

    uint32_t const cps[1] = { 0x1d580 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_107)
{
    // 1D581 ; [.1F49.0020.000B] 
    // MATHEMATICAL BOLD FRAKTUR CAPITAL V

    uint32_t const cps[1] = { 0x1d581 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_108)
{
    // 1D582 ; [.1F5B.0020.000B] 
    // MATHEMATICAL BOLD FRAKTUR CAPITAL W

    uint32_t const cps[1] = { 0x1d582 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_109)
{
    // 1D583 ; [.1F65.0020.000B] 
    // MATHEMATICAL BOLD FRAKTUR CAPITAL X

    uint32_t const cps[1] = { 0x1d583 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_110)
{
    // 1D584 ; [.1F71.0020.000B] 
    // MATHEMATICAL BOLD FRAKTUR CAPITAL Y

    uint32_t const cps[1] = { 0x1d584 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_111)
{
    // 1D585 ; [.1F87.0020.000B] 
    // MATHEMATICAL BOLD FRAKTUR CAPITAL Z

    uint32_t const cps[1] = { 0x1d585 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_112)
{
    // 1D586 ; [.1CAD.0020.0005] 
    // MATHEMATICAL BOLD FRAKTUR SMALL A

    uint32_t const cps[1] = { 0x1d586 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_113)
{
    // 1D587 ; [.1CC6.0020.0005] 
    // MATHEMATICAL BOLD FRAKTUR SMALL B

    uint32_t const cps[1] = { 0x1d587 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_114)
{
    // 1D588 ; [.1CE0.0020.0005] 
    // MATHEMATICAL BOLD FRAKTUR SMALL C

    uint32_t const cps[1] = { 0x1d588 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_115)
{
    // 1D589 ; [.1CF5.0020.0005] 
    // MATHEMATICAL BOLD FRAKTUR SMALL D

    uint32_t const cps[1] = { 0x1d589 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_116)
{
    // 1D58A ; [.1D10.0020.0005] 
    // MATHEMATICAL BOLD FRAKTUR SMALL E

    uint32_t const cps[1] = { 0x1d58a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_117)
{
    // 1D58B ; [.1D4B.0020.0005] 
    // MATHEMATICAL BOLD FRAKTUR SMALL F

    uint32_t const cps[1] = { 0x1d58b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_118)
{
    // 1D58C ; [.1D5A.0020.0005] 
    // MATHEMATICAL BOLD FRAKTUR SMALL G

    uint32_t const cps[1] = { 0x1d58c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_119)
{
    // 1D58D ; [.1D7E.0020.0005] 
    // MATHEMATICAL BOLD FRAKTUR SMALL H

    uint32_t const cps[1] = { 0x1d58d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_120)
{
    // 1D58E ; [.1D98.0020.0005] 
    // MATHEMATICAL BOLD FRAKTUR SMALL I

    uint32_t const cps[1] = { 0x1d58e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_121)
{
    // 1D58F ; [.1DB2.0020.0005] 
    // MATHEMATICAL BOLD FRAKTUR SMALL J

    uint32_t const cps[1] = { 0x1d58f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1db2), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_122)
{
    // 1D590 ; [.1DCB.0020.0005] 
    // MATHEMATICAL BOLD FRAKTUR SMALL K

    uint32_t const cps[1] = { 0x1d590 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_123)
{
    // 1D591 ; [.1DDD.0020.0005] 
    // MATHEMATICAL BOLD FRAKTUR SMALL L

    uint32_t const cps[1] = { 0x1d591 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_124)
{
    // 1D592 ; [.1E10.0020.0005] 
    // MATHEMATICAL BOLD FRAKTUR SMALL M

    uint32_t const cps[1] = { 0x1d592 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_125)
{
    // 1D593 ; [.1E1F.0020.0005] 
    // MATHEMATICAL BOLD FRAKTUR SMALL N

    uint32_t const cps[1] = { 0x1d593 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_126)
{
    // 1D594 ; [.1E43.0020.0005] 
    // MATHEMATICAL BOLD FRAKTUR SMALL O

    uint32_t const cps[1] = { 0x1d594 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_127)
{
    // 1D595 ; [.1E72.0020.0005] 
    // MATHEMATICAL BOLD FRAKTUR SMALL P

    uint32_t const cps[1] = { 0x1d595 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_128)
{
    // 1D596 ; [.1E87.0020.0005] 
    // MATHEMATICAL BOLD FRAKTUR SMALL Q

    uint32_t const cps[1] = { 0x1d596 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e87), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_129)
{
    // 1D597 ; [.1E99.0020.0005] 
    // MATHEMATICAL BOLD FRAKTUR SMALL R

    uint32_t const cps[1] = { 0x1d597 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_130)
{
    // 1D598 ; [.1ED7.0020.0005] 
    // MATHEMATICAL BOLD FRAKTUR SMALL S

    uint32_t const cps[1] = { 0x1d598 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_131)
{
    // 1D599 ; [.1EFB.0020.0005] 
    // MATHEMATICAL BOLD FRAKTUR SMALL T

    uint32_t const cps[1] = { 0x1d599 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_132)
{
    // 1D59A ; [.1F1B.0020.0005] 
    // MATHEMATICAL BOLD FRAKTUR SMALL U

    uint32_t const cps[1] = { 0x1d59a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_133)
{
    // 1D59B ; [.1F49.0020.0005] 
    // MATHEMATICAL BOLD FRAKTUR SMALL V

    uint32_t const cps[1] = { 0x1d59b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_134)
{
    // 1D59C ; [.1F5B.0020.0005] 
    // MATHEMATICAL BOLD FRAKTUR SMALL W

    uint32_t const cps[1] = { 0x1d59c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_135)
{
    // 1D59D ; [.1F65.0020.0005] 
    // MATHEMATICAL BOLD FRAKTUR SMALL X

    uint32_t const cps[1] = { 0x1d59d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_136)
{
    // 1D59E ; [.1F71.0020.0005] 
    // MATHEMATICAL BOLD FRAKTUR SMALL Y

    uint32_t const cps[1] = { 0x1d59e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_137)
{
    // 1D59F ; [.1F87.0020.0005] 
    // MATHEMATICAL BOLD FRAKTUR SMALL Z

    uint32_t const cps[1] = { 0x1d59f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_138)
{
    // 1D5A0 ; [.1CAD.0020.000B] 
    // MATHEMATICAL SANS-SERIF CAPITAL A

    uint32_t const cps[1] = { 0x1d5a0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_139)
{
    // 1D5A1 ; [.1CC6.0020.000B] 
    // MATHEMATICAL SANS-SERIF CAPITAL B

    uint32_t const cps[1] = { 0x1d5a1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_140)
{
    // 1D5A2 ; [.1CE0.0020.000B] 
    // MATHEMATICAL SANS-SERIF CAPITAL C

    uint32_t const cps[1] = { 0x1d5a2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_141)
{
    // 1D5A3 ; [.1CF5.0020.000B] 
    // MATHEMATICAL SANS-SERIF CAPITAL D

    uint32_t const cps[1] = { 0x1d5a3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_142)
{
    // 1D5A4 ; [.1D10.0020.000B] 
    // MATHEMATICAL SANS-SERIF CAPITAL E

    uint32_t const cps[1] = { 0x1d5a4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_143)
{
    // 1D5A5 ; [.1D4B.0020.000B] 
    // MATHEMATICAL SANS-SERIF CAPITAL F

    uint32_t const cps[1] = { 0x1d5a5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_144)
{
    // 1D5A6 ; [.1D5A.0020.000B] 
    // MATHEMATICAL SANS-SERIF CAPITAL G

    uint32_t const cps[1] = { 0x1d5a6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_145)
{
    // 1D5A7 ; [.1D7E.0020.000B] 
    // MATHEMATICAL SANS-SERIF CAPITAL H

    uint32_t const cps[1] = { 0x1d5a7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_146)
{
    // 1D5A8 ; [.1D98.0020.000B] 
    // MATHEMATICAL SANS-SERIF CAPITAL I

    uint32_t const cps[1] = { 0x1d5a8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_147)
{
    // 1D5A9 ; [.1DB2.0020.000B] 
    // MATHEMATICAL SANS-SERIF CAPITAL J

    uint32_t const cps[1] = { 0x1d5a9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1db2), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_148)
{
    // 1D5AA ; [.1DCB.0020.000B] 
    // MATHEMATICAL SANS-SERIF CAPITAL K

    uint32_t const cps[1] = { 0x1d5aa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_177_149)
{
    // 1D5AB ; [.1DDD.0020.000B] 
    // MATHEMATICAL SANS-SERIF CAPITAL L

    uint32_t const cps[1] = { 0x1d5ab };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

