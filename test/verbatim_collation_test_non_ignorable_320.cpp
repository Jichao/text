// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_320_000)
{
    // 2F90B 0021;	
    // (滋) CJK COMPATIBILITY IDEOGRAPH-2F90B	[FB40 EECB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F90B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_001)
{
    // FA99 003F;	
    // (滋) CJK COMPATIBILITY IDEOGRAPH-FA99	[FB40 EECB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA99, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_002)
{
    // 2F90B 003F;	
    // (滋) CJK COMPATIBILITY IDEOGRAPH-2F90B	[FB40 EECB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F90B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_003)
{
    // FA99 0061;	
    // (滋) CJK COMPATIBILITY IDEOGRAPH-FA99	[FB40 EECB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA99, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_004)
{
    // 2F90B 0061;	
    // (滋) CJK COMPATIBILITY IDEOGRAPH-2F90B	[FB40 EECB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F90B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_005)
{
    // FA99 0041;	
    // (滋) CJK COMPATIBILITY IDEOGRAPH-FA99	[FB40 EECB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA99, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_006)
{
    // 2F90B 0041;	
    // (滋) CJK COMPATIBILITY IDEOGRAPH-2F90B	[FB40 EECB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F90B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_007)
{
    // FA99 0062;	
    // (滋) CJK COMPATIBILITY IDEOGRAPH-FA99	[FB40 EECB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA99, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_008)
{
    // 2F90B 0062;	
    // (滋) CJK COMPATIBILITY IDEOGRAPH-2F90B	[FB40 EECB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F90B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_009)
{
    // F904 0021;	
    // (滑) CJK COMPATIBILITY IDEOGRAPH-F904	[FB40 EED1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF904, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEED1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_010)
{
    // F904 003F;	
    // (滑) CJK COMPATIBILITY IDEOGRAPH-F904	[FB40 EED1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF904, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEED1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_011)
{
    // F904 0061;	
    // (滑) CJK COMPATIBILITY IDEOGRAPH-F904	[FB40 EED1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF904, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEED1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_012)
{
    // F904 0041;	
    // (滑) CJK COMPATIBILITY IDEOGRAPH-F904	[FB40 EED1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF904, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEED1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_013)
{
    // F904 0062;	
    // (滑) CJK COMPATIBILITY IDEOGRAPH-F904	[FB40 EED1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF904, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEED1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_014)
{
    // FA98 0021;	
    // (滛) CJK COMPATIBILITY IDEOGRAPH-FA98	[FB40 EEDB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA98, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEEDB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_015)
{
    // FA98 003F;	
    // (滛) CJK COMPATIBILITY IDEOGRAPH-FA98	[FB40 EEDB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA98, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEEDB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_016)
{
    // FA98 0061;	
    // (滛) CJK COMPATIBILITY IDEOGRAPH-FA98	[FB40 EEDB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA98, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEEDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_017)
{
    // FA98 0041;	
    // (滛) CJK COMPATIBILITY IDEOGRAPH-FA98	[FB40 EEDB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA98, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEEDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_018)
{
    // FA98 0062;	
    // (滛) CJK COMPATIBILITY IDEOGRAPH-FA98	[FB40 EEDB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA98, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEEDB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_019)
{
    // F94E 0021;	
    // (漏) CJK COMPATIBILITY IDEOGRAPH-F94E	[FB40 EF0F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF94E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEF0F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_020)
{
    // F94E 003F;	
    // (漏) CJK COMPATIBILITY IDEOGRAPH-F94E	[FB40 EF0F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF94E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEF0F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_021)
{
    // F94E 0061;	
    // (漏) CJK COMPATIBILITY IDEOGRAPH-F94E	[FB40 EF0F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF94E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEF0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_022)
{
    // F94E 0041;	
    // (漏) CJK COMPATIBILITY IDEOGRAPH-F94E	[FB40 EF0F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF94E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEF0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_023)
{
    // F94E 0062;	
    // (漏) CJK COMPATIBILITY IDEOGRAPH-F94E	[FB40 EF0F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF94E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEF0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_024)
{
    // 1F226 0021;	
    // (🈦) SQUARED CJK UNIFIED IDEOGRAPH-6F14	[FB40 EF14 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F226, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEF14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_025)
{
    // 1F226 003F;	
    // (🈦) SQUARED CJK UNIFIED IDEOGRAPH-6F14	[FB40 EF14 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F226, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEF14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_026)
{
    // 1F226 0061;	
    // (🈦) SQUARED CJK UNIFIED IDEOGRAPH-6F14	[FB40 EF14 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F226, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEF14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_027)
{
    // 1F226 0041;	
    // (🈦) SQUARED CJK UNIFIED IDEOGRAPH-6F14	[FB40 EF14 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F226, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEF14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_028)
{
    // 1F226 0062;	
    // (🈦) SQUARED CJK UNIFIED IDEOGRAPH-6F14	[FB40 EF14 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F226, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEF14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_029)
{
    // FA47 0021;	
    // (漢) CJK COMPATIBILITY IDEOGRAPH-FA47	[FB40 EF22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA47, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEF22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_030)
{
    // FA9A 0021;	
    // (漢) CJK COMPATIBILITY IDEOGRAPH-FA9A	[FB40 EF22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA9A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEF22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_031)
{
    // FA47 003F;	
    // (漢) CJK COMPATIBILITY IDEOGRAPH-FA47	[FB40 EF22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA47, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEF22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_032)
{
    // FA9A 003F;	
    // (漢) CJK COMPATIBILITY IDEOGRAPH-FA9A	[FB40 EF22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA9A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEF22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_033)
{
    // FA47 0061;	
    // (漢) CJK COMPATIBILITY IDEOGRAPH-FA47	[FB40 EF22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA47, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEF22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_034)
{
    // FA9A 0061;	
    // (漢) CJK COMPATIBILITY IDEOGRAPH-FA9A	[FB40 EF22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA9A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEF22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_035)
{
    // FA47 0041;	
    // (漢) CJK COMPATIBILITY IDEOGRAPH-FA47	[FB40 EF22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA47, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEF22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_036)
{
    // FA9A 0041;	
    // (漢) CJK COMPATIBILITY IDEOGRAPH-FA9A	[FB40 EF22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA9A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEF22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_037)
{
    // FA47 0062;	
    // (漢) CJK COMPATIBILITY IDEOGRAPH-FA47	[FB40 EF22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA47, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEF22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_038)
{
    // FA9A 0062;	
    // (漢) CJK COMPATIBILITY IDEOGRAPH-FA9A	[FB40 EF22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA9A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEF22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_039)
{
    // F992 0021;	
    // (漣) CJK COMPATIBILITY IDEOGRAPH-F992	[FB40 EF23 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF992, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEF23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_040)
{
    // F992 003F;	
    // (漣) CJK COMPATIBILITY IDEOGRAPH-F992	[FB40 EF23 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF992, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEF23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_041)
{
    // F992 0061;	
    // (漣) CJK COMPATIBILITY IDEOGRAPH-F992	[FB40 EF23 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF992, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEF23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_042)
{
    // F992 0041;	
    // (漣) CJK COMPATIBILITY IDEOGRAPH-F992	[FB40 EF23 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF992, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEF23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_043)
{
    // F992 0062;	
    // (漣) CJK COMPATIBILITY IDEOGRAPH-F992	[FB40 EF23 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF992, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEF23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_044)
{
    // 2F90F 0021;	
    // (潮) CJK COMPATIBILITY IDEOGRAPH-2F90F	[FB40 EF6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F90F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEF6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_045)
{
    // 2F90F 003F;	
    // (潮) CJK COMPATIBILITY IDEOGRAPH-2F90F	[FB40 EF6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F90F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEF6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_046)
{
    // 2F90F 0061;	
    // (潮) CJK COMPATIBILITY IDEOGRAPH-2F90F	[FB40 EF6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F90F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEF6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_047)
{
    // 2F90F 0041;	
    // (潮) CJK COMPATIBILITY IDEOGRAPH-2F90F	[FB40 EF6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F90F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEF6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_048)
{
    // 2F90F 0062;	
    // (潮) CJK COMPATIBILITY IDEOGRAPH-2F90F	[FB40 EF6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F90F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEF6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_049)
{
    // 2F912 0021;	
    // (濆) CJK COMPATIBILITY IDEOGRAPH-2F912	[FB40 EFC6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F912, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEFC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_050)
{
    // 2F912 003F;	
    // (濆) CJK COMPATIBILITY IDEOGRAPH-2F912	[FB40 EFC6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F912, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEFC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_051)
{
    // 2F912 0061;	
    // (濆) CJK COMPATIBILITY IDEOGRAPH-2F912	[FB40 EFC6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F912, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEFC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_052)
{
    // 2F912 0041;	
    // (濆) CJK COMPATIBILITY IDEOGRAPH-2F912	[FB40 EFC6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F912, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEFC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_053)
{
    // 2F912 0062;	
    // (濆) CJK COMPATIBILITY IDEOGRAPH-2F912	[FB40 EFC6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F912, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEFC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_054)
{
    // F922 0021;	
    // (濫) CJK COMPATIBILITY IDEOGRAPH-F922	[FB40 EFEB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF922, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEFEB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_055)
{
    // F922 003F;	
    // (濫) CJK COMPATIBILITY IDEOGRAPH-F922	[FB40 EFEB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF922, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEFEB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_056)
{
    // F922 0061;	
    // (濫) CJK COMPATIBILITY IDEOGRAPH-F922	[FB40 EFEB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF922, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEFEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_057)
{
    // F922 0041;	
    // (濫) CJK COMPATIBILITY IDEOGRAPH-F922	[FB40 EFEB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF922, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEFEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_058)
{
    // F922 0062;	
    // (濫) CJK COMPATIBILITY IDEOGRAPH-F922	[FB40 EFEB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF922, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEFEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_059)
{
    // F984 0021;	
    // (濾) CJK COMPATIBILITY IDEOGRAPH-F984	[FB40 EFFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF984, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEFFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_060)
{
    // F984 003F;	
    // (濾) CJK COMPATIBILITY IDEOGRAPH-F984	[FB40 EFFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF984, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEFFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_061)
{
    // F984 0061;	
    // (濾) CJK COMPATIBILITY IDEOGRAPH-F984	[FB40 EFFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF984, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_062)
{
    // F984 0041;	
    // (濾) CJK COMPATIBILITY IDEOGRAPH-F984	[FB40 EFFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF984, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_063)
{
    // F984 0062;	
    // (濾) CJK COMPATIBILITY IDEOGRAPH-F984	[FB40 EFFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF984, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEFFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_064)
{
    // 2F915 0021;	
    // (瀛) CJK COMPATIBILITY IDEOGRAPH-2F915	[FB40 F01B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F915, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF01B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_065)
{
    // 2F915 003F;	
    // (瀛) CJK COMPATIBILITY IDEOGRAPH-2F915	[FB40 F01B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F915, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF01B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_066)
{
    // 2F915 0061;	
    // (瀛) CJK COMPATIBILITY IDEOGRAPH-2F915	[FB40 F01B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F915, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF01B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_067)
{
    // 2F915 0041;	
    // (瀛) CJK COMPATIBILITY IDEOGRAPH-2F915	[FB40 F01B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F915, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF01B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_068)
{
    // 2F915 0062;	
    // (瀛) CJK COMPATIBILITY IDEOGRAPH-2F915	[FB40 F01B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F915, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF01B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_069)
{
    // FA9B 0021;	
    // (瀞) CJK COMPATIBILITY IDEOGRAPH-FA9B	[FB40 F01E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA9B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF01E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_070)
{
    // 2F914 0021;	
    // (瀞) CJK COMPATIBILITY IDEOGRAPH-2F914	[FB40 F01E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F914, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF01E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_071)
{
    // FA9B 003F;	
    // (瀞) CJK COMPATIBILITY IDEOGRAPH-FA9B	[FB40 F01E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA9B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF01E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_072)
{
    // 2F914 003F;	
    // (瀞) CJK COMPATIBILITY IDEOGRAPH-2F914	[FB40 F01E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F914, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF01E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_073)
{
    // FA9B 0061;	
    // (瀞) CJK COMPATIBILITY IDEOGRAPH-FA9B	[FB40 F01E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA9B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF01E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_074)
{
    // 2F914 0061;	
    // (瀞) CJK COMPATIBILITY IDEOGRAPH-2F914	[FB40 F01E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F914, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF01E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_075)
{
    // FA9B 0041;	
    // (瀞) CJK COMPATIBILITY IDEOGRAPH-FA9B	[FB40 F01E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA9B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF01E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_076)
{
    // 2F914 0041;	
    // (瀞) CJK COMPATIBILITY IDEOGRAPH-2F914	[FB40 F01E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F914, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF01E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_077)
{
    // FA9B 0062;	
    // (瀞) CJK COMPATIBILITY IDEOGRAPH-FA9B	[FB40 F01E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA9B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF01E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_078)
{
    // 2F914 0062;	
    // (瀞) CJK COMPATIBILITY IDEOGRAPH-2F914	[FB40 F01E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F914, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF01E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_079)
{
    // 2F913 0021;	
    // (瀹) CJK COMPATIBILITY IDEOGRAPH-2F913	[FB40 F039 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F913, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF039, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_080)
{
    // 2F913 003F;	
    // (瀹) CJK COMPATIBILITY IDEOGRAPH-2F913	[FB40 F039 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F913, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF039, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_081)
{
    // 2F913 0061;	
    // (瀹) CJK COMPATIBILITY IDEOGRAPH-2F913	[FB40 F039 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F913, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF039, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_082)
{
    // 2F913 0041;	
    // (瀹) CJK COMPATIBILITY IDEOGRAPH-2F913	[FB40 F039 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F913, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF039, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_083)
{
    // 2F913 0062;	
    // (瀹) CJK COMPATIBILITY IDEOGRAPH-2F913	[FB40 F039 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F913, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF039, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_084)
{
    // 2F917 0021;	
    // (灊) CJK COMPATIBILITY IDEOGRAPH-2F917	[FB40 F04A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F917, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF04A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_085)
{
    // 2F917 003F;	
    // (灊) CJK COMPATIBILITY IDEOGRAPH-2F917	[FB40 F04A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F917, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF04A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_086)
{
    // 2F917 0061;	
    // (灊) CJK COMPATIBILITY IDEOGRAPH-2F917	[FB40 F04A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F917, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF04A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_087)
{
    // 2F917 0041;	
    // (灊) CJK COMPATIBILITY IDEOGRAPH-2F917	[FB40 F04A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F917, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF04A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_088)
{
    // 2F917 0062;	
    // (灊) CJK COMPATIBILITY IDEOGRAPH-2F917	[FB40 F04A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F917, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF04A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_089)
{
    // 2F55 0021;	
    // (⽕) KANGXI RADICAL FIRE	[FB40 F06B 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F55, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF06B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_090)
{
    // 328B 0021;	
    // (㊋) CIRCLED IDEOGRAPH FIRE	[FB40 F06B 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x328B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF06B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_091)
{
    // 2F55 003F;	
    // (⽕) KANGXI RADICAL FIRE	[FB40 F06B 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F55, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF06B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_092)
{
    // 328B 003F;	
    // (㊋) CIRCLED IDEOGRAPH FIRE	[FB40 F06B 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x328B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF06B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_093)
{
    // 2F55 0061;	
    // (⽕) KANGXI RADICAL FIRE	[FB40 F06B 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F55, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF06B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_094)
{
    // 2F55 0041;	
    // (⽕) KANGXI RADICAL FIRE	[FB40 F06B 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F55, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF06B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_095)
{
    // 328B 0061;	
    // (㊋) CIRCLED IDEOGRAPH FIRE	[FB40 F06B 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x328B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF06B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_096)
{
    // 328B 0041;	
    // (㊋) CIRCLED IDEOGRAPH FIRE	[FB40 F06B 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x328B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF06B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_097)
{
    // 2F55 0062;	
    // (⽕) KANGXI RADICAL FIRE	[FB40 F06B 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F55, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF06B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_098)
{
    // 328B 0062;	
    // (㊋) CIRCLED IDEOGRAPH FIRE	[FB40 F06B 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x328B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF06B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_099)
{
    // 2EA3 0021;	
    // (⺣) CJK RADICAL FIRE	[FB40 F06C 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EA3, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF06C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_100)
{
    // 2EA3 003F;	
    // (⺣) CJK RADICAL FIRE	[FB40 F06C 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EA3, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF06C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_101)
{
    // 2EA3 0061;	
    // (⺣) CJK RADICAL FIRE	[FB40 F06C 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EA3, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF06C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_102)
{
    // 2EA3 0041;	
    // (⺣) CJK RADICAL FIRE	[FB40 F06C 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2EA3, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF06C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_103)
{
    // 2EA3 0062;	
    // (⺣) CJK RADICAL FIRE	[FB40 F06C 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EA3, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF06C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_104)
{
    // 2F835 0021;	
    // (灰) CJK COMPATIBILITY IDEOGRAPH-2F835	[FB40 F070 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F835, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF070, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_105)
{
    // 2F835 003F;	
    // (灰) CJK COMPATIBILITY IDEOGRAPH-2F835	[FB40 F070 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F835, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF070, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_106)
{
    // 2F835 0061;	
    // (灰) CJK COMPATIBILITY IDEOGRAPH-2F835	[FB40 F070 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F835, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF070, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_107)
{
    // 2F835 0041;	
    // (灰) CJK COMPATIBILITY IDEOGRAPH-2F835	[FB40 F070 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F835, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF070, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_108)
{
    // 2F835 0062;	
    // (灰) CJK COMPATIBILITY IDEOGRAPH-2F835	[FB40 F070 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F835, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF070, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_109)
{
    // 2F919 0021;	
    // (灷) CJK COMPATIBILITY IDEOGRAPH-2F919	[FB40 F077 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F919, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF077, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_110)
{
    // 2F919 003F;	
    // (灷) CJK COMPATIBILITY IDEOGRAPH-2F919	[FB40 F077 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F919, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF077, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_111)
{
    // 2F919 0061;	
    // (灷) CJK COMPATIBILITY IDEOGRAPH-2F919	[FB40 F077 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F919, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF077, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_112)
{
    // 2F919 0041;	
    // (灷) CJK COMPATIBILITY IDEOGRAPH-2F919	[FB40 F077 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F919, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF077, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_113)
{
    // 2F919 0062;	
    // (灷) CJK COMPATIBILITY IDEOGRAPH-2F919	[FB40 F077 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F919, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF077, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_114)
{
    // 2F918 0021;	
    // (災) CJK COMPATIBILITY IDEOGRAPH-2F918	[FB40 F07D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F918, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF07D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_115)
{
    // 2F918 003F;	
    // (災) CJK COMPATIBILITY IDEOGRAPH-2F918	[FB40 F07D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F918, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF07D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_116)
{
    // 2F918 0061;	
    // (災) CJK COMPATIBILITY IDEOGRAPH-2F918	[FB40 F07D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F918, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF07D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_117)
{
    // 2F918 0041;	
    // (災) CJK COMPATIBILITY IDEOGRAPH-2F918	[FB40 F07D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F918, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF07D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_118)
{
    // 2F918 0062;	
    // (災) CJK COMPATIBILITY IDEOGRAPH-2F918	[FB40 F07D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F918, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF07D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_119)
{
    // F9FB 0021;	
    // (炙) CJK COMPATIBILITY IDEOGRAPH-F9FB	[FB40 F099 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9FB, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF099, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_120)
{
    // F9FB 003F;	
    // (炙) CJK COMPATIBILITY IDEOGRAPH-F9FB	[FB40 F099 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9FB, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF099, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_121)
{
    // F9FB 0061;	
    // (炙) CJK COMPATIBILITY IDEOGRAPH-F9FB	[FB40 F099 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9FB, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF099, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_122)
{
    // F9FB 0041;	
    // (炙) CJK COMPATIBILITY IDEOGRAPH-F9FB	[FB40 F099 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9FB, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF099, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_123)
{
    // F9FB 0062;	
    // (炙) CJK COMPATIBILITY IDEOGRAPH-F9FB	[FB40 F099 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9FB, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF099, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_124)
{
    // 2F91A 0021;	
    // (炭) CJK COMPATIBILITY IDEOGRAPH-2F91A	[FB40 F0AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F91A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF0AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_125)
{
    // 2F91A 003F;	
    // (炭) CJK COMPATIBILITY IDEOGRAPH-2F91A	[FB40 F0AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F91A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF0AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_126)
{
    // 2F91A 0061;	
    // (炭) CJK COMPATIBILITY IDEOGRAPH-2F91A	[FB40 F0AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F91A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF0AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_127)
{
    // 2F91A 0041;	
    // (炭) CJK COMPATIBILITY IDEOGRAPH-2F91A	[FB40 F0AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F91A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF0AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_128)
{
    // 2F91A 0062;	
    // (炭) CJK COMPATIBILITY IDEOGRAPH-2F91A	[FB40 F0AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F91A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF0AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_129)
{
    // F99F 0021;	
    // (烈) CJK COMPATIBILITY IDEOGRAPH-F99F	[FB40 F0C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF99F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF0C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_130)
{
    // F99F 003F;	
    // (烈) CJK COMPATIBILITY IDEOGRAPH-F99F	[FB40 F0C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF99F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF0C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_131)
{
    // F99F 0061;	
    // (烈) CJK COMPATIBILITY IDEOGRAPH-F99F	[FB40 F0C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF99F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF0C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_132)
{
    // F99F 0041;	
    // (烈) CJK COMPATIBILITY IDEOGRAPH-F99F	[FB40 F0C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF99F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF0C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_133)
{
    // F99F 0062;	
    // (烈) CJK COMPATIBILITY IDEOGRAPH-F99F	[FB40 F0C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF99F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF0C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_134)
{
    // F916 0021;	
    // (烙) CJK COMPATIBILITY IDEOGRAPH-F916	[FB40 F0D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF916, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF0D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_135)
{
    // F916 003F;	
    // (烙) CJK COMPATIBILITY IDEOGRAPH-F916	[FB40 F0D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF916, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF0D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_136)
{
    // F916 0061;	
    // (烙) CJK COMPATIBILITY IDEOGRAPH-F916	[FB40 F0D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF916, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF0D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_137)
{
    // F916 0041;	
    // (烙) CJK COMPATIBILITY IDEOGRAPH-F916	[FB40 F0D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF916, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF0D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_138)
{
    // F916 0062;	
    // (烙) CJK COMPATIBILITY IDEOGRAPH-F916	[FB40 F0D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF916, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF0D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_139)
{
    // 1F21A 0021;	
    // (🈚) SQUARED CJK UNIFIED IDEOGRAPH-7121	[FB40 F121 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F21A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF121, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_140)
{
    // 1F21A 003F;	
    // (🈚) SQUARED CJK UNIFIED IDEOGRAPH-7121	[FB40 F121 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F21A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF121, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_141)
{
    // 1F21A 0061;	
    // (🈚) SQUARED CJK UNIFIED IDEOGRAPH-7121	[FB40 F121 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F21A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF121, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_142)
{
    // 1F21A 0041;	
    // (🈚) SQUARED CJK UNIFIED IDEOGRAPH-7121	[FB40 F121 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F21A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF121, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_143)
{
    // 1F21A 0062;	
    // (🈚) SQUARED CJK UNIFIED IDEOGRAPH-7121	[FB40 F121 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F21A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF121, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_144)
{
    // 2F91C 0021;	
    // (煅) CJK COMPATIBILITY IDEOGRAPH-2F91C	[FB40 F145 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F91C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF145, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_145)
{
    // 2F91C 003F;	
    // (煅) CJK COMPATIBILITY IDEOGRAPH-2F91C	[FB40 F145 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F91C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF145, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_146)
{
    // 2F91C 0061;	
    // (煅) CJK COMPATIBILITY IDEOGRAPH-2F91C	[FB40 F145 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F91C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF145, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_147)
{
    // 2F91C 0041;	
    // (煅) CJK COMPATIBILITY IDEOGRAPH-2F91C	[FB40 F145 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F91C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF145, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_148)
{
    // 2F91C 0062;	
    // (煅) CJK COMPATIBILITY IDEOGRAPH-2F91C	[FB40 F145 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F91C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF145, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_149)
{
    // F993 0021;	
    // (煉) CJK COMPATIBILITY IDEOGRAPH-F993	[FB40 F149 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF993, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF149, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_150)
{
    // F993 003F;	
    // (煉) CJK COMPATIBILITY IDEOGRAPH-F993	[FB40 F149 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF993, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF149, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_151)
{
    // F993 0061;	
    // (煉) CJK COMPATIBILITY IDEOGRAPH-F993	[FB40 F149 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF993, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF149, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_152)
{
    // F993 0041;	
    // (煉) CJK COMPATIBILITY IDEOGRAPH-F993	[FB40 F149 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF993, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF149, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_153)
{
    // F993 0062;	
    // (煉) CJK COMPATIBILITY IDEOGRAPH-F993	[FB40 F149 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF993, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF149, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_154)
{
    // FA48 0021;	
    // (煮) CJK COMPATIBILITY IDEOGRAPH-FA48	[FB40 F16E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA48, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF16E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_155)
{
    // FA9C 0021;	
    // (煮) CJK COMPATIBILITY IDEOGRAPH-FA9C	[FB40 F16E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA9C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF16E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_156)
{
    // FA48 003F;	
    // (煮) CJK COMPATIBILITY IDEOGRAPH-FA48	[FB40 F16E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA48, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF16E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_157)
{
    // FA9C 003F;	
    // (煮) CJK COMPATIBILITY IDEOGRAPH-FA9C	[FB40 F16E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA9C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF16E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_158)
{
    // FA48 0061;	
    // (煮) CJK COMPATIBILITY IDEOGRAPH-FA48	[FB40 F16E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA48, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF16E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_159)
{
    // FA9C 0061;	
    // (煮) CJK COMPATIBILITY IDEOGRAPH-FA9C	[FB40 F16E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA9C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF16E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_160)
{
    // FA48 0041;	
    // (煮) CJK COMPATIBILITY IDEOGRAPH-FA48	[FB40 F16E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA48, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF16E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_161)
{
    // FA9C 0041;	
    // (煮) CJK COMPATIBILITY IDEOGRAPH-FA9C	[FB40 F16E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA9C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF16E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_162)
{
    // FA48 0062;	
    // (煮) CJK COMPATIBILITY IDEOGRAPH-FA48	[FB40 F16E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA48, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF16E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_163)
{
    // FA9C 0062;	
    // (煮) CJK COMPATIBILITY IDEOGRAPH-FA9C	[FB40 F16E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA9C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF16E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_164)
{
    // 2F91E 0021;	
    // (熜) CJK COMPATIBILITY IDEOGRAPH-2F91E	[FB40 F19C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F91E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF19C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_165)
{
    // 2F91E 003F;	
    // (熜) CJK COMPATIBILITY IDEOGRAPH-2F91E	[FB40 F19C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F91E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF19C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_166)
{
    // 2F91E 0061;	
    // (熜) CJK COMPATIBILITY IDEOGRAPH-2F91E	[FB40 F19C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F91E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF19C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_167)
{
    // 2F91E 0041;	
    // (熜) CJK COMPATIBILITY IDEOGRAPH-2F91E	[FB40 F19C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F91E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF19C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_168)
{
    // 2F91E 0062;	
    // (熜) CJK COMPATIBILITY IDEOGRAPH-2F91E	[FB40 F19C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F91E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF19C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_169)
{
    // F9C0 0021;	
    // (燎) CJK COMPATIBILITY IDEOGRAPH-F9C0	[FB40 F1CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9C0, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF1CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_170)
{
    // F9C0 003F;	
    // (燎) CJK COMPATIBILITY IDEOGRAPH-F9C0	[FB40 F1CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9C0, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF1CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_171)
{
    // F9C0 0061;	
    // (燎) CJK COMPATIBILITY IDEOGRAPH-F9C0	[FB40 F1CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9C0, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF1CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_172)
{
    // F9C0 0041;	
    // (燎) CJK COMPATIBILITY IDEOGRAPH-F9C0	[FB40 F1CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9C0, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF1CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_173)
{
    // F9C0 0062;	
    // (燎) CJK COMPATIBILITY IDEOGRAPH-F9C0	[FB40 F1CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9C0, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF1CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_174)
{
    // F9EE 0021;	
    // (燐) CJK COMPATIBILITY IDEOGRAPH-F9EE	[FB40 F1D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9EE, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF1D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_175)
{
    // F9EE 003F;	
    // (燐) CJK COMPATIBILITY IDEOGRAPH-F9EE	[FB40 F1D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9EE, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF1D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_176)
{
    // F9EE 0061;	
    // (燐) CJK COMPATIBILITY IDEOGRAPH-F9EE	[FB40 F1D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9EE, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF1D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_177)
{
    // F9EE 0041;	
    // (燐) CJK COMPATIBILITY IDEOGRAPH-F9EE	[FB40 F1D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9EE, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF1D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_178)
{
    // F9EE 0062;	
    // (燐) CJK COMPATIBILITY IDEOGRAPH-F9EE	[FB40 F1D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9EE, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF1D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_179)
{
    // F932 0021;	
    // (爐) CJK COMPATIBILITY IDEOGRAPH-F932	[FB40 F210 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF932, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF210, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_180)
{
    // F932 003F;	
    // (爐) CJK COMPATIBILITY IDEOGRAPH-F932	[FB40 F210 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF932, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF210, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_181)
{
    // F932 0061;	
    // (爐) CJK COMPATIBILITY IDEOGRAPH-F932	[FB40 F210 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF932, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF210, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_182)
{
    // F932 0041;	
    // (爐) CJK COMPATIBILITY IDEOGRAPH-F932	[FB40 F210 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF932, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF210, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_183)
{
    // F932 0062;	
    // (爐) CJK COMPATIBILITY IDEOGRAPH-F932	[FB40 F210 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF932, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF210, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_184)
{
    // F91E 0021;	
    // (爛) CJK COMPATIBILITY IDEOGRAPH-F91E	[FB40 F21B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF91E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF21B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_185)
{
    // F91E 003F;	
    // (爛) CJK COMPATIBILITY IDEOGRAPH-F91E	[FB40 F21B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF91E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF21B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_186)
{
    // F91E 0061;	
    // (爛) CJK COMPATIBILITY IDEOGRAPH-F91E	[FB40 F21B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF91E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF21B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_187)
{
    // F91E 0041;	
    // (爛) CJK COMPATIBILITY IDEOGRAPH-F91E	[FB40 F21B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF91E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF21B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_188)
{
    // F91E 0062;	
    // (爛) CJK COMPATIBILITY IDEOGRAPH-F91E	[FB40 F21B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF91E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF21B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_189)
{
    // 2F920 0021;	
    // (爨) CJK COMPATIBILITY IDEOGRAPH-2F920	[FB40 F228 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F920, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF228, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_190)
{
    // 2F920 003F;	
    // (爨) CJK COMPATIBILITY IDEOGRAPH-2F920	[FB40 F228 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F920, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF228, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_191)
{
    // 2F920 0061;	
    // (爨) CJK COMPATIBILITY IDEOGRAPH-2F920	[FB40 F228 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F920, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF228, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_192)
{
    // 2F920 0041;	
    // (爨) CJK COMPATIBILITY IDEOGRAPH-2F920	[FB40 F228 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F920, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF228, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_193)
{
    // 2F920 0062;	
    // (爨) CJK COMPATIBILITY IDEOGRAPH-2F920	[FB40 F228 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F920, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF228, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_194)
{
    // 2F56 0021;	
    // (⽖) KANGXI RADICAL CLAW	[FB40 F22A 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F56, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF22A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_195)
{
    // 2F56 003F;	
    // (⽖) KANGXI RADICAL CLAW	[FB40 F22A 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F56, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF22A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_196)
{
    // 2F56 0061;	
    // (⽖) KANGXI RADICAL CLAW	[FB40 F22A 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F56, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF22A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_197)
{
    // 2F56 0041;	
    // (⽖) KANGXI RADICAL CLAW	[FB40 F22A 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F56, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF22A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_198)
{
    // 2F56 0062;	
    // (⽖) KANGXI RADICAL CLAW	[FB40 F22A 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F56, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF22A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_199)
{
    // FA49 0021;	
    // (爫) CJK COMPATIBILITY IDEOGRAPH-FA49	[FB40 F22B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA49, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF22B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_200)
{
    // 2EA4 0021;	
    // (⺤) CJK RADICAL PAW ONE	[FB40 F22B 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EA4, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF22B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_201)
{
    // 2EA5 0021;	
    // (⺥) CJK RADICAL PAW TWO	[FB40 F22B 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EA5, 0x0021 };
    uint32_t const ces[12] = { 0xFB40, 0xF22B, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_202)
{
    // FA49 003F;	
    // (爫) CJK COMPATIBILITY IDEOGRAPH-FA49	[FB40 F22B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA49, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF22B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_203)
{
    // 2EA4 003F;	
    // (⺤) CJK RADICAL PAW ONE	[FB40 F22B 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EA4, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF22B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_204)
{
    // 2EA5 003F;	
    // (⺥) CJK RADICAL PAW TWO	[FB40 F22B 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EA5, 0x003F };
    uint32_t const ces[12] = { 0xFB40, 0xF22B, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_205)
{
    // FA49 0061;	
    // (爫) CJK COMPATIBILITY IDEOGRAPH-FA49	[FB40 F22B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA49, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF22B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_206)
{
    // FA49 0041;	
    // (爫) CJK COMPATIBILITY IDEOGRAPH-FA49	[FB40 F22B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA49, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF22B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_207)
{
    // 2EA4 0061;	
    // (⺤) CJK RADICAL PAW ONE	[FB40 F22B 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EA4, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF22B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_208)
{
    // 2EA4 0041;	
    // (⺤) CJK RADICAL PAW ONE	[FB40 F22B 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2EA4, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF22B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_209)
{
    // 2EA5 0061;	
    // (⺥) CJK RADICAL PAW TWO	[FB40 F22B 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EA5, 0x0061 };
    uint32_t const ces[12] = { 0xFB40, 0xF22B, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_210)
{
    // 2EA5 0041;	
    // (⺥) CJK RADICAL PAW TWO	[FB40 F22B 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2EA5, 0x0041 };
    uint32_t const ces[12] = { 0xFB40, 0xF22B, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_211)
{
    // FA49 0062;	
    // (爫) CJK COMPATIBILITY IDEOGRAPH-FA49	[FB40 F22B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA49, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF22B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_212)
{
    // 2EA4 0062;	
    // (⺤) CJK RADICAL PAW ONE	[FB40 F22B 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EA4, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF22B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_213)
{
    // 2EA5 0062;	
    // (⺥) CJK RADICAL PAW TWO	[FB40 F22B 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EA5, 0x0062 };
    uint32_t const ces[12] = { 0xFB40, 0xF22B, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_214)
{
    // FA9E 0021;	
    // (爵) CJK COMPATIBILITY IDEOGRAPH-FA9E	[FB40 F235 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA9E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF235, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_215)
{
    // 2F921 0021;	
    // (爵) CJK COMPATIBILITY IDEOGRAPH-2F921	[FB40 F235 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F921, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF235, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_216)
{
    // FA9E 003F;	
    // (爵) CJK COMPATIBILITY IDEOGRAPH-FA9E	[FB40 F235 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA9E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF235, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_217)
{
    // 2F921 003F;	
    // (爵) CJK COMPATIBILITY IDEOGRAPH-2F921	[FB40 F235 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F921, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF235, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_218)
{
    // FA9E 0061;	
    // (爵) CJK COMPATIBILITY IDEOGRAPH-FA9E	[FB40 F235 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA9E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF235, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_219)
{
    // 2F921 0061;	
    // (爵) CJK COMPATIBILITY IDEOGRAPH-2F921	[FB40 F235 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F921, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF235, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_220)
{
    // FA9E 0041;	
    // (爵) CJK COMPATIBILITY IDEOGRAPH-FA9E	[FB40 F235 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA9E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF235, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_221)
{
    // 2F921 0041;	
    // (爵) CJK COMPATIBILITY IDEOGRAPH-2F921	[FB40 F235 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F921, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF235, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_222)
{
    // FA9E 0062;	
    // (爵) CJK COMPATIBILITY IDEOGRAPH-FA9E	[FB40 F235 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA9E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF235, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_223)
{
    // 2F921 0062;	
    // (爵) CJK COMPATIBILITY IDEOGRAPH-2F921	[FB40 F235 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F921, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF235, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_224)
{
    // 2F57 0021;	
    // (⽗) KANGXI RADICAL FATHER	[FB40 F236 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F57, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF236, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_225)
{
    // 2F57 003F;	
    // (⽗) KANGXI RADICAL FATHER	[FB40 F236 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F57, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF236, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_226)
{
    // 2F57 0061;	
    // (⽗) KANGXI RADICAL FATHER	[FB40 F236 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F57, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF236, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_227)
{
    // 2F57 0041;	
    // (⽗) KANGXI RADICAL FATHER	[FB40 F236 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F57, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF236, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_228)
{
    // 2F57 0062;	
    // (⽗) KANGXI RADICAL FATHER	[FB40 F236 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F57, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF236, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_229)
{
    // 2F58 0021;	
    // (⽘) KANGXI RADICAL DOUBLE X	[FB40 F23B 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F58, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF23B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_230)
{
    // 2F58 003F;	
    // (⽘) KANGXI RADICAL DOUBLE X	[FB40 F23B 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F58, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF23B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_231)
{
    // 2F58 0061;	
    // (⽘) KANGXI RADICAL DOUBLE X	[FB40 F23B 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F58, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF23B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_232)
{
    // 2F58 0041;	
    // (⽘) KANGXI RADICAL DOUBLE X	[FB40 F23B 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F58, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF23B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_233)
{
    // 2F58 0062;	
    // (⽘) KANGXI RADICAL DOUBLE X	[FB40 F23B 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F58, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF23B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_234)
{
    // 2F59 0021;	
    // (⽙) KANGXI RADICAL HALF TREE TRUNK	[FB40 F23F 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F59, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF23F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_235)
{
    // 2F59 003F;	
    // (⽙) KANGXI RADICAL HALF TREE TRUNK	[FB40 F23F 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F59, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF23F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_236)
{
    // 2F59 0061;	
    // (⽙) KANGXI RADICAL HALF TREE TRUNK	[FB40 F23F 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F59, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF23F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_237)
{
    // 2F59 0041;	
    // (⽙) KANGXI RADICAL HALF TREE TRUNK	[FB40 F23F 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F59, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF23F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_238)
{
    // 2F59 0062;	
    // (⽙) KANGXI RADICAL HALF TREE TRUNK	[FB40 F23F 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F59, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF23F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_239)
{
    // 2F5A 0021;	
    // (⽚) KANGXI RADICAL SLICE	[FB40 F247 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F5A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF247, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_240)
{
    // 2F5A 003F;	
    // (⽚) KANGXI RADICAL SLICE	[FB40 F247 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F5A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF247, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_241)
{
    // 2F5A 0061;	
    // (⽚) KANGXI RADICAL SLICE	[FB40 F247 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F5A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF247, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_242)
{
    // 2F5A 0041;	
    // (⽚) KANGXI RADICAL SLICE	[FB40 F247 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F5A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF247, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_243)
{
    // 2F5A 0062;	
    // (⽚) KANGXI RADICAL SLICE	[FB40 F247 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F5A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF247, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_244)
{
    // 2F922 0021;	
    // (牐) CJK COMPATIBILITY IDEOGRAPH-2F922	[FB40 F250 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F922, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF250, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_245)
{
    // 2F922 003F;	
    // (牐) CJK COMPATIBILITY IDEOGRAPH-2F922	[FB40 F250 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F922, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF250, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_246)
{
    // 2F922 0061;	
    // (牐) CJK COMPATIBILITY IDEOGRAPH-2F922	[FB40 F250 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F922, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF250, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_247)
{
    // 2F922 0041;	
    // (牐) CJK COMPATIBILITY IDEOGRAPH-2F922	[FB40 F250 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F922, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF250, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_248)
{
    // 2F922 0062;	
    // (牐) CJK COMPATIBILITY IDEOGRAPH-2F922	[FB40 F250 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F922, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF250, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_249)
{
    // 2F5B 0021;	
    // (⽛) KANGXI RADICAL FANG	[FB40 F259 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F5B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF259, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_250)
{
    // 2F5B 003F;	
    // (⽛) KANGXI RADICAL FANG	[FB40 F259 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F5B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF259, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_251)
{
    // 2F5B 0061;	
    // (⽛) KANGXI RADICAL FANG	[FB40 F259 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F5B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF259, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_252)
{
    // 2F5B 0041;	
    // (⽛) KANGXI RADICAL FANG	[FB40 F259 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F5B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF259, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_253)
{
    // 2F5B 0062;	
    // (⽛) KANGXI RADICAL FANG	[FB40 F259 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F5B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF259, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_254)
{
    // 2F5C 0021;	
    // (⽜) KANGXI RADICAL COW	[FB40 F25B 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F5C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF25B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_255)
{
    // 2EA7 0021;	
    // (⺧) CJK RADICAL COW	[FB40 F25B 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EA7, 0x0021 };
    uint32_t const ces[12] = { 0xFB40, 0xF25B, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_256)
{
    // 2F5C 003F;	
    // (⽜) KANGXI RADICAL COW	[FB40 F25B 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F5C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF25B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_257)
{
    // 2EA7 003F;	
    // (⺧) CJK RADICAL COW	[FB40 F25B 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EA7, 0x003F };
    uint32_t const ces[12] = { 0xFB40, 0xF25B, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_258)
{
    // 2F5C 0061;	
    // (⽜) KANGXI RADICAL COW	[FB40 F25B 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F5C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF25B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_259)
{
    // 2F5C 0041;	
    // (⽜) KANGXI RADICAL COW	[FB40 F25B 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F5C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF25B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_260)
{
    // 2EA7 0061;	
    // (⺧) CJK RADICAL COW	[FB40 F25B 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EA7, 0x0061 };
    uint32_t const ces[12] = { 0xFB40, 0xF25B, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_261)
{
    // 2EA7 0041;	
    // (⺧) CJK RADICAL COW	[FB40 F25B 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2EA7, 0x0041 };
    uint32_t const ces[12] = { 0xFB40, 0xF25B, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_262)
{
    // 2F5C 0062;	
    // (⽜) KANGXI RADICAL COW	[FB40 F25B 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F5C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF25B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_263)
{
    // 2EA7 0062;	
    // (⺧) CJK RADICAL COW	[FB40 F25B 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EA7, 0x0062 };
    uint32_t const ces[12] = { 0xFB40, 0xF25B, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_264)
{
    // F946 0021;	
    // (牢) CJK COMPATIBILITY IDEOGRAPH-F946	[FB40 F262 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF946, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF262, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_265)
{
    // F946 003F;	
    // (牢) CJK COMPATIBILITY IDEOGRAPH-F946	[FB40 F262 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF946, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF262, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_266)
{
    // F946 0061;	
    // (牢) CJK COMPATIBILITY IDEOGRAPH-F946	[FB40 F262 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF946, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF262, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_267)
{
    // F946 0041;	
    // (牢) CJK COMPATIBILITY IDEOGRAPH-F946	[FB40 F262 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF946, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF262, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_268)
{
    // F946 0062;	
    // (牢) CJK COMPATIBILITY IDEOGRAPH-F946	[FB40 F262 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF946, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF262, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_269)
{
    // 3295 0021;	
    // (㊕) CIRCLED IDEOGRAPH SPECIAL	[FB40 F279 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3295, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF279, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_270)
{
    // 3295 003F;	
    // (㊕) CIRCLED IDEOGRAPH SPECIAL	[FB40 F279 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3295, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF279, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_271)
{
    // 3295 0061;	
    // (㊕) CIRCLED IDEOGRAPH SPECIAL	[FB40 F279 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3295, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF279, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_272)
{
    // 3295 0041;	
    // (㊕) CIRCLED IDEOGRAPH SPECIAL	[FB40 F279 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x3295, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF279, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_273)
{
    // 3295 0062;	
    // (㊕) CIRCLED IDEOGRAPH SPECIAL	[FB40 F279 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3295, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF279, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_274)
{
    // 2F924 0021;	
    // (犀) CJK COMPATIBILITY IDEOGRAPH-2F924	[FB40 F280 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F924, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF280, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_275)
{
    // 2F924 003F;	
    // (犀) CJK COMPATIBILITY IDEOGRAPH-2F924	[FB40 F280 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F924, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF280, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_276)
{
    // 2F924 0061;	
    // (犀) CJK COMPATIBILITY IDEOGRAPH-2F924	[FB40 F280 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F924, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF280, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_277)
{
    // 2F924 0041;	
    // (犀) CJK COMPATIBILITY IDEOGRAPH-2F924	[FB40 F280 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F924, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF280, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_278)
{
    // 2F924 0062;	
    // (犀) CJK COMPATIBILITY IDEOGRAPH-2F924	[FB40 F280 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F924, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF280, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_279)
{
    // 2F925 0021;	
    // (犕) CJK COMPATIBILITY IDEOGRAPH-2F925	[FB40 F295 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F925, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF295, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_280)
{
    // 2F925 003F;	
    // (犕) CJK COMPATIBILITY IDEOGRAPH-2F925	[FB40 F295 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F925, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF295, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_281)
{
    // 2F925 0061;	
    // (犕) CJK COMPATIBILITY IDEOGRAPH-2F925	[FB40 F295 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F925, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF295, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_282)
{
    // 2F925 0041;	
    // (犕) CJK COMPATIBILITY IDEOGRAPH-2F925	[FB40 F295 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F925, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF295, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_283)
{
    // 2F925 0062;	
    // (犕) CJK COMPATIBILITY IDEOGRAPH-2F925	[FB40 F295 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F925, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF295, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_284)
{
    // 2F5D 0021;	
    // (⽝) KANGXI RADICAL DOG	[FB40 F2AC 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F5D, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF2AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_285)
{
    // 2F5D 003F;	
    // (⽝) KANGXI RADICAL DOG	[FB40 F2AC 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F5D, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF2AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_286)
{
    // 2F5D 0061;	
    // (⽝) KANGXI RADICAL DOG	[FB40 F2AC 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F5D, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF2AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_287)
{
    // 2F5D 0041;	
    // (⽝) KANGXI RADICAL DOG	[FB40 F2AC 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F5D, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF2AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_288)
{
    // 2F5D 0062;	
    // (⽝) KANGXI RADICAL DOG	[FB40 F2AC 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F5D, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF2AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_289)
{
    // 2EA8 0021;	
    // (⺨) CJK RADICAL DOG	[FB40 F2AD 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EA8, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF2AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_290)
{
    // 2EA8 003F;	
    // (⺨) CJK RADICAL DOG	[FB40 F2AD 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EA8, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF2AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_291)
{
    // 2EA8 0061;	
    // (⺨) CJK RADICAL DOG	[FB40 F2AD 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EA8, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF2AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_292)
{
    // 2EA8 0041;	
    // (⺨) CJK RADICAL DOG	[FB40 F2AD 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2EA8, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF2AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_293)
{
    // 2EA8 0062;	
    // (⺨) CJK RADICAL DOG	[FB40 F2AD 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EA8, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF2AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_294)
{
    // FA9F 0021;	
    // (犯) CJK COMPATIBILITY IDEOGRAPH-FA9F	[FB40 F2AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA9F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF2AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_295)
{
    // FA9F 003F;	
    // (犯) CJK COMPATIBILITY IDEOGRAPH-FA9F	[FB40 F2AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA9F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF2AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_296)
{
    // FA9F 0061;	
    // (犯) CJK COMPATIBILITY IDEOGRAPH-FA9F	[FB40 F2AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA9F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF2AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_297)
{
    // FA9F 0041;	
    // (犯) CJK COMPATIBILITY IDEOGRAPH-FA9F	[FB40 F2AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA9F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF2AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_298)
{
    // FA9F 0062;	
    // (犯) CJK COMPATIBILITY IDEOGRAPH-FA9F	[FB40 F2AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA9F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF2AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_299)
{
    // F9FA 0021;	
    // (狀) CJK COMPATIBILITY IDEOGRAPH-F9FA	[FB40 F2C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9FA, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF2C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_300)
{
    // F9FA 003F;	
    // (狀) CJK COMPATIBILITY IDEOGRAPH-F9FA	[FB40 F2C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9FA, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF2C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_301)
{
    // F9FA 0061;	
    // (狀) CJK COMPATIBILITY IDEOGRAPH-F9FA	[FB40 F2C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9FA, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF2C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_302)
{
    // F9FA 0041;	
    // (狀) CJK COMPATIBILITY IDEOGRAPH-F9FA	[FB40 F2C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9FA, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF2C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_303)
{
    // F9FA 0062;	
    // (狀) CJK COMPATIBILITY IDEOGRAPH-F9FA	[FB40 F2C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9FA, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF2C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_304)
{
    // F92B 0021;	
    // (狼) CJK COMPATIBILITY IDEOGRAPH-F92B	[FB40 F2FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF92B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF2FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_305)
{
    // F92B 003F;	
    // (狼) CJK COMPATIBILITY IDEOGRAPH-F92B	[FB40 F2FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF92B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF2FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_306)
{
    // F92B 0061;	
    // (狼) CJK COMPATIBILITY IDEOGRAPH-F92B	[FB40 F2FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF92B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF2FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_307)
{
    // F92B 0041;	
    // (狼) CJK COMPATIBILITY IDEOGRAPH-F92B	[FB40 F2FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF92B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF2FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_308)
{
    // F92B 0062;	
    // (狼) CJK COMPATIBILITY IDEOGRAPH-F92B	[FB40 F2FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF92B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF2FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_309)
{
    // FA16 0021;	
    // (猪) CJK COMPATIBILITY IDEOGRAPH-FA16	[FB40 F32A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA16, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF32A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_310)
{
    // FAA0 0021;	
    // (猪) CJK COMPATIBILITY IDEOGRAPH-FAA0	[FB40 F32A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAA0, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF32A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_311)
{
    // FA16 003F;	
    // (猪) CJK COMPATIBILITY IDEOGRAPH-FA16	[FB40 F32A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA16, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF32A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_312)
{
    // FAA0 003F;	
    // (猪) CJK COMPATIBILITY IDEOGRAPH-FAA0	[FB40 F32A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAA0, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF32A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_313)
{
    // FA16 0061;	
    // (猪) CJK COMPATIBILITY IDEOGRAPH-FA16	[FB40 F32A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA16, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF32A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_314)
{
    // FAA0 0061;	
    // (猪) CJK COMPATIBILITY IDEOGRAPH-FAA0	[FB40 F32A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAA0, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF32A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_315)
{
    // FA16 0041;	
    // (猪) CJK COMPATIBILITY IDEOGRAPH-FA16	[FB40 F32A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA16, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF32A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_316)
{
    // FAA0 0041;	
    // (猪) CJK COMPATIBILITY IDEOGRAPH-FAA0	[FB40 F32A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFAA0, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF32A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_317)
{
    // FA16 0062;	
    // (猪) CJK COMPATIBILITY IDEOGRAPH-FA16	[FB40 F32A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA16, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF32A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_318)
{
    // FAA0 0062;	
    // (猪) CJK COMPATIBILITY IDEOGRAPH-FAA0	[FB40 F32A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAA0, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF32A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_319)
{
    // F9A7 0021;	
    // (獵) CJK COMPATIBILITY IDEOGRAPH-F9A7	[FB40 F375 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A7, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF375, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_320)
{
    // F9A7 003F;	
    // (獵) CJK COMPATIBILITY IDEOGRAPH-F9A7	[FB40 F375 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A7, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF375, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_321)
{
    // F9A7 0061;	
    // (獵) CJK COMPATIBILITY IDEOGRAPH-F9A7	[FB40 F375 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A7, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_322)
{
    // F9A7 0041;	
    // (獵) CJK COMPATIBILITY IDEOGRAPH-F9A7	[FB40 F375 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9A7, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_323)
{
    // F9A7 0062;	
    // (獵) CJK COMPATIBILITY IDEOGRAPH-F9A7	[FB40 F375 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A7, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF375, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_324)
{
    // 2F928 0021;	
    // (獺) CJK COMPATIBILITY IDEOGRAPH-2F928	[FB40 F37A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F928, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF37A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_325)
{
    // 2F928 003F;	
    // (獺) CJK COMPATIBILITY IDEOGRAPH-2F928	[FB40 F37A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F928, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF37A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_326)
{
    // 2F928 0061;	
    // (獺) CJK COMPATIBILITY IDEOGRAPH-2F928	[FB40 F37A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F928, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF37A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_327)
{
    // 2F928 0041;	
    // (獺) CJK COMPATIBILITY IDEOGRAPH-2F928	[FB40 F37A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F928, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF37A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_328)
{
    // 2F928 0062;	
    // (獺) CJK COMPATIBILITY IDEOGRAPH-2F928	[FB40 F37A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F928, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF37A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_329)
{
    // 2F5E 0021;	
    // (⽞) KANGXI RADICAL PROFOUND	[FB40 F384 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F5E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF384, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_330)
{
    // 2F5E 003F;	
    // (⽞) KANGXI RADICAL PROFOUND	[FB40 F384 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F5E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF384, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_331)
{
    // 2F5E 0061;	
    // (⽞) KANGXI RADICAL PROFOUND	[FB40 F384 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F5E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_332)
{
    // 2F5E 0041;	
    // (⽞) KANGXI RADICAL PROFOUND	[FB40 F384 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F5E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_333)
{
    // 2F5E 0062;	
    // (⽞) KANGXI RADICAL PROFOUND	[FB40 F384 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F5E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF384, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_334)
{
    // F961 0021;	
    // (率) CJK COMPATIBILITY IDEOGRAPH-F961	[FB40 F387 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF961, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF387, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_335)
{
    // F9DB 0021;	
    // (率) CJK COMPATIBILITY IDEOGRAPH-F9DB	[FB40 F387 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9DB, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF387, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_336)
{
    // F961 003F;	
    // (率) CJK COMPATIBILITY IDEOGRAPH-F961	[FB40 F387 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF961, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF387, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_337)
{
    // F9DB 003F;	
    // (率) CJK COMPATIBILITY IDEOGRAPH-F9DB	[FB40 F387 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9DB, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF387, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_338)
{
    // F961 0061;	
    // (率) CJK COMPATIBILITY IDEOGRAPH-F961	[FB40 F387 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF961, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF387, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_339)
{
    // F9DB 0061;	
    // (率) CJK COMPATIBILITY IDEOGRAPH-F9DB	[FB40 F387 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9DB, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF387, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_340)
{
    // F961 0041;	
    // (率) CJK COMPATIBILITY IDEOGRAPH-F961	[FB40 F387 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF961, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF387, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_341)
{
    // F9DB 0041;	
    // (率) CJK COMPATIBILITY IDEOGRAPH-F9DB	[FB40 F387 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9DB, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF387, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_342)
{
    // F961 0062;	
    // (率) CJK COMPATIBILITY IDEOGRAPH-F961	[FB40 F387 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF961, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF387, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_343)
{
    // F9DB 0062;	
    // (率) CJK COMPATIBILITY IDEOGRAPH-F9DB	[FB40 F387 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9DB, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF387, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_344)
{
    // 2F5F 0021;	
    // (⽟) KANGXI RADICAL JADE	[FB40 F389 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F5F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF389, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_345)
{
    // 2F5F 003F;	
    // (⽟) KANGXI RADICAL JADE	[FB40 F389 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F5F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF389, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_346)
{
    // 2F5F 0061;	
    // (⽟) KANGXI RADICAL JADE	[FB40 F389 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F5F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_347)
{
    // 2F5F 0041;	
    // (⽟) KANGXI RADICAL JADE	[FB40 F389 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F5F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_348)
{
    // 2F5F 0062;	
    // (⽟) KANGXI RADICAL JADE	[FB40 F389 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F5F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF389, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_349)
{
    // 2F929 0021;	
    // (王) CJK COMPATIBILITY IDEOGRAPH-2F929	[FB40 F38B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F929, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF38B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_350)
{
    // 2EA9 0021;	
    // (⺩) CJK RADICAL JADE	[FB40 F38B 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EA9, 0x0021 };
    uint32_t const ces[12] = { 0xFB40, 0xF38B, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_351)
{
    // 2F929 003F;	
    // (王) CJK COMPATIBILITY IDEOGRAPH-2F929	[FB40 F38B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F929, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF38B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_352)
{
    // 2EA9 003F;	
    // (⺩) CJK RADICAL JADE	[FB40 F38B 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EA9, 0x003F };
    uint32_t const ces[12] = { 0xFB40, 0xF38B, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_353)
{
    // 2F929 0061;	
    // (王) CJK COMPATIBILITY IDEOGRAPH-2F929	[FB40 F38B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F929, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF38B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_354)
{
    // 2F929 0041;	
    // (王) CJK COMPATIBILITY IDEOGRAPH-2F929	[FB40 F38B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F929, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF38B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_355)
{
    // 2EA9 0061;	
    // (⺩) CJK RADICAL JADE	[FB40 F38B 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EA9, 0x0061 };
    uint32_t const ces[12] = { 0xFB40, 0xF38B, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_356)
{
    // 2EA9 0041;	
    // (⺩) CJK RADICAL JADE	[FB40 F38B 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2EA9, 0x0041 };
    uint32_t const ces[12] = { 0xFB40, 0xF38B, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_357)
{
    // 2F929 0062;	
    // (王) CJK COMPATIBILITY IDEOGRAPH-2F929	[FB40 F38B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F929, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF38B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_358)
{
    // 2EA9 0062;	
    // (⺩) CJK RADICAL JADE	[FB40 F38B 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EA9, 0x0062 };
    uint32_t const ces[12] = { 0xFB40, 0xF38B, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_359)
{
    // 2F92B 0021;	
    // (玥) CJK COMPATIBILITY IDEOGRAPH-2F92B	[FB40 F3A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F92B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF3A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_360)
{
    // 2F92B 003F;	
    // (玥) CJK COMPATIBILITY IDEOGRAPH-2F92B	[FB40 F3A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F92B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF3A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_361)
{
    // 2F92B 0061;	
    // (玥) CJK COMPATIBILITY IDEOGRAPH-2F92B	[FB40 F3A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F92B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF3A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_362)
{
    // 2F92B 0041;	
    // (玥) CJK COMPATIBILITY IDEOGRAPH-2F92B	[FB40 F3A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F92B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF3A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_363)
{
    // 2F92B 0062;	
    // (玥) CJK COMPATIBILITY IDEOGRAPH-2F92B	[FB40 F3A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F92B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF3A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_364)
{
    // F9AD 0021;	
    // (玲) CJK COMPATIBILITY IDEOGRAPH-F9AD	[FB40 F3B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9AD, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF3B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_365)
{
    // F9AD 003F;	
    // (玲) CJK COMPATIBILITY IDEOGRAPH-F9AD	[FB40 F3B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9AD, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF3B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_366)
{
    // F9AD 0061;	
    // (玲) CJK COMPATIBILITY IDEOGRAPH-F9AD	[FB40 F3B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9AD, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF3B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_367)
{
    // F9AD 0041;	
    // (玲) CJK COMPATIBILITY IDEOGRAPH-F9AD	[FB40 F3B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9AD, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF3B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_368)
{
    // F9AD 0062;	
    // (玲) CJK COMPATIBILITY IDEOGRAPH-F9AD	[FB40 F3B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9AD, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF3B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_369)
{
    // F917 0021;	
    // (珞) CJK COMPATIBILITY IDEOGRAPH-F917	[FB40 F3DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF917, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF3DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_370)
{
    // F917 003F;	
    // (珞) CJK COMPATIBILITY IDEOGRAPH-F917	[FB40 F3DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF917, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF3DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_371)
{
    // F917 0061;	
    // (珞) CJK COMPATIBILITY IDEOGRAPH-F917	[FB40 F3DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF917, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF3DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_372)
{
    // F917 0041;	
    // (珞) CJK COMPATIBILITY IDEOGRAPH-F917	[FB40 F3DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF917, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF3DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_373)
{
    // F917 0062;	
    // (珞) CJK COMPATIBILITY IDEOGRAPH-F917	[FB40 F3DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF917, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF3DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_374)
{
    // F9E4 0021;	
    // (理) CJK COMPATIBILITY IDEOGRAPH-F9E4	[FB40 F406 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E4, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF406, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_375)
{
    // F9E4 003F;	
    // (理) CJK COMPATIBILITY IDEOGRAPH-F9E4	[FB40 F406 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E4, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF406, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_376)
{
    // F9E4 0061;	
    // (理) CJK COMPATIBILITY IDEOGRAPH-F9E4	[FB40 F406 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E4, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF406, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_377)
{
    // F9E4 0041;	
    // (理) CJK COMPATIBILITY IDEOGRAPH-F9E4	[FB40 F406 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9E4, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF406, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_378)
{
    // F9E4 0062;	
    // (理) CJK COMPATIBILITY IDEOGRAPH-F9E4	[FB40 F406 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E4, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF406, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_379)
{
    // F9CC 0021;	
    // (琉) CJK COMPATIBILITY IDEOGRAPH-F9CC	[FB40 F409 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9CC, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_380)
{
    // F9CC 003F;	
    // (琉) CJK COMPATIBILITY IDEOGRAPH-F9CC	[FB40 F409 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9CC, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_381)
{
    // F9CC 0061;	
    // (琉) CJK COMPATIBILITY IDEOGRAPH-F9CC	[FB40 F409 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9CC, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_382)
{
    // F9CC 0041;	
    // (琉) CJK COMPATIBILITY IDEOGRAPH-F9CC	[FB40 F409 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9CC, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_383)
{
    // F9CC 0062;	
    // (琉) CJK COMPATIBILITY IDEOGRAPH-F9CC	[FB40 F409 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9CC, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_384)
{
    // FA4A 0021;	
    // (琢) CJK COMPATIBILITY IDEOGRAPH-FA4A	[FB40 F422 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA4A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF422, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_385)
{
    // FA4A 003F;	
    // (琢) CJK COMPATIBILITY IDEOGRAPH-FA4A	[FB40 F422 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA4A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF422, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_386)
{
    // FA4A 0061;	
    // (琢) CJK COMPATIBILITY IDEOGRAPH-FA4A	[FB40 F422 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA4A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF422, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_387)
{
    // FA4A 0041;	
    // (琢) CJK COMPATIBILITY IDEOGRAPH-FA4A	[FB40 F422 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA4A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF422, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_388)
{
    // FA4A 0062;	
    // (琢) CJK COMPATIBILITY IDEOGRAPH-FA4A	[FB40 F422 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA4A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF422, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_389)
{
    // 2F92E 0021;	
    // (瑇) CJK COMPATIBILITY IDEOGRAPH-2F92E	[FB40 F447 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F92E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF447, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_390)
{
    // 2F92E 003F;	
    // (瑇) CJK COMPATIBILITY IDEOGRAPH-2F92E	[FB40 F447 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F92E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF447, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_391)
{
    // 2F92E 0061;	
    // (瑇) CJK COMPATIBILITY IDEOGRAPH-2F92E	[FB40 F447 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F92E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF447, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_392)
{
    // 2F92E 0041;	
    // (瑇) CJK COMPATIBILITY IDEOGRAPH-2F92E	[FB40 F447 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F92E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF447, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_393)
{
    // 2F92E 0062;	
    // (瑇) CJK COMPATIBILITY IDEOGRAPH-2F92E	[FB40 F447 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F92E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF447, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_394)
{
    // 2F92F 0021;	
    // (瑜) CJK COMPATIBILITY IDEOGRAPH-2F92F	[FB40 F45C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F92F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF45C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_395)
{
    // 2F92F 003F;	
    // (瑜) CJK COMPATIBILITY IDEOGRAPH-2F92F	[FB40 F45C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F92F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF45C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_396)
{
    // 2F92F 0061;	
    // (瑜) CJK COMPATIBILITY IDEOGRAPH-2F92F	[FB40 F45C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F92F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF45C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_397)
{
    // 2F92F 0041;	
    // (瑜) CJK COMPATIBILITY IDEOGRAPH-2F92F	[FB40 F45C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F92F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF45C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_398)
{
    // 2F92F 0062;	
    // (瑜) CJK COMPATIBILITY IDEOGRAPH-2F92F	[FB40 F45C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F92F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF45C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_399)
{
    // F9AE 0021;	
    // (瑩) CJK COMPATIBILITY IDEOGRAPH-F9AE	[FB40 F469 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9AE, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF469, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_400)
{
    // F9AE 003F;	
    // (瑩) CJK COMPATIBILITY IDEOGRAPH-F9AE	[FB40 F469 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9AE, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF469, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_401)
{
    // F9AE 0061;	
    // (瑩) CJK COMPATIBILITY IDEOGRAPH-F9AE	[FB40 F469 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9AE, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF469, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_402)
{
    // F9AE 0041;	
    // (瑩) CJK COMPATIBILITY IDEOGRAPH-F9AE	[FB40 F469 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9AE, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF469, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_403)
{
    // F9AE 0062;	
    // (瑩) CJK COMPATIBILITY IDEOGRAPH-F9AE	[FB40 F469 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9AE, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF469, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_404)
{
    // FAA1 0021;	
    // (瑱) CJK COMPATIBILITY IDEOGRAPH-FAA1	[FB40 F471 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAA1, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF471, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_405)
{
    // 2F930 0021;	
    // (瑱) CJK COMPATIBILITY IDEOGRAPH-2F930	[FB40 F471 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F930, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF471, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_406)
{
    // FAA1 003F;	
    // (瑱) CJK COMPATIBILITY IDEOGRAPH-FAA1	[FB40 F471 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAA1, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF471, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_407)
{
    // 2F930 003F;	
    // (瑱) CJK COMPATIBILITY IDEOGRAPH-2F930	[FB40 F471 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F930, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF471, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_408)
{
    // FAA1 0061;	
    // (瑱) CJK COMPATIBILITY IDEOGRAPH-FAA1	[FB40 F471 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAA1, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF471, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_409)
{
    // 2F930 0061;	
    // (瑱) CJK COMPATIBILITY IDEOGRAPH-2F930	[FB40 F471 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F930, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF471, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_410)
{
    // FAA1 0041;	
    // (瑱) CJK COMPATIBILITY IDEOGRAPH-FAA1	[FB40 F471 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFAA1, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF471, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_411)
{
    // 2F930 0041;	
    // (瑱) CJK COMPATIBILITY IDEOGRAPH-2F930	[FB40 F471 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F930, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF471, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_412)
{
    // FAA1 0062;	
    // (瑱) CJK COMPATIBILITY IDEOGRAPH-FAA1	[FB40 F471 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAA1, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF471, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_413)
{
    // 2F930 0062;	
    // (瑱) CJK COMPATIBILITY IDEOGRAPH-2F930	[FB40 F471 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F930, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF471, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_414)
{
    // 2F931 0021;	
    // (璅) CJK COMPATIBILITY IDEOGRAPH-2F931	[FB40 F485 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F931, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF485, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_415)
{
    // 2F931 003F;	
    // (璅) CJK COMPATIBILITY IDEOGRAPH-2F931	[FB40 F485 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F931, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF485, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_416)
{
    // 2F931 0061;	
    // (璅) CJK COMPATIBILITY IDEOGRAPH-2F931	[FB40 F485 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F931, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF485, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_417)
{
    // 2F931 0041;	
    // (璅) CJK COMPATIBILITY IDEOGRAPH-2F931	[FB40 F485 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F931, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF485, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_418)
{
    // 2F931 0062;	
    // (璅) CJK COMPATIBILITY IDEOGRAPH-2F931	[FB40 F485 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F931, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF485, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_419)
{
    // F994 0021;	
    // (璉) CJK COMPATIBILITY IDEOGRAPH-F994	[FB40 F489 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF994, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF489, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_420)
{
    // F994 003F;	
    // (璉) CJK COMPATIBILITY IDEOGRAPH-F994	[FB40 F489 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF994, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF489, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_421)
{
    // F994 0061;	
    // (璉) CJK COMPATIBILITY IDEOGRAPH-F994	[FB40 F489 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF994, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF489, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_422)
{
    // F994 0041;	
    // (璉) CJK COMPATIBILITY IDEOGRAPH-F994	[FB40 F489 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF994, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF489, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_423)
{
    // F994 0062;	
    // (璉) CJK COMPATIBILITY IDEOGRAPH-F994	[FB40 F489 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF994, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF489, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_424)
{
    // F9EF 0021;	
    // (璘) CJK COMPATIBILITY IDEOGRAPH-F9EF	[FB40 F498 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9EF, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF498, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_425)
{
    // F9EF 003F;	
    // (璘) CJK COMPATIBILITY IDEOGRAPH-F9EF	[FB40 F498 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9EF, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF498, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_426)
{
    // F9EF 0061;	
    // (璘) CJK COMPATIBILITY IDEOGRAPH-F9EF	[FB40 F498 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9EF, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF498, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_427)
{
    // F9EF 0041;	
    // (璘) CJK COMPATIBILITY IDEOGRAPH-F9EF	[FB40 F498 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9EF, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF498, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_428)
{
    // F9EF 0062;	
    // (璘) CJK COMPATIBILITY IDEOGRAPH-F9EF	[FB40 F498 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9EF, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF498, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_429)
{
    // 2F932 0021;	
    // (瓊) CJK COMPATIBILITY IDEOGRAPH-2F932	[FB40 F4CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F932, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF4CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_430)
{
    // 2F932 003F;	
    // (瓊) CJK COMPATIBILITY IDEOGRAPH-2F932	[FB40 F4CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F932, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF4CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_431)
{
    // 2F932 0061;	
    // (瓊) CJK COMPATIBILITY IDEOGRAPH-2F932	[FB40 F4CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F932, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF4CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_432)
{
    // 2F932 0041;	
    // (瓊) CJK COMPATIBILITY IDEOGRAPH-2F932	[FB40 F4CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F932, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF4CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_433)
{
    // 2F932 0062;	
    // (瓊) CJK COMPATIBILITY IDEOGRAPH-2F932	[FB40 F4CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F932, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF4CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_434)
{
    // 2F60 0021;	
    // (⽠) KANGXI RADICAL MELON	[FB40 F4DC 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F60, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF4DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_435)
{
    // 2F60 003F;	
    // (⽠) KANGXI RADICAL MELON	[FB40 F4DC 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F60, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF4DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_436)
{
    // 2F60 0061;	
    // (⽠) KANGXI RADICAL MELON	[FB40 F4DC 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F60, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF4DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_437)
{
    // 2F60 0041;	
    // (⽠) KANGXI RADICAL MELON	[FB40 F4DC 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F60, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF4DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_438)
{
    // 2F60 0062;	
    // (⽠) KANGXI RADICAL MELON	[FB40 F4DC 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F60, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF4DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_439)
{
    // 2F61 0021;	
    // (⽡) KANGXI RADICAL TILE	[FB40 F4E6 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F61, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF4E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_440)
{
    // 2F61 003F;	
    // (⽡) KANGXI RADICAL TILE	[FB40 F4E6 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F61, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF4E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_441)
{
    // 2F61 0061;	
    // (⽡) KANGXI RADICAL TILE	[FB40 F4E6 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F61, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF4E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_442)
{
    // 2F61 0041;	
    // (⽡) KANGXI RADICAL TILE	[FB40 F4E6 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F61, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF4E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_443)
{
    // 2F61 0062;	
    // (⽡) KANGXI RADICAL TILE	[FB40 F4E6 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F61, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF4E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_444)
{
    // FAA2 0021;	
    // (甆) CJK COMPATIBILITY IDEOGRAPH-FAA2	[FB40 F506 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAA2, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF506, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_445)
{
    // FAA2 003F;	
    // (甆) CJK COMPATIBILITY IDEOGRAPH-FAA2	[FB40 F506 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAA2, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF506, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_446)
{
    // FAA2 0061;	
    // (甆) CJK COMPATIBILITY IDEOGRAPH-FAA2	[FB40 F506 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAA2, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF506, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_447)
{
    // FAA2 0041;	
    // (甆) CJK COMPATIBILITY IDEOGRAPH-FAA2	[FB40 F506 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFAA2, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF506, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_448)
{
    // FAA2 0062;	
    // (甆) CJK COMPATIBILITY IDEOGRAPH-FAA2	[FB40 F506 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAA2, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF506, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_449)
{
    // 2F62 0021;	
    // (⽢) KANGXI RADICAL SWEET	[FB40 F518 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F62, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF518, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_450)
{
    // 2F62 003F;	
    // (⽢) KANGXI RADICAL SWEET	[FB40 F518 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F62, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF518, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_451)
{
    // 2F62 0061;	
    // (⽢) KANGXI RADICAL SWEET	[FB40 F518 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F62, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF518, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_452)
{
    // 2F62 0041;	
    // (⽢) KANGXI RADICAL SWEET	[FB40 F518 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F62, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF518, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_453)
{
    // 2F62 0062;	
    // (⽢) KANGXI RADICAL SWEET	[FB40 F518 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F62, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF518, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_454)
{
    // 2F63 0021;	
    // (⽣) KANGXI RADICAL LIFE	[FB40 F51F 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F63, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF51F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_455)
{
    // 1F222 0021;	
    // (🈢) SQUARED CJK UNIFIED IDEOGRAPH-751F	[FB40 F51F 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F222, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF51F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_456)
{
    // 2F63 003F;	
    // (⽣) KANGXI RADICAL LIFE	[FB40 F51F 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F63, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF51F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_457)
{
    // 1F222 003F;	
    // (🈢) SQUARED CJK UNIFIED IDEOGRAPH-751F	[FB40 F51F 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F222, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF51F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_458)
{
    // 2F63 0061;	
    // (⽣) KANGXI RADICAL LIFE	[FB40 F51F 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F63, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF51F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_459)
{
    // 2F63 0041;	
    // (⽣) KANGXI RADICAL LIFE	[FB40 F51F 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F63, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF51F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_460)
{
    // 1F222 0061;	
    // (🈢) SQUARED CJK UNIFIED IDEOGRAPH-751F	[FB40 F51F 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F222, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF51F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_461)
{
    // 1F222 0041;	
    // (🈢) SQUARED CJK UNIFIED IDEOGRAPH-751F	[FB40 F51F 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F222, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF51F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_462)
{
    // 2F63 0062;	
    // (⽣) KANGXI RADICAL LIFE	[FB40 F51F 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F63, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF51F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_463)
{
    // 1F222 0062;	
    // (🈢) SQUARED CJK UNIFIED IDEOGRAPH-751F	[FB40 F51F 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F222, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF51F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_464)
{
    // 2F934 0021;	
    // (甤) CJK COMPATIBILITY IDEOGRAPH-2F934	[FB40 F524 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F934, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF524, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_465)
{
    // 2F934 003F;	
    // (甤) CJK COMPATIBILITY IDEOGRAPH-2F934	[FB40 F524 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F934, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF524, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_466)
{
    // 2F934 0061;	
    // (甤) CJK COMPATIBILITY IDEOGRAPH-2F934	[FB40 F524 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F934, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF524, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_467)
{
    // 2F934 0041;	
    // (甤) CJK COMPATIBILITY IDEOGRAPH-2F934	[FB40 F524 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F934, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF524, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_468)
{
    // 2F934 0062;	
    // (甤) CJK COMPATIBILITY IDEOGRAPH-2F934	[FB40 F524 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F934, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF524, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_469)
{
    // 2F64 0021;	
    // (⽤) KANGXI RADICAL USE	[FB40 F528 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F64, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF528, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_470)
{
    // 2F64 003F;	
    // (⽤) KANGXI RADICAL USE	[FB40 F528 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F64, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF528, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_471)
{
    // 2F64 0061;	
    // (⽤) KANGXI RADICAL USE	[FB40 F528 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F64, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF528, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_472)
{
    // 2F64 0041;	
    // (⽤) KANGXI RADICAL USE	[FB40 F528 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F64, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF528, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_473)
{
    // 2F64 0062;	
    // (⽤) KANGXI RADICAL USE	[FB40 F528 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F64, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF528, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_474)
{
    // 2F65 0021;	
    // (⽥) KANGXI RADICAL FIELD	[FB40 F530 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F65, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF530, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_475)
{
    // 2F65 003F;	
    // (⽥) KANGXI RADICAL FIELD	[FB40 F530 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F65, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF530, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_476)
{
    // 2F65 0061;	
    // (⽥) KANGXI RADICAL FIELD	[FB40 F530 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F65, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF530, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_477)
{
    // 2F65 0041;	
    // (⽥) KANGXI RADICAL FIELD	[FB40 F530 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F65, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF530, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_478)
{
    // 2F65 0062;	
    // (⽥) KANGXI RADICAL FIELD	[FB40 F530 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F65, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF530, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_479)
{
    // 3199 0021;	
    // (㆙) IDEOGRAPHIC ANNOTATION FIRST MARK	[FB40 F532 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3199, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF532, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_480)
{
    // 3199 003F;	
    // (㆙) IDEOGRAPHIC ANNOTATION FIRST MARK	[FB40 F532 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3199, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF532, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_481)
{
    // 3199 0061;	
    // (㆙) IDEOGRAPHIC ANNOTATION FIRST MARK	[FB40 F532 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3199, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF532, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_482)
{
    // 3199 0041;	
    // (㆙) IDEOGRAPHIC ANNOTATION FIRST MARK	[FB40 F532 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x3199, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF532, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_483)
{
    // 3199 0062;	
    // (㆙) IDEOGRAPHIC ANNOTATION FIRST MARK	[FB40 F532 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3199, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF532, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_484)
{
    // 1F238 0021;	
    // (🈸) SQUARED CJK UNIFIED IDEOGRAPH-7533	[FB40 F533 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F238, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF533, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_485)
{
    // 1F238 003F;	
    // (🈸) SQUARED CJK UNIFIED IDEOGRAPH-7533	[FB40 F533 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F238, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF533, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_486)
{
    // 1F238 0061;	
    // (🈸) SQUARED CJK UNIFIED IDEOGRAPH-7533	[FB40 F533 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F238, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF533, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_487)
{
    // 1F238 0041;	
    // (🈸) SQUARED CJK UNIFIED IDEOGRAPH-7533	[FB40 F533 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F238, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF533, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_488)
{
    // 1F238 0062;	
    // (🈸) SQUARED CJK UNIFIED IDEOGRAPH-7533	[FB40 F533 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F238, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF533, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_489)
{
    // 329A 0021;	
    // (㊚) CIRCLED IDEOGRAPH MALE	[FB40 F537 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x329A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF537, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_490)
{
    // 329A 003F;	
    // (㊚) CIRCLED IDEOGRAPH MALE	[FB40 F537 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x329A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF537, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_491)
{
    // 329A 0061;	
    // (㊚) CIRCLED IDEOGRAPH MALE	[FB40 F537 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x329A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF537, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_492)
{
    // 329A 0041;	
    // (㊚) CIRCLED IDEOGRAPH MALE	[FB40 F537 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x329A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF537, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_493)
{
    // 329A 0062;	
    // (㊚) CIRCLED IDEOGRAPH MALE	[FB40 F537 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x329A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF537, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_494)
{
    // FAA3 0021;	
    // (画) CJK COMPATIBILITY IDEOGRAPH-FAA3	[FB40 F53B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAA3, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF53B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_495)
{
    // FAA3 003F;	
    // (画) CJK COMPATIBILITY IDEOGRAPH-FAA3	[FB40 F53B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAA3, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xF53B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_496)
{
    // FAA3 0061;	
    // (画) CJK COMPATIBILITY IDEOGRAPH-FAA3	[FB40 F53B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAA3, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xF53B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_497)
{
    // FAA3 0041;	
    // (画) CJK COMPATIBILITY IDEOGRAPH-FAA3	[FB40 F53B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFAA3, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xF53B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_498)
{
    // FAA3 0062;	
    // (画) CJK COMPATIBILITY IDEOGRAPH-FAA3	[FB40 F53B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAA3, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xF53B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_320_499)
{
    // 2F936 0021;	
    // (甾) CJK COMPATIBILITY IDEOGRAPH-2F936	[FB40 F53E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F936, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xF53E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

