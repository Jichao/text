// Warning! This file is autogenerated.
#include <boost/text/collation_table.hpp>
#include <boost/text/collate.hpp>
#include <boost/text/data/all.hpp>

#include <gtest/gtest.h>


using namespace boost;

auto const error = [](text::string const & s) { std::cout << s; };
auto const warning = [](text::string const & s) {};


// simple CEs & expansions
TEST(collation_and_tailoring, data_file_test_62)
{
    auto const table = text::tailored_collation_table(
        "&\\x01 <<<\\u0300 &9<\\x00 &\\uA00A\\uA00B=\\uA002 &\\uA00A\\uA00B\\u00050005=\\uA003  ",
        "rules", error, warning);


    // =  \x01 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\x01")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \x02 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\x01")),
        text::utf32_range(text::string_view(u8"\x02")),
        table,
        text::collation_strength::quaternary),
        0);

    // <3 \u0300 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\x02")),
        text::utf32_range(text::string_view(u8"\u0300")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 9 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0300")),
        text::utf32_range(text::string_view(u8"9")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 \x00 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9")),
        text::utf32_range(text::string_view(u8"\x00")),
        table,
        text::collation_strength::primary),
        -1);

    // =  \x01\x00\x02 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\x00")),
        text::utf32_range(text::string_view(u8"\x01\x00\x02")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\x01\x00\x02")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 a\u0300 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"a\u0300")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 a\u0308 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0300")),
        text::utf32_range(text::string_view(u8"a\u0308")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  ä # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0308")),
        text::utf32_range(text::string_view(u8"ä")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ä")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 か # Hiragana Ka (U+304B)
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"か")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 か\u3099 # plus voiced sound mark
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"か")),
        text::utf32_range(text::string_view(u8"か\u3099")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  が # Hiragana Ga (U+304C)
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"か\u3099")),
        text::utf32_range(text::string_view(u8"が")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 \uA00A\uA00B # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"が")),
        text::utf32_range(text::string_view(u8"\uA00A\uA00B")),
        table,
        text::collation_strength::primary),
        -1);

    // =  \uA002 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uA00A\uA00B")),
        text::utf32_range(text::string_view(u8"\uA002")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 \uA00A\uA00B\u00050004 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uA002")),
        text::utf32_range(text::string_view(u8"\uA00A\uA00B\u00050004")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 \uA00A\uA00B\u00050005 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uA00A\uA00B\u00050004")),
        text::utf32_range(text::string_view(u8"\uA00A\uA00B\u00050005")),
        table,
        text::collation_strength::primary),
        -1);

    // =  \uA003 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uA00A\uA00B\u00050005")),
        text::utf32_range(text::string_view(u8"\uA003")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 \uA00A\uA00B\u00050006 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uA003")),
        text::utf32_range(text::string_view(u8"\uA00A\uA00B\u00050006")),
        table,
        text::collation_strength::primary),
        -1);

}

// simple contractions
TEST(collation_and_tailoring, data_file_test_131)
{
    auto const table = text::default_collation_table();


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ⓐ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"ⓐ")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 aa # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ⓐ")),
        text::utf32_range(text::string_view(u8"aa")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ⓐⓐ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aa")),
        text::utf32_range(text::string_view(u8"ⓐⓐ")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 ab # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ⓐⓐ")),
        text::utf32_range(text::string_view(u8"ab")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ⓐb # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ab")),
        text::utf32_range(text::string_view(u8"ⓐb")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 az # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ⓐb")),
        text::utf32_range(text::string_view(u8"az")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ⓐz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"az")),
        text::utf32_range(text::string_view(u8"ⓐz")),
        table,
        text::collation_strength::quaternary),
        0);

}

// simple contractions
TEST(collation_and_tailoring, data_file_test_138)
{
    auto const table = text::default_collation_table();


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 a\u0308\u030a # ring blocked by diaeresis
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"a\u0308\u030a")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  ⓐ❸❷ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0308\u030a")),
        text::utf32_range(text::string_view(u8"ⓐ❸❷")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 a\u0327 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ⓐ❸❷")),
        text::utf32_range(text::string_view(u8"a\u0327")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  ⓐ❺ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0327")),
        text::utf32_range(text::string_view(u8"ⓐ❺")),
        table,
        text::collation_strength::quaternary),
        0);

}

// simple contractions
TEST(collation_and_tailoring, data_file_test_144)
{
    auto const table = text::default_collation_table();


    // <2 \u0308 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u0308")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  ❸ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0308")),
        text::utf32_range(text::string_view(u8"❸")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 \u0308\u030a\u0301 # acute blocked by ring
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"❸")),
        text::utf32_range(text::string_view(u8"\u0308\u030a\u0301")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  ❸❷❶ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0308\u030a\u0301")),
        text::utf32_range(text::string_view(u8"❸❷❶")),
        table,
        text::collation_strength::quaternary),
        0);

}

// simple contractions
TEST(collation_and_tailoring, data_file_test_152)
{
    auto const table = text::default_collation_table();


    // <1 \U0001D158 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\U0001D158")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ⁰ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\U0001D158")),
        text::utf32_range(text::string_view(u8"⁰")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 \U0001D158\U0001D165 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"⁰")),
        text::utf32_range(text::string_view(u8"\U0001D158\U0001D165")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ¼ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\U0001D158\U0001D165")),
        text::utf32_range(text::string_view(u8"¼")),
        table,
        text::collation_strength::quaternary),
        0);

}

// simple contractions
TEST(collation_and_tailoring, data_file_test_157)
{
    auto const table = text::default_collation_table();


    // <1 dz\u0323\u0301 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"dz\u0323\u0301")),
        table,
        text::collation_strength::primary),
        -1);

    // =  dz❻❶ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"dz\u0323\u0301")),
        text::utf32_range(text::string_view(u8"dz❻❶")),
        table,
        text::collation_strength::quaternary),
        0);

}

// simple contractions
TEST(collation_and_tailoring, data_file_test_163)
{
    auto const table = text::default_collation_table();


    // <1 abz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"abz")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ⓐⓑ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abz")),
        text::utf32_range(text::string_view(u8"ⓐⓑ")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 abzz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ⓐⓑ")),
        text::utf32_range(text::string_view(u8"abzz")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ⓐⓑz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abzz")),
        text::utf32_range(text::string_view(u8"ⓐⓑz")),
        table,
        text::collation_strength::quaternary),
        0);

}

// simple contractions
TEST(collation_and_tailoring, data_file_test_181)
{
    auto const table = text::default_collation_table();


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 a\u0301 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"a\u0301")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓐ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0301")),
        text::utf32_range(text::string_view(u8"Ⓐ")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 a\u0301\u0301 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓐ")),
        text::utf32_range(text::string_view(u8"a\u0301\u0301")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓑ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0301\u0301")),
        text::utf32_range(text::string_view(u8"Ⓑ")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 a\u0301\u0301\u0358 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓑ")),
        text::utf32_range(text::string_view(u8"a\u0301\u0301\u0358")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓒ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0301\u0301\u0358")),
        text::utf32_range(text::string_view(u8"Ⓒ")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 a\u030a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓒ")),
        text::utf32_range(text::string_view(u8"a\u030a")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓓ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u030a")),
        text::utf32_range(text::string_view(u8"Ⓓ")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 a\u0323\u0358 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓓ")),
        text::utf32_range(text::string_view(u8"a\u0323\u0358")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓕ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0323\u0358")),
        text::utf32_range(text::string_view(u8"Ⓕ")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 a\u0327\u0323\u030a # match despite missing prefix
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓕ")),
        text::utf32_range(text::string_view(u8"a\u0327\u0323\u030a")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓖ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0327\u0323\u030a")),
        text::utf32_range(text::string_view(u8"Ⓖ")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 a\u0327\u0323bz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓖ")),
        text::utf32_range(text::string_view(u8"a\u0327\u0323bz")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓗ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0327\u0323bz")),
        text::utf32_range(text::string_view(u8"Ⓗ")),
        table,
        text::collation_strength::quaternary),
        0);

}

// simple contractions
TEST(collation_and_tailoring, data_file_test_185)
{
    auto const table = text::default_collation_table();


    // <2 \u0308\u0308\u0301 # acute blocked from first diaeresis, contracts with second
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u0308\u0308\u0301")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  ❸❹ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0308\u0308\u0301")),
        text::utf32_range(text::string_view(u8"❸❹")),
        table,
        text::collation_strength::quaternary),
        0);

}

// simple contractions
TEST(collation_and_tailoring, data_file_test_189)
{
    auto const table = text::default_collation_table();


    // <1 \U0001D158\U0001D165 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\U0001D158\U0001D165")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ¼ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\U0001D158\U0001D165")),
        text::utf32_range(text::string_view(u8"¼")),
        table,
        text::collation_strength::quaternary),
        0);

}

// simple contractions
TEST(collation_and_tailoring, data_file_test_193)
{
    auto const table = text::default_collation_table();


    // <3 \U0001D165\U0001D16D # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\U0001D165\U0001D16D")),
        table,
        text::collation_strength::tertiary),
        -1);

    // =  ³ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\U0001D165\U0001D16D")),
        text::utf32_range(text::string_view(u8"³")),
        table,
        text::collation_strength::quaternary),
        0);

}

// discontiguous contractions
TEST(collation_and_tailoring, data_file_test_210)
{
    auto const table = text::default_collation_table();


    // <1 a\u0327\u030a # a+ring skips cedilla
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a\u0327\u030a")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓓ❺ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0327\u030a")),
        text::utf32_range(text::string_view(u8"Ⓓ❺")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 a\u0327\u0327\u030a # a+ring skips 2 cedillas
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓓ❺")),
        text::utf32_range(text::string_view(u8"a\u0327\u0327\u030a")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  Ⓓ❺❺ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0327\u0327\u030a")),
        text::utf32_range(text::string_view(u8"Ⓓ❺❺")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 a\u0327\u0327\u0327\u030a # a+ring skips 3 cedillas
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓓ❺❺")),
        text::utf32_range(text::string_view(u8"a\u0327\u0327\u0327\u030a")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  Ⓓ❺❺❺ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0327\u0327\u0327\u030a")),
        text::utf32_range(text::string_view(u8"Ⓓ❺❺❺")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 a\u0334\u0327\u0327\u030a # a+ring skips tilde overlay & 2 cedillas
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓓ❺❺❺")),
        text::utf32_range(text::string_view(u8"a\u0334\u0327\u0327\u030a")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  Ⓓ❾❺❺ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0334\u0327\u0327\u030a")),
        text::utf32_range(text::string_view(u8"Ⓓ❾❺❺")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 a\u0327\u0323 # a+dot below skips cedilla
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓓ❾❺❺")),
        text::utf32_range(text::string_view(u8"a\u0327\u0323")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓔ❺ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0327\u0323")),
        text::utf32_range(text::string_view(u8"Ⓔ❺")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 a\u0323\u0301\u0358 # a+dot below+dot ab.r.: 2-char match, then skips acute
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓔ❺")),
        text::utf32_range(text::string_view(u8"a\u0323\u0301\u0358")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓕ❶ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0323\u0301\u0358")),
        text::utf32_range(text::string_view(u8"Ⓕ❶")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 a\u0334\u0323\u0358 # a+dot below skips tilde overlay
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓕ❶")),
        text::utf32_range(text::string_view(u8"a\u0334\u0323\u0358")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  Ⓕ❾ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0334\u0323\u0358")),
        text::utf32_range(text::string_view(u8"Ⓕ❾")),
        table,
        text::collation_strength::quaternary),
        0);

}

// discontiguous contractions
TEST(collation_and_tailoring, data_file_test_214)
{
    auto const table = text::default_collation_table();


    // <2 \u0331\u0331\u0358 # macron below+dot ab.r. skips the second macron below
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u0331\u0331\u0358")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  ❽❼ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0331\u0331\u0358")),
        text::utf32_range(text::string_view(u8"❽❼")),
        table,
        text::collation_strength::quaternary),
        0);

}

// discontiguous contractions
TEST(collation_and_tailoring, data_file_test_226)
{
    auto const table = text::default_collation_table();


    // <1 a\u0327\u0331\u0323\u030a # a+ring skips cedilla, macron below, dot below (dot blocked by macron)
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a\u0327\u0331\u0323\u030a")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓓ❺❼❻ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0327\u0331\u0323\u030a")),
        text::utf32_range(text::string_view(u8"Ⓓ❺❼❻")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 a\u0327\u0323\U0001D16D\u030a # a+dot below skips cedilla
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓓ❺❼❻")),
        text::utf32_range(text::string_view(u8"a\u0327\u0323\U0001D16D\u030a")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓔ❺²❷ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0327\u0323\U0001D16D\u030a")),
        text::utf32_range(text::string_view(u8"Ⓔ❺²❷")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 a\u0327\u0327\u0323\u030a # a+dot below skips 2 cedillas
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓔ❺²❷")),
        text::utf32_range(text::string_view(u8"a\u0327\u0327\u0323\u030a")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  Ⓔ❺❺❷ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0327\u0327\u0323\u030a")),
        text::utf32_range(text::string_view(u8"Ⓔ❺❺❷")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 a\u0327\u0323\u0323\u030a # a+dot below skips cedilla
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓔ❺❺❷")),
        text::utf32_range(text::string_view(u8"a\u0327\u0323\u0323\u030a")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  Ⓔ❺❻❷ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0327\u0323\u0323\u030a")),
        text::utf32_range(text::string_view(u8"Ⓔ❺❻❷")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 a\u0334\u0327\u0323\u030a # a+dot below skips tilde overlay & cedilla
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓔ❺❻❷")),
        text::utf32_range(text::string_view(u8"a\u0334\u0327\u0323\u030a")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  Ⓔ❾❺❷ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0334\u0327\u0323\u030a")),
        text::utf32_range(text::string_view(u8"Ⓔ❾❺❷")),
        table,
        text::collation_strength::quaternary),
        0);

}

// discontiguous contractions
TEST(collation_and_tailoring, data_file_test_239)
{
    auto const table = text::default_collation_table();


    // <1 \U0001D158\u0327\U0001D165 # quarter note skips cedilla
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\U0001D158\u0327\U0001D165")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ¼❺ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\U0001D158\u0327\U0001D165")),
        text::utf32_range(text::string_view(u8"¼❺")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 a\U0001D165\u0323 # a+dot below skips stem
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"¼❺")),
        text::utf32_range(text::string_view(u8"a\U0001D165\u0323")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓔ¹ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\U0001D165\u0323")),
        text::utf32_range(text::string_view(u8"Ⓔ¹")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 a\u0327\u0323b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓔ¹")),
        text::utf32_range(text::string_view(u8"a\u0327\u0323b")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓔ❺b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0327\u0323b")),
        text::utf32_range(text::string_view(u8"Ⓔ❺b")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 a\u0327\u0323ba # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓔ❺b")),
        text::utf32_range(text::string_view(u8"a\u0327\u0323ba")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓔ❺bⓐ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0327\u0323ba")),
        text::utf32_range(text::string_view(u8"Ⓔ❺bⓐ")),
        table,
        text::collation_strength::quaternary),
        0);

}

// discontiguous contractions
TEST(collation_and_tailoring, data_file_test_244)
{
    auto const table = text::default_collation_table();


    // <1 a\u0327\u0301\u0301\u0358 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a\u0327\u0301\u0301\u0358")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓒ❺ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0327\u0301\u0301\u0358")),
        text::utf32_range(text::string_view(u8"Ⓒ❺")),
        table,
        text::collation_strength::quaternary),
        0);

}

// discontiguous contractions
TEST(collation_and_tailoring, data_file_test_250)
{
    auto const table = text::default_collation_table();


    // <1 a\u0f73\u0301 # a+acute skips tibetan ii
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a\u0f73\u0301")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓐ③ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0f73\u0301")),
        text::utf32_range(text::string_view(u8"Ⓐ③")),
        table,
        text::collation_strength::quaternary),
        0);

}

// discontiguous contractions
TEST(collation_and_tailoring, data_file_test_254)
{
    auto const table = text::default_collation_table();


    // <1 \u0f71\u0f73 # == \u0f73\u0f71 == \u0f71\u0f71\u0f72
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u0f71\u0f73")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ③① # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0f71\u0f73")),
        text::utf32_range(text::string_view(u8"③①")),
        table,
        text::collation_strength::quaternary),
        0);

}

// discontiguous contractions with nested contractions
TEST(collation_and_tailoring, data_file_test_261)
{
    auto const table = text::default_collation_table();


    // <1 a\u0323\u0308\u0301\u0358 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a\u0323\u0308\u0301\u0358")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓕ❹ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0323\u0308\u0301\u0358")),
        text::utf32_range(text::string_view(u8"Ⓕ❹")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 a\u0323\u0308\u0301\u0308\u0301\u0358 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓕ❹")),
        text::utf32_range(text::string_view(u8"a\u0323\u0308\u0301\u0308\u0301\u0358")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  Ⓕ❹❹ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0323\u0308\u0301\u0308\u0301\u0358")),
        text::utf32_range(text::string_view(u8"Ⓕ❹❹")),
        table,
        text::collation_strength::quaternary),
        0);

}

// discontiguous contractions with interleaved contractions
TEST(collation_and_tailoring, data_file_test_280)
{
    auto const table = text::default_collation_table();


    // <1 a\u0327\u0331\u030a\u0358 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a\u0327\u0331\u030a\u0358")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓓ❺❽ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0327\u0331\u030a\u0358")),
        text::utf32_range(text::string_view(u8"Ⓓ❺❽")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 a\u0331\u030a\u0358 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓓ❺❽")),
        text::utf32_range(text::string_view(u8"a\u0331\u030a\u0358")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  Ⓓ❽ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0331\u030a\u0358")),
        text::utf32_range(text::string_view(u8"Ⓓ❽")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 a\u0331\u0331\u030a\u0358\u0358 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓓ❽")),
        text::utf32_range(text::string_view(u8"a\u0331\u0331\u030a\u0358\u0358")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  Ⓓ❽❽ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0331\u0331\u030a\u0358\u0358")),
        text::utf32_range(text::string_view(u8"Ⓓ❽❽")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 a\u0331\u0331\u0331\u030a\u0301\u0358\u0358\u0358 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓓ❽❽")),
        text::utf32_range(text::string_view(u8"a\u0331\u0331\u0331\u030a\u0301\u0358\u0358\u0358")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  Ⓓ❽❽❽❶ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0331\u0331\u0331\u030a\u0301\u0358\u0358\u0358")),
        text::utf32_range(text::string_view(u8"Ⓓ❽❽❽❶")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 a\U0001D165\u0323\U0001D16Ddz\u0301 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓓ❽❽❽❶")),
        text::utf32_range(text::string_view(u8"a\U0001D165\u0323\U0001D16Ddz\u0301")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓔ³ⓓ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\U0001D165\u0323\U0001D16Ddz\u0301")),
        text::utf32_range(text::string_view(u8"Ⓔ³ⓓ")),
        table,
        text::collation_strength::quaternary),
        0);

}

// some simple string comparisons
TEST(collation_and_tailoring, data_file_test_290)
{
    auto const table = text::default_collation_table();


    // = \u0000 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u0000")),
        table,
        text::collation_strength::quaternary),
        0);

    // < a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0000")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 B # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"B")),
        table,
        text::collation_strength::tertiary),
        -1);

    // = \u0000B\u0000 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"B")),
        text::utf32_range(text::string_view(u8"\u0000B\u0000")),
        table,
        text::collation_strength::quaternary),
        0);

}

// compare with strength=primary
TEST(collation_and_tailoring, data_file_test_297)
{
    auto const table = text::tailored_collation_table(
        "[strength 1]",
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // = B # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"B")),
        table,
        text::collation_strength::quaternary),
        0);

}

// compare with strength=secondary
TEST(collation_and_tailoring, data_file_test_304)
{
    auto const table = text::tailored_collation_table(
        "[strength 2]",
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // = B # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"B")),
        table,
        text::collation_strength::quaternary),
        0);

}

// compare with strength=tertiary
TEST(collation_and_tailoring, data_file_test_311)
{
    auto const table = text::tailored_collation_table(
        "[strength 3]",
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 B # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"B")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// compare with strength=quaternary
TEST(collation_and_tailoring, data_file_test_318)
{
    auto const table = text::tailored_collation_table(
        "[strength 4]",
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 B # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"B")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// compare with strength=identical
TEST(collation_and_tailoring, data_file_test_325)
{
    auto const table = text::tailored_collation_table(
        "[strength I]",
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 B # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"B")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// côté with forwards secondary
TEST(collation_and_tailoring, data_file_test_333)
{
    auto const table = text::default_collation_table();


    // <1 cote # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"cote")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 coté # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"cote")),
        text::utf32_range(text::string_view(u8"coté")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 côte # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"coté")),
        text::utf32_range(text::string_view(u8"côte")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 côté # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"côte")),
        text::utf32_range(text::string_view(u8"côté")),
        table,
        text::collation_strength::secondary),
        -1);

}

// côté with forwards secondary vs. U+FFFE merge separator
TEST(collation_and_tailoring, data_file_test_342)
{
    auto const table = text::default_collation_table();


    // <1 cote\uFFFEcôté # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"cote\uFFFEcôté")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 coté\uFFFEcôte # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"cote\uFFFEcôté")),
        text::utf32_range(text::string_view(u8"coté\uFFFEcôte")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 côte\uFFFEcoté # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"coté\uFFFEcôte")),
        text::utf32_range(text::string_view(u8"côte\uFFFEcoté")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 côté\uFFFEcote # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"côte\uFFFEcoté")),
        text::utf32_range(text::string_view(u8"côté\uFFFEcote")),
        table,
        text::collation_strength::secondary),
        -1);

}

// côté with backwards secondary
TEST(collation_and_tailoring, data_file_test_350)
{
    auto const table = text::tailored_collation_table(
        "[backwards 2]",
        "rules", error, warning);


    // <1 cote # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"cote")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 côte # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"cote")),
        text::utf32_range(text::string_view(u8"côte")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 coté # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"côte")),
        text::utf32_range(text::string_view(u8"coté")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 côté # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"coté")),
        text::utf32_range(text::string_view(u8"côté")),
        table,
        text::collation_strength::secondary),
        -1);

}

// côté with backwards secondary vs. U+FFFE merge separator
TEST(collation_and_tailoring, data_file_test_359)
{
    auto const table = text::default_collation_table();


    // <1 cote\uFFFEcôté # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"cote\uFFFEcôté")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 côte\uFFFEcoté # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"cote\uFFFEcôté")),
        text::utf32_range(text::string_view(u8"côte\uFFFEcoté")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 coté\uFFFEcôte # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"côte\uFFFEcoté")),
        text::utf32_range(text::string_view(u8"coté\uFFFEcôte")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 côté\uFFFEcote # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"coté\uFFFEcôte")),
        text::utf32_range(text::string_view(u8"côté\uFFFEcote")),
        table,
        text::collation_strength::secondary),
        -1);

}

// U+FFFE on identical level
TEST(collation_and_tailoring, data_file_test_371)
{
    auto const table = text::tailored_collation_table(
        "[strength I]",
        "rules", error, warning);


    // <1 \uFFFE\u0001\u0002\u0003 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\uFFFE\u0001\u0002\u0003")),
        table,
        text::collation_strength::primary),
        -1);

    // <i \u0001\uFFFE\u0002\u0003 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFFFE\u0001\u0002\u0003")),
        text::utf32_range(text::string_view(u8"\u0001\uFFFE\u0002\u0003")),
        table,
        text::collation_strength::identical),
        -1);

    // <i \u0001\u0002\uFFFE\u0003 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0001\uFFFE\u0002\u0003")),
        text::utf32_range(text::string_view(u8"\u0001\u0002\uFFFE\u0003")),
        table,
        text::collation_strength::identical),
        -1);

    // <i \u0001\u0002\u0003\uFFFE # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0001\u0002\uFFFE\u0003")),
        text::utf32_range(text::string_view(u8"\u0001\u0002\u0003\uFFFE")),
        table,
        text::collation_strength::identical),
        -1);

}

// U+FFFE on identical level
TEST(collation_and_tailoring, data_file_test_377)
{
    auto const table = text::tailored_collation_table(
        "[strength I]",
        "rules", error, warning);


    // <1 \uFFFE\u0000\u0000 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\uFFFE\u0000\u0000")),
        table,
        text::collation_strength::primary),
        -1);

    // <i \u0000\uFFFE\u0000 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFFFE\u0000\u0000")),
        text::utf32_range(text::string_view(u8"\u0000\uFFFE\u0000")),
        table,
        text::collation_strength::identical),
        -1);

    // <i \u0000\u0000\uFFFE # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0000\uFFFE\u0000")),
        text::utf32_range(text::string_view(u8"\u0000\u0000\uFFFE")),
        table,
        text::collation_strength::identical),
        -1);

}

// Hani < surrogates < U+FFFD
TEST(collation_and_tailoring, data_file_test_393)
{
    auto const table = text::tailored_collation_table(
        "[strength I]",
        "rules", error, warning);


    // <1 abz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"abz")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 a\u4e00z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abz")),
        text::utf32_range(text::string_view(u8"a\u4e00z")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 a\U00020000z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u4e00z")),
        text::utf32_range(text::string_view(u8"a\U00020000z")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 a\ufffdz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\U00020000z")),
        text::utf32_range(text::string_view(u8"a\ufffdz")),
        table,
        text::collation_strength::primary),
        -1);

}

// script reordering
TEST(collation_and_tailoring, data_file_test_404)
{
    auto const table = text::tailored_collation_table(
        "[reorder Hani Zzzz digit]",
        "rules", error, warning);


    // <1 ? # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"?")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 + # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"?")),
        text::utf32_range(text::string_view(u8"+")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 丂 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"+")),
        text::utf32_range(text::string_view(u8"丂")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"丂")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 α # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"α")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 5 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"α")),
        text::utf32_range(text::string_view(u8"5")),
        table,
        text::collation_strength::primary),
        -1);

}

// script reordering
TEST(collation_and_tailoring, data_file_test_413)
{
    auto const table = text::default_collation_table();


    // <1 ? # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"?")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 + # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"?")),
        text::utf32_range(text::string_view(u8"+")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 5 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"+")),
        text::utf32_range(text::string_view(u8"5")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"5")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 α # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"α")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 丂 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"α")),
        text::utf32_range(text::string_view(u8"丂")),
        table,
        text::collation_strength::primary),
        -1);

}

// empty rules
TEST(collation_and_tailoring, data_file_test_421)
{
    auto const table = text::default_collation_table();


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 ä # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"ä")),
        table,
        text::collation_strength::secondary),
        -1);

    // <3 Ä # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ä")),
        text::utf32_range(text::string_view(u8"Ä")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ä")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

}

// very simple rules
TEST(collation_and_tailoring, data_file_test_437)
{
    auto const table = text::tailored_collation_table(
        "&a=e<<<<q<<<<r<x<<<X<<y<<<Y<<z<<<Z [strength 4]",
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // =  e # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"e")),
        table,
        text::collation_strength::quaternary),
        0);

    // <4 q # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"e")),
        text::utf32_range(text::string_view(u8"q")),
        table,
        text::collation_strength::quaternary),
        -1);

    // <4 r # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"q")),
        text::utf32_range(text::string_view(u8"r")),
        table,
        text::collation_strength::quaternary),
        -1);

    // <1 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"r")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 X # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"X")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"X")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::secondary),
        -1);

    // <3 Y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"Y")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Y")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::secondary),
        -1);

    // <3 Z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"Z")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// tailoring twice before a root position: primary
TEST(collation_and_tailoring, data_file_test_447)
{
    auto const table = text::tailored_collation_table(
        "&[before 1]b<p &[before 1]b<q ",
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 p # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"p")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 q # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"p")),
        text::utf32_range(text::string_view(u8"q")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"q")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

}

// tailoring twice before a root position: secondary
TEST(collation_and_tailoring, data_file_test_458)
{
    auto const table = text::tailored_collation_table(
        "&[before 2]ſ<<p &[before 2]ſ<<q ",
        "rules", error, warning);


    // <1 s # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"s")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 p # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"s")),
        text::utf32_range(text::string_view(u8"p")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 q # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"p")),
        text::utf32_range(text::string_view(u8"q")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 ſ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"q")),
        text::utf32_range(text::string_view(u8"ſ")),
        table,
        text::collation_strength::secondary),
        -1);

}

// tailoring twice before a root position: secondary
TEST(collation_and_tailoring, data_file_test_467)
{
    auto const table = text::tailored_collation_table(
        "&[before 2]b<<p &[before 2]b<<q ",
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 p # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"p")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 q # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"p")),
        text::utf32_range(text::string_view(u8"q")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"q")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::secondary),
        -1);

}

// tailoring twice before a root position: tertiary
TEST(collation_and_tailoring, data_file_test_478)
{
    auto const table = text::tailored_collation_table(
        "&[before 3]B<<<p &[before 3]B<<<q ",
        "rules", error, warning);


    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 p # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"p")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 q # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"p")),
        text::utf32_range(text::string_view(u8"q")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 B # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"q")),
        text::utf32_range(text::string_view(u8"B")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// tailoring twice before a root position: tertiary
TEST(collation_and_tailoring, data_file_test_487)
{
    auto const table = text::tailored_collation_table(
        "&[before 3]b<<<p &[before 3]b<<<q ",
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 p # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"p")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 q # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"p")),
        text::utf32_range(text::string_view(u8"q")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"q")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// tailoring twice before a root position: tertiary
TEST(collation_and_tailoring, data_file_test_498)
{
    auto const table = text::tailored_collation_table(
        "&[before 2]b<<s &[before 3]s<<<p &[before 3]s<<<q ",
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 p # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"p")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 q # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"p")),
        text::utf32_range(text::string_view(u8"q")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 s # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"q")),
        text::utf32_range(text::string_view(u8"s")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"s")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::secondary),
        -1);

}

// tailor after completely ignorable
TEST(collation_and_tailoring, data_file_test_507)
{
    auto const table = text::tailored_collation_table(
        "&\\x00<<<x<<y ",
        "rules", error, warning);


    // = \x00 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\x00")),
        table,
        text::collation_strength::quaternary),
        0);

    // = \x1F # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\x00")),
        text::utf32_range(text::string_view(u8"\x1F")),
        table,
        text::collation_strength::quaternary),
        0);

    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\x1F")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::secondary),
        -1);

}

// secondary tailoring gaps, ICU ticket 9362
TEST(collation_and_tailoring, data_file_test_534)
{
    auto const table = text::tailored_collation_table(
        "&[before 2]s<<'_' &s<<r &ſ<<*a-q &[before 2][first primary ignorable]<<u<<v &[last primary ignorable]<<y<<z  ",
        "rules", error, warning);


    // <2 u # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"u")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 v # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"u")),
        text::utf32_range(text::string_view(u8"v")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 \u0332 # lowest secondary CE
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"v")),
        text::utf32_range(text::string_view(u8"\u0332")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 \u0308 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0332")),
        text::utf32_range(text::string_view(u8"\u0308")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0308")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 s_ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"s_")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 ss # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"s_")),
        text::utf32_range(text::string_view(u8"ss")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 sr # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ss")),
        text::utf32_range(text::string_view(u8"sr")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 sſ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"sr")),
        text::utf32_range(text::string_view(u8"sſ")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 sa # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"sſ")),
        text::utf32_range(text::string_view(u8"sa")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 sb # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"sa")),
        text::utf32_range(text::string_view(u8"sb")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 sp # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"sb")),
        text::utf32_range(text::string_view(u8"sp")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 sq # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"sp")),
        text::utf32_range(text::string_view(u8"sq")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 sus # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"sq")),
        text::utf32_range(text::string_view(u8"sus")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 svs # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"sus")),
        text::utf32_range(text::string_view(u8"svs")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 rs # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"svs")),
        text::utf32_range(text::string_view(u8"rs")),
        table,
        text::collation_strength::secondary),
        -1);

}

// tertiary tailoring gaps, ICU ticket 9362
TEST(collation_and_tailoring, data_file_test_561)
{
    auto const table = text::tailored_collation_table(
        "&[before 3]t<<<'_' &t<<<r &ᵀ<<<*a-q &[before 3][first secondary ignorable]<<<u<<<v &[last secondary ignorable]<<<y<<<z  ",
        "rules", error, warning);


    // <3 u # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"u")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 v # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"u")),
        text::utf32_range(text::string_view(u8"v")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"v")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 t_ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"t_")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 tt # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"t_")),
        text::utf32_range(text::string_view(u8"tt")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 tr # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"tt")),
        text::utf32_range(text::string_view(u8"tr")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 tｔ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"tr")),
        text::utf32_range(text::string_view(u8"tｔ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 tᵀ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"tｔ")),
        text::utf32_range(text::string_view(u8"tᵀ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 ta # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"tᵀ")),
        text::utf32_range(text::string_view(u8"ta")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 tb # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ta")),
        text::utf32_range(text::string_view(u8"tb")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 tp # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"tb")),
        text::utf32_range(text::string_view(u8"tp")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 tq # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"tp")),
        text::utf32_range(text::string_view(u8"tq")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 tut # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"tq")),
        text::utf32_range(text::string_view(u8"tut")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 tvt # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"tut")),
        text::utf32_range(text::string_view(u8"tvt")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 rt # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"tvt")),
        text::utf32_range(text::string_view(u8"rt")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// secondary & tertiary around root character
TEST(collation_and_tailoring, data_file_test_576)
{
    auto const table = text::tailored_collation_table(
        "&[before 2]m<<r &m<<s &[before 3]m<<<u &m<<<v ",
        "rules", error, warning);


    // <1 l # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"l")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 r # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"l")),
        text::utf32_range(text::string_view(u8"r")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 u # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"r")),
        text::utf32_range(text::string_view(u8"u")),
        table,
        text::collation_strength::secondary),
        -1);

    // <3 m # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"u")),
        text::utf32_range(text::string_view(u8"m")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 v # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"m")),
        text::utf32_range(text::string_view(u8"v")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 s # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"v")),
        text::utf32_range(text::string_view(u8"s")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 n # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"s")),
        text::utf32_range(text::string_view(u8"n")),
        table,
        text::collation_strength::primary),
        -1);

}

// secondary & tertiary around tailored item
TEST(collation_and_tailoring, data_file_test_592)
{
    auto const table = text::tailored_collation_table(
        "&m<x &[before 2]x<<r &x<<s &[before 3]x<<<u &x<<<v ",
        "rules", error, warning);


    // <1 m # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"m")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 r # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"m")),
        text::utf32_range(text::string_view(u8"r")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 u # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"r")),
        text::utf32_range(text::string_view(u8"u")),
        table,
        text::collation_strength::secondary),
        -1);

    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"u")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 v # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"v")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 s # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"v")),
        text::utf32_range(text::string_view(u8"s")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 n # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"s")),
        text::utf32_range(text::string_view(u8"n")),
        table,
        text::collation_strength::primary),
        -1);

}

// more nesting of secondary & tertiary before
TEST(collation_and_tailoring, data_file_test_615)
{
    auto const table = text::tailored_collation_table(
        "&[before 3]m<<<u &[before 2]m<<r &[before 3]r<<<q &m<<<w &m<<t &[before 3]w<<<v &w<<<x &w<<s ",
        "rules", error, warning);


    // <1 l # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"l")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 q # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"l")),
        text::utf32_range(text::string_view(u8"q")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 r # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"q")),
        text::utf32_range(text::string_view(u8"r")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 u # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"r")),
        text::utf32_range(text::string_view(u8"u")),
        table,
        text::collation_strength::secondary),
        -1);

    // <3 m # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"u")),
        text::utf32_range(text::string_view(u8"m")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 v # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"m")),
        text::utf32_range(text::string_view(u8"v")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 w # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"v")),
        text::utf32_range(text::string_view(u8"w")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"w")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 s # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"s")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 t # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"s")),
        text::utf32_range(text::string_view(u8"t")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 n # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"t")),
        text::utf32_range(text::string_view(u8"n")),
        table,
        text::collation_strength::primary),
        -1);

}

// case bits
TEST(collation_and_tailoring, data_file_test_640)
{
    auto const table = text::tailored_collation_table(
        "&w<x =uv=uV=Uv=UV &ae=ch=cH=Ch=CH &rst=yz=yZ=Yz=YZ [caseFirst lower]",
        "rules", error, warning);


    // <1 ae # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"ae")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ch # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ae")),
        text::utf32_range(text::string_view(u8"ch")),
        table,
        text::collation_strength::quaternary),
        0);

    // <3 cH # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ch")),
        text::utf32_range(text::string_view(u8"cH")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 Ch # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"cH")),
        text::utf32_range(text::string_view(u8"Ch")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 CH # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ch")),
        text::utf32_range(text::string_view(u8"CH")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 rst # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"CH")),
        text::utf32_range(text::string_view(u8"rst")),
        table,
        text::collation_strength::primary),
        -1);

    // =  yz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"rst")),
        text::utf32_range(text::string_view(u8"yz")),
        table,
        text::collation_strength::quaternary),
        0);

    // <3 yZ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"yz")),
        text::utf32_range(text::string_view(u8"yZ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 Yz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"yZ")),
        text::utf32_range(text::string_view(u8"Yz")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 YZ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Yz")),
        text::utf32_range(text::string_view(u8"YZ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 w # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"YZ")),
        text::utf32_range(text::string_view(u8"w")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"w")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::primary),
        -1);

    // =  uv # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"uv")),
        table,
        text::collation_strength::quaternary),
        0);

    // <3 uV # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"uv")),
        text::utf32_range(text::string_view(u8"uV")),
        table,
        text::collation_strength::tertiary),
        -1);

    // =  Uv # mixed case on single CE cannot distinguish variations
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"uV")),
        text::utf32_range(text::string_view(u8"Uv")),
        table,
        text::collation_strength::quaternary),
        0);

    // <3 UV # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Uv")),
        text::utf32_range(text::string_view(u8"UV")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// tertiary CEs, tertiary, caseLevel=off, caseFirst=lower
TEST(collation_and_tailoring, data_file_test_653)
{
    auto const table = text::tailored_collation_table(
        "&\\u0001<<<t<<<T [caseFirst lower]",
        "rules", error, warning);


    // <1 aa # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"aa")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 aat # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aa")),
        text::utf32_range(text::string_view(u8"aat")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 aaT # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aat")),
        text::utf32_range(text::string_view(u8"aaT")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 aA # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aaT")),
        text::utf32_range(text::string_view(u8"aA")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 aAt # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aA")),
        text::utf32_range(text::string_view(u8"aAt")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 ata # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aAt")),
        text::utf32_range(text::string_view(u8"ata")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 aTa # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ata")),
        text::utf32_range(text::string_view(u8"aTa")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// tertiary CEs, tertiary, caseLevel=off, caseFirst=upper
TEST(collation_and_tailoring, data_file_test_664)
{
    auto const table = text::tailored_collation_table(
        "[caseFirst upper]",
        "rules", error, warning);


    // <1 aA # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"aA")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 aAt # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aA")),
        text::utf32_range(text::string_view(u8"aAt")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 aa # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aAt")),
        text::utf32_range(text::string_view(u8"aa")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 aat # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aa")),
        text::utf32_range(text::string_view(u8"aat")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 aaT # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aat")),
        text::utf32_range(text::string_view(u8"aaT")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 ata # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aaT")),
        text::utf32_range(text::string_view(u8"ata")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 aTa # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ata")),
        text::utf32_range(text::string_view(u8"aTa")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// reset on expansion, ICU tickets 9415 & 9593
TEST(collation_and_tailoring, data_file_test_679)
{
    auto const table = text::tailored_collation_table(
        "&æ<x &æb=bæ &각<h &⒀<<y &l·=z <<u  ",
        "rules", error, warning);


    // <1 ae # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"ae")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 æ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ae")),
        text::utf32_range(text::string_view(u8"æ")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"æ")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 af # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"af")),
        table,
        text::collation_strength::primary),
        -1);

}

// reset on expansion, ICU tickets 9415 & 9593
TEST(collation_and_tailoring, data_file_test_684)
{
    auto const table = text::tailored_collation_table(
        "&æ<x &æb=bæ &각<h &⒀<<y &l·=z <<u  ",
        "rules", error, warning);


    // <1 aeb # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"aeb")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 æb # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aeb")),
        text::utf32_range(text::string_view(u8"æb")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  bæ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"æb")),
        text::utf32_range(text::string_view(u8"bæ")),
        table,
        text::collation_strength::quaternary),
        0);

}

// reset on expansion, ICU tickets 9415 & 9593
TEST(collation_and_tailoring, data_file_test_690)
{
    auto const table = text::tailored_collation_table(
        "&æ<x &æb=bæ &각<h &⒀<<y &l·=z <<u  ",
        "rules", error, warning);


    // <1 각 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"각")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 h # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"각")),
        text::utf32_range(text::string_view(u8"h")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 갂 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"h")),
        text::utf32_range(text::string_view(u8"갂")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 갃 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"갂")),
        text::utf32_range(text::string_view(u8"갃")),
        table,
        text::collation_strength::primary),
        -1);

}

// reset on expansion, ICU tickets 9415 & 9593
TEST(collation_and_tailoring, data_file_test_697)
{
    auto const table = text::tailored_collation_table(
        "&æ<x &æb=bæ &각<h &⒀<<y &l·=z <<u  ",
        "rules", error, warning);


    // <1 · # by itself: primary CE
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"·")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 l # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"·")),
        text::utf32_range(text::string_view(u8"l")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 l· # l+middle dot has only a secondary difference from l
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"l")),
        text::utf32_range(text::string_view(u8"l·")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"l·")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 u # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"u")),
        table,
        text::collation_strength::secondary),
        -1);

}

// reset on expansion, ICU tickets 9415 & 9593
TEST(collation_and_tailoring, data_file_test_703)
{
    auto const table = text::tailored_collation_table(
        "&æ<x &æb=bæ &각<h &⒀<<y &l·=z <<u  ",
        "rules", error, warning);


    // <1 (13) # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"(13)")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 ⒀ # DUCET sets special tertiary weights in all CEs
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"(13)")),
        text::utf32_range(text::string_view(u8"⒀")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"⒀")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 (13[ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"(13[")),
        table,
        text::collation_strength::primary),
        -1);

}

// reset on expansion, ICU tickets 9415 & 9593
TEST(collation_and_tailoring, data_file_test_711)
{
    auto const table = text::tailored_collation_table(
        "&æ<x &æb=bæ &각<h &⒀<<y &l·=z <<u  [alternate shifted]",
        "rules", error, warning);


    // <1 (13) # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"(13)")),
        table,
        text::collation_strength::primary),
        -1);

    // =  13 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"(13)")),
        text::utf32_range(text::string_view(u8"13")),
        table,
        text::collation_strength::quaternary),
        0);

    // <3 ⒀ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"13")),
        text::utf32_range(text::string_view(u8"⒀")),
        table,
        text::collation_strength::tertiary),
        -1);

    // =  y # alternate=shifted removes the tailoring difference on the last CE
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"⒀")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 14 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"14")),
        table,
        text::collation_strength::primary),
        -1);

}

// contraction inside extension, ICU ticket 9378
TEST(collation_and_tailoring, data_file_test_718)
{
    auto const table = text::tailored_collation_table(
        "&а<<х/й ",
        "rules", error, warning);


    // <1 ай # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"ай")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 х # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ай")),
        text::utf32_range(text::string_view(u8"х")),
        table,
        text::collation_strength::secondary),
        -1);

}

// no duplicate tailored CEs for different reset positions with same CEs, ICU ticket 10104
TEST(collation_and_tailoring, data_file_test_734)
{
    auto const table = text::tailored_collation_table(
        "&t<x &ᵀ<y &q<u &[before 1]ꝗ<v ",
        "rules", error, warning);


    // <1 q # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"q")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 u # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"q")),
        text::utf32_range(text::string_view(u8"u")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 v # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"u")),
        text::utf32_range(text::string_view(u8"v")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ꝗ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"v")),
        text::utf32_range(text::string_view(u8"ꝗ")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 t # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ꝗ")),
        text::utf32_range(text::string_view(u8"t")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 ᵀ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"t")),
        text::utf32_range(text::string_view(u8"ᵀ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ᵀ")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::primary),
        -1);

}

// later rule does not affect earlier reset position, ICU ticket 10105
TEST(collation_and_tailoring, data_file_test_745)
{
    auto const table = text::tailored_collation_table(
        "&a < u < v < w  &ov < x  &b < v ",
        "rules", error, warning);


    // <1 oa # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"oa")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ou # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"oa")),
        text::utf32_range(text::string_view(u8"ou")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 x # CE(o) followed by CE between u and w
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ou")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ow # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"ow")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ob # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ow")),
        text::utf32_range(text::string_view(u8"ob")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ov # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ob")),
        text::utf32_range(text::string_view(u8"ov")),
        table,
        text::collation_strength::primary),
        -1);

}

// later rule does not affect earlier extension (1), ICU ticket 10105
TEST(collation_and_tailoring, data_file_test_754)
{
    auto const table = text::tailored_collation_table(
        "&a=x/b &v=b [strength 2]",
        "rules", error, warning);


    // <1 B # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"B")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"B")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 v # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"v")),
        table,
        text::collation_strength::primary),
        -1);

    // =  b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"v")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::quaternary),
        0);

}

// later rule does not affect earlier extension (1), ICU ticket 10105
TEST(collation_and_tailoring, data_file_test_761)
{
    auto const table = text::tailored_collation_table(
        "&a=x/b &v=b [strength 2]",
        "rules", error, warning);


    // <1 AB # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"AB")),
        table,
        text::collation_strength::primary),
        -1);

    // =  x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"AB")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 ac # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"ac")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 av # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ac")),
        text::utf32_range(text::string_view(u8"av")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ab # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"av")),
        text::utf32_range(text::string_view(u8"ab")),
        table,
        text::collation_strength::quaternary),
        0);

}

// later rule does not affect earlier extension (2), ICU ticket 10105
TEST(collation_and_tailoring, data_file_test_772)
{
    auto const table = text::tailored_collation_table(
        "&a <<< c / e &g <<< e / l [strength 2]",
        "rules", error, warning);


    // <1 AE # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"AE")),
        table,
        text::collation_strength::primary),
        -1);

    // =  c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"AE")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 æ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"æ")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 agl # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"æ")),
        text::utf32_range(text::string_view(u8"agl")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ae # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"agl")),
        text::utf32_range(text::string_view(u8"ae")),
        table,
        text::collation_strength::quaternary),
        0);

}

// later rule does not affect earlier extension (3), ICU ticket 10105
TEST(collation_and_tailoring, data_file_test_782)
{
    auto const table = text::tailored_collation_table(
        "&a = b / c  &d = c / e [strength 2]",
        "rules", error, warning);


    // <1 AC # C is still only tertiary different from the original c
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"AC")),
        table,
        text::collation_strength::primary),
        -1);

    // =  b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"AC")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 ade # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"ade")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ac # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ade")),
        text::utf32_range(text::string_view(u8"ac")),
        table,
        text::collation_strength::quaternary),
        0);

}

// extension contains tailored character, ICU ticket 10105
TEST(collation_and_tailoring, data_file_test_792)
{
    auto const table = text::tailored_collation_table(
        "&a=e &b=u/e ",
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // =  e # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"e")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 ba # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"e")),
        text::utf32_range(text::string_view(u8"ba")),
        table,
        text::collation_strength::primary),
        -1);

    // =  be # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ba")),
        text::utf32_range(text::string_view(u8"be")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  u # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"be")),
        text::utf32_range(text::string_view(u8"u")),
        table,
        text::collation_strength::quaternary),
        0);

}

// add simple mappings for characters with root context
TEST(collation_and_tailoring, data_file_test_801)
{
    auto const table = text::tailored_collation_table(
        "&z=· &n=и ",
        "rules", error, warning);


    // <1 l # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"l")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 l· # root mapping for l|· still works
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"l")),
        text::utf32_range(text::string_view(u8"l·")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"l·")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::primary),
        -1);

    // =  · # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"·")),
        table,
        text::collation_strength::quaternary),
        0);

}

// add simple mappings for characters with root context
TEST(collation_and_tailoring, data_file_test_809)
{
    auto const table = text::tailored_collation_table(
        "&z=· &n=и ",
        "rules", error, warning);


    // <1 n # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"n")),
        table,
        text::collation_strength::primary),
        -1);

    // =  и # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"n")),
        text::utf32_range(text::string_view(u8"и")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 И # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"и")),
        text::utf32_range(text::string_view(u8"И")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 и\u0306 # root mapping for й=и\u0306 still works
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"И")),
        text::utf32_range(text::string_view(u8"и\u0306")),
        table,
        text::collation_strength::primary),
        -1);

    // =  й # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"и\u0306")),
        text::utf32_range(text::string_view(u8"й")),
        table,
        text::collation_strength::quaternary),
        0);

    // <3 Й # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"й")),
        text::utf32_range(text::string_view(u8"Й")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// add context mappings around characters with root context
TEST(collation_and_tailoring, data_file_test_818)
{
    auto const table = text::tailored_collation_table(
        "&z=·h &n=ә|и ",
        "rules", error, warning);


    // <1 l # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"l")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 l· # root mapping for l|· still works
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"l")),
        text::utf32_range(text::string_view(u8"l·")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"l·")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ·h # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"·h")),
        table,
        text::collation_strength::quaternary),
        0);

}

// add context mappings around characters with root context
TEST(collation_and_tailoring, data_file_test_823)
{
    auto const table = text::tailored_collation_table(
        "&z=·h &n=ә|и ",
        "rules", error, warning);


    // <1 и # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"и")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 И # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"и")),
        text::utf32_range(text::string_view(u8"И")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 и\u0306 # root mapping for й=и\u0306 still works
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"И")),
        text::utf32_range(text::string_view(u8"и\u0306")),
        table,
        text::collation_strength::primary),
        -1);

    // =  й # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"и\u0306")),
        text::utf32_range(text::string_view(u8"й")),
        table,
        text::collation_strength::quaternary),
        0);

}

// add context mappings around characters with root context
TEST(collation_and_tailoring, data_file_test_828)
{
    auto const table = text::tailored_collation_table(
        "&z=·h &n=ә|и ",
        "rules", error, warning);


    // <1 әn # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"әn")),
        table,
        text::collation_strength::primary),
        -1);

    // =  әи # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"әn")),
        text::utf32_range(text::string_view(u8"әи")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 әo # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"әи")),
        text::utf32_range(text::string_view(u8"әo")),
        table,
        text::collation_strength::primary),
        -1);

}

// many secondary CEs at the top of their range
TEST(collation_and_tailoring, data_file_test_842)
{
    auto const table = text::tailored_collation_table(
        "&[last primary ignorable]<<*\\u2801-\\u28ff ",
        "rules", error, warning);


    // <2 \u0308 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u0308")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 \u2801 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0308")),
        text::utf32_range(text::string_view(u8"\u2801")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 \u2802 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u2801")),
        text::utf32_range(text::string_view(u8"\u2802")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 \u2803 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u2802")),
        text::utf32_range(text::string_view(u8"\u2803")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 \u2804 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u2803")),
        text::utf32_range(text::string_view(u8"\u2804")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 \u28fd # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u2804")),
        text::utf32_range(text::string_view(u8"\u28fd")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 \u28fe # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u28fd")),
        text::utf32_range(text::string_view(u8"\u28fe")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 \u28ff # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u28fe")),
        text::utf32_range(text::string_view(u8"\u28ff")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 \x20 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u28ff")),
        text::utf32_range(text::string_view(u8"\x20")),
        table,
        text::collation_strength::primary),
        -1);

}

// many tertiary CEs at the top of their range
TEST(collation_and_tailoring, data_file_test_856)
{
    auto const table = text::tailored_collation_table(
        "&[last secondary ignorable]<<<*a-z ",
        "rules", error, warning);


    // <3 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"d")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"d")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 \u0308 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"\u0308")),
        table,
        text::collation_strength::secondary),
        -1);

}

// tailor contraction together with nearly equivalent prefix, ICU ticket 10101
TEST(collation_and_tailoring, data_file_test_866)
{
    auto const table = text::tailored_collation_table(
        "&a=p|x &b=px &c=op ",
        "rules", error, warning);


    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // =  px # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"px")),
        table,
        text::collation_strength::quaternary),
        0);

    // <3 B # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"px")),
        text::utf32_range(text::string_view(u8"B")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"B")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::primary),
        -1);

    // =  op # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"op")),
        table,
        text::collation_strength::quaternary),
        0);

    // <3 C # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"op")),
        text::utf32_range(text::string_view(u8"C")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// tailor contraction together with nearly equivalent prefix, ICU ticket 10101
TEST(collation_and_tailoring, data_file_test_872)
{
    auto const table = text::tailored_collation_table(
        "&a=p|x &b=px &c=op ",
        "rules", error, warning);


    // <1 ca # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"ca")),
        table,
        text::collation_strength::primary),
        -1);

    // =  opx # first contraction op, then prefix p|x
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ca")),
        text::utf32_range(text::string_view(u8"opx")),
        table,
        text::collation_strength::quaternary),
        0);

    // <3 cA # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opx")),
        text::utf32_range(text::string_view(u8"cA")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 Ca # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"cA")),
        text::utf32_range(text::string_view(u8"Ca")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// reset position with prefix (pre-context), ICU ticket 10102
TEST(collation_and_tailoring, data_file_test_883)
{
    auto const table = text::tailored_collation_table(
        "&a=p|x &px=y ",
        "rules", error, warning);


    // <1 pa # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"pa")),
        table,
        text::collation_strength::primary),
        -1);

    // =  px # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"pa")),
        text::utf32_range(text::string_view(u8"px")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"px")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::quaternary),
        0);

    // <3 pA # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"pA")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 q # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"pA")),
        text::utf32_range(text::string_view(u8"q")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"q")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::primary),
        -1);

}

// prefix+contraction together (1), ICU ticket 10071
TEST(collation_and_tailoring, data_file_test_903)
{
    auto const table = text::tailored_collation_table(
        "&x=a|bc ",
        "rules", error, warning);


    // <1 ab # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"ab")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 Abc # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ab")),
        text::utf32_range(text::string_view(u8"Abc")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 abd # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Abc")),
        text::utf32_range(text::string_view(u8"abd")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ac # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abd")),
        text::utf32_range(text::string_view(u8"ac")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 aw # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ac")),
        text::utf32_range(text::string_view(u8"aw")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ax # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aw")),
        text::utf32_range(text::string_view(u8"ax")),
        table,
        text::collation_strength::primary),
        -1);

    // =  abc # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ax")),
        text::utf32_range(text::string_view(u8"abc")),
        table,
        text::collation_strength::quaternary),
        0);

    // <3 aX # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abc")),
        text::utf32_range(text::string_view(u8"aX")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 Ax # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aX")),
        text::utf32_range(text::string_view(u8"Ax")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ax")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 bb # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"bb")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 bc # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"bb")),
        text::utf32_range(text::string_view(u8"bc")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 bC # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"bc")),
        text::utf32_range(text::string_view(u8"bC")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 Bc # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"bC")),
        text::utf32_range(text::string_view(u8"Bc")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 bd # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Bc")),
        text::utf32_range(text::string_view(u8"bd")),
        table,
        text::collation_strength::primary),
        -1);

}

// prefix+contraction together (2), ICU ticket 10071
TEST(collation_and_tailoring, data_file_test_910)
{
    auto const table = text::tailored_collation_table(
        "&w=bc &x=a|b ",
        "rules", error, warning);


    // <1 w # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"w")),
        table,
        text::collation_strength::primary),
        -1);

    // =  bc # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"w")),
        text::utf32_range(text::string_view(u8"bc")),
        table,
        text::collation_strength::quaternary),
        0);

    // <3 W # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"bc")),
        text::utf32_range(text::string_view(u8"W")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// prefix+contraction together (2), ICU ticket 10071
TEST(collation_and_tailoring, data_file_test_922)
{
    auto const table = text::tailored_collation_table(
        "&w=bc &x=a|b ",
        "rules", error, warning);


    // <1 aw # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"aw")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ax # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aw")),
        text::utf32_range(text::string_view(u8"ax")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ab # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ax")),
        text::utf32_range(text::string_view(u8"ab")),
        table,
        text::collation_strength::quaternary),
        0);

    // <3 aX # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ab")),
        text::utf32_range(text::string_view(u8"aX")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 axb # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aX")),
        text::utf32_range(text::string_view(u8"axb")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 axc # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"axb")),
        text::utf32_range(text::string_view(u8"axc")),
        table,
        text::collation_strength::primary),
        -1);

    // =  abc # prefix match a|b takes precedence over contraction match bc
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"axc")),
        text::utf32_range(text::string_view(u8"abc")),
        table,
        text::collation_strength::quaternary),
        0);

    // <3 abC # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abc")),
        text::utf32_range(text::string_view(u8"abC")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 abd # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abC")),
        text::utf32_range(text::string_view(u8"abd")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ay # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abd")),
        text::utf32_range(text::string_view(u8"ay")),
        table,
        text::collation_strength::primary),
        -1);

}

// prefix+contraction together (3), ICU ticket 10071
TEST(collation_and_tailoring, data_file_test_929)
{
    auto const table = text::tailored_collation_table(
        "&x=a|b &w=bc ",
        "rules", error, warning);


    // <1 w # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"w")),
        table,
        text::collation_strength::primary),
        -1);

    // =  bc # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"w")),
        text::utf32_range(text::string_view(u8"bc")),
        table,
        text::collation_strength::quaternary),
        0);

    // <3 W # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"bc")),
        text::utf32_range(text::string_view(u8"W")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// prefix+contraction together (3), ICU ticket 10071
TEST(collation_and_tailoring, data_file_test_941)
{
    auto const table = text::tailored_collation_table(
        "&x=a|b &w=bc ",
        "rules", error, warning);


    // <1 aw # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"aw")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ax # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aw")),
        text::utf32_range(text::string_view(u8"ax")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ab # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ax")),
        text::utf32_range(text::string_view(u8"ab")),
        table,
        text::collation_strength::quaternary),
        0);

    // <3 aX # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ab")),
        text::utf32_range(text::string_view(u8"aX")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 axb # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aX")),
        text::utf32_range(text::string_view(u8"axb")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 axc # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"axb")),
        text::utf32_range(text::string_view(u8"axc")),
        table,
        text::collation_strength::primary),
        -1);

    // =  abc # prefix match a|b takes precedence over contraction match bc
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"axc")),
        text::utf32_range(text::string_view(u8"abc")),
        table,
        text::collation_strength::quaternary),
        0);

    // <3 abC # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abc")),
        text::utf32_range(text::string_view(u8"abC")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 abd # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abC")),
        text::utf32_range(text::string_view(u8"abd")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ay # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abd")),
        text::utf32_range(text::string_view(u8"ay")),
        table,
        text::collation_strength::primary),
        -1);

}

// no mapping p|c, falls back to contraction ch, CLDR ticket 5962
TEST(collation_and_tailoring, data_file_test_956)
{
    auto const table = text::tailored_collation_table(
        "&d=ch &v=p|ci ",
        "rules", error, warning);


    // <1 pc # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"pc")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 pC # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"pc")),
        text::utf32_range(text::string_view(u8"pC")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 pcH # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"pC")),
        text::utf32_range(text::string_view(u8"pcH")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 pcI # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"pcH")),
        text::utf32_range(text::string_view(u8"pcI")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 pd # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"pcI")),
        text::utf32_range(text::string_view(u8"pd")),
        table,
        text::collation_strength::primary),
        -1);

    // =  pch # no-prefix contraction ch matches
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"pd")),
        text::utf32_range(text::string_view(u8"pch")),
        table,
        text::collation_strength::quaternary),
        0);

    // <3 pD # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"pch")),
        text::utf32_range(text::string_view(u8"pD")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 pv # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"pD")),
        text::utf32_range(text::string_view(u8"pv")),
        table,
        text::collation_strength::primary),
        -1);

    // =  pci # prefix+contraction p|ci matches
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"pv")),
        text::utf32_range(text::string_view(u8"pci")),
        table,
        text::collation_strength::quaternary),
        0);

    // <3 pV # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"pci")),
        text::utf32_range(text::string_view(u8"pV")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// tailor in & around compact ranges of root primaries
TEST(collation_and_tailoring, data_file_test_989)
{
    auto const table = text::tailored_collation_table(
        "&[before 1]ᚁ<a &ᚁ<b &[before 1]ᚂ<c &ᚂ<d &[before 1]ᚚ<y &ᚚ<z &[before 2]ᚁ<<r &ᚁ<<s &[before 3]ᚚ<<<t &ᚚ<<<u ",
        "rules", error, warning);


    // <1 ᣵ # U+18F5 last Canadian Aboriginal
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"ᣵ")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ᣵ")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 r # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"r")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 ᚁ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"r")),
        text::utf32_range(text::string_view(u8"ᚁ")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 s # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ᚁ")),
        text::utf32_range(text::string_view(u8"s")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"s")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ᚂ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"ᚂ")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ᚂ")),
        text::utf32_range(text::string_view(u8"d")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ᚃ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"d")),
        text::utf32_range(text::string_view(u8"ᚃ")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ᚙ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ᚃ")),
        text::utf32_range(text::string_view(u8"ᚙ")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ᚙ")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 t # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"t")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 ᚚ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"t")),
        text::utf32_range(text::string_view(u8"ᚚ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 u # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ᚚ")),
        text::utf32_range(text::string_view(u8"u")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"u")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ᚠ # U+16A0 first Runic
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"ᚠ")),
        table,
        text::collation_strength::primary),
        -1);

}

// suppressContractions
TEST(collation_and_tailoring, data_file_test_1002)
{
    auto const table = text::tailored_collation_table(
        "&z<ch<әж [suppressContractions [·cә]] ",
        "rules", error, warning);


    // <1 ch # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"ch")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 cH # ch was suppressed
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ch")),
        text::utf32_range(text::string_view(u8"cH")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 l # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"cH")),
        text::utf32_range(text::string_view(u8"l")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 l· # primary difference, not secondary, because l|· was suppressed
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"l")),
        text::utf32_range(text::string_view(u8"l·")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ә # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"l·")),
        text::utf32_range(text::string_view(u8"ә")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 ә\u0308 # secondary difference, not primary, because contractions for ә were suppressed
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ә")),
        text::utf32_range(text::string_view(u8"ә\u0308")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 әж # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ә\u0308")),
        text::utf32_range(text::string_view(u8"әж")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 әЖ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"әж")),
        text::utf32_range(text::string_view(u8"әЖ")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// Hangul & Jamo
TEST(collation_and_tailoring, data_file_test_1026)
{
    auto const table = text::tailored_collation_table(
        "&L=\\u1100 &V=\\u1161 &T=\\u11A8 &\\uAC01<<*\\u4E00-\\u4EFF ",
        "rules", error, warning);


    // <1 Lv # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"Lv")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 LV # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Lv")),
        text::utf32_range(text::string_view(u8"LV")),
        table,
        text::collation_strength::tertiary),
        -1);

    // =  \u1100\u1161 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"LV")),
        text::utf32_range(text::string_view(u8"\u1100\u1161")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \uAC00 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1100\u1161")),
        text::utf32_range(text::string_view(u8"\uAC00")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 LVt # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uAC00")),
        text::utf32_range(text::string_view(u8"LVt")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 LVT # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"LVt")),
        text::utf32_range(text::string_view(u8"LVT")),
        table,
        text::collation_strength::tertiary),
        -1);

    // =  \u1100\u1161\u11A8 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"LVT")),
        text::utf32_range(text::string_view(u8"\u1100\u1161\u11A8")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \uAC00\u11A8 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1100\u1161\u11A8")),
        text::utf32_range(text::string_view(u8"\uAC00\u11A8")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \uAC01 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uAC00\u11A8")),
        text::utf32_range(text::string_view(u8"\uAC01")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 LVT\u0308 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uAC01")),
        text::utf32_range(text::string_view(u8"LVT\u0308")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 \u4E00 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"LVT\u0308")),
        text::utf32_range(text::string_view(u8"\u4E00")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 \u4E01 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u4E00")),
        text::utf32_range(text::string_view(u8"\u4E01")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 \u4E80 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u4E01")),
        text::utf32_range(text::string_view(u8"\u4E80")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 \u4EFF # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u4E80")),
        text::utf32_range(text::string_view(u8"\u4EFF")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 LV\u0308T # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u4EFF")),
        text::utf32_range(text::string_view(u8"LV\u0308T")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 \uAC02 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"LV\u0308T")),
        text::utf32_range(text::string_view(u8"\uAC02")),
        table,
        text::collation_strength::primary),
        -1);

}

// adjust special reset positions according to previous rules, CLDR ticket 6070
TEST(collation_and_tailoring, data_file_test_1039)
{
    auto const table = text::default_collation_table();


    // <1 ? # some punctuation
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"?")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"?")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 $ # some symbol
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"$")),
        table,
        text::collation_strength::primary),
        -1);

}

// adjust special reset positions according to previous rules, CLDR ticket 6070
TEST(collation_and_tailoring, data_file_test_1049)
{
    auto const table = text::tailored_collation_table(
        "&[last primary ignorable]<<x<<<y &[last primary ignorable]<<z ",
        "rules", error, warning);


    // <2 \u0358 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u0358")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0358")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::secondary),
        -1);

    // <3 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 \x20 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"\x20")),
        table,
        text::collation_strength::primary),
        -1);

}

// adjust special reset positions according to previous rules, CLDR ticket 6070
TEST(collation_and_tailoring, data_file_test_1057)
{
    auto const table = text::tailored_collation_table(
        "&[last secondary ignorable]<<<x &[last secondary ignorable]<<<y ",
        "rules", error, warning);


    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 \u0358 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"\u0358")),
        table,
        text::collation_strength::secondary),
        -1);

}

// adjust special reset positions according to previous rules, CLDR ticket 6070
TEST(collation_and_tailoring, data_file_test_1079)
{
    auto const table = text::tailored_collation_table(
        "&[before 2][first variable]<<z &[before 2][first variable]<<y &[before 3][first variable]<<<x &[before 3][first variable]<<<w &[before 1][first variable]<v &[before 2][first variable]<<u &[before 3][first variable]<<<t &[before 2]\\uFDD1\\xA0<<s ",
        "rules", error, warning);


    // <2 \u0358 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u0358")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 s # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0358")),
        text::utf32_range(text::string_view(u8"s")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 \uFDD1\xA0 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"s")),
        text::utf32_range(text::string_view(u8"\uFDD1\xA0")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 t # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFDD1\xA0")),
        text::utf32_range(text::string_view(u8"t")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 u # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"t")),
        text::utf32_range(text::string_view(u8"u")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 v # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"u")),
        text::utf32_range(text::string_view(u8"v")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 w # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"v")),
        text::utf32_range(text::string_view(u8"w")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"w")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 \t # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"\t")),
        table,
        text::collation_strength::secondary),
        -1);

}

// adjust special reset positions according to previous rules, CLDR ticket 6070
TEST(collation_and_tailoring, data_file_test_1103)
{
    auto const table = text::tailored_collation_table(
        "&[before 2][first regular]<<z &[before 3][first regular]<<<y &[before 1][first regular]<x &[before 3][first regular]<<<w &[before 2]\\uFDD1\\u263A<<v &[before 3][first regular]<<<u &[before 1][first regular]<p &[before 3][first regular]<<<t &[last variable]<q ",
        "rules", error, warning);


    // <1 ? # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"?")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 p # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"?")),
        text::utf32_range(text::string_view(u8"p")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 q # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"p")),
        text::utf32_range(text::string_view(u8"q")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 t # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"q")),
        text::utf32_range(text::string_view(u8"t")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 u # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"t")),
        text::utf32_range(text::string_view(u8"u")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 v # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"u")),
        text::utf32_range(text::string_view(u8"v")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 w # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"v")),
        text::utf32_range(text::string_view(u8"w")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"w")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 $ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"$")),
        table,
        text::collation_strength::primary),
        -1);

}

// adjust special reset positions according to previous rules, CLDR ticket 6070
TEST(collation_and_tailoring, data_file_test_1117)
{
    auto const table = text::tailored_collation_table(
        "&[before 2][first regular]<<z &[before 3][first regular]<<<y &[before 1][first regular]<x &[before 3][first regular]<<<w &[before 2]\\uFDD1\\u263A<<v &[before 3][first regular]<<<u &[before 1][first regular]<p &[before 3][first regular]<<<t &[last variable]<q [alternate shifted]",
        "rules", error, warning);


    // =  ? # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"?")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  p # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"?")),
        text::utf32_range(text::string_view(u8"p")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  q # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"p")),
        text::utf32_range(text::string_view(u8"q")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 t # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"q")),
        text::utf32_range(text::string_view(u8"t")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 u # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"t")),
        text::utf32_range(text::string_view(u8"u")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 v # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"u")),
        text::utf32_range(text::string_view(u8"v")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 w # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"v")),
        text::utf32_range(text::string_view(u8"w")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"w")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 $ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"$")),
        table,
        text::collation_strength::primary),
        -1);

}

// adjust special reset positions according to previous rules, CLDR ticket 6070
TEST(collation_and_tailoring, data_file_test_1130)
{
    auto const table = text::tailored_collation_table(
        "&[before 2][first trailing]<<z &[before 1][first trailing]<y &[before 3][first trailing]<<<x ",
        "rules", error, warning);


    // <1 \u4E00 # first Han, first implicit
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u4E00")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 \uFDD1\uFDD0 # FractionalUCA.txt: unassigned first primary
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u4E00")),
        text::utf32_range(text::string_view(u8"\uFDD1\uFDD0")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFDD1\uFDD0")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 \uFFFD # The root collator currently maps U+FFFD to the first real trailing primary.
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"\uFFFD")),
        table,
        text::collation_strength::secondary),
        -1);

}

// adjust special reset positions according to previous rules, CLDR ticket 6070
TEST(collation_and_tailoring, data_file_test_1143)
{
    auto const table = text::tailored_collation_table(
        "&[before 2][first primary ignorable]<<z &[before 2][first primary ignorable]<<y &[before 3][first primary ignorable]<<<x &[before 3][first primary ignorable]<<<w ",
        "rules", error, warning);


    // =  \x01 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\x01")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 w # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\x01")),
        text::utf32_range(text::string_view(u8"w")),
        table,
        text::collation_strength::secondary),
        -1);

    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"w")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 \u0301 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"\u0301")),
        table,
        text::collation_strength::secondary),
        -1);

}

// adjust special reset positions according to previous rules, CLDR ticket 6070
TEST(collation_and_tailoring, data_file_test_1152)
{
    auto const table = text::tailored_collation_table(
        "&[before 3][first secondary ignorable]<<<y &[before 3][first secondary ignorable]<<<x ",
        "rules", error, warning);


    // =  \x01 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\x01")),
        table,
        text::collation_strength::quaternary),
        0);

    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\x01")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 \u0301 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"\u0301")),
        table,
        text::collation_strength::secondary),
        -1);

}

// canonical closure
TEST(collation_and_tailoring, data_file_test_1171)
{
    auto const table = text::tailored_collation_table(
        "&X=A &U=Â ",
        "rules", error, warning);


    // <1 U # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"U")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Â # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"U")),
        text::utf32_range(text::string_view(u8"Â")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  A\u0302 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Â")),
        text::utf32_range(text::string_view(u8"A\u0302")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 Ú # U with acute
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A\u0302")),
        text::utf32_range(text::string_view(u8"Ú")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  U\u0301 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ú")),
        text::utf32_range(text::string_view(u8"U\u0301")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  Ấ # A with circumflex & acute
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"U\u0301")),
        text::utf32_range(text::string_view(u8"Ấ")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  Â\u0301 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ấ")),
        text::utf32_range(text::string_view(u8"Â\u0301")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  A\u0302\u0301 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Â\u0301")),
        text::utf32_range(text::string_view(u8"A\u0302\u0301")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 X # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A\u0302\u0301")),
        text::utf32_range(text::string_view(u8"X")),
        table,
        text::collation_strength::primary),
        -1);

    // =  A # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"X")),
        text::utf32_range(text::string_view(u8"A")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 X\u030A # with ring above
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A")),
        text::utf32_range(text::string_view(u8"X\u030A")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  Å # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"X\u030A")),
        text::utf32_range(text::string_view(u8"Å")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  A\u030A # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Å")),
        text::utf32_range(text::string_view(u8"A\u030A")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \u212B # Angstrom sign
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A\u030A")),
        text::utf32_range(text::string_view(u8"\u212B")),
        table,
        text::collation_strength::quaternary),
        0);

}

// canonical closure
TEST(collation_and_tailoring, data_file_test_1182)
{
    auto const table = text::tailored_collation_table(
        "&x=\\u5140\\u55C0 ",
        "rules", error, warning);


    // <1 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::primary),
        -1);

    // =  \u5140\u55C0 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"\u5140\u55C0")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \u5140\uFA0D # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140\u55C0")),
        text::utf32_range(text::string_view(u8"\u5140\uFA0D")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \uFA0C\u55C0 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140\uFA0D")),
        text::utf32_range(text::string_view(u8"\uFA0C\u55C0")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \uFA0C\uFA0D # CJK compatibility characters
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFA0C\u55C0")),
        text::utf32_range(text::string_view(u8"\uFA0C\uFA0D")),
        table,
        text::collation_strength::quaternary),
        0);

    // <3 X # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFA0C\uFA0D")),
        text::utf32_range(text::string_view(u8"X")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// canonical closure
TEST(collation_and_tailoring, data_file_test_1193)
{
    auto const table = text::tailored_collation_table(
        "&x=ä|ŝ ",
        "rules", error, warning);


    // <1 äs # not tailored
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"äs")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 äx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"äs")),
        text::utf32_range(text::string_view(u8"äx")),
        table,
        text::collation_strength::primary),
        -1);

    // =  äŝ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"äx")),
        text::utf32_range(text::string_view(u8"äŝ")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  a\u0308s\u0302 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"äŝ")),
        text::utf32_range(text::string_view(u8"a\u0308s\u0302")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  a\u0308ŝ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0308s\u0302")),
        text::utf32_range(text::string_view(u8"a\u0308ŝ")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  äs\u0302 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0308ŝ")),
        text::utf32_range(text::string_view(u8"äs\u0302")),
        table,
        text::collation_strength::quaternary),
        0);

    // <3 äX # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"äs\u0302")),
        text::utf32_range(text::string_view(u8"äX")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// conjoining Jamo map to expansions
TEST(collation_and_tailoring, data_file_test_1205)
{
    auto const table = text::tailored_collation_table(
        "&gg=\\u1101 &nj=\\u11AC ",
        "rules", error, warning);


    // <1 gg\u1161nj # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"gg\u1161nj")),
        table,
        text::collation_strength::primary),
        -1);

    // =  \u1101\u1161\u11AC # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"gg\u1161nj")),
        text::utf32_range(text::string_view(u8"\u1101\u1161\u11AC")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \uAE4C\u11AC # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1101\u1161\u11AC")),
        text::utf32_range(text::string_view(u8"\uAE4C\u11AC")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \uAE51 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uAE4C\u11AC")),
        text::utf32_range(text::string_view(u8"\uAE51")),
        table,
        text::collation_strength::quaternary),
        0);

    // <3 gg\u1161nJ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uAE51")),
        text::utf32_range(text::string_view(u8"gg\u1161nJ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 \u1100\u1100 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"gg\u1161nJ")),
        text::utf32_range(text::string_view(u8"\u1100\u1100")),
        table,
        text::collation_strength::primary),
        -1);

}

// canonical tail closure, ICU ticket 5913
TEST(collation_and_tailoring, data_file_test_1217)
{
    auto const table = text::tailored_collation_table(
        "&a<â ",
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 â # tailored
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"â")),
        table,
        text::collation_strength::primary),
        -1);

    // =  a\u0302 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"â")),
        text::utf32_range(text::string_view(u8"a\u0302")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 a\u0323\u0302 # discontiguous contraction
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0302")),
        text::utf32_range(text::string_view(u8"a\u0323\u0302")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  ạ\u0302 # equivalent
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0323\u0302")),
        text::utf32_range(text::string_view(u8"ạ\u0302")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  ậ # equivalent
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ạ\u0302")),
        text::utf32_range(text::string_view(u8"ậ")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ậ")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

}

// canonical tail closure, ICU ticket 5913
TEST(collation_and_tailoring, data_file_test_1229)
{
    auto const table = text::tailored_collation_table(
        "&a<ạ ",
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ạ # tailored
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"ạ")),
        table,
        text::collation_strength::primary),
        -1);

    // =  a\u0323 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ạ")),
        text::utf32_range(text::string_view(u8"a\u0323")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 a\u0323\u0302 # contiguous contraction plus extra diacritic
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0323")),
        text::utf32_range(text::string_view(u8"a\u0323\u0302")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  ạ\u0302 # equivalent
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0323\u0302")),
        text::utf32_range(text::string_view(u8"ạ\u0302")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  ậ # equivalent
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ạ\u0302")),
        text::utf32_range(text::string_view(u8"ậ")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ậ")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

}

// canonical tail closure, ICU ticket 5913
TEST(collation_and_tailoring, data_file_test_1254)
{
    auto const table = text::tailored_collation_table(
        "&a<\\u5140|câ    &x=\\u5140|ca ",
        "rules", error, warning);


    // <1 \u5140a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u5140a")),
        table,
        text::collation_strength::primary),
        -1);

    // =  \uFA0Ca # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140a")),
        text::utf32_range(text::string_view(u8"\uFA0Ca")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 \u5140câ # tailored
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFA0Ca")),
        text::utf32_range(text::string_view(u8"\u5140câ")),
        table,
        text::collation_strength::primary),
        -1);

    // =  \uFA0Ccâ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140câ")),
        text::utf32_range(text::string_view(u8"\uFA0Ccâ")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \u5140ca\u0302 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFA0Ccâ")),
        text::utf32_range(text::string_view(u8"\u5140ca\u0302")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \uFA0Cca\u0302 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140ca\u0302")),
        text::utf32_range(text::string_view(u8"\uFA0Cca\u0302")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 \u5140ca\u0323\u0302 # discontiguous contraction
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFA0Cca\u0302")),
        text::utf32_range(text::string_view(u8"\u5140ca\u0323\u0302")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  \uFA0Cca\u0323\u0302 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140ca\u0323\u0302")),
        text::utf32_range(text::string_view(u8"\uFA0Cca\u0323\u0302")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \u5140cạ\u0302 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFA0Cca\u0323\u0302")),
        text::utf32_range(text::string_view(u8"\u5140cạ\u0302")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \uFA0Ccạ\u0302 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140cạ\u0302")),
        text::utf32_range(text::string_view(u8"\uFA0Ccạ\u0302")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \u5140cậ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFA0Ccạ\u0302")),
        text::utf32_range(text::string_view(u8"\u5140cậ")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \uFA0Ccậ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140cậ")),
        text::utf32_range(text::string_view(u8"\uFA0Ccậ")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 \u5140b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFA0Ccậ")),
        text::utf32_range(text::string_view(u8"\u5140b")),
        table,
        text::collation_strength::primary),
        -1);

    // =  \uFA0Cb # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140b")),
        text::utf32_range(text::string_view(u8"\uFA0Cb")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 \u5140x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFA0Cb")),
        text::utf32_range(text::string_view(u8"\u5140x")),
        table,
        text::collation_strength::primary),
        -1);

    // =  \u5140ca # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140x")),
        text::utf32_range(text::string_view(u8"\u5140ca")),
        table,
        text::collation_strength::quaternary),
        0);

}

// canonical tail closure, ICU ticket 5913
TEST(collation_and_tailoring, data_file_test_1272)
{
    auto const table = text::tailored_collation_table(
        "&a<\\u5140|câ ",
        "rules", error, warning);


    // <1 \u5140a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u5140a")),
        table,
        text::collation_strength::primary),
        -1);

    // =  \uFA0Ca # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140a")),
        text::utf32_range(text::string_view(u8"\uFA0Ca")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 \u5140câ # tailored
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFA0Ca")),
        text::utf32_range(text::string_view(u8"\u5140câ")),
        table,
        text::collation_strength::primary),
        -1);

    // =  \uFA0Ccâ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140câ")),
        text::utf32_range(text::string_view(u8"\uFA0Ccâ")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \u5140ca\u0302 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFA0Ccâ")),
        text::utf32_range(text::string_view(u8"\u5140ca\u0302")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \uFA0Cca\u0302 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140ca\u0302")),
        text::utf32_range(text::string_view(u8"\uFA0Cca\u0302")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 \u5140b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFA0Cca\u0302")),
        text::utf32_range(text::string_view(u8"\u5140b")),
        table,
        text::collation_strength::primary),
        -1);

    // =  \uFA0Cb # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140b")),
        text::utf32_range(text::string_view(u8"\uFA0Cb")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 \u5140ca\u0323\u0302 # no discontiguous contraction
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFA0Cb")),
        text::utf32_range(text::string_view(u8"\u5140ca\u0323\u0302")),
        table,
        text::collation_strength::primary),
        -1);

    // =  \uFA0Cca\u0323\u0302 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140ca\u0323\u0302")),
        text::utf32_range(text::string_view(u8"\uFA0Cca\u0323\u0302")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \u5140cạ\u0302 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFA0Cca\u0323\u0302")),
        text::utf32_range(text::string_view(u8"\u5140cạ\u0302")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \uFA0Ccạ\u0302 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140cạ\u0302")),
        text::utf32_range(text::string_view(u8"\uFA0Ccạ\u0302")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \u5140cậ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFA0Ccạ\u0302")),
        text::utf32_range(text::string_view(u8"\u5140cậ")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \uFA0Ccậ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140cậ")),
        text::utf32_range(text::string_view(u8"\uFA0Ccậ")),
        table,
        text::collation_strength::quaternary),
        0);

}

// canonical tail closure, ICU ticket 5913
TEST(collation_and_tailoring, data_file_test_1286)
{
    auto const table = text::tailored_collation_table(
        "&a<cạ ",
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 cạ # tailored
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"cạ")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ca\u0323 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"cạ")),
        text::utf32_range(text::string_view(u8"ca\u0323")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 ca\u0323\u0302 # contiguous contraction plus extra diacritic
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ca\u0323")),
        text::utf32_range(text::string_view(u8"ca\u0323\u0302")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  cạ\u0302 # equivalent
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ca\u0323\u0302")),
        text::utf32_range(text::string_view(u8"cạ\u0302")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  cậ # equivalent
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"cạ\u0302")),
        text::utf32_range(text::string_view(u8"cậ")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"cậ")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

}

// canonical tail closure, ICU ticket 5913
TEST(collation_and_tailoring, data_file_test_1307)
{
    auto const table = text::tailored_collation_table(
        "&δ=αῳ    &ε=αω ",
        "rules", error, warning);


    // <1 δ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"δ")),
        table,
        text::collation_strength::primary),
        -1);

    // =  αῳ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"δ")),
        text::utf32_range(text::string_view(u8"αῳ")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  αω\u0345 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αῳ")),
        text::utf32_range(text::string_view(u8"αω\u0345")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 αω\u0313\u0300\u0345 # discontiguous contraction
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αω\u0345")),
        text::utf32_range(text::string_view(u8"αω\u0313\u0300\u0345")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  αὠ\u0300\u0345 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αω\u0313\u0300\u0345")),
        text::utf32_range(text::string_view(u8"αὠ\u0300\u0345")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  αὢ\u0345 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αὠ\u0300\u0345")),
        text::utf32_range(text::string_view(u8"αὢ\u0345")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  αᾢ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αὢ\u0345")),
        text::utf32_range(text::string_view(u8"αᾢ")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 αω\u0300\u0313\u0345 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αᾢ")),
        text::utf32_range(text::string_view(u8"αω\u0300\u0313\u0345")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  αὼ\u0313\u0345 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αω\u0300\u0313\u0345")),
        text::utf32_range(text::string_view(u8"αὼ\u0313\u0345")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  αῲ\u0313 # not FCD
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αὼ\u0313\u0345")),
        text::utf32_range(text::string_view(u8"αῲ\u0313")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 ε # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αῲ\u0313")),
        text::utf32_range(text::string_view(u8"ε")),
        table,
        text::collation_strength::primary),
        -1);

    // =  αω # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ε")),
        text::utf32_range(text::string_view(u8"αω")),
        table,
        text::collation_strength::quaternary),
        0);

}

// canonical tail closure, ICU ticket 5913
TEST(collation_and_tailoring, data_file_test_1324)
{
    auto const table = text::tailored_collation_table(
        "&δ=αῳ ",
        "rules", error, warning);


    // <1 αω\u0313\u0300\u0345 # no discontiguous contraction
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"αω\u0313\u0300\u0345")),
        table,
        text::collation_strength::primary),
        -1);

    // =  αὠ\u0300\u0345 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αω\u0313\u0300\u0345")),
        text::utf32_range(text::string_view(u8"αὠ\u0300\u0345")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  αὢ\u0345 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αὠ\u0300\u0345")),
        text::utf32_range(text::string_view(u8"αὢ\u0345")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  αᾢ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αὢ\u0345")),
        text::utf32_range(text::string_view(u8"αᾢ")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 αω\u0300\u0313\u0345 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αᾢ")),
        text::utf32_range(text::string_view(u8"αω\u0300\u0313\u0345")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  αὼ\u0313\u0345 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αω\u0300\u0313\u0345")),
        text::utf32_range(text::string_view(u8"αὼ\u0313\u0345")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  αῲ\u0313 # not FCD
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αὼ\u0313\u0345")),
        text::utf32_range(text::string_view(u8"αῲ\u0313")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 δ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αῲ\u0313")),
        text::utf32_range(text::string_view(u8"δ")),
        table,
        text::collation_strength::primary),
        -1);

    // =  αῳ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"δ")),
        text::utf32_range(text::string_view(u8"αῳ")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  αω\u0345 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αῳ")),
        text::utf32_range(text::string_view(u8"αω\u0345")),
        table,
        text::collation_strength::quaternary),
        0);

}

// canonical tail closure, ICU ticket 5913
TEST(collation_and_tailoring, data_file_test_1337)
{
    auto const table = text::tailored_collation_table(
        "&δ=αὼ\\u0315 ",
        "rules", error, warning);


    // <1 αω\u0313\u0300\u0315 # Not tailored: The grave accent blocks the comma above.
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"αω\u0313\u0300\u0315")),
        table,
        text::collation_strength::primary),
        -1);

    // =  αὠ\u0300\u0315 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αω\u0313\u0300\u0315")),
        text::utf32_range(text::string_view(u8"αὠ\u0300\u0315")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  αὢ\u0315 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αὠ\u0300\u0315")),
        text::utf32_range(text::string_view(u8"αὢ\u0315")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 δ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αὢ\u0315")),
        text::utf32_range(text::string_view(u8"δ")),
        table,
        text::collation_strength::primary),
        -1);

    // =  αὼ\u0315 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"δ")),
        text::utf32_range(text::string_view(u8"αὼ\u0315")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  αω\u0300\u0315 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αὼ\u0315")),
        text::utf32_range(text::string_view(u8"αω\u0300\u0315")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 αω\u0300\u0315\u0345 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αω\u0300\u0315")),
        text::utf32_range(text::string_view(u8"αω\u0300\u0315\u0345")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  αὼ\u0315\u0345 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αω\u0300\u0315\u0345")),
        text::utf32_range(text::string_view(u8"αὼ\u0315\u0345")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  αῲ\u0315 # not FCD
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αὼ\u0315\u0345")),
        text::utf32_range(text::string_view(u8"αῲ\u0315")),
        table,
        text::collation_strength::quaternary),
        0);

}

// danish a+a vs. a-umlaut, ICU ticket 9319
TEST(collation_and_tailoring, data_file_test_1346)
{
    auto const table = text::tailored_collation_table(
        "&z<aa ",
        "rules", error, warning);


    // <1 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 aa # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"aa")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 aa\u0308 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aa")),
        text::utf32_range(text::string_view(u8"aa\u0308")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  aä # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aa\u0308")),
        text::utf32_range(text::string_view(u8"aä")),
        table,
        text::collation_strength::quaternary),
        0);

}

// Jamo L with and in prefix
TEST(collation_and_tailoring, data_file_test_1372)
{
    auto const table = text::tailored_collation_table(
        " &[last primary ignorable]<<\\u1100|\\u1100=\\u1101|\\u1100  &\\u1100\\u1100=\\u1101      ",
        "rules", error, warning);


    // <1 \u1100 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u1100")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 \u1100\u1100 # only one primary from a sequence of G lead consonants
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1100")),
        text::utf32_range(text::string_view(u8"\u1100\u1100")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  \u1101 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1100\u1100")),
        text::utf32_range(text::string_view(u8"\u1101")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 \u1100\u1100\u1100 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1101")),
        text::utf32_range(text::string_view(u8"\u1100\u1100\u1100")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  \u1101\u1100 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1100\u1100\u1100")),
        text::utf32_range(text::string_view(u8"\u1101\u1100")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 \u1100\u1161 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1101\u1100")),
        text::utf32_range(text::string_view(u8"\u1100\u1161")),
        table,
        text::collation_strength::primary),
        -1);

    // =  \uAC00 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1100\u1161")),
        text::utf32_range(text::string_view(u8"\uAC00")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 \u1100\u1100\u1161 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uAC00")),
        text::utf32_range(text::string_view(u8"\u1100\u1100\u1161")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  \u1100\uAC00 # prefix match from the L of the LV syllable
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1100\u1100\u1161")),
        text::utf32_range(text::string_view(u8"\u1100\uAC00")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \u1101\u1161 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1100\uAC00")),
        text::utf32_range(text::string_view(u8"\u1101\u1161")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \uAE4C # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1101\u1161")),
        text::utf32_range(text::string_view(u8"\uAE4C")),
        table,
        text::collation_strength::quaternary),
        0);

}

// proposed Korean "searchjl" tailoring with prefixes, CLDR ticket 6546
TEST(collation_and_tailoring, data_file_test_1408)
{
    auto const table = text::tailored_collation_table(
        "  &\\u0332 <<\\u1161<<\\u1162      &\\u0313 =\\u1100|\\u1100 =\\u1103|\\u1103 =\\u1107|\\u1107 =\\u1109|\\u1109 =\\u110C|\\u110C   &\\u1100\\u0313=\\u1101<<<\\u3132 &\\u1103\\u0313=\\u1104<<<\\u3138 &\\u1107\\u0313=\\u1108<<<\\u3143 &\\u1109\\u0313=\\u110A<<<\\u3146 &\\u110C\\u0313=\\u110D<<<\\u3149  ",
        "rules", error, warning);


    // <1 \u1100\u1161 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u1100\u1161")),
        table,
        text::collation_strength::primary),
        -1);

    // =  \uAC00 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1100\u1161")),
        text::utf32_range(text::string_view(u8"\uAC00")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 \u1100\u1162 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uAC00")),
        text::utf32_range(text::string_view(u8"\u1100\u1162")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  \uAC1C # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1100\u1162")),
        text::utf32_range(text::string_view(u8"\uAC1C")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 \u1100\u1100\u1161 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uAC1C")),
        text::utf32_range(text::string_view(u8"\u1100\u1100\u1161")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  \u1100\uAC00 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1100\u1100\u1161")),
        text::utf32_range(text::string_view(u8"\u1100\uAC00")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \u1101\u1161 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1100\uAC00")),
        text::utf32_range(text::string_view(u8"\u1101\u1161")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \uAE4C # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1101\u1161")),
        text::utf32_range(text::string_view(u8"\uAE4C")),
        table,
        text::collation_strength::quaternary),
        0);

    // <3 \u3132\u1161 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uAE4C")),
        text::utf32_range(text::string_view(u8"\u3132\u1161")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// Hangul syllables in prefix & in the interior of a contraction
TEST(collation_and_tailoring, data_file_test_1418)
{
    auto const table = text::tailored_collation_table(
        "&x=\\u1100\\u1161|a\\u1102\\u1162z ",
        "rules", error, warning);


    // <1 \u1100\u1161x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u1100\u1161x")),
        table,
        text::collation_strength::primary),
        -1);

    // =  \u1100\u1161a\u1102\u1162z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1100\u1161x")),
        text::utf32_range(text::string_view(u8"\u1100\u1161a\u1102\u1162z")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \u1100\u1161a\uB0B4z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1100\u1161a\u1102\u1162z")),
        text::utf32_range(text::string_view(u8"\u1100\u1161a\uB0B4z")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \uAC00a\u1102\u1162z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1100\u1161a\uB0B4z")),
        text::utf32_range(text::string_view(u8"\uAC00a\u1102\u1162z")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \uAC00a\uB0B4z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uAC00a\u1102\u1162z")),
        text::utf32_range(text::string_view(u8"\uAC00a\uB0B4z")),
        table,
        text::collation_strength::quaternary),
        0);

}

// simple locale data test
TEST(collation_and_tailoring, data_file_test_1435)
{
    auto const table = text::default_collation_table();


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 ä # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"ä")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 ae # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ä")),
        text::utf32_range(text::string_view(u8"ae")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 æ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ae")),
        text::utf32_range(text::string_view(u8"æ")),
        table,
        text::collation_strength::secondary),
        -1);

}

// simple locale data test
TEST(collation_and_tailoring, data_file_test_1444)
{
    auto const table = text::default_collation_table();


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ae # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"ae")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 ä # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ae")),
        text::utf32_range(text::string_view(u8"ä")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 æ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ä")),
        text::utf32_range(text::string_view(u8"æ")),
        table,
        text::collation_strength::secondary),
        -1);

}

// DataDrivenCollationTest/TestMorePinyin
TEST(collation_and_tailoring, data_file_test_1462)
{
    auto const table = text::tailored_collation_table(
        "[strength 1]",
        "rules", error, warning);


    // < lā # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"lā")),
        table,
        text::collation_strength::tertiary),
        -1);

    // = lĀ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"lā")),
        text::utf32_range(text::string_view(u8"lĀ")),
        table,
        text::collation_strength::quaternary),
        0);

    // = Lā # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"lĀ")),
        text::utf32_range(text::string_view(u8"Lā")),
        table,
        text::collation_strength::quaternary),
        0);

    // = LĀ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Lā")),
        text::utf32_range(text::string_view(u8"LĀ")),
        table,
        text::collation_strength::quaternary),
        0);

    // < lān # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"LĀ")),
        text::utf32_range(text::string_view(u8"lān")),
        table,
        text::collation_strength::tertiary),
        -1);

    // = lĀn # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"lān")),
        text::utf32_range(text::string_view(u8"lĀn")),
        table,
        text::collation_strength::quaternary),
        0);

    // < lē # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"lĀn")),
        text::utf32_range(text::string_view(u8"lē")),
        table,
        text::collation_strength::tertiary),
        -1);

    // = lĒ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"lē")),
        text::utf32_range(text::string_view(u8"lĒ")),
        table,
        text::collation_strength::quaternary),
        0);

    // = Lē # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"lĒ")),
        text::utf32_range(text::string_view(u8"Lē")),
        table,
        text::collation_strength::quaternary),
        0);

    // = LĒ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Lē")),
        text::utf32_range(text::string_view(u8"LĒ")),
        table,
        text::collation_strength::quaternary),
        0);

    // < lēn # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"LĒ")),
        text::utf32_range(text::string_view(u8"lēn")),
        table,
        text::collation_strength::tertiary),
        -1);

    // = lĒn # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"lēn")),
        text::utf32_range(text::string_view(u8"lĒn")),
        table,
        text::collation_strength::quaternary),
        0);

}

// DataDrivenCollationTest/TestLithuanian
TEST(collation_and_tailoring, data_file_test_1477)
{
    auto const table = text::default_collation_table();


    // < cz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"cz")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < č # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"cz")),
        text::utf32_range(text::string_view(u8"č")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"č")),
        text::utf32_range(text::string_view(u8"d")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < iz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"d")),
        text::utf32_range(text::string_view(u8"iz")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < j # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"iz")),
        text::utf32_range(text::string_view(u8"j")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < sz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"j")),
        text::utf32_range(text::string_view(u8"sz")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < š # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"sz")),
        text::utf32_range(text::string_view(u8"š")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < t # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"š")),
        text::utf32_range(text::string_view(u8"t")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < zz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"t")),
        text::utf32_range(text::string_view(u8"zz")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < ž # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"zz")),
        text::utf32_range(text::string_view(u8"ž")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// DataDrivenCollationTest/TestLatvian
TEST(collation_and_tailoring, data_file_test_1507)
{
    auto const table = text::default_collation_table();


    // < cz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"cz")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < č # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"cz")),
        text::utf32_range(text::string_view(u8"č")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"č")),
        text::utf32_range(text::string_view(u8"d")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < gz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"d")),
        text::utf32_range(text::string_view(u8"gz")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < ģ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"gz")),
        text::utf32_range(text::string_view(u8"ģ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < h # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ģ")),
        text::utf32_range(text::string_view(u8"h")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < iz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"h")),
        text::utf32_range(text::string_view(u8"iz")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < j # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"iz")),
        text::utf32_range(text::string_view(u8"j")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < kz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"j")),
        text::utf32_range(text::string_view(u8"kz")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < ķ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"kz")),
        text::utf32_range(text::string_view(u8"ķ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < l # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ķ")),
        text::utf32_range(text::string_view(u8"l")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < lz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"l")),
        text::utf32_range(text::string_view(u8"lz")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < ļ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"lz")),
        text::utf32_range(text::string_view(u8"ļ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < m # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ļ")),
        text::utf32_range(text::string_view(u8"m")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < nz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"m")),
        text::utf32_range(text::string_view(u8"nz")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < ņ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"nz")),
        text::utf32_range(text::string_view(u8"ņ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < o # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ņ")),
        text::utf32_range(text::string_view(u8"o")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < rz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"o")),
        text::utf32_range(text::string_view(u8"rz")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < ŗ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"rz")),
        text::utf32_range(text::string_view(u8"ŗ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < s # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ŗ")),
        text::utf32_range(text::string_view(u8"s")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < sz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"s")),
        text::utf32_range(text::string_view(u8"sz")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < š # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"sz")),
        text::utf32_range(text::string_view(u8"š")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < t # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"š")),
        text::utf32_range(text::string_view(u8"t")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < zz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"t")),
        text::utf32_range(text::string_view(u8"zz")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < ž # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"zz")),
        text::utf32_range(text::string_view(u8"ž")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// DataDrivenCollationTest/TestEstonian
TEST(collation_and_tailoring, data_file_test_1530)
{
    auto const table = text::default_collation_table();


    // < sy # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"sy")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < š # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"sy")),
        text::utf32_range(text::string_view(u8"š")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < šy # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"š")),
        text::utf32_range(text::string_view(u8"šy")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"šy")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < zy # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"zy")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < ž # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"zy")),
        text::utf32_range(text::string_view(u8"ž")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < v # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ž")),
        text::utf32_range(text::string_view(u8"v")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < va # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"v")),
        text::utf32_range(text::string_view(u8"va")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < w # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"va")),
        text::utf32_range(text::string_view(u8"w")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < õ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"w")),
        text::utf32_range(text::string_view(u8"õ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < õy # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"õ")),
        text::utf32_range(text::string_view(u8"õy")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < ä # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"õy")),
        text::utf32_range(text::string_view(u8"ä")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < äy # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ä")),
        text::utf32_range(text::string_view(u8"äy")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < ö # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"äy")),
        text::utf32_range(text::string_view(u8"ö")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < öy # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ö")),
        text::utf32_range(text::string_view(u8"öy")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < ü # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"öy")),
        text::utf32_range(text::string_view(u8"ü")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < üy # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ü")),
        text::utf32_range(text::string_view(u8"üy")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"üy")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// DataDrivenCollationTest/TestAlbanian
TEST(collation_and_tailoring, data_file_test_1567)
{
    auto const table = text::default_collation_table();


    // < cz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"cz")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < ç # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"cz")),
        text::utf32_range(text::string_view(u8"ç")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ç")),
        text::utf32_range(text::string_view(u8"d")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < dz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"d")),
        text::utf32_range(text::string_view(u8"dz")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < dh # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"dz")),
        text::utf32_range(text::string_view(u8"dh")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < e # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"dh")),
        text::utf32_range(text::string_view(u8"e")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < ez # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"e")),
        text::utf32_range(text::string_view(u8"ez")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < ë # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ez")),
        text::utf32_range(text::string_view(u8"ë")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < f # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ë")),
        text::utf32_range(text::string_view(u8"f")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < gz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"f")),
        text::utf32_range(text::string_view(u8"gz")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < gj # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"gz")),
        text::utf32_range(text::string_view(u8"gj")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < h # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"gj")),
        text::utf32_range(text::string_view(u8"h")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < lz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"h")),
        text::utf32_range(text::string_view(u8"lz")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < ll # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"lz")),
        text::utf32_range(text::string_view(u8"ll")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < m # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ll")),
        text::utf32_range(text::string_view(u8"m")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < nz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"m")),
        text::utf32_range(text::string_view(u8"nz")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < nj # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"nz")),
        text::utf32_range(text::string_view(u8"nj")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < o # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"nj")),
        text::utf32_range(text::string_view(u8"o")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < rz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"o")),
        text::utf32_range(text::string_view(u8"rz")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < rr # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"rz")),
        text::utf32_range(text::string_view(u8"rr")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < s # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"rr")),
        text::utf32_range(text::string_view(u8"s")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < sz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"s")),
        text::utf32_range(text::string_view(u8"sz")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < sh # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"sz")),
        text::utf32_range(text::string_view(u8"sh")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < t # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"sh")),
        text::utf32_range(text::string_view(u8"t")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < tz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"t")),
        text::utf32_range(text::string_view(u8"tz")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < th # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"tz")),
        text::utf32_range(text::string_view(u8"th")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < u # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"th")),
        text::utf32_range(text::string_view(u8"u")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < xz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"u")),
        text::utf32_range(text::string_view(u8"xz")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < xh # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xz")),
        text::utf32_range(text::string_view(u8"xh")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xh")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < zz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"zz")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < zh # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"zz")),
        text::utf32_range(text::string_view(u8"zh")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// DataDrivenCollationTest/TestSimplifiedChineseOrder
TEST(collation_and_tailoring, data_file_test_1575)
{
    auto const table = text::default_collation_table();


    // < \u5F20 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u5F20")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < \u5F20\u4E00\u8E3F # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5F20")),
        text::utf32_range(text::string_view(u8"\u5F20\u4E00\u8E3F")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// DataDrivenCollationTest/TestTibetanNormalizedIterativeCrash
TEST(collation_and_tailoring, data_file_test_1582)
{
    auto const table = text::default_collation_table();


    // < \u0f71\u0f72\u0f80\u0f71\u0f72 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u0f71\u0f72\u0f80\u0f71\u0f72")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < \u0f80 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0f71\u0f72\u0f80\u0f71\u0f72")),
        text::utf32_range(text::string_view(u8"\u0f80")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// DataDrivenCollationTest/TestThaiPartialSortKeyProblems
TEST(collation_and_tailoring, data_file_test_1588)
{
    auto const table = text::default_collation_table();


    // < \u0E01\u0E01\u0E38\u0E18\u0E20\u0E31\u0E13\u0E11\u0E4C # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u0E01\u0E01\u0E38\u0E18\u0E20\u0E31\u0E13\u0E11\u0E4C")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < \u0E01\u0E01\u0E38\u0E2A\u0E31\u0E19\u0E42\u0E18 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0E01\u0E01\u0E38\u0E18\u0E20\u0E31\u0E13\u0E11\u0E4C")),
        text::utf32_range(text::string_view(u8"\u0E01\u0E01\u0E38\u0E2A\u0E31\u0E19\u0E42\u0E18")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// DataDrivenCollationTest/TestThaiPartialSortKeyProblems
TEST(collation_and_tailoring, data_file_test_1591)
{
    auto const table = text::default_collation_table();


    // < \u0E01\u0E07\u0E01\u0E32\u0E23 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u0E01\u0E07\u0E01\u0E32\u0E23")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < \u0E01\u0E07\u0E42\u0E01\u0E49 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0E01\u0E07\u0E01\u0E32\u0E23")),
        text::utf32_range(text::string_view(u8"\u0E01\u0E07\u0E42\u0E01\u0E49")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// DataDrivenCollationTest/TestThaiPartialSortKeyProblems
TEST(collation_and_tailoring, data_file_test_1594)
{
    auto const table = text::default_collation_table();


    // < \u0E01\u0E23\u0E19\u0E17\u0E32 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u0E01\u0E23\u0E19\u0E17\u0E32")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < \u0E01\u0E23\u0E19\u0E19\u0E40\u0E0A\u0E49\u0E32 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0E01\u0E23\u0E19\u0E17\u0E32")),
        text::utf32_range(text::string_view(u8"\u0E01\u0E23\u0E19\u0E19\u0E40\u0E0A\u0E49\u0E32")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// DataDrivenCollationTest/TestThaiPartialSortKeyProblems
TEST(collation_and_tailoring, data_file_test_1597)
{
    auto const table = text::default_collation_table();


    // < \u0E01\u0E23\u0E30\u0E40\u0E08\u0E35\u0E22\u0E27 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u0E01\u0E23\u0E30\u0E40\u0E08\u0E35\u0E22\u0E27")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < \u0E01\u0E23\u0E30\u0E40\u0E08\u0E35\u0E4A\u0E22\u0E27 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0E01\u0E23\u0E30\u0E40\u0E08\u0E35\u0E22\u0E27")),
        text::utf32_range(text::string_view(u8"\u0E01\u0E23\u0E30\u0E40\u0E08\u0E35\u0E4A\u0E22\u0E27")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// DataDrivenCollationTest/TestThaiPartialSortKeyProblems
TEST(collation_and_tailoring, data_file_test_1601)
{
    auto const table = text::default_collation_table();


    // < \u0E01\u0E23\u0E23\u0E40\u0E0A\u0E2D # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u0E01\u0E23\u0E23\u0E40\u0E0A\u0E2D")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < \u0E01\u0E23\u0E23\u0E40\u0E0A\u0E49\u0E32 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0E01\u0E23\u0E23\u0E40\u0E0A\u0E2D")),
        text::utf32_range(text::string_view(u8"\u0E01\u0E23\u0E23\u0E40\u0E0A\u0E49\u0E32")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// DataDrivenCollationTest/TestJavaStyleRule
TEST(collation_and_tailoring, data_file_test_1614)
{
    auto const table = text::tailored_collation_table(
        "&\\u0001=equal<<<z<<x<<<w &[first tertiary ignorable]=a &[first primary ignorable]=b ",
        "rules", error, warning);


    // = a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::quaternary),
        0);

    // = equal # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"equal")),
        table,
        text::collation_strength::quaternary),
        0);

    // < z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"equal")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

    // = b # x had become the new first primary ignorable
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::quaternary),
        0);

    // < w # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"w")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// DataDrivenCollationTest/TestShiftedIgnorable
TEST(collation_and_tailoring, data_file_test_1638)
{
    auto const table = text::tailored_collation_table(
        "[alternate shifted][strength 4]",
        "rules", error, warning);


    // < a\u0020b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a\u0020b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // = a\u0020\u0300b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0020b")),
        text::utf32_range(text::string_view(u8"a\u0020\u0300b")),
        table,
        text::collation_strength::quaternary),
        0);

    // = a\u0020\u0301b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0020\u0300b")),
        text::utf32_range(text::string_view(u8"a\u0020\u0301b")),
        table,
        text::collation_strength::quaternary),
        0);

    // < a_b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0020\u0301b")),
        text::utf32_range(text::string_view(u8"a_b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // = a_\u0300b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a_b")),
        text::utf32_range(text::string_view(u8"a_\u0300b")),
        table,
        text::collation_strength::quaternary),
        0);

    // = a_\u0301b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a_\u0300b")),
        text::utf32_range(text::string_view(u8"a_\u0301b")),
        table,
        text::collation_strength::quaternary),
        0);

    // < A\u0020b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a_\u0301b")),
        text::utf32_range(text::string_view(u8"A\u0020b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // = A\u0020\u0300b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A\u0020b")),
        text::utf32_range(text::string_view(u8"A\u0020\u0300b")),
        table,
        text::collation_strength::quaternary),
        0);

    // = A\u0020\u0301b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A\u0020\u0300b")),
        text::utf32_range(text::string_view(u8"A\u0020\u0301b")),
        table,
        text::collation_strength::quaternary),
        0);

    // < A_b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A\u0020\u0301b")),
        text::utf32_range(text::string_view(u8"A_b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // = A_\u0300b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A_b")),
        text::utf32_range(text::string_view(u8"A_\u0300b")),
        table,
        text::collation_strength::quaternary),
        0);

    // = A_\u0301b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A_\u0300b")),
        text::utf32_range(text::string_view(u8"A_\u0301b")),
        table,
        text::collation_strength::quaternary),
        0);

    // < a\u0301b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A_\u0301b")),
        text::utf32_range(text::string_view(u8"a\u0301b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < A\u0301b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0301b")),
        text::utf32_range(text::string_view(u8"A\u0301b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < a\u0300b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A\u0301b")),
        text::utf32_range(text::string_view(u8"a\u0300b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < A\u0300b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0300b")),
        text::utf32_range(text::string_view(u8"A\u0300b")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// DataDrivenCollationTest/TestNShiftedIgnorable
TEST(collation_and_tailoring, data_file_test_1662)
{
    auto const table = text::tailored_collation_table(
        "[alternate non-ignorable][strength 3]",
        "rules", error, warning);


    // < a\u0020b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a\u0020b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < A\u0020b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0020b")),
        text::utf32_range(text::string_view(u8"A\u0020b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < a\u0020\u0301b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A\u0020b")),
        text::utf32_range(text::string_view(u8"a\u0020\u0301b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < A\u0020\u0301b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0020\u0301b")),
        text::utf32_range(text::string_view(u8"A\u0020\u0301b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < a\u0020\u0300b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A\u0020\u0301b")),
        text::utf32_range(text::string_view(u8"a\u0020\u0300b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < A\u0020\u0300b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0020\u0300b")),
        text::utf32_range(text::string_view(u8"A\u0020\u0300b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < a_b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A\u0020\u0300b")),
        text::utf32_range(text::string_view(u8"a_b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < A_b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a_b")),
        text::utf32_range(text::string_view(u8"A_b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < a_\u0301b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A_b")),
        text::utf32_range(text::string_view(u8"a_\u0301b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < A_\u0301b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a_\u0301b")),
        text::utf32_range(text::string_view(u8"A_\u0301b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < a_\u0300b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A_\u0301b")),
        text::utf32_range(text::string_view(u8"a_\u0300b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < A_\u0300b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a_\u0300b")),
        text::utf32_range(text::string_view(u8"A_\u0300b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < a\u0301b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A_\u0300b")),
        text::utf32_range(text::string_view(u8"a\u0301b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < A\u0301b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0301b")),
        text::utf32_range(text::string_view(u8"A\u0301b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < a\u0300b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A\u0301b")),
        text::utf32_range(text::string_view(u8"a\u0300b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < A\u0300b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0300b")),
        text::utf32_range(text::string_view(u8"A\u0300b")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// DataDrivenCollationTest/TestSafeSurrogates
TEST(collation_and_tailoring, data_file_test_1672)
{
    auto const table = text::tailored_collation_table(
        "&a < x\\ud800\\udc00b ",
        "rules", error, warning);


    // < a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// DataDrivenCollationTest/da_TestPrimary
TEST(collation_and_tailoring, data_file_test_1679)
{
    auto const table = text::tailored_collation_table(
        "[strength 1]",
        "rules", error, warning);


    // < Lvi # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"Lvi")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < Lwi # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Lvi")),
        text::utf32_range(text::string_view(u8"Lwi")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// DataDrivenCollationTest/da_TestPrimary
TEST(collation_and_tailoring, data_file_test_1682)
{
    auto const table = text::tailored_collation_table(
        "[strength 1]",
        "rules", error, warning);


    // < L\u00e4vi # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"L\u00e4vi")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < L\u00f6wi # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"L\u00e4vi")),
        text::utf32_range(text::string_view(u8"L\u00f6wi")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// DataDrivenCollationTest/da_TestPrimary
TEST(collation_and_tailoring, data_file_test_1686)
{
    auto const table = text::tailored_collation_table(
        "[strength 1]",
        "rules", error, warning);


    // < L\u00fcbeck # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"L\u00fcbeck")),
        table,
        text::collation_strength::tertiary),
        -1);

    // = Lybeck # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"L\u00fcbeck")),
        text::utf32_range(text::string_view(u8"Lybeck")),
        table,
        text::collation_strength::quaternary),
        0);

}

// DataDrivenCollationTest/da_TestTertiary
TEST(collation_and_tailoring, data_file_test_1693)
{
    auto const table = text::tailored_collation_table(
        "[strength 3]",
        "rules", error, warning);


    // < Luc # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"Luc")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < luck # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Luc")),
        text::utf32_range(text::string_view(u8"luck")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// DataDrivenCollationTest/da_TestTertiary
TEST(collation_and_tailoring, data_file_test_1696)
{
    auto const table = text::tailored_collation_table(
        "[strength 3]",
        "rules", error, warning);


    // < luck # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"luck")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < L\u00fcbeck # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"luck")),
        text::utf32_range(text::string_view(u8"L\u00fcbeck")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// DataDrivenCollationTest/da_TestTertiary
TEST(collation_and_tailoring, data_file_test_1699)
{
    auto const table = text::tailored_collation_table(
        "[strength 3]",
        "rules", error, warning);


    // < lybeck # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"lybeck")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < L\u00fcbeck # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"lybeck")),
        text::utf32_range(text::string_view(u8"L\u00fcbeck")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// DataDrivenCollationTest/da_TestTertiary
TEST(collation_and_tailoring, data_file_test_1702)
{
    auto const table = text::tailored_collation_table(
        "[strength 3]",
        "rules", error, warning);


    // < L\u00e4vi # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"L\u00e4vi")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < L\u00f6we # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"L\u00e4vi")),
        text::utf32_range(text::string_view(u8"L\u00f6we")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// DataDrivenCollationTest/da_TestTertiary
TEST(collation_and_tailoring, data_file_test_1706)
{
    auto const table = text::tailored_collation_table(
        "[strength 3]",
        "rules", error, warning);


    // < L\u00f6ww # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"L\u00f6ww")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < mast # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"L\u00f6ww")),
        text::utf32_range(text::string_view(u8"mast")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// DataDrivenCollationTest/da_TestTertiary
TEST(collation_and_tailoring, data_file_test_1762)
{
    auto const table = text::tailored_collation_table(
        "[strength 3]",
        "rules", error, warning);


    // < A/S # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"A/S")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < ANDRE # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A/S")),
        text::utf32_range(text::string_view(u8"ANDRE")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < ANDR\u00c9 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ANDRE")),
        text::utf32_range(text::string_view(u8"ANDR\u00c9")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < ANDREAS # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ANDR\u00c9")),
        text::utf32_range(text::string_view(u8"ANDREAS")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < AS # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ANDREAS")),
        text::utf32_range(text::string_view(u8"AS")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < CA # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"AS")),
        text::utf32_range(text::string_view(u8"CA")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < \u00c7A # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"CA")),
        text::utf32_range(text::string_view(u8"\u00c7A")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < CB # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u00c7A")),
        text::utf32_range(text::string_view(u8"CB")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < \u00c7C # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"CB")),
        text::utf32_range(text::string_view(u8"\u00c7C")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < D.S.B. # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u00c7C")),
        text::utf32_range(text::string_view(u8"D.S.B.")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < DA # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"D.S.B.")),
        text::utf32_range(text::string_view(u8"DA")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < \u00d0A # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"DA")),
        text::utf32_range(text::string_view(u8"\u00d0A")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < DB # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u00d0A")),
        text::utf32_range(text::string_view(u8"DB")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < \u00d0C # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"DB")),
        text::utf32_range(text::string_view(u8"\u00d0C")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < DSB # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u00d0C")),
        text::utf32_range(text::string_view(u8"DSB")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < DSC # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"DSB")),
        text::utf32_range(text::string_view(u8"DSC")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < EKSTRA_ARBEJDE # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"DSC")),
        text::utf32_range(text::string_view(u8"EKSTRA_ARBEJDE")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < EKSTRABUD0 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"EKSTRA_ARBEJDE")),
        text::utf32_range(text::string_view(u8"EKSTRABUD0")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < H\u00d8ST # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"EKSTRABUD0")),
        text::utf32_range(text::string_view(u8"H\u00d8ST")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < HAAG # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"H\u00d8ST")),
        text::utf32_range(text::string_view(u8"HAAG")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < H\u00c5NDBOG # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"HAAG")),
        text::utf32_range(text::string_view(u8"H\u00c5NDBOG")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < HAANDV\u00c6RKSBANKEN # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"H\u00c5NDBOG")),
        text::utf32_range(text::string_view(u8"HAANDV\u00c6RKSBANKEN")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < Karl # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"HAANDV\u00c6RKSBANKEN")),
        text::utf32_range(text::string_view(u8"Karl")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < karl # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Karl")),
        text::utf32_range(text::string_view(u8"karl")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < NIELS\u0020J\u00d8RGEN # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"karl")),
        text::utf32_range(text::string_view(u8"NIELS\u0020J\u00d8RGEN")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < NIELS-J\u00d8RGEN # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"NIELS\u0020J\u00d8RGEN")),
        text::utf32_range(text::string_view(u8"NIELS-J\u00d8RGEN")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < NIELSEN # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"NIELS-J\u00d8RGEN")),
        text::utf32_range(text::string_view(u8"NIELSEN")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < R\u00c9E,\u0020A # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"NIELSEN")),
        text::utf32_range(text::string_view(u8"R\u00c9E,\u0020A")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < REE,\u0020B # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"R\u00c9E,\u0020A")),
        text::utf32_range(text::string_view(u8"REE,\u0020B")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < R\u00c9E,\u0020L # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"REE,\u0020B")),
        text::utf32_range(text::string_view(u8"R\u00c9E,\u0020L")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < REE,\u0020V # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"R\u00c9E,\u0020L")),
        text::utf32_range(text::string_view(u8"REE,\u0020V")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < SCHYTT,\u0020B # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"REE,\u0020V")),
        text::utf32_range(text::string_view(u8"SCHYTT,\u0020B")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < SCHYTT,\u0020H # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"SCHYTT,\u0020B")),
        text::utf32_range(text::string_view(u8"SCHYTT,\u0020H")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < SCH\u00dcTT,\u0020H # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"SCHYTT,\u0020H")),
        text::utf32_range(text::string_view(u8"SCH\u00dcTT,\u0020H")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < SCHYTT,\u0020L # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"SCH\u00dcTT,\u0020H")),
        text::utf32_range(text::string_view(u8"SCHYTT,\u0020L")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < SCH\u00dcTT,\u0020M # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"SCHYTT,\u0020L")),
        text::utf32_range(text::string_view(u8"SCH\u00dcTT,\u0020M")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < SS # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"SCH\u00dcTT,\u0020M")),
        text::utf32_range(text::string_view(u8"SS")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < \u00df # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"SS")),
        text::utf32_range(text::string_view(u8"\u00df")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < SSA # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u00df")),
        text::utf32_range(text::string_view(u8"SSA")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < STORE\u0020VILDMOSE # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"SSA")),
        text::utf32_range(text::string_view(u8"STORE\u0020VILDMOSE")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < STOREK\u00c6R0 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"STORE\u0020VILDMOSE")),
        text::utf32_range(text::string_view(u8"STOREK\u00c6R0")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < STORM\u0020PETERSEN # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"STOREK\u00c6R0")),
        text::utf32_range(text::string_view(u8"STORM\u0020PETERSEN")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < STORMLY # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"STORM\u0020PETERSEN")),
        text::utf32_range(text::string_view(u8"STORMLY")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < THORVALD # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"STORMLY")),
        text::utf32_range(text::string_view(u8"THORVALD")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < THORVARDUR # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"THORVALD")),
        text::utf32_range(text::string_view(u8"THORVARDUR")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < \u00feORVAR\u00d0UR # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"THORVARDUR")),
        text::utf32_range(text::string_view(u8"\u00feORVAR\u00d0UR")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < THYGESEN # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u00feORVAR\u00d0UR")),
        text::utf32_range(text::string_view(u8"THYGESEN")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < VESTERG\u00c5RD,\u0020A # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"THYGESEN")),
        text::utf32_range(text::string_view(u8"VESTERG\u00c5RD,\u0020A")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < VESTERGAARD,\u0020A # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"VESTERG\u00c5RD,\u0020A")),
        text::utf32_range(text::string_view(u8"VESTERGAARD,\u0020A")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < VESTERG\u00c5RD,\u0020B # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"VESTERGAARD,\u0020A")),
        text::utf32_range(text::string_view(u8"VESTERG\u00c5RD,\u0020B")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < \u00c6BLE # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"VESTERG\u00c5RD,\u0020B")),
        text::utf32_range(text::string_view(u8"\u00c6BLE")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < \u00c4BLE # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u00c6BLE")),
        text::utf32_range(text::string_view(u8"\u00c4BLE")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < \u00d8BERG # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u00c4BLE")),
        text::utf32_range(text::string_view(u8"\u00d8BERG")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < \u00d6BERG # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u00d8BERG")),
        text::utf32_range(text::string_view(u8"\u00d6BERG")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// DataDrivenCollationTest/da_TestTertiary
TEST(collation_and_tailoring, data_file_test_1818)
{
    auto const table = text::tailored_collation_table(
        "[strength 3]",
        "rules", error, warning);


    // < andere # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"andere")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < chaque # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"andere")),
        text::utf32_range(text::string_view(u8"chaque")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < chemin # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"chaque")),
        text::utf32_range(text::string_view(u8"chemin")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < cote # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"chemin")),
        text::utf32_range(text::string_view(u8"cote")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < cot\u00e9 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"cote")),
        text::utf32_range(text::string_view(u8"cot\u00e9")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < c\u00f4te # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"cot\u00e9")),
        text::utf32_range(text::string_view(u8"c\u00f4te")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < c\u00f4t\u00e9 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c\u00f4te")),
        text::utf32_range(text::string_view(u8"c\u00f4t\u00e9")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < \u010du\u010d\u0113t # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c\u00f4t\u00e9")),
        text::utf32_range(text::string_view(u8"\u010du\u010d\u0113t")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < Czech # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u010du\u010d\u0113t")),
        text::utf32_range(text::string_view(u8"Czech")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < hi\u0161a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Czech")),
        text::utf32_range(text::string_view(u8"hi\u0161a")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < irdisch # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"hi\u0161a")),
        text::utf32_range(text::string_view(u8"irdisch")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < lie # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"irdisch")),
        text::utf32_range(text::string_view(u8"lie")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < lire # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"lie")),
        text::utf32_range(text::string_view(u8"lire")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < llama # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"lire")),
        text::utf32_range(text::string_view(u8"llama")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < l\u00f5ug # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"llama")),
        text::utf32_range(text::string_view(u8"l\u00f5ug")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < l\u00f2za # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"l\u00f5ug")),
        text::utf32_range(text::string_view(u8"l\u00f2za")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < lu\u010d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"l\u00f2za")),
        text::utf32_range(text::string_view(u8"lu\u010d")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < luck # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"lu\u010d")),
        text::utf32_range(text::string_view(u8"luck")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < L\u00fcbeck # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"luck")),
        text::utf32_range(text::string_view(u8"L\u00fcbeck")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < lye # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"L\u00fcbeck")),
        text::utf32_range(text::string_view(u8"lye")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < l\u00e4vi # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"lye")),
        text::utf32_range(text::string_view(u8"l\u00e4vi")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < L\u00f6wen # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"l\u00e4vi")),
        text::utf32_range(text::string_view(u8"L\u00f6wen")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < m\u00e0\u0161ta # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"L\u00f6wen")),
        text::utf32_range(text::string_view(u8"m\u00e0\u0161ta")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < m\u00eer # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"m\u00e0\u0161ta")),
        text::utf32_range(text::string_view(u8"m\u00eer")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < myndig # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"m\u00eer")),
        text::utf32_range(text::string_view(u8"myndig")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < M\u00e4nner # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"myndig")),
        text::utf32_range(text::string_view(u8"M\u00e4nner")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < m\u00f6chten # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"M\u00e4nner")),
        text::utf32_range(text::string_view(u8"m\u00f6chten")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < pi\u00f1a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"m\u00f6chten")),
        text::utf32_range(text::string_view(u8"pi\u00f1a")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < pint # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"pi\u00f1a")),
        text::utf32_range(text::string_view(u8"pint")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < pylon # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"pint")),
        text::utf32_range(text::string_view(u8"pylon")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < \u0161\u00e0ran # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"pylon")),
        text::utf32_range(text::string_view(u8"\u0161\u00e0ran")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < savoir # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0161\u00e0ran")),
        text::utf32_range(text::string_view(u8"savoir")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < \u0160erb\u016bra # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"savoir")),
        text::utf32_range(text::string_view(u8"\u0160erb\u016bra")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < Sietla # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0160erb\u016bra")),
        text::utf32_range(text::string_view(u8"Sietla")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < \u015blub # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Sietla")),
        text::utf32_range(text::string_view(u8"\u015blub")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < subtle # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u015blub")),
        text::utf32_range(text::string_view(u8"subtle")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < symbol # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"subtle")),
        text::utf32_range(text::string_view(u8"symbol")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < s\u00e4mtlich # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"symbol")),
        text::utf32_range(text::string_view(u8"s\u00e4mtlich")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < verkehrt # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"s\u00e4mtlich")),
        text::utf32_range(text::string_view(u8"verkehrt")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < vox # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"verkehrt")),
        text::utf32_range(text::string_view(u8"vox")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < v\u00e4ga # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"vox")),
        text::utf32_range(text::string_view(u8"v\u00e4ga")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < waffle # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"v\u00e4ga")),
        text::utf32_range(text::string_view(u8"waffle")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < wood # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"waffle")),
        text::utf32_range(text::string_view(u8"wood")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < yen # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"wood")),
        text::utf32_range(text::string_view(u8"yen")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < yuan # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"yen")),
        text::utf32_range(text::string_view(u8"yuan")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < yucca # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"yuan")),
        text::utf32_range(text::string_view(u8"yucca")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < \u017eal # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"yucca")),
        text::utf32_range(text::string_view(u8"\u017eal")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < \u017eena # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u017eal")),
        text::utf32_range(text::string_view(u8"\u017eena")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < \u017den\u0113va # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u017eena")),
        text::utf32_range(text::string_view(u8"\u017den\u0113va")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < zoo0 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u017den\u0113va")),
        text::utf32_range(text::string_view(u8"zoo0")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < Zviedrija # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"zoo0")),
        text::utf32_range(text::string_view(u8"Zviedrija")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < Z\u00fcrich # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Zviedrija")),
        text::utf32_range(text::string_view(u8"Z\u00fcrich")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < zysk0 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Z\u00fcrich")),
        text::utf32_range(text::string_view(u8"zysk0")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < \u00e4ndere # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"zysk0")),
        text::utf32_range(text::string_view(u8"\u00e4ndere")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// DataDrivenCollationTest/hi_TestNewRules
TEST(collation_and_tailoring, data_file_test_1827)
{
    auto const table = text::default_collation_table();


    // < कॐ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"कॐ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < कं # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"कॐ")),
        text::utf32_range(text::string_view(u8"कं")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < कँ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"कं")),
        text::utf32_range(text::string_view(u8"कँ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < कः # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"कँ")),
        text::utf32_range(text::string_view(u8"कः")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// DataDrivenCollationTest/ro_TestNewRules
TEST(collation_and_tailoring, data_file_test_1882)
{
    auto const table = text::default_collation_table();


    // < xAx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"xAx")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < xă # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xAx")),
        text::utf32_range(text::string_view(u8"xă")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < xĂ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xă")),
        text::utf32_range(text::string_view(u8"xĂ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < Xă # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xĂ")),
        text::utf32_range(text::string_view(u8"Xă")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < XĂ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Xă")),
        text::utf32_range(text::string_view(u8"XĂ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < xăx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"XĂ")),
        text::utf32_range(text::string_view(u8"xăx")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < xĂx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xăx")),
        text::utf32_range(text::string_view(u8"xĂx")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < xâ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xĂx")),
        text::utf32_range(text::string_view(u8"xâ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < xÂ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xâ")),
        text::utf32_range(text::string_view(u8"xÂ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < Xâ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xÂ")),
        text::utf32_range(text::string_view(u8"Xâ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < XÂ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Xâ")),
        text::utf32_range(text::string_view(u8"XÂ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < xâx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"XÂ")),
        text::utf32_range(text::string_view(u8"xâx")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < xÂx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xâx")),
        text::utf32_range(text::string_view(u8"xÂx")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < xb # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xÂx")),
        text::utf32_range(text::string_view(u8"xb")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < xIx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xb")),
        text::utf32_range(text::string_view(u8"xIx")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < xî # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xIx")),
        text::utf32_range(text::string_view(u8"xî")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < xÎ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xî")),
        text::utf32_range(text::string_view(u8"xÎ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < Xî # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xÎ")),
        text::utf32_range(text::string_view(u8"Xî")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < XÎ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Xî")),
        text::utf32_range(text::string_view(u8"XÎ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < xîx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"XÎ")),
        text::utf32_range(text::string_view(u8"xîx")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < xÎx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xîx")),
        text::utf32_range(text::string_view(u8"xÎx")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < xj # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xÎx")),
        text::utf32_range(text::string_view(u8"xj")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < xSx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xj")),
        text::utf32_range(text::string_view(u8"xSx")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < xș # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xSx")),
        text::utf32_range(text::string_view(u8"xș")),
        table,
        text::collation_strength::tertiary),
        -1);

    // = xş # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xș")),
        text::utf32_range(text::string_view(u8"xş")),
        table,
        text::collation_strength::quaternary),
        0);

    // < xȘ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xş")),
        text::utf32_range(text::string_view(u8"xȘ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // = xŞ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xȘ")),
        text::utf32_range(text::string_view(u8"xŞ")),
        table,
        text::collation_strength::quaternary),
        0);

    // < Xș # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xŞ")),
        text::utf32_range(text::string_view(u8"Xș")),
        table,
        text::collation_strength::tertiary),
        -1);

    // = Xş # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Xș")),
        text::utf32_range(text::string_view(u8"Xş")),
        table,
        text::collation_strength::quaternary),
        0);

    // < XȘ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Xş")),
        text::utf32_range(text::string_view(u8"XȘ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // = XŞ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"XȘ")),
        text::utf32_range(text::string_view(u8"XŞ")),
        table,
        text::collation_strength::quaternary),
        0);

    // < xșx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"XŞ")),
        text::utf32_range(text::string_view(u8"xșx")),
        table,
        text::collation_strength::tertiary),
        -1);

    // = xşx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xșx")),
        text::utf32_range(text::string_view(u8"xşx")),
        table,
        text::collation_strength::quaternary),
        0);

    // < xȘx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xşx")),
        text::utf32_range(text::string_view(u8"xȘx")),
        table,
        text::collation_strength::tertiary),
        -1);

    // = xŞx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xȘx")),
        text::utf32_range(text::string_view(u8"xŞx")),
        table,
        text::collation_strength::quaternary),
        0);

    // < xT # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xŞx")),
        text::utf32_range(text::string_view(u8"xT")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < xTx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xT")),
        text::utf32_range(text::string_view(u8"xTx")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < xț # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xTx")),
        text::utf32_range(text::string_view(u8"xț")),
        table,
        text::collation_strength::tertiary),
        -1);

    // = xţ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xț")),
        text::utf32_range(text::string_view(u8"xţ")),
        table,
        text::collation_strength::quaternary),
        0);

    // < xȚ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xţ")),
        text::utf32_range(text::string_view(u8"xȚ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // = xŢ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xȚ")),
        text::utf32_range(text::string_view(u8"xŢ")),
        table,
        text::collation_strength::quaternary),
        0);

    // < Xț # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xŢ")),
        text::utf32_range(text::string_view(u8"Xț")),
        table,
        text::collation_strength::tertiary),
        -1);

    // = Xţ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Xț")),
        text::utf32_range(text::string_view(u8"Xţ")),
        table,
        text::collation_strength::quaternary),
        0);

    // < XȚ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Xţ")),
        text::utf32_range(text::string_view(u8"XȚ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // = XŢ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"XȚ")),
        text::utf32_range(text::string_view(u8"XŢ")),
        table,
        text::collation_strength::quaternary),
        0);

    // < xțx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"XŢ")),
        text::utf32_range(text::string_view(u8"xțx")),
        table,
        text::collation_strength::tertiary),
        -1);

    // = xţx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xțx")),
        text::utf32_range(text::string_view(u8"xţx")),
        table,
        text::collation_strength::quaternary),
        0);

    // < xȚx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xţx")),
        text::utf32_range(text::string_view(u8"xȚx")),
        table,
        text::collation_strength::tertiary),
        -1);

    // = xŢx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xȚx")),
        text::utf32_range(text::string_view(u8"xŢx")),
        table,
        text::collation_strength::quaternary),
        0);

    // < xU # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"xŢx")),
        text::utf32_range(text::string_view(u8"xU")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// DataDrivenCollationTest/testOffsets
TEST(collation_and_tailoring, data_file_test_1889)
{
    auto const table = text::tailored_collation_table(
        "[strength 3]",
        "rules", error, warning);


}

// DataDrivenCollationTest/testOffsets
TEST(collation_and_tailoring, data_file_test_1892)
{
    auto const table = text::tailored_collation_table(
        "[strength 3]",
        "rules", error, warning);


    // < \u0301A\u0301\u0301 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u0301A\u0301\u0301")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < \u0301B\u0301\u0301 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0301A\u0301\u0301")),
        text::utf32_range(text::string_view(u8"\u0301B\u0301\u0301")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// DataDrivenCollationTest/testOffsets
TEST(collation_and_tailoring, data_file_test_1899)
{
    auto const table = text::tailored_collation_table(
        "[strength 3]",
        "rules", error, warning);


    // < abcd\r\u0301 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"abcd\r\u0301")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < abce\r\u0301 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abcd\r\u0301")),
        text::utf32_range(text::string_view(u8"abce\r\u0301")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// was ICU 52 cmsccoll/TestRedundantRules
TEST(collation_and_tailoring, data_file_test_1909)
{
    auto const table = text::tailored_collation_table(
        "& a < b < c < d& [before 1] c < m ",
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 m # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"m")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"m")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"d")),
        table,
        text::collation_strength::primary),
        -1);

}

// was ICU 52 cmsccoll/TestRedundantRules
TEST(collation_and_tailoring, data_file_test_1919)
{
    auto const table = text::tailored_collation_table(
        "& a < b <<< c << d <<< e& [before 3] e <<< x ",
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"d")),
        table,
        text::collation_strength::secondary),
        -1);

    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"d")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 e # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"e")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// was ICU 52 cmsccoll/TestRedundantRules
TEST(collation_and_tailoring, data_file_test_1931)
{
    auto const table = text::tailored_collation_table(
        "& a < b <<< c << d <<< e <<< f < g& [before 1] g < x ",
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"d")),
        table,
        text::collation_strength::secondary),
        -1);

    // <3 e # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"d")),
        text::utf32_range(text::string_view(u8"e")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 f # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"e")),
        text::utf32_range(text::string_view(u8"f")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"f")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 g # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"g")),
        table,
        text::collation_strength::primary),
        -1);

}

// was ICU 52 cmsccoll/TestRedundantRules
TEST(collation_and_tailoring, data_file_test_1940)
{
    auto const table = text::tailored_collation_table(
        "& a <<< b << c < d& a < m ",
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 m # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"m")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"m")),
        text::utf32_range(text::string_view(u8"d")),
        table,
        text::collation_strength::primary),
        -1);

}

// was ICU 52 cmsccoll/TestRedundantRules
TEST(collation_and_tailoring, data_file_test_1948)
{
    auto const table = text::tailored_collation_table(
        "&a<b<<b\\u0301 &z<b ",
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 b\u0301 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b\u0301")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b\u0301")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

}

// was ICU 52 cmsccoll/TestRedundantRules
TEST(collation_and_tailoring, data_file_test_1955)
{
    auto const table = text::tailored_collation_table(
        "&z<m<<<q<<<m ",
        "rules", error, warning);


    // <1 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 q # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"q")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 m # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"q")),
        text::utf32_range(text::string_view(u8"m")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// was ICU 52 cmsccoll/TestRedundantRules
TEST(collation_and_tailoring, data_file_test_1962)
{
    auto const table = text::tailored_collation_table(
        "&z<<<m<q<<<m ",
        "rules", error, warning);


    // <1 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 q # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"q")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 m # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"q")),
        text::utf32_range(text::string_view(u8"m")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// was ICU 52 cmsccoll/TestRedundantRules
TEST(collation_and_tailoring, data_file_test_1971)
{
    auto const table = text::tailored_collation_table(
        "& a < b < c < d& r < c ",
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"d")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 r # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"d")),
        text::utf32_range(text::string_view(u8"r")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"r")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::primary),
        -1);

}

// was ICU 52 cmsccoll/TestRedundantRules
TEST(collation_and_tailoring, data_file_test_1980)
{
    auto const table = text::tailored_collation_table(
        "& a < b < c < d& c < m ",
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 m # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"m")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"m")),
        text::utf32_range(text::string_view(u8"d")),
        table,
        text::collation_strength::primary),
        -1);

}

// was ICU 52 cmsccoll/TestRedundantRules
TEST(collation_and_tailoring, data_file_test_1989)
{
    auto const table = text::tailored_collation_table(
        "& a < b < c < d& a < m ",
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 m # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"m")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"m")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"d")),
        table,
        text::collation_strength::primary),
        -1);

}

// was ICU 52 cmsccoll/TestExpansionSyntax
TEST(collation_and_tailoring, data_file_test_2001)
{
    auto const table = text::tailored_collation_table(
        "&AE <<< a << b <<< c &d <<< f ",
        "rules", error, warning);


    // <1 AE # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"AE")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"AE")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::secondary),
        -1);

    // <3 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"d")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 f # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"d")),
        text::utf32_range(text::string_view(u8"f")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// was ICU 52 cmsccoll/TestExpansionSyntax
TEST(collation_and_tailoring, data_file_test_2012)
{
    auto const table = text::tailored_collation_table(
        "&A <<< a / E << b / E <<< c /E  &d <<< f ",
        "rules", error, warning);


    // <1 AE # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"AE")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"AE")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::secondary),
        -1);

    // <3 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"d")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 f # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"d")),
        text::utf32_range(text::string_view(u8"f")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// was ICU 52 cmsccoll/TestExpansionSyntax
TEST(collation_and_tailoring, data_file_test_2024)
{
    auto const table = text::tailored_collation_table(
        "&AE <<< a <<< b << c << d < e < f <<< g ",
        "rules", error, warning);


    // <1 AE # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"AE")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"AE")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"d")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 e # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"d")),
        text::utf32_range(text::string_view(u8"e")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 f # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"e")),
        text::utf32_range(text::string_view(u8"f")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 g # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"f")),
        text::utf32_range(text::string_view(u8"g")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// was ICU 52 cmsccoll/TestExpansionSyntax
TEST(collation_and_tailoring, data_file_test_2037)
{
    auto const table = text::tailored_collation_table(
        "&A <<< a / E <<< b / E << c / E << d / E < e < f <<< g ",
        "rules", error, warning);


    // <1 AE # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"AE")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"AE")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"d")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 e # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"d")),
        text::utf32_range(text::string_view(u8"e")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 f # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"e")),
        text::utf32_range(text::string_view(u8"f")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 g # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"f")),
        text::utf32_range(text::string_view(u8"g")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// was ICU 52 cmsccoll/TestExpansionSyntax
TEST(collation_and_tailoring, data_file_test_2046)
{
    auto const table = text::tailored_collation_table(
        "&AE <<< B <<< C / D <<< F ",
        "rules", error, warning);


    // <1 AE # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"AE")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 B # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"AE")),
        text::utf32_range(text::string_view(u8"B")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 F # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"B")),
        text::utf32_range(text::string_view(u8"F")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 AED # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"F")),
        text::utf32_range(text::string_view(u8"AED")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 C # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"AED")),
        text::utf32_range(text::string_view(u8"C")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// was ICU 52 cmsccoll/TestExpansionSyntax
TEST(collation_and_tailoring, data_file_test_2055)
{
    auto const table = text::tailored_collation_table(
        "&A <<< B / E <<< C / ED <<< F / E ",
        "rules", error, warning);


    // <1 AE # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"AE")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 B # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"AE")),
        text::utf32_range(text::string_view(u8"B")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 F # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"B")),
        text::utf32_range(text::string_view(u8"F")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 AED # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"F")),
        text::utf32_range(text::string_view(u8"AED")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 C # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"AED")),
        text::utf32_range(text::string_view(u8"C")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// never reorder trailing primaries
TEST(collation_and_tailoring, data_file_test_2065)
{
    auto const table = text::tailored_collation_table(
        "[reorder Zzzz Grek]",
        "rules", error, warning);


    // <1 L # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"L")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 字 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"L")),
        text::utf32_range(text::string_view(u8"字")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 Ω # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"字")),
        text::utf32_range(text::string_view(u8"Ω")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 \uFFFD # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ω")),
        text::utf32_range(text::string_view(u8"\uFFFD")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 \uFFFF # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFFFD")),
        text::utf32_range(text::string_view(u8"\uFFFF")),
        table,
        text::collation_strength::primary),
        -1);

}

// fall back to mappings with shorter prefixes, not immediately to ones with no prefixes
TEST(collation_and_tailoring, data_file_test_2082)
{
    auto const table = text::tailored_collation_table(
        "&u=ab|cd &v=b|ce ",
        "rules", error, warning);


    // <1 abc # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"abc")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 abcc # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abc")),
        text::utf32_range(text::string_view(u8"abcc")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 abcf # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abcc")),
        text::utf32_range(text::string_view(u8"abcf")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 abcd # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abcf")),
        text::utf32_range(text::string_view(u8"abcd")),
        table,
        text::collation_strength::primary),
        -1);

    // =  abu # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abcd")),
        text::utf32_range(text::string_view(u8"abu")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 abce # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abu")),
        text::utf32_range(text::string_view(u8"abce")),
        table,
        text::collation_strength::primary),
        -1);

    // =  abv # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abce")),
        text::utf32_range(text::string_view(u8"abv")),
        table,
        text::collation_strength::quaternary),
        0);

}

// fall back to mappings with shorter prefixes, not immediately to ones with no prefixes
TEST(collation_and_tailoring, data_file_test_2099)
{
    auto const table = text::tailored_collation_table(
        "&x=op|ĉ &y=p|ç ",
        "rules", error, warning);


    // <1 opc # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"opc")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 opć # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opc")),
        text::utf32_range(text::string_view(u8"opć")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 opcz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opć")),
        text::utf32_range(text::string_view(u8"opcz")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 opd # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opcz")),
        text::utf32_range(text::string_view(u8"opd")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 opĉ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opd")),
        text::utf32_range(text::string_view(u8"opĉ")),
        table,
        text::collation_strength::primary),
        -1);

    // =  opc\u0302 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opĉ")),
        text::utf32_range(text::string_view(u8"opc\u0302")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  opx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opc\u0302")),
        text::utf32_range(text::string_view(u8"opx")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 opç # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opx")),
        text::utf32_range(text::string_view(u8"opç")),
        table,
        text::collation_strength::primary),
        -1);

    // =  opc\u0327 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opç")),
        text::utf32_range(text::string_view(u8"opc\u0327")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  opy # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opc\u0327")),
        text::utf32_range(text::string_view(u8"opy")),
        table,
        text::collation_strength::quaternary),
        0);

}

// fall back to mappings with shorter prefixes, not immediately to ones with no prefixes
TEST(collation_and_tailoring, data_file_test_2138)
{
    auto const table = text::tailored_collation_table(
        "&❶=d &❷=de &❸=def &①=c|d &②=c|de &③=c|def &④=bc|d &⑤=bc|de &⑥=bc|def &⑦=abc|d &⑧=abc|de &⑨=abc|def ",
        "rules", error, warning);


    // <1 9aadzz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"9aadzz")),
        table,
        text::collation_strength::primary),
        -1);

    // =  9aa❶zz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9aadzz")),
        text::utf32_range(text::string_view(u8"9aa❶zz")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 9aadez # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9aa❶zz")),
        text::utf32_range(text::string_view(u8"9aadez")),
        table,
        text::collation_strength::primary),
        -1);

    // =  9aa❷z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9aadez")),
        text::utf32_range(text::string_view(u8"9aa❷z")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 9aadef # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9aa❷z")),
        text::utf32_range(text::string_view(u8"9aadef")),
        table,
        text::collation_strength::primary),
        -1);

    // =  9aa❸ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9aadef")),
        text::utf32_range(text::string_view(u8"9aa❸")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 9acdzz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9aa❸")),
        text::utf32_range(text::string_view(u8"9acdzz")),
        table,
        text::collation_strength::primary),
        -1);

    // =  9ac①zz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9acdzz")),
        text::utf32_range(text::string_view(u8"9ac①zz")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 9acdez # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9ac①zz")),
        text::utf32_range(text::string_view(u8"9acdez")),
        table,
        text::collation_strength::primary),
        -1);

    // =  9ac②z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9acdez")),
        text::utf32_range(text::string_view(u8"9ac②z")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 9acdef # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9ac②z")),
        text::utf32_range(text::string_view(u8"9acdef")),
        table,
        text::collation_strength::primary),
        -1);

    // =  9ac③ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9acdef")),
        text::utf32_range(text::string_view(u8"9ac③")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 9bcdzz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9ac③")),
        text::utf32_range(text::string_view(u8"9bcdzz")),
        table,
        text::collation_strength::primary),
        -1);

    // =  9bc④zz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9bcdzz")),
        text::utf32_range(text::string_view(u8"9bc④zz")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 9bcdez # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9bc④zz")),
        text::utf32_range(text::string_view(u8"9bcdez")),
        table,
        text::collation_strength::primary),
        -1);

    // =  9bc⑤z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9bcdez")),
        text::utf32_range(text::string_view(u8"9bc⑤z")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 9bcdef # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9bc⑤z")),
        text::utf32_range(text::string_view(u8"9bcdef")),
        table,
        text::collation_strength::primary),
        -1);

    // =  9bc⑥ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9bcdef")),
        text::utf32_range(text::string_view(u8"9bc⑥")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 abcdzz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9bc⑥")),
        text::utf32_range(text::string_view(u8"abcdzz")),
        table,
        text::collation_strength::primary),
        -1);

    // =  abc⑦zz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abcdzz")),
        text::utf32_range(text::string_view(u8"abc⑦zz")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 abcdez # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abc⑦zz")),
        text::utf32_range(text::string_view(u8"abcdez")),
        table,
        text::collation_strength::primary),
        -1);

    // =  abc⑧z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abcdez")),
        text::utf32_range(text::string_view(u8"abc⑧z")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 abcdef # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abc⑧z")),
        text::utf32_range(text::string_view(u8"abcdef")),
        table,
        text::collation_strength::primary),
        -1);

    // =  abc⑨ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abcdef")),
        text::utf32_range(text::string_view(u8"abc⑨")),
        table,
        text::collation_strength::quaternary),
        0);

}

// prefix + discontiguous contraction with missing prefix contraction
TEST(collation_and_tailoring, data_file_test_2162)
{
    auto const table = text::tailored_collation_table(
        "&x=p|e &y=p|ê &z=op|ê     ",
        "rules", error, warning);


    // <1 oPe # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"oPe")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ope # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"oPe")),
        text::utf32_range(text::string_view(u8"ope")),
        table,
        text::collation_strength::primary),
        -1);

    // =  opx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ope")),
        text::utf32_range(text::string_view(u8"opx")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 opệ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opx")),
        text::utf32_range(text::string_view(u8"opệ")),
        table,
        text::collation_strength::primary),
        -1);

    // =  opy\u0323 # y not z
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opệ")),
        text::utf32_range(text::string_view(u8"opy\u0323")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 opê # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opy\u0323")),
        text::utf32_range(text::string_view(u8"opê")),
        table,
        text::collation_strength::primary),
        -1);

    // =  opz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opê")),
        text::utf32_range(text::string_view(u8"opz")),
        table,
        text::collation_strength::quaternary),
        0);

}

// prefix + discontiguous contraction with missing prefix contraction
TEST(collation_and_tailoring, data_file_test_2175)
{
    auto const table = text::tailored_collation_table(
        "&x=p|e &z=op|ê ",
        "rules", error, warning);


    // <1 oPe # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"oPe")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ope # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"oPe")),
        text::utf32_range(text::string_view(u8"ope")),
        table,
        text::collation_strength::primary),
        -1);

    // =  opx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ope")),
        text::utf32_range(text::string_view(u8"opx")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 opệ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opx")),
        text::utf32_range(text::string_view(u8"opệ")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  opx\u0323\u0302 # x not z
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opệ")),
        text::utf32_range(text::string_view(u8"opx\u0323\u0302")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 opê # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opx\u0323\u0302")),
        text::utf32_range(text::string_view(u8"opê")),
        table,
        text::collation_strength::primary),
        -1);

    // =  opz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opê")),
        text::utf32_range(text::string_view(u8"opz")),
        table,
        text::collation_strength::quaternary),
        0);

}

// prefix + discontiguous contraction with missing prefix contraction
TEST(collation_and_tailoring, data_file_test_2188)
{
    auto const table = text::tailored_collation_table(
        "&x=e &z=op|ê ",
        "rules", error, warning);


    // <1 ope # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"ope")),
        table,
        text::collation_strength::primary),
        -1);

    // =  opx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ope")),
        text::utf32_range(text::string_view(u8"opx")),
        table,
        text::collation_strength::quaternary),
        0);

    // <3 oPe # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opx")),
        text::utf32_range(text::string_view(u8"oPe")),
        table,
        text::collation_strength::tertiary),
        -1);

    // =  oPx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"oPe")),
        text::utf32_range(text::string_view(u8"oPx")),
        table,
        text::collation_strength::quaternary),
        0);

    // <2 opệ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"oPx")),
        text::utf32_range(text::string_view(u8"opệ")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  opx\u0323\u0302 # x not z
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opệ")),
        text::utf32_range(text::string_view(u8"opx\u0323\u0302")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 opê # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opx\u0323\u0302")),
        text::utf32_range(text::string_view(u8"opê")),
        table,
        text::collation_strength::primary),
        -1);

    // =  opz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opê")),
        text::utf32_range(text::string_view(u8"opz")),
        table,
        text::collation_strength::quaternary),
        0);

}

// maxVariable via rules
TEST(collation_and_tailoring, data_file_test_2199)
{
    auto const table = text::default_collation_table();


    // =  \u0020 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u0020")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \u000A # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0020")),
        text::utf32_range(text::string_view(u8"\u000A")),
        table,
        text::collation_strength::quaternary),
        0);

    // <1 . # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u000A")),
        text::utf32_range(text::string_view(u8".")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ° # degree sign
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8".")),
        text::utf32_range(text::string_view(u8"°")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 $ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"°")),
        text::utf32_range(text::string_view(u8"$")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 0 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"$")),
        text::utf32_range(text::string_view(u8"0")),
        table,
        text::collation_strength::primary),
        -1);

}

// ICU4J CollationMiscTest/TestContractionClosure (ää)
TEST(collation_and_tailoring, data_file_test_2228)
{
    auto const table = text::tailored_collation_table(
        "&b=\\u00e4\\u00e4 ",
        "rules", error, warning);


    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // =  \u00e4\u00e4 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"\u00e4\u00e4")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u00e4\u00e4")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  a\u0308a\u0308 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"a\u0308a\u0308")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0308a\u0308")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \u00e4a\u0308 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"\u00e4a\u0308")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u00e4a\u0308")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  a\u0308\u00e4 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"a\u0308\u00e4")),
        table,
        text::collation_strength::quaternary),
        0);

}

// ICU4J CollationMiscTest/TestContractionClosure (Å)
TEST(collation_and_tailoring, data_file_test_2239)
{
    auto const table = text::tailored_collation_table(
        "&b=\\u00C5 ",
        "rules", error, warning);


    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // =  \u00C5 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"\u00C5")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u00C5")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  A\u030A # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"A\u030A")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A\u030A")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  \u212B # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"\u212B")),
        table,
        text::collation_strength::quaternary),
        0);

}

// reset-before on already-tailored characters, ICU ticket 10108
TEST(collation_and_tailoring, data_file_test_2248)
{
    auto const table = text::tailored_collation_table(
        "&a<w<<x &[before 2]x<<y ",
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 w # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"w")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"w")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::secondary),
        -1);

}

// reset-before on already-tailored characters, ICU ticket 10108
TEST(collation_and_tailoring, data_file_test_2256)
{
    auto const table = text::tailored_collation_table(
        "&a<<w<<<x &[before 2]x<<y ",
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 w # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"w")),
        table,
        text::collation_strength::secondary),
        -1);

    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"w")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// reset-before on already-tailored characters, ICU ticket 10108
TEST(collation_and_tailoring, data_file_test_2264)
{
    auto const table = text::tailored_collation_table(
        "&a<w<x &[before 2]x<<y ",
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 w # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"w")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"w")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::secondary),
        -1);

}

// reset-before on already-tailored characters, ICU ticket 10108
TEST(collation_and_tailoring, data_file_test_2272)
{
    auto const table = text::tailored_collation_table(
        "&a<w<<<x &[before 2]x<<y ",
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 w # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"w")),
        table,
        text::collation_strength::secondary),
        -1);

    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"w")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// collation type fallback from unsupported type, ICU ticket 10149
TEST(collation_and_tailoring, data_file_test_2292)
{
    auto const table = text::default_collation_table();


    // <1 cote # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"cote")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 côte # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"cote")),
        text::utf32_range(text::string_view(u8"côte")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 coté # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"côte")),
        text::utf32_range(text::string_view(u8"coté")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 côté # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"coté")),
        text::utf32_range(text::string_view(u8"côté")),
        table,
        text::collation_strength::secondary),
        -1);

}

// @ is equivalent to [backwards 2], ICU ticket 9956
TEST(collation_and_tailoring, data_file_test_2306)
{
    auto const table = text::tailored_collation_table(
        "&b<a @ &v<<w ",
        "rules", error, warning);


    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 cote # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"cote")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 côte # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"cote")),
        text::utf32_range(text::string_view(u8"côte")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 coté # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"côte")),
        text::utf32_range(text::string_view(u8"coté")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 côté # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"coté")),
        text::utf32_range(text::string_view(u8"côté")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 v # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"côté")),
        text::utf32_range(text::string_view(u8"v")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 w # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"v")),
        text::utf32_range(text::string_view(u8"w")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"w")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::primary),
        -1);

}

// shifted+reordering, ICU ticket 9507
TEST(collation_and_tailoring, data_file_test_2333)
{
    auto const table = text::tailored_collation_table(
        "[reorder Grek punct space][alternate shifted][strength 4]",
        "rules", error, warning);


    // <4 ( # punctuation
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"(")),
        table,
        text::collation_strength::quaternary),
        -1);

    // <4 ) # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"(")),
        text::utf32_range(text::string_view(u8")")),
        table,
        text::collation_strength::quaternary),
        -1);

    // <4 \u0020 # space
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8")")),
        text::utf32_range(text::string_view(u8"\u0020")),
        table,
        text::collation_strength::quaternary),
        -1);

    // <1 ` # symbol
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0020")),
        text::utf32_range(text::string_view(u8"`")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ^ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"`")),
        text::utf32_range(text::string_view(u8"^")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 $ # currency symbol
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"^")),
        text::utf32_range(text::string_view(u8"$")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 € # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"$")),
        text::utf32_range(text::string_view(u8"€")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 0 # numbers
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"€")),
        text::utf32_range(text::string_view(u8"0")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ε # Greek
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"0")),
        text::utf32_range(text::string_view(u8"ε")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 e # Latin
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ε")),
        text::utf32_range(text::string_view(u8"e")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 e(e # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"e")),
        text::utf32_range(text::string_view(u8"e(e")),
        table,
        text::collation_strength::primary),
        -1);

    // <4 e)e # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"e(e")),
        text::utf32_range(text::string_view(u8"e)e")),
        table,
        text::collation_strength::quaternary),
        -1);

    // <4 e\u0020e # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"e)e")),
        text::utf32_range(text::string_view(u8"e\u0020e")),
        table,
        text::collation_strength::quaternary),
        -1);

    // <4 ee # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"e\u0020e")),
        text::utf32_range(text::string_view(u8"ee")),
        table,
        text::collation_strength::quaternary),
        -1);

    // <3 e(E # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ee")),
        text::utf32_range(text::string_view(u8"e(E")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <4 e)E # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"e(E")),
        text::utf32_range(text::string_view(u8"e)E")),
        table,
        text::collation_strength::quaternary),
        -1);

    // <4 e\u0020E # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"e)E")),
        text::utf32_range(text::string_view(u8"e\u0020E")),
        table,
        text::collation_strength::quaternary),
        -1);

    // <4 eE # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"e\u0020E")),
        text::utf32_range(text::string_view(u8"eE")),
        table,
        text::collation_strength::quaternary),
        -1);

}

// "uppercase first" could sort a string before its prefix, ICU ticket 9351
TEST(collation_and_tailoring, data_file_test_2341)
{
    auto const table = text::tailored_collation_table(
        "&\\u0001<<<b<<<B [caseFirst upper]",
        "rules", error, warning);


    // <1 aaa # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"aaa")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 aaaB # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aaa")),
        text::utf32_range(text::string_view(u8"aaaB")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// secondary+case ignores secondary ignorables, ICU ticket 9355
TEST(collation_and_tailoring, data_file_test_2351)
{
    auto const table = text::tailored_collation_table(
        "&\\u0001<<<b<<<B [strength 2][caseLevel on]",
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ab # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"ab")),
        table,
        text::collation_strength::quaternary),
        0);

    // =  aB # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ab")),
        text::utf32_range(text::string_view(u8"aB")),
        table,
        text::collation_strength::quaternary),
        0);

}

// custom collation rules involving tail of a contraction in Malayalam, ICU ticket 6328
TEST(collation_and_tailoring, data_file_test_2360)
{
    auto const table = text::tailored_collation_table(
        "&[before 2] ൌ << ൗ ",
        "rules", error, warning);


    // <1 ൗx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"ൗx")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 ൌx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ൗx")),
        text::utf32_range(text::string_view(u8"ൌx")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 ൗy # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ൌx")),
        text::utf32_range(text::string_view(u8"ൗy")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 ൌy # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ൗy")),
        text::utf32_range(text::string_view(u8"ൌy")),
        table,
        text::collation_strength::secondary),
        -1);

}

// quoted apostrophe in compact syntax, ICU ticket 8204
TEST(collation_and_tailoring, data_file_test_2373)
{
    auto const table = text::tailored_collation_table(
        "&q<<*a''c ",
        "rules", error, warning);


    // <1 d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"d")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 p # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"d")),
        text::utf32_range(text::string_view(u8"p")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 q # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"p")),
        text::utf32_range(text::string_view(u8"q")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"q")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 \u0027 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"\u0027")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0027")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 r # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"r")),
        table,
        text::collation_strength::primary),
        -1);

}

// locale -u- with collation keywords, ICU ticket 8260
TEST(collation_and_tailoring, data_file_test_2385)
{
    auto const table = text::default_collation_table();


    // <4 \u0020 # space is shifted, strength=quaternary
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u0020")),
        table,
        text::collation_strength::quaternary),
        -1);

    // <1 ! # punctuation is regular
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0020")),
        text::utf32_range(text::string_view(u8"!")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 2 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"!")),
        text::utf32_range(text::string_view(u8"2")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 12 # numeric sorting
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"2")),
        text::utf32_range(text::string_view(u8"12")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 B # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"12")),
        text::utf32_range(text::string_view(u8"B")),
        table,
        text::collation_strength::primary),
        -1);

    // <c b # uppercase first on case level
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"B")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 x\u0301\u0308 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"x\u0301\u0308")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 x\u0308\u0301 # normalization off
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x\u0301\u0308")),
        text::utf32_range(text::string_view(u8"x\u0308\u0301")),
        table,
        text::collation_strength::secondary),
        -1);

}

// locale @ with collation keywords, ICU ticket 8260
TEST(collation_and_tailoring, data_file_test_2392)
{
    auto const table = text::default_collation_table();


    // <4 $ # currency symbols are shifted, strength=quaternary
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"$")),
        table,
        text::collation_strength::quaternary),
        -1);

    // <1 àla # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"$")),
        text::utf32_range(text::string_view(u8"àla")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 alà # backwards secondary level
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"àla")),
        text::utf32_range(text::string_view(u8"alà")),
        table,
        text::collation_strength::secondary),
        -1);

}

// locale -u- with script reordering, ICU ticket 8260
TEST(collation_and_tailoring, data_file_test_2408)
{
    auto const table = text::default_collation_table();


    // <1 \u0020 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u0020")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 あ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0020")),
        text::utf32_range(text::string_view(u8"あ")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ☂ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"あ")),
        text::utf32_range(text::string_view(u8"☂")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 Ω # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"☂")),
        text::utf32_range(text::string_view(u8"Ω")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 丂 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ω")),
        text::utf32_range(text::string_view(u8"丂")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ж # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"丂")),
        text::utf32_range(text::string_view(u8"ж")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 L # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ж")),
        text::utf32_range(text::string_view(u8"L")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 4 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"L")),
        text::utf32_range(text::string_view(u8"4")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 Ձ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"4")),
        text::utf32_range(text::string_view(u8"Ձ")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 अ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ձ")),
        text::utf32_range(text::string_view(u8"अ")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ሄ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"अ")),
        text::utf32_range(text::string_view(u8"ሄ")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ฉ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ሄ")),
        text::utf32_range(text::string_view(u8"ฉ")),
        table,
        text::collation_strength::primary),
        -1);

}

// locale @collation=type should be case-insensitive
TEST(collation_and_tailoring, data_file_test_2415)
{
    auto const table = text::default_collation_table();


    // <1 ae # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"ae")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 ä # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ae")),
        text::utf32_range(text::string_view(u8"ä")),
        table,
        text::collation_strength::secondary),
        -1);

    // <3 Ä # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ä")),
        text::utf32_range(text::string_view(u8"Ä")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// import root search rules plus German phonebook rules, ICU ticket 8962
TEST(collation_and_tailoring, data_file_test_2425)
{
    auto const table = text::default_collation_table();


    // <1 = # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"=")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ≠ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"=")),
        text::utf32_range(text::string_view(u8"≠")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"≠")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ae # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"ae")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 ä # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ae")),
        text::utf32_range(text::string_view(u8"ä")),
        table,
        text::collation_strength::secondary),
        -1);

}

// import root search rules plus German phonebook rules, ICU ticket 8962
TEST(collation_and_tailoring, data_file_test_2435)
{
    auto const table = text::default_collation_table();


    // <1 = # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"=")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ≠ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"=")),
        text::utf32_range(text::string_view(u8"≠")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"≠")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ae # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"ae")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 ä # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ae")),
        text::utf32_range(text::string_view(u8"ä")),
        table,
        text::collation_strength::secondary),
        -1);

}

// import root search rules plus German phonebook rules, ICU ticket 8962
TEST(collation_and_tailoring, data_file_test_2444)
{
    auto const table = text::default_collation_table();


    // <1 = # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"=")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ≠ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"=")),
        text::utf32_range(text::string_view(u8"≠")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"≠")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ae # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"ae")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 ä # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ae")),
        text::utf32_range(text::string_view(u8"ä")),
        table,
        text::collation_strength::secondary),
        -1);

}

// import rules from a language with non-Latin native script, and reset the reordering, ICU ticket 10998
TEST(collation_and_tailoring, data_file_test_2454)
{
    auto const table = text::default_collation_table();


    // <1 4 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"4")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 Ω # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"4")),
        text::utf32_range(text::string_view(u8"Ω")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 L # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ω")),
        text::utf32_range(text::string_view(u8"L")),
        table,
        text::collation_strength::primary),
        -1);

}

// import rules from a language with non-Latin native script, and reset the reordering, ICU ticket 10998
TEST(collation_and_tailoring, data_file_test_2462)
{
    auto const table = text::default_collation_table();


    // <1 4 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"4")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 L # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"4")),
        text::utf32_range(text::string_view(u8"L")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 Ω # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"L")),
        text::utf32_range(text::string_view(u8"Ω")),
        table,
        text::collation_strength::primary),
        -1);

}

// import rules from a language with non-Latin native script, and reset the reordering, ICU ticket 10998
TEST(collation_and_tailoring, data_file_test_2469)
{
    auto const table = text::default_collation_table();


    // <1 4 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"4")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 L # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"4")),
        text::utf32_range(text::string_view(u8"L")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 Ω # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"L")),
        text::utf32_range(text::string_view(u8"Ω")),
        table,
        text::collation_strength::primary),
        -1);

}

// regression test for CollationFastLatinBuilder, ICU ticket 11388
TEST(collation_and_tailoring, data_file_test_2477)
{
    auto const table = text::tailored_collation_table(
        "&x<<aa<<<Aa<<<AA [strength 2]",
        "rules", error, warning);


    // <1 AA # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"AA")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 Aẩ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"AA")),
        text::utf32_range(text::string_view(u8"Aẩ")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 aą # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Aẩ")),
        text::utf32_range(text::string_view(u8"aą")),
        table,
        text::collation_strength::secondary),
        -1);

}

// regression test for CollationFastLatinBuilder, ICU ticket 11388
TEST(collation_and_tailoring, data_file_test_2481)
{
    auto const table = text::tailored_collation_table(
        "&x<<aa<<<Aa<<<AA [strength 2]",
        "rules", error, warning);


    // <1 AA # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"AA")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 aą # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"AA")),
        text::utf32_range(text::string_view(u8"aą")),
        table,
        text::collation_strength::secondary),
        -1);

}

// tailor tertiary-after a common tertiary where there is a lower one
TEST(collation_and_tailoring, data_file_test_2495)
{
    auto const table = text::tailored_collation_table(
        "&あ<<<x<<<y<<<z ",
        "rules", error, warning);


    // <1 ぁ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"ぁ")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 あ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ぁ")),
        text::utf32_range(text::string_view(u8"あ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"あ")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 ァ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"ァ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 い # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ァ")),
        text::utf32_range(text::string_view(u8"い")),
        table,
        text::collation_strength::primary),
        -1);

}

// tailor tertiary-after a below-common tertiary
TEST(collation_and_tailoring, data_file_test_2507)
{
    auto const table = text::tailored_collation_table(
        "&ぁ<<<x<<<y<<<z ",
        "rules", error, warning);


    // <1 ぁ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"ぁ")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ぁ")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 あ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"あ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 ァ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"あ")),
        text::utf32_range(text::string_view(u8"ァ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 い # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ァ")),
        text::utf32_range(text::string_view(u8"い")),
        table,
        text::collation_strength::primary),
        -1);

}

// tailor tertiary-before a common tertiary where there is a lower one
TEST(collation_and_tailoring, data_file_test_2519)
{
    auto const table = text::tailored_collation_table(
        "&[before 3]あ<<<x<<<y<<<z ",
        "rules", error, warning);


    // <1 ぁ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"ぁ")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ぁ")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 あ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"あ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 ァ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"あ")),
        text::utf32_range(text::string_view(u8"ァ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 い # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ァ")),
        text::utf32_range(text::string_view(u8"い")),
        table,
        text::collation_strength::primary),
        -1);

}

// tailor tertiary-before a below-common tertiary
TEST(collation_and_tailoring, data_file_test_2531)
{
    auto const table = text::tailored_collation_table(
        "&[before 3]ぁ<<<x<<<y<<<z ",
        "rules", error, warning);


    // <1 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 ぁ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"ぁ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 あ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ぁ")),
        text::utf32_range(text::string_view(u8"あ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 ァ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"あ")),
        text::utf32_range(text::string_view(u8"ァ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 い # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ァ")),
        text::utf32_range(text::string_view(u8"い")),
        table,
        text::collation_strength::primary),
        -1);

}

// reorder single scripts not groups, ICU ticket 11449
TEST(collation_and_tailoring, data_file_test_2542)
{
    auto const table = text::tailored_collation_table(
        "[reorder Goth Latn]",
        "rules", error, warning);


    // <1 4 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"4")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 𐌰 # Gothic
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"4")),
        text::utf32_range(text::string_view(u8"𐌰")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 L # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"𐌰")),
        text::utf32_range(text::string_view(u8"L")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 Ω # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"L")),
        text::utf32_range(text::string_view(u8"Ω")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 𐌈 # Old Italic
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ω")),
        text::utf32_range(text::string_view(u8"𐌈")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 𐑐 # Shavian
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"𐌈")),
        text::utf32_range(text::string_view(u8"𐑐")),
        table,
        text::collation_strength::primary),
        -1);

}

