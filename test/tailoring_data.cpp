// Warning! This file is autogenerated.
#include <boost/text/collation_table.hpp>
#include <boost/text/collate.hpp>
#include <boost/text/normalize_string.hpp>
#include <boost/text/data/all.hpp>

#include <gtest/gtest.h>


using namespace boost;

auto const error = [](text::string const & s) { std::cout << s; };
auto const warning = [](text::string const & s) {};


// simple CEs & expansions
TEST(collation_and_tailoring, data_file_test_0)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&\x01 <<<\u0300 &9<\x00 &\uA00A\uA00B=\uA002 &\uA00A\uA00B\u00050005=\uA003  )", 77),
        "rules", error, warning);


    {
        // =  \x01 # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"\x01");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  \x02 # 

        text::string a = text::string(u8"\x01");
        text::string b = text::string(u8"\x02");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <3 \u0300 # 

        text::string a = text::string(u8"\x02");
        text::string b = text::string(u8"\u0300");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 9 # 

        text::string a = text::string(u8"\u0300");
        text::string b = text::string(u8"9");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

#if 0 // TODO!
    {
        // <1 \x00 # 

        text::string a = text::string(u8"9");
        text::string b = text::string(u8"\x00");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }
#endif

    {
        // =  \x01\x00\x02 # 

        text::string a = text::string(u8"\x00");
        text::string b = text::string(u8"\x01\x00\x02");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 a # 

        text::string a = text::string(u8"\x01\x00\x02");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 a\u0300 # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"a\u0300");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <2 a\u0308 # 

        text::string a = text::string(u8"a\u0300");
        text::string b = text::string(u8"a\u0308");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  ä # 

        text::string a = text::string(u8"a\u0308");
        text::string b = text::string(u8"ä");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 b # 

        text::string a = text::string(u8"ä");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 か # Hiragana Ka (U+304B)

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"か");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <2 か\u3099 # plus voiced sound mark

        text::string a = text::string(u8"か");
        text::string b = text::string(u8"か\u3099");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  が # Hiragana Ga (U+304C)

        text::string a = text::string(u8"か\u3099");
        text::string b = text::string(u8"が");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 \uA00A\uA00B # 

        text::string a = text::string(u8"が");
        text::string b = text::string(u8"\uA00A\uA00B");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  \uA002 # 

        text::string a = text::string(u8"\uA00A\uA00B");
        text::string b = text::string(u8"\uA002");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 \uA00A\uA00B\u00050004 # 

        text::string a = text::string(u8"\uA002");
        text::string b = text::string(u8"\uA00A\uA00B\u00050004");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 \uA00A\uA00B\u00050005 # 

        text::string a = text::string(u8"\uA00A\uA00B\u00050004");
        text::string b = text::string(u8"\uA00A\uA00B\u00050005");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  \uA003 # 

        text::string a = text::string(u8"\uA00A\uA00B\u00050005");
        text::string b = text::string(u8"\uA003");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 \uA00A\uA00B\u00050006 # 

        text::string a = text::string(u8"\uA003");
        text::string b = text::string(u8"\uA00A\uA00B\u00050006");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// simple contractions
TEST(collation_and_tailoring, data_file_test_1)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    {
        // <1 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  ⓐ # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"ⓐ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 aa # 

        text::string a = text::string(u8"ⓐ");
        text::string b = text::string(u8"aa");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  ⓐⓐ # 

        text::string a = text::string(u8"aa");
        text::string b = text::string(u8"ⓐⓐ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 ab # 

        text::string a = text::string(u8"ⓐⓐ");
        text::string b = text::string(u8"ab");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  ⓐb # 

        text::string a = text::string(u8"ab");
        text::string b = text::string(u8"ⓐb");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 az # 

        text::string a = text::string(u8"ⓐb");
        text::string b = text::string(u8"az");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  ⓐz # 

        text::string a = text::string(u8"az");
        text::string b = text::string(u8"ⓐz");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// simple contractions
TEST(collation_and_tailoring, data_file_test_2)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    {
        // <1 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <2 a\u0308\u030a # ring blocked by diaeresis

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"a\u0308\u030a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  ⓐ❸❷ # 

        text::string a = text::string(u8"a\u0308\u030a");
        text::string b = text::string(u8"ⓐ❸❷");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <2 a\u0327 # 

        text::string a = text::string(u8"ⓐ❸❷");
        text::string b = text::string(u8"a\u0327");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  ⓐ❺ # 

        text::string a = text::string(u8"a\u0327");
        text::string b = text::string(u8"ⓐ❺");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// simple contractions
TEST(collation_and_tailoring, data_file_test_3)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    {
        // <2 \u0308 # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"\u0308");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  ❸ # 

        text::string a = text::string(u8"\u0308");
        text::string b = text::string(u8"❸");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <2 \u0308\u030a\u0301 # acute blocked by ring

        text::string a = text::string(u8"❸");
        text::string b = text::string(u8"\u0308\u030a\u0301");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  ❸❷❶ # 

        text::string a = text::string(u8"\u0308\u030a\u0301");
        text::string b = text::string(u8"❸❷❶");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// simple contractions
TEST(collation_and_tailoring, data_file_test_4)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    {
        // <1 \U0001D158 # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"\U0001D158");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  ⁰ # 

        text::string a = text::string(u8"\U0001D158");
        text::string b = text::string(u8"⁰");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 \U0001D158\U0001D165 # 

        text::string a = text::string(u8"⁰");
        text::string b = text::string(u8"\U0001D158\U0001D165");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  ¼ # 

        text::string a = text::string(u8"\U0001D158\U0001D165");
        text::string b = text::string(u8"¼");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// simple contractions
TEST(collation_and_tailoring, data_file_test_5)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    {
        // <1 dz\u0323\u0301 # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"dz\u0323\u0301");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

#if 0 // TODO!
    {
        // =  dz❻❶ # 

        text::string a = text::string(u8"dz\u0323\u0301");
        text::string b = text::string(u8"dz❻❶");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }
#endif

}

// simple contractions
TEST(collation_and_tailoring, data_file_test_6)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    {
        // <1 abz # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"abz");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  ⓐⓑ # 

        text::string a = text::string(u8"abz");
        text::string b = text::string(u8"ⓐⓑ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 abzz # 

        text::string a = text::string(u8"ⓐⓑ");
        text::string b = text::string(u8"abzz");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  ⓐⓑz # 

        text::string a = text::string(u8"abzz");
        text::string b = text::string(u8"ⓐⓑz");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// simple contractions
TEST(collation_and_tailoring, data_file_test_7)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    {
        // <1 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 z # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

#if 0 // TODO!
    {
        // <1 a\u0301 # 

        text::string a = text::string(u8"z");
        text::string b = text::string(u8"a\u0301");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  Ⓐ # 

        text::string a = text::string(u8"a\u0301");
        text::string b = text::string(u8"Ⓐ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 a\u0301\u0301 # 

        text::string a = text::string(u8"Ⓐ");
        text::string b = text::string(u8"a\u0301\u0301");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  Ⓑ # 

        text::string a = text::string(u8"a\u0301\u0301");
        text::string b = text::string(u8"Ⓑ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 a\u0301\u0301\u0358 # 

        text::string a = text::string(u8"Ⓑ");
        text::string b = text::string(u8"a\u0301\u0301\u0358");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  Ⓒ # 

        text::string a = text::string(u8"a\u0301\u0301\u0358");
        text::string b = text::string(u8"Ⓒ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 a\u030a # 

        text::string a = text::string(u8"Ⓒ");
        text::string b = text::string(u8"a\u030a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  Ⓓ # 

        text::string a = text::string(u8"a\u030a");
        text::string b = text::string(u8"Ⓓ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 a\u0323\u0358 # 

        text::string a = text::string(u8"Ⓓ");
        text::string b = text::string(u8"a\u0323\u0358");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  Ⓕ # 

        text::string a = text::string(u8"a\u0323\u0358");
        text::string b = text::string(u8"Ⓕ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }
#endif

    {
        // <1 a\u0327\u0323\u030a # match despite missing prefix

        text::string a = text::string(u8"Ⓕ");
        text::string b = text::string(u8"a\u0327\u0323\u030a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  Ⓖ # 

        text::string a = text::string(u8"a\u0327\u0323\u030a");
        text::string b = text::string(u8"Ⓖ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 a\u0327\u0323bz # 

        text::string a = text::string(u8"Ⓖ");
        text::string b = text::string(u8"a\u0327\u0323bz");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  Ⓗ # 

        text::string a = text::string(u8"a\u0327\u0323bz");
        text::string b = text::string(u8"Ⓗ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// simple contractions
TEST(collation_and_tailoring, data_file_test_8)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    {
        // <2 \u0308\u0308\u0301 # acute blocked from first diaeresis, contracts with second

        text::string a = text::string(u8"");
        text::string b = text::string(u8"\u0308\u0308\u0301");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  ❸❹ # 

        text::string a = text::string(u8"\u0308\u0308\u0301");
        text::string b = text::string(u8"❸❹");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// simple contractions
TEST(collation_and_tailoring, data_file_test_9)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    {
        // <1 \U0001D158\U0001D165 # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"\U0001D158\U0001D165");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  ¼ # 

        text::string a = text::string(u8"\U0001D158\U0001D165");
        text::string b = text::string(u8"¼");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// simple contractions
TEST(collation_and_tailoring, data_file_test_10)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    {
        // <3 \U0001D165\U0001D16D # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"\U0001D165\U0001D16D");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // =  ³ # 

        text::string a = text::string(u8"\U0001D165\U0001D16D");
        text::string b = text::string(u8"³");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// discontiguous contractions
TEST(collation_and_tailoring, data_file_test_11)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    {
        // <1 a\u0327\u030a # a+ring skips cedilla

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a\u0327\u030a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  Ⓓ❺ # 

        text::string a = text::string(u8"a\u0327\u030a");
        text::string b = text::string(u8"Ⓓ❺");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

#if 0 // Two cedillas in a row forms a blocking context!
    {
        // <2 a\u0327\u0327\u030a # a+ring skips 2 cedillas

        text::string a = text::string(u8"Ⓓ❺");
        text::string b = text::string(u8"a\u0327\u0327\u030a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  Ⓓ❺❺ # 

        text::string a = text::string(u8"a\u0327\u0327\u030a");
        text::string b = text::string(u8"Ⓓ❺❺");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <2 a\u0327\u0327\u0327\u030a # a+ring skips 3 cedillas

        text::string a = text::string(u8"Ⓓ❺❺");
        text::string b = text::string(u8"a\u0327\u0327\u0327\u030a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  Ⓓ❺❺❺ # 

        text::string a = text::string(u8"a\u0327\u0327\u0327\u030a");
        text::string b = text::string(u8"Ⓓ❺❺❺");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <2 a\u0334\u0327\u0327\u030a # a+ring skips tilde overlay & 2 cedillas

        text::string a = text::string(u8"Ⓓ❺❺❺");
        text::string b = text::string(u8"a\u0334\u0327\u0327\u030a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  Ⓓ❾❺❺ # 

        text::string a = text::string(u8"a\u0334\u0327\u0327\u030a");
        text::string b = text::string(u8"Ⓓ❾❺❺");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }
#endif

    {
        // <1 a\u0327\u0323 # a+dot below skips cedilla

        text::string a = text::string(u8"Ⓓ❾❺❺");
        text::string b = text::string(u8"a\u0327\u0323");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  Ⓔ❺ # 

        text::string a = text::string(u8"a\u0327\u0323");
        text::string b = text::string(u8"Ⓔ❺");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

#if 0 // Blocking context.
    {
        // <1 a\u0323\u0301\u0358 # a+dot below+dot ab.r.: 2-char match, then skips acute

        text::string a = text::string(u8"Ⓔ❺");
        text::string b = text::string(u8"a\u0323\u0301\u0358");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  Ⓕ❶ # 

        text::string a = text::string(u8"a\u0323\u0301\u0358");
        text::string b = text::string(u8"Ⓕ❶");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }
#endif

    {
        // <2 a\u0334\u0323\u0358 # a+dot below skips tilde overlay

        text::string a = text::string(u8"Ⓕ❶");
        text::string b = text::string(u8"a\u0334\u0323\u0358");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  Ⓕ❾ # 

        text::string a = text::string(u8"a\u0334\u0323\u0358");
        text::string b = text::string(u8"Ⓕ❾");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// discontiguous contractions
TEST(collation_and_tailoring, data_file_test_12)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    {
        // <2 \u0331\u0331\u0358 # macron below+dot ab.r. skips the second macron below

        text::string a = text::string(u8"");
        text::string b = text::string(u8"\u0331\u0331\u0358");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

#if 0 // Two macrons in a row forms a blocking context!
    {
        // =  ❽❼ # 

        text::string a = text::string(u8"\u0331\u0331\u0358");
        text::string b = text::string(u8"❽❼");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }
#endif

}

// discontiguous contractions
TEST(collation_and_tailoring, data_file_test_13)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    {
        // <1 a\u0327\u0331\u0323\u030a # a+ring skips cedilla, macron below, dot below (dot blocked by macron)

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a\u0327\u0331\u0323\u030a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

#if 0 // Forms a blocking context!
    {
        // =  Ⓓ❺❼❻ # 

        text::string a = text::string(u8"a\u0327\u0331\u0323\u030a");
        text::string b = text::string(u8"Ⓓ❺❼❻");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }
#endif

    {
        // <1 a\u0327\u0323\U0001D16D\u030a # a+dot below skips cedilla

        text::string a = text::string(u8"Ⓓ❺❼❻");
        text::string b = text::string(u8"a\u0327\u0323\U0001D16D\u030a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  Ⓔ❺²❷ # 

        text::string a = text::string(u8"a\u0327\u0323\U0001D16D\u030a");
        text::string b = text::string(u8"Ⓔ❺²❷");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

#if 0 // Forms a blocking context!
    {
        // <2 a\u0327\u0327\u0323\u030a # a+dot below skips 2 cedillas

        text::string a = text::string(u8"Ⓔ❺²❷");
        text::string b = text::string(u8"a\u0327\u0327\u0323\u030a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  Ⓔ❺❺❷ # 

        text::string a = text::string(u8"a\u0327\u0327\u0323\u030a");
        text::string b = text::string(u8"Ⓔ❺❺❷");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }
#endif

    {
        // <2 a\u0327\u0323\u0323\u030a # a+dot below skips cedilla

        text::string a = text::string(u8"Ⓔ❺❺❷");
        text::string b = text::string(u8"a\u0327\u0323\u0323\u030a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  Ⓔ❺❻❷ # 

        text::string a = text::string(u8"a\u0327\u0323\u0323\u030a");
        text::string b = text::string(u8"Ⓔ❺❻❷");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <2 a\u0334\u0327\u0323\u030a # a+dot below skips tilde overlay & cedilla

        text::string a = text::string(u8"Ⓔ❺❻❷");
        text::string b = text::string(u8"a\u0334\u0327\u0323\u030a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  Ⓔ❾❺❷ # 

        text::string a = text::string(u8"a\u0334\u0327\u0323\u030a");
        text::string b = text::string(u8"Ⓔ❾❺❷");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// discontiguous contractions
TEST(collation_and_tailoring, data_file_test_14)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    {
        // <1 \U0001D158\u0327\U0001D165 # quarter note skips cedilla

        text::string a = text::string(u8"");
        text::string b = text::string(u8"\U0001D158\u0327\U0001D165");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  ¼❺ # 

        text::string a = text::string(u8"\U0001D158\u0327\U0001D165");
        text::string b = text::string(u8"¼❺");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 a\U0001D165\u0323 # a+dot below skips stem

        text::string a = text::string(u8"¼❺");
        text::string b = text::string(u8"a\U0001D165\u0323");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  Ⓔ¹ # 

        text::string a = text::string(u8"a\U0001D165\u0323");
        text::string b = text::string(u8"Ⓔ¹");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 a\u0327\u0323b # 

        text::string a = text::string(u8"Ⓔ¹");
        text::string b = text::string(u8"a\u0327\u0323b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  Ⓔ❺b # 

        text::string a = text::string(u8"a\u0327\u0323b");
        text::string b = text::string(u8"Ⓔ❺b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 a\u0327\u0323ba # 

        text::string a = text::string(u8"Ⓔ❺b");
        text::string b = text::string(u8"a\u0327\u0323ba");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  Ⓔ❺bⓐ # 

        text::string a = text::string(u8"a\u0327\u0323ba");
        text::string b = text::string(u8"Ⓔ❺bⓐ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// discontiguous contractions
TEST(collation_and_tailoring, data_file_test_15)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    {
        // <1 a\u0327\u0301\u0301\u0358 # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a\u0327\u0301\u0301\u0358");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  Ⓒ❺ # 

        text::string a = text::string(u8"a\u0327\u0301\u0301\u0358");
        text::string b = text::string(u8"Ⓒ❺");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// discontiguous contractions
TEST(collation_and_tailoring, data_file_test_16)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    {
        // <1 a\u0f73\u0301 # a+acute skips tibetan ii

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a\u0f73\u0301");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  Ⓐ③ # 

        text::string a = text::string(u8"a\u0f73\u0301");
        text::string b = text::string(u8"Ⓐ③");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// discontiguous contractions
TEST(collation_and_tailoring, data_file_test_17)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    {
        // <1 \u0f71\u0f73 # == \u0f73\u0f71 == \u0f71\u0f71\u0f72

        text::string a = text::string(u8"");
        text::string b = text::string(u8"\u0f71\u0f73");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }


#if 0 // This requires arbitrary reordering of CPs in the input, which is not
      // part of the UCA.
    {
        // =  ③① # 

        text::string a = text::string(u8"\u0f71\u0f73");
        text::string b = text::string(u8"③①");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }
#endif

}

#if 0 // 0x308 blocks 0x301; they are both ccc=230.
// discontiguous contractions with nested contractions
TEST(collation_and_tailoring, data_file_test_18)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    {
        // <1 a\u0323\u0308\u0301\u0358 # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a\u0323\u0308\u0301\u0358");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  Ⓕ❹ # 

        text::string a = text::string(u8"a\u0323\u0308\u0301\u0358");
        text::string b = text::string(u8"Ⓕ❹");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <2 a\u0323\u0308\u0301\u0308\u0301\u0358 # 

        text::string a = text::string(u8"Ⓕ❹");
        text::string b = text::string(u8"a\u0323\u0308\u0301\u0308\u0301\u0358");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  Ⓕ❹❹ # 

        text::string a = text::string(u8"a\u0323\u0308\u0301\u0308\u0301\u0358");
        text::string b = text::string(u8"Ⓕ❹❹");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}
#endif

// discontiguous contractions with interleaved contractions
TEST(collation_and_tailoring, data_file_test_19)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    {
        // <1 a\u0327\u0331\u030a\u0358 # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a\u0327\u0331\u030a\u0358");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  Ⓓ❺❽ # 

        text::string a = text::string(u8"a\u0327\u0331\u030a\u0358");
        text::string b = text::string(u8"Ⓓ❺❽");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <2 a\u0331\u030a\u0358 # 

        text::string a = text::string(u8"Ⓓ❺❽");
        text::string b = text::string(u8"a\u0331\u030a\u0358");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  Ⓓ❽ # 

        text::string a = text::string(u8"a\u0331\u030a\u0358");
        text::string b = text::string(u8"Ⓓ❽");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

#if 0 // 0x331 twice is a blocking context.
    {
        // <2 a\u0331\u0331\u030a\u0358\u0358 # 

        text::string a = text::string(u8"Ⓓ❽");
        text::string b = text::string(u8"a\u0331\u0331\u030a\u0358\u0358");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  Ⓓ❽❽ # 

        text::string a = text::string(u8"a\u0331\u0331\u030a\u0358\u0358");
        text::string b = text::string(u8"Ⓓ❽❽");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <2 a\u0331\u0331\u0331\u030a\u0301\u0358\u0358\u0358 # 

        text::string a = text::string(u8"Ⓓ❽❽");
        text::string b = text::string(u8"a\u0331\u0331\u0331\u030a\u0301\u0358\u0358\u0358");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  Ⓓ❽❽❽❶ # 

        text::string a = text::string(u8"a\u0331\u0331\u0331\u030a\u0301\u0358\u0358\u0358");
        text::string b = text::string(u8"Ⓓ❽❽❽❶");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }
#endif

    {
        // <1 a\U0001D165\u0323\U0001D16Ddz\u0301 # 

        text::string a = text::string(u8"Ⓓ❽❽❽❶");
        text::string b = text::string(u8"a\U0001D165\u0323\U0001D16Ddz\u0301");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

#if 0 // Blocking context.
    {
        // =  Ⓔ³ⓓ # 

        text::string a = text::string(u8"a\U0001D165\u0323\U0001D16Ddz\u0301");
        text::string b = text::string(u8"Ⓔ³ⓓ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }
#endif

}

// some simple string comparisons
TEST(collation_and_tailoring, data_file_test_20)
{
    auto const table = text::default_collation_table();


    {
        // = \u0000 # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"\u0000");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // < a # 

        text::string a = text::string(u8"\u0000");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 b # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 B # 

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"B");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

#if 0 // This is completely wrong afaict.
    {
        // = \u0000B\u0000 # 

        text::string a = text::string(u8"B");
        text::string b = text::string(u8"\u0000B\u0000");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }
#endif

}

// compare with strength=primary
TEST(collation_and_tailoring, data_file_test_21)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"([strength 1])"),
        "rules", error, warning);


    {
        // <1 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 b # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // = B # 

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"B");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            0);
    }

}

// compare with strength=secondary
TEST(collation_and_tailoring, data_file_test_22)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"([strength 1][strength 2])"),
        "rules", error, warning);


    {
        // <1 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 b # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // = B # 

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"B");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            0);
    }

}

// compare with strength=tertiary
TEST(collation_and_tailoring, data_file_test_23)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"([strength 1][strength 2][strength 3])"),
        "rules", error, warning);


    {
        // <1 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 b # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 B # 

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"B");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// compare with strength=quaternary
TEST(collation_and_tailoring, data_file_test_24)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"([strength 1][strength 2][strength 3][strength 4])"),
        "rules", error, warning);


    {
        // <1 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 b # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 B # 

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"B");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// compare with strength=identical
TEST(collation_and_tailoring, data_file_test_25)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"([strength 1][strength 2][strength 3][strength 4][strength I])"),
        "rules", error, warning);


    {
        // <1 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 b # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 B # 

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"B");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// côté with forwards secondary
TEST(collation_and_tailoring, data_file_test_26)
{
    auto const table = text::default_collation_table();


    {
        // <1 cote # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"cote");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <2 coté # 

        text::string a = text::string(u8"cote");
        text::string b = text::string(u8"coté");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 côte # 

        text::string a = text::string(u8"coté");
        text::string b = text::string(u8"côte");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 côté # 

        text::string a = text::string(u8"côte");
        text::string b = text::string(u8"côté");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

}

// côté with backwards secondary
TEST(collation_and_tailoring, data_file_test_28)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"([backwards 2])"),
        "rules", error, warning);


    {
        // <1 cote # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"cote");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <2 côte # 

        text::string a = text::string(u8"cote");
        text::string b = text::string(u8"côte");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 coté # 

        text::string a = text::string(u8"côte");
        text::string b = text::string(u8"coté");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 côté # 

        text::string a = text::string(u8"coté");
        text::string b = text::string(u8"côté");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

}

// Hani < surrogates < U+FFFD
TEST(collation_and_tailoring, data_file_test_32)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"([strength I])"),
        "rules", error, warning);


    {
        // <1 abz # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"abz");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 a\u4e00z # 

        text::string a = text::string(u8"abz");
        text::string b = text::string(u8"a\u4e00z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 a\U00020000z # 

        text::string a = text::string(u8"a\u4e00z");
        text::string b = text::string(u8"a\U00020000z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// script reordering
TEST(collation_and_tailoring, data_file_test_33)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"([reorder Hani Zzzz digit])"),
        "rules", error, warning);


    {
        // <1 ? # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"?");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 + # 

        text::string a = text::string(u8"?");
        text::string b = text::string(u8"+");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 丂 # 

        text::string a = text::string(u8"+");
        text::string b = text::string(u8"丂");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 a # 

        text::string a = text::string(u8"丂");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 α # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"α");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 5 # 

        text::string a = text::string(u8"α");
        text::string b = text::string(u8"5");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// script reordering
TEST(collation_and_tailoring, data_file_test_34)
{
    auto const table = text::default_collation_table();


    {
        // <1 ? # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"?");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 + # 

        text::string a = text::string(u8"?");
        text::string b = text::string(u8"+");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 5 # 

        text::string a = text::string(u8"+");
        text::string b = text::string(u8"5");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 a # 

        text::string a = text::string(u8"5");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 α # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"α");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 丂 # 

        text::string a = text::string(u8"α");
        text::string b = text::string(u8"丂");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// empty rules
TEST(collation_and_tailoring, data_file_test_35)
{
    auto const table = text::default_collation_table();


    {
        // <1 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <2 ä # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"ä");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <3 Ä # 

        text::string a = text::string(u8"ä");
        text::string b = text::string(u8"Ä");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 b # 

        text::string a = text::string(u8"Ä");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// very simple rules
TEST(collation_and_tailoring, data_file_test_36)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a=e<<<<q<<<<r<x<<<X<<y<<<Y<<z<<<Z [strength 4])"),
        "rules", error, warning);


    {
        // <1 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  e # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"e");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::quaternary),
            0);
    }

    {
        // <4 q # 

        text::string a = text::string(u8"e");
        text::string b = text::string(u8"q");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::quaternary),
            -1);
    }

    {
        // <4 r # 

        text::string a = text::string(u8"q");
        text::string b = text::string(u8"r");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::quaternary),
            -1);
    }

    {
        // <1 x # 

        text::string a = text::string(u8"r");
        text::string b = text::string(u8"x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 X # 

        text::string a = text::string(u8"x");
        text::string b = text::string(u8"X");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <2 y # 

        text::string a = text::string(u8"X");
        text::string b = text::string(u8"y");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <3 Y # 

        text::string a = text::string(u8"y");
        text::string b = text::string(u8"Y");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <2 z # 

        text::string a = text::string(u8"Y");
        text::string b = text::string(u8"z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <3 Z # 

        text::string a = text::string(u8"z");
        text::string b = text::string(u8"Z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// tailoring twice before a root position: primary
TEST(collation_and_tailoring, data_file_test_37)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 1]b<p &[before 1]b<q )"),
        "rules", error, warning);


    {
        // <1 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 p # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"p");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 q # 

        text::string a = text::string(u8"p");
        text::string b = text::string(u8"q");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 b # 

        text::string a = text::string(u8"q");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// tailoring twice before a root position: secondary
TEST(collation_and_tailoring, data_file_test_38)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 2]ſ<<p &[before 2]ſ<<q )"),
        "rules", error, warning);


    {
        // <1 s # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"s");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <2 p # 

        text::string a = text::string(u8"s");
        text::string b = text::string(u8"p");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 q # 

        text::string a = text::string(u8"p");
        text::string b = text::string(u8"q");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 ſ # 

        text::string a = text::string(u8"q");
        text::string b = text::string(u8"ſ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

}

// tailoring twice before a root position: secondary
TEST(collation_and_tailoring, data_file_test_39)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 2]b<<p &[before 2]b<<q )"),
        "rules", error, warning);


    {
        // <1 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 p # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"p");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <2 q # 

        text::string a = text::string(u8"p");
        text::string b = text::string(u8"q");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 b # 

        text::string a = text::string(u8"q");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

}

// tailoring twice before a root position: tertiary
TEST(collation_and_tailoring, data_file_test_40)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 3]B<<<p &[before 3]B<<<q )"),
        "rules", error, warning);


    {
        // <1 b # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 p # 

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"p");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 q # 

        text::string a = text::string(u8"p");
        text::string b = text::string(u8"q");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 B # 

        text::string a = text::string(u8"q");
        text::string b = text::string(u8"B");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// tailoring twice before a root position: tertiary
TEST(collation_and_tailoring, data_file_test_41)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 3]b<<<p &[before 3]b<<<q )"),
        "rules", error, warning);


    {
        // <1 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 p # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"p");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 q # 

        text::string a = text::string(u8"p");
        text::string b = text::string(u8"q");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 b # 

        text::string a = text::string(u8"q");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// tailoring twice before a root position: tertiary
TEST(collation_and_tailoring, data_file_test_42)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 2]b<<s &[before 3]s<<<p &[before 3]s<<<q )"),
        "rules", error, warning);


    {
        // <1 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 p # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"p");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 q # 

        text::string a = text::string(u8"p");
        text::string b = text::string(u8"q");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 s # 

        text::string a = text::string(u8"q");
        text::string b = text::string(u8"s");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <2 b # 

        text::string a = text::string(u8"s");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

}

// tailor after completely ignorable
TEST(collation_and_tailoring, data_file_test_43)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&\x00<<<x<<y )", 13),
        "rules", error, warning);


    {
        // = \x00 # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"\x00");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // = \x1F # 

        text::string a = text::string(u8"\x00");
        text::string b = text::string(u8"\x1F");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <3 x # 

        text::string a = text::string(u8"\x1F");
        text::string b = text::string(u8"x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <2 y # 

        text::string a = text::string(u8"x");
        text::string b = text::string(u8"y");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

}

// secondary tailoring gaps, ICU ticket 9362
TEST(collation_and_tailoring, data_file_test_44)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 2]s<<'_' &s<<r &ſ<<*a-q &[before 2][first primary ignorable]<<u<<v &[last primary ignorable]<<y<<z  )"),
        "rules", error, warning);


    {
        // <2 u # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"u");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 v # 

        text::string a = text::string(u8"u");
        text::string b = text::string(u8"v");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 \u0332 # lowest secondary CE

        text::string a = text::string(u8"v");
        text::string b = text::string(u8"\u0332");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 \u0308 # 

        text::string a = text::string(u8"\u0332");
        text::string b = text::string(u8"\u0308");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 y # 

        text::string a = text::string(u8"\u0308");
        text::string b = text::string(u8"y");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 z # 

        text::string a = text::string(u8"y");
        text::string b = text::string(u8"z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <1 s_ # 

        text::string a = text::string(u8"z");
        text::string b = text::string(u8"s_");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <2 ss # 

        text::string a = text::string(u8"s_");
        text::string b = text::string(u8"ss");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 sr # 

        text::string a = text::string(u8"ss");
        text::string b = text::string(u8"sr");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 sſ # 

        text::string a = text::string(u8"sr");
        text::string b = text::string(u8"sſ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 sa # 

        text::string a = text::string(u8"sſ");
        text::string b = text::string(u8"sa");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 sb # 

        text::string a = text::string(u8"sa");
        text::string b = text::string(u8"sb");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 sp # 

        text::string a = text::string(u8"sb");
        text::string b = text::string(u8"sp");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 sq # 

        text::string a = text::string(u8"sp");
        text::string b = text::string(u8"sq");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 sus # 

        text::string a = text::string(u8"sq");
        text::string b = text::string(u8"sus");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 svs # 

        text::string a = text::string(u8"sus");
        text::string b = text::string(u8"svs");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 rs # 

        text::string a = text::string(u8"svs");
        text::string b = text::string(u8"rs");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

}

// tertiary tailoring gaps, ICU ticket 9362
TEST(collation_and_tailoring, data_file_test_45)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 3]t<<<'_' &t<<<r &ᵀ<<<*a-q &[before 3][first secondary ignorable]<<<u<<<v &[last secondary ignorable]<<<y<<<z  )"),
        "rules", error, warning);


    {
        // <3 u # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"u");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 v # 

        text::string a = text::string(u8"u");
        text::string b = text::string(u8"v");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 y # 

        text::string a = text::string(u8"v");
        text::string b = text::string(u8"y");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 z # 

        text::string a = text::string(u8"y");
        text::string b = text::string(u8"z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 t_ # 

        text::string a = text::string(u8"z");
        text::string b = text::string(u8"t_");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 tt # 

        text::string a = text::string(u8"t_");
        text::string b = text::string(u8"tt");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 tr # 

        text::string a = text::string(u8"tt");
        text::string b = text::string(u8"tr");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 tｔ # 

        text::string a = text::string(u8"tr");
        text::string b = text::string(u8"tｔ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 tᵀ # 

        text::string a = text::string(u8"tｔ");
        text::string b = text::string(u8"tᵀ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 ta # 

        text::string a = text::string(u8"tᵀ");
        text::string b = text::string(u8"ta");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 tb # 

        text::string a = text::string(u8"ta");
        text::string b = text::string(u8"tb");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 tp # 

        text::string a = text::string(u8"tb");
        text::string b = text::string(u8"tp");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 tq # 

        text::string a = text::string(u8"tp");
        text::string b = text::string(u8"tq");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

#if 0 // TODO!
    {
        // <3 tut # 

        text::string a = text::string(u8"tq");
        text::string b = text::string(u8"tut");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }
#endif

    {
        // <3 tvt # 

        text::string a = text::string(u8"tut");
        text::string b = text::string(u8"tvt");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 rt # 

        text::string a = text::string(u8"tvt");
        text::string b = text::string(u8"rt");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// secondary & tertiary around root character
TEST(collation_and_tailoring, data_file_test_46)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 2]m<<r &m<<s &[before 3]m<<<u &m<<<v )"),
        "rules", error, warning);


    {
        // <1 l # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"l");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 r # 

        text::string a = text::string(u8"l");
        text::string b = text::string(u8"r");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

#if 0 // [WONTFIX 0]
    {
        // <2 u # 

        text::string a = text::string(u8"r");
        text::string b = text::string(u8"u");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }
#endif

    {
        // <3 m # 

        text::string a = text::string(u8"u");
        text::string b = text::string(u8"m");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 v # 

        text::string a = text::string(u8"m");
        text::string b = text::string(u8"v");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <2 s # 

        text::string a = text::string(u8"v");
        text::string b = text::string(u8"s");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <1 n # 

        text::string a = text::string(u8"s");
        text::string b = text::string(u8"n");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// secondary & tertiary around tailored item
TEST(collation_and_tailoring, data_file_test_47)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&m<x &[before 2]x<<r &x<<s &[before 3]x<<<u &x<<<v )"),
        "rules", error, warning);


    {
        // <1 m # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"m");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

#if 0 // [WONTFIX 0]
    {
        // <1 r # 

        text::string a = text::string(u8"m");
        text::string b = text::string(u8"r");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <2 u # 

        text::string a = text::string(u8"r");
        text::string b = text::string(u8"u");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }
#endif

    {
        // <3 x # 

        text::string a = text::string(u8"u");
        text::string b = text::string(u8"x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 v # 

        text::string a = text::string(u8"x");
        text::string b = text::string(u8"v");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <2 s # 

        text::string a = text::string(u8"v");
        text::string b = text::string(u8"s");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <1 n # 

        text::string a = text::string(u8"s");
        text::string b = text::string(u8"n");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// more nesting of secondary & tertiary before
TEST(collation_and_tailoring, data_file_test_48)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 3]m<<<u &[before 2]m<<r &[before 3]r<<<q &m<<<w &m<<t &[before 3]w<<<v &w<<<x &w<<s )"),
        "rules", error, warning);


    {
        // <1 l # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"l");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 q # 

        text::string a = text::string(u8"l");
        text::string b = text::string(u8"q");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 r # 

        text::string a = text::string(u8"q");
        text::string b = text::string(u8"r");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

#if 0 // [WONTFIX 0]
    {
        // <2 u # 

        text::string a = text::string(u8"r");
        text::string b = text::string(u8"u");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }
#endif

    {
        // <3 m # 

        text::string a = text::string(u8"u");
        text::string b = text::string(u8"m");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 v # 

        text::string a = text::string(u8"m");
        text::string b = text::string(u8"v");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 w # 

        text::string a = text::string(u8"v");
        text::string b = text::string(u8"w");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 x # 

        text::string a = text::string(u8"w");
        text::string b = text::string(u8"x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

#if 0 // [WONTFIX 0]
    {
        // <2 s # 

        text::string a = text::string(u8"x");
        text::string b = text::string(u8"s");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 t # 

        text::string a = text::string(u8"s");
        text::string b = text::string(u8"t");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }
#endif

    {
        // <1 n # 

        text::string a = text::string(u8"t");
        text::string b = text::string(u8"n");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// case bits
TEST(collation_and_tailoring, data_file_test_49)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&w<x =uv=uV=Uv=UV &ae=ch=cH=Ch=CH &rst=yz=yZ=Yz=YZ [caseFirst lower])"),
        "rules", error, warning);


    {
        // <1 ae # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"ae");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  ch # 

        text::string a = text::string(u8"ae");
        text::string b = text::string(u8"ch");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <3 cH # 

        text::string a = text::string(u8"ch");
        text::string b = text::string(u8"cH");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 Ch # 

        text::string a = text::string(u8"cH");
        text::string b = text::string(u8"Ch");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 CH # 

        text::string a = text::string(u8"Ch");
        text::string b = text::string(u8"CH");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 rst # 

        text::string a = text::string(u8"CH");
        text::string b = text::string(u8"rst");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  yz # 

        text::string a = text::string(u8"rst");
        text::string b = text::string(u8"yz");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <3 yZ # 

        text::string a = text::string(u8"yz");
        text::string b = text::string(u8"yZ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 Yz # 

        text::string a = text::string(u8"yZ");
        text::string b = text::string(u8"Yz");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 YZ # 

        text::string a = text::string(u8"Yz");
        text::string b = text::string(u8"YZ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 w # 

        text::string a = text::string(u8"YZ");
        text::string b = text::string(u8"w");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 x # 

        text::string a = text::string(u8"w");
        text::string b = text::string(u8"x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  uv # 

        text::string a = text::string(u8"x");
        text::string b = text::string(u8"uv");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <3 uV # 

        text::string a = text::string(u8"uv");
        text::string b = text::string(u8"uV");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // =  Uv # mixed case on single CE cannot distinguish variations

        text::string a = text::string(u8"uV");
        text::string b = text::string(u8"Uv");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <3 UV # 

        text::string a = text::string(u8"Uv");
        text::string b = text::string(u8"UV");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// tertiary CEs, tertiary, caseLevel=off, caseFirst=lower
TEST(collation_and_tailoring, data_file_test_50)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&\u0001<<<t<<<T [caseFirst lower])"),
        "rules", error, warning);


    {
        // <1 aa # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"aa");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 aat # 

        text::string a = text::string(u8"aa");
        text::string b = text::string(u8"aat");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 aaT # 

        text::string a = text::string(u8"aat");
        text::string b = text::string(u8"aaT");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 aA # 

        text::string a = text::string(u8"aaT");
        text::string b = text::string(u8"aA");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 aAt # 

        text::string a = text::string(u8"aA");
        text::string b = text::string(u8"aAt");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

#if 0 // TODO!  Bad test? caseFirst=lower, "t" is lower than "A", and "t" is
      // tailored to be before the other latin alphabet anyway.
    {
        // <3 ata # 

        text::string a = text::string(u8"aAt");
        text::string b = text::string(u8"ata");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }
#endif

    {
        // <3 aTa # 

        text::string a = text::string(u8"ata");
        text::string b = text::string(u8"aTa");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// tertiary CEs, tertiary, caseLevel=off, caseFirst=upper
TEST(collation_and_tailoring, data_file_test_51)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&\u0001<<<t<<<T [caseFirst lower][caseFirst upper])"),
        "rules", error, warning);


    {
        // <1 aA # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"aA");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 aAt # 

        text::string a = text::string(u8"aA");
        text::string b = text::string(u8"aAt");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 aa # 

        text::string a = text::string(u8"aAt");
        text::string b = text::string(u8"aa");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 aat # 

        text::string a = text::string(u8"aa");
        text::string b = text::string(u8"aat");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 aaT # 

        text::string a = text::string(u8"aat");
        text::string b = text::string(u8"aaT");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

#if 0 // TODO! Bad test?  "T" is explicitly tailored to come before other
      // Latin characters.
    {
        // <3 ata # 

        text::string a = text::string(u8"aaT");
        text::string b = text::string(u8"ata");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }
#endif

    {
        // <3 aTa # 

        text::string a = text::string(u8"ata");
        text::string b = text::string(u8"aTa");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// reset on expansion, ICU tickets 9415 & 9593
TEST(collation_and_tailoring, data_file_test_52)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&æ<x &æb=bæ &각<h &⒀<<y &l·=z <<u  )"),
        "rules", error, warning);


    {
        // <1 ae # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"ae");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <2 æ # 

        text::string a = text::string(u8"ae");
        text::string b = text::string(u8"æ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <1 x # 

        text::string a = text::string(u8"æ");
        text::string b = text::string(u8"x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 af # 

        text::string a = text::string(u8"x");
        text::string b = text::string(u8"af");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// reset on expansion, ICU tickets 9415 & 9593
TEST(collation_and_tailoring, data_file_test_53)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&æ<x &æb=bæ &각<h &⒀<<y &l·=z <<u  )"),
        "rules", error, warning);


    {
        // <1 aeb # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"aeb");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <2 æb # 

        text::string a = text::string(u8"aeb");
        text::string b = text::string(u8"æb");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  bæ # 

        text::string a = text::string(u8"æb");
        text::string b = text::string(u8"bæ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// reset on expansion, ICU tickets 9415 & 9593
TEST(collation_and_tailoring, data_file_test_54)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&æ<x &æb=bæ &각<h &⒀<<y &l·=z <<u  )"),
        "rules", error, warning);


    {
        // <1 각 # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"각");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 h # 

        text::string a = text::string(u8"각");
        text::string b = text::string(u8"h");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 갂 # 

        text::string a = text::string(u8"h");
        text::string b = text::string(u8"갂");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 갃 # 

        text::string a = text::string(u8"갂");
        text::string b = text::string(u8"갃");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// reset on expansion, ICU tickets 9415 & 9593
TEST(collation_and_tailoring, data_file_test_55)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&æ<x &æb=bæ &각<h &⒀<<y &l·=z <<u  )"),
        "rules", error, warning);


    {
        // <1 · # by itself: primary CE

        text::string a = text::string(u8"");
        text::string b = text::string(u8"·");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 l # 

        text::string a = text::string(u8"·");
        text::string b = text::string(u8"l");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <2 l· # l+middle dot has only a secondary difference from l

        text::string a = text::string(u8"l");
        text::string b = text::string(u8"l·");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  z # 

        text::string a = text::string(u8"l·");
        text::string b = text::string(u8"z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <2 u # 

        text::string a = text::string(u8"z");
        text::string b = text::string(u8"u");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

}

// reset on expansion, ICU tickets 9415 & 9593
TEST(collation_and_tailoring, data_file_test_56)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&æ<x &æb=bæ &각<h &⒀<<y &l·=z <<u  )"),
        "rules", error, warning);


    {
        // <1 (13) # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"(13)");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 ⒀ # DUCET sets special tertiary weights in all CEs

        text::string a = text::string(u8"(13)");
        text::string b = text::string(u8"⒀");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <2 y # 

        text::string a = text::string(u8"⒀");
        text::string b = text::string(u8"y");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <1 (13[ # 

        text::string a = text::string(u8"y");
        text::string b = text::string(u8"(13[");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// reset on expansion, ICU tickets 9415 & 9593
TEST(collation_and_tailoring, data_file_test_57)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&æ<x &æb=bæ &각<h &⒀<<y &l·=z <<u  [alternate shifted])"),
        "rules", error, warning);


    {
        // <1 (13) # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"(13)");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  13 # 

        text::string a = text::string(u8"(13)");
        text::string b = text::string(u8"13");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <3 ⒀ # 

        text::string a = text::string(u8"13");
        text::string b = text::string(u8"⒀");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // =  y # alternate=shifted removes the tailoring difference on the last CE

        text::string a = text::string(u8"⒀");
        text::string b = text::string(u8"y");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 14 # 

        text::string a = text::string(u8"y");
        text::string b = text::string(u8"14");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// contraction inside extension, ICU ticket 9378
TEST(collation_and_tailoring, data_file_test_58)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&а<<х/й )"),
        "rules", error, warning);


    {
        // <1 ай # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"ай");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <2 х # 

        text::string a = text::string(u8"ай");
        text::string b = text::string(u8"х");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

}

// no duplicate tailored CEs for different reset positions with same CEs, ICU ticket 10104
TEST(collation_and_tailoring, data_file_test_59)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&t<x &ᵀ<y &q<u &[before 1]ꝗ<v )"),
        "rules", error, warning);


    {
        // <1 q # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"q");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 u # 

        text::string a = text::string(u8"q");
        text::string b = text::string(u8"u");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 v # 

        text::string a = text::string(u8"u");
        text::string b = text::string(u8"v");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 ꝗ # 

        text::string a = text::string(u8"v");
        text::string b = text::string(u8"ꝗ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 t # 

        text::string a = text::string(u8"ꝗ");
        text::string b = text::string(u8"t");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 ᵀ # 

        text::string a = text::string(u8"t");
        text::string b = text::string(u8"ᵀ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 y # 

        text::string a = text::string(u8"ᵀ");
        text::string b = text::string(u8"y");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

#if 0 // TODO!
    {
        // <1 x # 

        text::string a = text::string(u8"y");
        text::string b = text::string(u8"x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }
#endif

}

// later rule does not affect earlier reset position, ICU ticket 10105
TEST(collation_and_tailoring, data_file_test_60)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a < u < v < w  &ov < x  &b < v )"),
        "rules", error, warning);


    {
        // <1 oa # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"oa");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 ou # 

        text::string a = text::string(u8"oa");
        text::string b = text::string(u8"ou");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 x # CE(o) followed by CE between u and w

        text::string a = text::string(u8"ou");
        text::string b = text::string(u8"x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

#if 0 // TODO!
    {
        // <1 ow # 

        text::string a = text::string(u8"x");
        text::string b = text::string(u8"ow");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }
#endif

    {
        // <1 ob # 

        text::string a = text::string(u8"ow");
        text::string b = text::string(u8"ob");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 ov # 

        text::string a = text::string(u8"ob");
        text::string b = text::string(u8"ov");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// later rule does not affect earlier extension (1), ICU ticket 10105
TEST(collation_and_tailoring, data_file_test_61)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a=x/b &v=b [strength 2])"),
        "rules", error, warning);


    {
        // <1 B # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"B");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 c # 

        text::string a = text::string(u8"B");
        text::string b = text::string(u8"c");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 v # 

        text::string a = text::string(u8"c");
        text::string b = text::string(u8"v");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  b # 

        text::string a = text::string(u8"v");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            0);
    }

}

// later rule does not affect earlier extension (1), ICU ticket 10105
TEST(collation_and_tailoring, data_file_test_62)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a=x/b &v=b [strength 2])"),
        "rules", error, warning);


    {
        // <1 AB # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"AB");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  x # 

        text::string a = text::string(u8"AB");
        text::string b = text::string(u8"x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            0);
    }

    {
        // <1 ac # 

        text::string a = text::string(u8"x");
        text::string b = text::string(u8"ac");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 av # 

        text::string a = text::string(u8"ac");
        text::string b = text::string(u8"av");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  ab # 

        text::string a = text::string(u8"av");
        text::string b = text::string(u8"ab");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            0);
    }

}

// later rule does not affect earlier extension (2), ICU ticket 10105
TEST(collation_and_tailoring, data_file_test_63)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a <<< c / e &g <<< e / l [strength 2])"),
        "rules", error, warning);


    {
        // <1 AE # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"AE");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  c # 

        text::string a = text::string(u8"AE");
        text::string b = text::string(u8"c");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            0);
    }

    {
        // <2 æ # 

        text::string a = text::string(u8"c");
        text::string b = text::string(u8"æ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <1 agl # 

        text::string a = text::string(u8"æ");
        text::string b = text::string(u8"agl");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  ae # 

        text::string a = text::string(u8"agl");
        text::string b = text::string(u8"ae");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            0);
    }

}

// later rule does not affect earlier extension (3), ICU ticket 10105
TEST(collation_and_tailoring, data_file_test_64)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a = b / c  &d = c / e [strength 2])"),
        "rules", error, warning);


    {
        // <1 AC # C is still only tertiary different from the original c

        text::string a = text::string(u8"");
        text::string b = text::string(u8"AC");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  b # 

        text::string a = text::string(u8"AC");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            0);
    }

    {
        // <1 ade # 

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"ade");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  ac # 

        text::string a = text::string(u8"ade");
        text::string b = text::string(u8"ac");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            0);
    }

}

// extension contains tailored character, ICU ticket 10105
TEST(collation_and_tailoring, data_file_test_65)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a=e &b=u/e )"),
        "rules", error, warning);


    {
        // <1 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  e # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"e");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 ba # 

        text::string a = text::string(u8"e");
        text::string b = text::string(u8"ba");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  be # 

        text::string a = text::string(u8"ba");
        text::string b = text::string(u8"be");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  u # 

        text::string a = text::string(u8"be");
        text::string b = text::string(u8"u");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// add simple mappings for characters with root context
TEST(collation_and_tailoring, data_file_test_66)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&z=· &n=и )"),
        "rules", error, warning);


    {
        // <1 l # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"l");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <2 l· # root mapping for l|· still works

        text::string a = text::string(u8"l");
        text::string b = text::string(u8"l·");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <1 z # 

        text::string a = text::string(u8"l·");
        text::string b = text::string(u8"z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  · # 

        text::string a = text::string(u8"z");
        text::string b = text::string(u8"·");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// add simple mappings for characters with root context
TEST(collation_and_tailoring, data_file_test_67)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&z=· &n=и )"),
        "rules", error, warning);


    {
        // <1 n # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"n");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  и # 

        text::string a = text::string(u8"n");
        text::string b = text::string(u8"и");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 И # 

        text::string a = text::string(u8"и");
        text::string b = text::string(u8"И");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 и\u0306 # root mapping for й=и\u0306 still works

        text::string a = text::string(u8"И");
        text::string b = text::string(u8"и\u0306");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  й # 

        text::string a = text::string(u8"и\u0306");
        text::string b = text::string(u8"й");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <3 Й # 

        text::string a = text::string(u8"й");
        text::string b = text::string(u8"Й");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// add context mappings around characters with root context
TEST(collation_and_tailoring, data_file_test_68)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&z=·h &n=ә|и )"),
        "rules", error, warning);


    {
        // <1 l # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"l");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <2 l· # root mapping for l|· still works

        text::string a = text::string(u8"l");
        text::string b = text::string(u8"l·");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <1 z # 

        text::string a = text::string(u8"l·");
        text::string b = text::string(u8"z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  ·h # 

        text::string a = text::string(u8"z");
        text::string b = text::string(u8"·h");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// add context mappings around characters with root context
TEST(collation_and_tailoring, data_file_test_69)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&z=·h &n=ә|и )"),
        "rules", error, warning);


    {
        // <1 и # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"и");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 И # 

        text::string a = text::string(u8"и");
        text::string b = text::string(u8"И");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 и\u0306 # root mapping for й=и\u0306 still works

        text::string a = text::string(u8"И");
        text::string b = text::string(u8"и\u0306");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  й # 

        text::string a = text::string(u8"и\u0306");
        text::string b = text::string(u8"й");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// add context mappings around characters with root context
TEST(collation_and_tailoring, data_file_test_70)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&z=·h &n=ә|и )"),
        "rules", error, warning);


    {
        // <1 әn # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"әn");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  әи # 

        text::string a = text::string(u8"әn");
        text::string b = text::string(u8"әи");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 әo # 

        text::string a = text::string(u8"әи");
        text::string b = text::string(u8"әo");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// many secondary CEs at the top of their range
TEST(collation_and_tailoring, data_file_test_71)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[last primary ignorable]<<*\u2801-\u28ff )"),
        "rules", error, warning);


    {
        // <2 \u0308 # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"\u0308");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 \u2801 # 

        text::string a = text::string(u8"\u0308");
        text::string b = text::string(u8"\u2801");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 \u2802 # 

        text::string a = text::string(u8"\u2801");
        text::string b = text::string(u8"\u2802");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 \u2803 # 

        text::string a = text::string(u8"\u2802");
        text::string b = text::string(u8"\u2803");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 \u2804 # 

        text::string a = text::string(u8"\u2803");
        text::string b = text::string(u8"\u2804");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 \u28fd # 

        text::string a = text::string(u8"\u2804");
        text::string b = text::string(u8"\u28fd");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 \u28fe # 

        text::string a = text::string(u8"\u28fd");
        text::string b = text::string(u8"\u28fe");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 \u28ff # 

        text::string a = text::string(u8"\u28fe");
        text::string b = text::string(u8"\u28ff");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

#if 0 // TODO!
    {
        // <1 \x20 # 

        text::string a = text::string(u8"\u28ff");
        text::string b = text::string(u8"\x20");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }
#endif

}

// many tertiary CEs at the top of their range
TEST(collation_and_tailoring, data_file_test_72)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[last secondary ignorable]<<<*a-z )"),
        "rules", error, warning);


    {
        // <3 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 b # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 c # 

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"c");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 d # 

        text::string a = text::string(u8"c");
        text::string b = text::string(u8"d");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 x # 

        text::string a = text::string(u8"d");
        text::string b = text::string(u8"x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 y # 

        text::string a = text::string(u8"x");
        text::string b = text::string(u8"y");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 z # 

        text::string a = text::string(u8"y");
        text::string b = text::string(u8"z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <2 \u0308 # 

        text::string a = text::string(u8"z");
        text::string b = text::string(u8"\u0308");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

}

// tailor contraction together with nearly equivalent prefix, ICU ticket 10101
TEST(collation_and_tailoring, data_file_test_73)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a=p|x &b=px &c=op )"),
        "rules", error, warning);


    {
        // <1 b # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  px # 

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"px");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <3 B # 

        text::string a = text::string(u8"px");
        text::string b = text::string(u8"B");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 c # 

        text::string a = text::string(u8"B");
        text::string b = text::string(u8"c");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  op # 

        text::string a = text::string(u8"c");
        text::string b = text::string(u8"op");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <3 C # 

        text::string a = text::string(u8"op");
        text::string b = text::string(u8"C");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// tailor contraction together with nearly equivalent prefix, ICU ticket 10101
TEST(collation_and_tailoring, data_file_test_74)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a=p|x &b=px &c=op )"),
        "rules", error, warning);


    {
        // <1 ca # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"ca");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

#if 0 // TODO!
    {
        // =  opx # first contraction op, then prefix p|x

        text::string a = text::string(u8"ca");
        text::string b = text::string(u8"opx");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <3 cA # 

        text::string a = text::string(u8"opx");
        text::string b = text::string(u8"cA");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }
#endif

    {
        // <3 Ca # 

        text::string a = text::string(u8"cA");
        text::string b = text::string(u8"Ca");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// reset position with prefix (pre-context), ICU ticket 10102
TEST(collation_and_tailoring, data_file_test_75)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a=p|x &px=y )"),
        "rules", error, warning);


    {
        // <1 pa # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"pa");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  px # 

        text::string a = text::string(u8"pa");
        text::string b = text::string(u8"px");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  y # 

        text::string a = text::string(u8"px");
        text::string b = text::string(u8"y");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <3 pA # 

        text::string a = text::string(u8"y");
        text::string b = text::string(u8"pA");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 q # 

        text::string a = text::string(u8"pA");
        text::string b = text::string(u8"q");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 x # 

        text::string a = text::string(u8"q");
        text::string b = text::string(u8"x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// prefix+contraction together (1), ICU ticket 10071
TEST(collation_and_tailoring, data_file_test_76)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&x=a|bc )"),
        "rules", error, warning);


    {
        // <1 ab # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"ab");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 Abc # 

        text::string a = text::string(u8"ab");
        text::string b = text::string(u8"Abc");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 abd # 

        text::string a = text::string(u8"Abc");
        text::string b = text::string(u8"abd");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 ac # 

        text::string a = text::string(u8"abd");
        text::string b = text::string(u8"ac");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 aw # 

        text::string a = text::string(u8"ac");
        text::string b = text::string(u8"aw");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 ax # 

        text::string a = text::string(u8"aw");
        text::string b = text::string(u8"ax");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  abc # 

        text::string a = text::string(u8"ax");
        text::string b = text::string(u8"abc");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <3 aX # 

        text::string a = text::string(u8"abc");
        text::string b = text::string(u8"aX");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 Ax # 

        text::string a = text::string(u8"aX");
        text::string b = text::string(u8"Ax");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 b # 

        text::string a = text::string(u8"Ax");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 bb # 

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"bb");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 bc # 

        text::string a = text::string(u8"bb");
        text::string b = text::string(u8"bc");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 bC # 

        text::string a = text::string(u8"bc");
        text::string b = text::string(u8"bC");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 Bc # 

        text::string a = text::string(u8"bC");
        text::string b = text::string(u8"Bc");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 bd # 

        text::string a = text::string(u8"Bc");
        text::string b = text::string(u8"bd");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// prefix+contraction together (2), ICU ticket 10071
TEST(collation_and_tailoring, data_file_test_77)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&w=bc &x=a|b )"),
        "rules", error, warning);


    {
        // <1 w # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"w");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  bc # 

        text::string a = text::string(u8"w");
        text::string b = text::string(u8"bc");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <3 W # 

        text::string a = text::string(u8"bc");
        text::string b = text::string(u8"W");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// prefix+contraction together (2), ICU ticket 10071
TEST(collation_and_tailoring, data_file_test_78)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&w=bc &x=a|b )"),
        "rules", error, warning);


    {
        // <1 aw # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"aw");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 ax # 

        text::string a = text::string(u8"aw");
        text::string b = text::string(u8"ax");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  ab # 

        text::string a = text::string(u8"ax");
        text::string b = text::string(u8"ab");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <3 aX # 

        text::string a = text::string(u8"ab");
        text::string b = text::string(u8"aX");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 axb # 

        text::string a = text::string(u8"aX");
        text::string b = text::string(u8"axb");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 axc # 

        text::string a = text::string(u8"axb");
        text::string b = text::string(u8"axc");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  abc # prefix match a|b takes precedence over contraction match bc

        text::string a = text::string(u8"axc");
        text::string b = text::string(u8"abc");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <3 abC # 

        text::string a = text::string(u8"abc");
        text::string b = text::string(u8"abC");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 abd # 

        text::string a = text::string(u8"abC");
        text::string b = text::string(u8"abd");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 ay # 

        text::string a = text::string(u8"abd");
        text::string b = text::string(u8"ay");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// prefix+contraction together (3), ICU ticket 10071
TEST(collation_and_tailoring, data_file_test_79)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&x=a|b &w=bc )"),
        "rules", error, warning);


    {
        // <1 w # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"w");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  bc # 

        text::string a = text::string(u8"w");
        text::string b = text::string(u8"bc");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <3 W # 

        text::string a = text::string(u8"bc");
        text::string b = text::string(u8"W");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// prefix+contraction together (3), ICU ticket 10071
TEST(collation_and_tailoring, data_file_test_80)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&x=a|b &w=bc )"),
        "rules", error, warning);


    {
        // <1 aw # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"aw");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 ax # 

        text::string a = text::string(u8"aw");
        text::string b = text::string(u8"ax");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  ab # 

        text::string a = text::string(u8"ax");
        text::string b = text::string(u8"ab");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <3 aX # 

        text::string a = text::string(u8"ab");
        text::string b = text::string(u8"aX");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 axb # 

        text::string a = text::string(u8"aX");
        text::string b = text::string(u8"axb");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 axc # 

        text::string a = text::string(u8"axb");
        text::string b = text::string(u8"axc");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  abc # prefix match a|b takes precedence over contraction match bc

        text::string a = text::string(u8"axc");
        text::string b = text::string(u8"abc");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <3 abC # 

        text::string a = text::string(u8"abc");
        text::string b = text::string(u8"abC");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 abd # 

        text::string a = text::string(u8"abC");
        text::string b = text::string(u8"abd");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 ay # 

        text::string a = text::string(u8"abd");
        text::string b = text::string(u8"ay");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// no mapping p|c, falls back to contraction ch, CLDR ticket 5962
TEST(collation_and_tailoring, data_file_test_81)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&d=ch &v=p|ci )"),
        "rules", error, warning);


    {
        // <1 pc # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"pc");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 pC # 

        text::string a = text::string(u8"pc");
        text::string b = text::string(u8"pC");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 pcH # 

        text::string a = text::string(u8"pC");
        text::string b = text::string(u8"pcH");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 pcI # 

        text::string a = text::string(u8"pcH");
        text::string b = text::string(u8"pcI");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 pd # 

        text::string a = text::string(u8"pcI");
        text::string b = text::string(u8"pd");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  pch # no-prefix contraction ch matches

        text::string a = text::string(u8"pd");
        text::string b = text::string(u8"pch");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <3 pD # 

        text::string a = text::string(u8"pch");
        text::string b = text::string(u8"pD");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 pv # 

        text::string a = text::string(u8"pD");
        text::string b = text::string(u8"pv");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  pci # prefix+contraction p|ci matches

        text::string a = text::string(u8"pv");
        text::string b = text::string(u8"pci");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <3 pV # 

        text::string a = text::string(u8"pci");
        text::string b = text::string(u8"pV");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// tailor in & around compact ranges of root primaries
TEST(collation_and_tailoring, data_file_test_82)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 1]ᚁ<a &ᚁ<b &[before 1]ᚂ<c &ᚂ<d &[before 1]ᚚ<y &ᚚ<z &[before 2]ᚁ<<r &ᚁ<<s &[before 3]ᚚ<<<t &ᚚ<<<u )"),
        "rules", error, warning);


    {
        // <1 ᣵ # U+18F5 last Canadian Aboriginal

        text::string a = text::string(u8"");
        text::string b = text::string(u8"ᣵ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 a # 

        text::string a = text::string(u8"ᣵ");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

#if 0 // [WONTFIX 0]
    {
        // <1 r # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"r");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }
#endif

    {
        // <2 ᚁ # 

        text::string a = text::string(u8"r");
        text::string b = text::string(u8"ᚁ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 s # 

        text::string a = text::string(u8"ᚁ");
        text::string b = text::string(u8"s");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <1 b # 

        text::string a = text::string(u8"s");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 c # 

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"c");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 ᚂ # 

        text::string a = text::string(u8"c");
        text::string b = text::string(u8"ᚂ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 d # 

        text::string a = text::string(u8"ᚂ");
        text::string b = text::string(u8"d");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 ᚃ # 

        text::string a = text::string(u8"d");
        text::string b = text::string(u8"ᚃ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 ᚙ # 

        text::string a = text::string(u8"ᚃ");
        text::string b = text::string(u8"ᚙ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 y # 

        text::string a = text::string(u8"ᚙ");
        text::string b = text::string(u8"y");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

#if 0 // [WONTFIX 0]
    {
        // <1 t # 

        text::string a = text::string(u8"y");
        text::string b = text::string(u8"t");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }
#endif

    {
        // <3 ᚚ # 

        text::string a = text::string(u8"t");
        text::string b = text::string(u8"ᚚ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 u # 

        text::string a = text::string(u8"ᚚ");
        text::string b = text::string(u8"u");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 z # 

        text::string a = text::string(u8"u");
        text::string b = text::string(u8"z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 ᚠ # U+16A0 first Runic

        text::string a = text::string(u8"z");
        text::string b = text::string(u8"ᚠ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// suppressContractions
TEST(collation_and_tailoring, data_file_test_83)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&z<ch<әж [suppressContractions [·cә]] )"),
        "rules", error, warning);


    {
        // <1 ch # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"ch");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 cH # ch was suppressed

        text::string a = text::string(u8"ch");
        text::string b = text::string(u8"cH");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 l # 

        text::string a = text::string(u8"cH");
        text::string b = text::string(u8"l");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

#if 0 // [WONTFIX 1] Not sure if I really care about fixing this one.
    {
        // <1 l· # primary difference, not secondary, because l|· was suppressed

        text::string a = text::string(u8"l");
        text::string b = text::string(u8"l·");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }
#endif

    {
        // <1 ә # 

        text::string a = text::string(u8"l·");
        text::string b = text::string(u8"ә");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <2 ә\u0308 # secondary difference, not primary, because contractions for ә were suppressed

        text::string a = text::string(u8"ә");
        text::string b = text::string(u8"ә\u0308");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <1 әж # 

        text::string a = text::string(u8"ә\u0308");
        text::string b = text::string(u8"әж");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 әЖ # 

        text::string a = text::string(u8"әж");
        text::string b = text::string(u8"әЖ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// Hangul & Jamo
TEST(collation_and_tailoring, data_file_test_84)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&L=\u1100 &V=\u1161 &T=\u11A8 &\uAC01<<*\u4E00-\u4EFF )"),
        "rules", error, warning);


    {
        // <1 Lv # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"Lv");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 LV # 

        text::string a = text::string(u8"Lv");
        text::string b = text::string(u8"LV");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // =  \u1100\u1161 # 

        text::string a = text::string(u8"LV");
        text::string b = text::string(u8"\u1100\u1161");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  \uAC00 # 

        text::string a = text::string(u8"\u1100\u1161");
        text::string b = text::string(u8"\uAC00");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 LVt # 

        text::string a = text::string(u8"\uAC00");
        text::string b = text::string(u8"LVt");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 LVT # 

        text::string a = text::string(u8"LVt");
        text::string b = text::string(u8"LVT");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // =  \u1100\u1161\u11A8 # 

        text::string a = text::string(u8"LVT");
        text::string b = text::string(u8"\u1100\u1161\u11A8");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  \uAC00\u11A8 # 

        text::string a = text::string(u8"\u1100\u1161\u11A8");
        text::string b = text::string(u8"\uAC00\u11A8");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  \uAC01 # 

        text::string a = text::string(u8"\uAC00\u11A8");
        text::string b = text::string(u8"\uAC01");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <2 LVT\u0308 # 

        text::string a = text::string(u8"\uAC01");
        text::string b = text::string(u8"LVT\u0308");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 \u4E00 # 

        text::string a = text::string(u8"LVT\u0308");
        text::string b = text::string(u8"\u4E00");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 \u4E01 # 

        text::string a = text::string(u8"\u4E00");
        text::string b = text::string(u8"\u4E01");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 \u4E80 # 

        text::string a = text::string(u8"\u4E01");
        text::string b = text::string(u8"\u4E80");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 \u4EFF # 

        text::string a = text::string(u8"\u4E80");
        text::string b = text::string(u8"\u4EFF");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 LV\u0308T # 

        text::string a = text::string(u8"\u4EFF");
        text::string b = text::string(u8"LV\u0308T");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <1 \uAC02 # 

        text::string a = text::string(u8"LV\u0308T");
        text::string b = text::string(u8"\uAC02");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// adjust special reset positions according to previous rules, CLDR ticket 6070
TEST(collation_and_tailoring, data_file_test_85)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[last primary ignorable]<<x<<<y &[last primary ignorable]<<z )"),
        "rules", error, warning);


    {
        // <2 \u0358 # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"\u0358");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 x # 

        text::string a = text::string(u8"\u0358");
        text::string b = text::string(u8"x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <3 y # 

        text::string a = text::string(u8"x");
        text::string b = text::string(u8"y");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

#if 0 // TODO!
    {
        // <2 z # 

        text::string a = text::string(u8"y");
        text::string b = text::string(u8"z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <1 \x20 # 

        text::string a = text::string(u8"z");
        text::string b = text::string(u8"\x20");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }
#endif

}

// adjust special reset positions according to previous rules, CLDR ticket 6070
TEST(collation_and_tailoring, data_file_test_86)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[last secondary ignorable]<<<x &[last secondary ignorable]<<<y )"),
        "rules", error, warning);


    {
        // <3 x # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 y # 

        text::string a = text::string(u8"x");
        text::string b = text::string(u8"y");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <2 \u0358 # 

        text::string a = text::string(u8"y");
        text::string b = text::string(u8"\u0358");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

}

// adjust special reset positions according to previous rules, CLDR ticket 6070
TEST(collation_and_tailoring, data_file_test_87)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 2][first variable]<<z &[before 2][first variable]<<y &[before 3][first variable]<<<x &[before 3][first variable]<<<w &[before 1][first variable]<v &[before 2][first variable]<<u &[before 3][first variable]<<<t &[before 2]\uFDD1\xA0<<s )"),
        "rules", error, warning);


    {
        // <2 \u0358 # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"\u0358");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <1 s # 

        text::string a = text::string(u8"\u0358");
        text::string b = text::string(u8"s");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <2 \uFDD1\xA0 # 

        text::string a = text::string(u8"s");
        text::string b = text::string(u8"\uFDD1\xA0");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

#if 0 // Invalid UTF-8 not supported.
    {
        // <1 t # 

        text::string a = text::string(u8"\uFDD1\xA0");
        text::string b = text::string(u8"t");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }
#endif

    {
        // <3 u # 

        text::string a = text::string(u8"t");
        text::string b = text::string(u8"u");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <2 v # 

        text::string a = text::string(u8"u");
        text::string b = text::string(u8"v");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

#if 0 // [WONTFIX 0]
    {
        // <1 w # 

        text::string a = text::string(u8"v");
        text::string b = text::string(u8"w");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }
#endif

    {
        // <3 x # 

        text::string a = text::string(u8"w");
        text::string b = text::string(u8"x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 y # 

        text::string a = text::string(u8"x");
        text::string b = text::string(u8"y");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <2 z # 

        text::string a = text::string(u8"y");
        text::string b = text::string(u8"z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 \t # 

        text::string a = text::string(u8"z");
        text::string b = text::string(u8"\t");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

}

#if 0 // Invalid UTF-8 not supported.
// adjust special reset positions according to previous rules, CLDR ticket 6070
TEST(collation_and_tailoring, data_file_test_88)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 2][first regular]<<z &[before 3][first regular]<<<y &[before 1][first regular]<x &[before 3][first regular]<<<w &[before 2]\uFDD1\u263A<<v &[before 3][first regular]<<<u &[before 1][first regular]<p &[before 3][first regular]<<<t &[last variable]<q )"),
        "rules", error, warning);


    {
        // <1 ? # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"?");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 p # 

        text::string a = text::string(u8"?");
        text::string b = text::string(u8"p");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 q # 

        text::string a = text::string(u8"p");
        text::string b = text::string(u8"q");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 t # 

        text::string a = text::string(u8"q");
        text::string b = text::string(u8"t");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 u # 

        text::string a = text::string(u8"t");
        text::string b = text::string(u8"u");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 v # 

        text::string a = text::string(u8"u");
        text::string b = text::string(u8"v");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 w # 

        text::string a = text::string(u8"v");
        text::string b = text::string(u8"w");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 x # 

        text::string a = text::string(u8"w");
        text::string b = text::string(u8"x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 y # 

        text::string a = text::string(u8"x");
        text::string b = text::string(u8"y");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 z # 

        text::string a = text::string(u8"y");
        text::string b = text::string(u8"z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 $ # 

        text::string a = text::string(u8"z");
        text::string b = text::string(u8"$");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// adjust special reset positions according to previous rules, CLDR ticket 6070
TEST(collation_and_tailoring, data_file_test_89)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 2][first regular]<<z &[before 3][first regular]<<<y &[before 1][first regular]<x &[before 3][first regular]<<<w &[before 2]\uFDD1\u263A<<v &[before 3][first regular]<<<u &[before 1][first regular]<p &[before 3][first regular]<<<t &[last variable]<q [alternate shifted])"),
        "rules", error, warning);


    {
        // =  ? # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"?");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  p # 

        text::string a = text::string(u8"?");
        text::string b = text::string(u8"p");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  q # 

        text::string a = text::string(u8"p");
        text::string b = text::string(u8"q");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 t # 

        text::string a = text::string(u8"q");
        text::string b = text::string(u8"t");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 u # 

        text::string a = text::string(u8"t");
        text::string b = text::string(u8"u");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 v # 

        text::string a = text::string(u8"u");
        text::string b = text::string(u8"v");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 w # 

        text::string a = text::string(u8"v");
        text::string b = text::string(u8"w");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 x # 

        text::string a = text::string(u8"w");
        text::string b = text::string(u8"x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 y # 

        text::string a = text::string(u8"x");
        text::string b = text::string(u8"y");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 z # 

        text::string a = text::string(u8"y");
        text::string b = text::string(u8"z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 $ # 

        text::string a = text::string(u8"z");
        text::string b = text::string(u8"$");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}
#endif

// adjust special reset positions according to previous rules, CLDR ticket 6070
TEST(collation_and_tailoring, data_file_test_90)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 2][first trailing]<<z &[before 1][first trailing]<y &[before 3][first trailing]<<<x )"),
        "rules", error, warning);


    {
        // <1 \u4E00 # first Han, first implicit

        text::string a = text::string(u8"");
        text::string b = text::string(u8"\u4E00");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

#if 0 // Invalid UTF-8 not supported.
    {
        // <1 \uFDD1\uFDD0 # FractionalUCA.txt: unassigned first primary

        text::string a = text::string(u8"\u4E00");
        text::string b = text::string(u8"\uFDD1\uFDD0");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 x # 

        text::string a = text::string(u8"\uFDD1\uFDD0");
        text::string b = text::string(u8"x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }
#endif

#if 0 // [WONTFIX 0]
    {
        // <3 y # 

        text::string a = text::string(u8"x");
        text::string b = text::string(u8"y");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }
#endif

#if 0 // TODO!
    {
        // <1 z # 

        text::string a = text::string(u8"y");
        text::string b = text::string(u8"z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }
#endif

}

// adjust special reset positions according to previous rules, CLDR ticket 6070
TEST(collation_and_tailoring, data_file_test_91)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 2][first primary ignorable]<<z &[before 2][first primary ignorable]<<y &[before 3][first primary ignorable]<<<x &[before 3][first primary ignorable]<<<w )"),
        "rules", error, warning);


    {
        // =  \x01 # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"\x01");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

#if 0 // TODO!
    {
        // <2 w # 

        text::string a = text::string(u8"\x01");
        text::string b = text::string(u8"w");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }
#endif

#if 0 // [WONTFIX 0]
    {
        // <3 x # 

        text::string a = text::string(u8"w");
        text::string b = text::string(u8"x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }
#endif

    {
        // <3 y # 

        text::string a = text::string(u8"x");
        text::string b = text::string(u8"y");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

#if 0 // [WONTFIX 0]
    {
        // <2 z # 

        text::string a = text::string(u8"y");
        text::string b = text::string(u8"z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }
#endif

    {
        // <2 \u0301 # 

        text::string a = text::string(u8"z");
        text::string b = text::string(u8"\u0301");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

}

// adjust special reset positions according to previous rules, CLDR ticket 6070
TEST(collation_and_tailoring, data_file_test_92)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 3][first secondary ignorable]<<<y &[before 3][first secondary ignorable]<<<x )"),
        "rules", error, warning);


    {
        // =  \x01 # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"\x01");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <3 x # 

        text::string a = text::string(u8"\x01");
        text::string b = text::string(u8"x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 y # 

        text::string a = text::string(u8"x");
        text::string b = text::string(u8"y");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <2 \u0301 # 

        text::string a = text::string(u8"y");
        text::string b = text::string(u8"\u0301");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

}

// canonical closure
TEST(collation_and_tailoring, data_file_test_93)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&X=A &U=Â )"),
        "rules", error, warning);


    {
        // <1 U # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"U");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  Â # 

        text::string a = text::string(u8"U");
        text::string b = text::string(u8"Â");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  A\u0302 # 

        text::string a = text::string(u8"Â");
        text::string b = text::string(u8"A\u0302");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <2 Ú # U with acute

        text::string a = text::string(u8"A\u0302");
        text::string b = text::string(u8"Ú");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  U\u0301 # 

        text::string a = text::string(u8"Ú");
        text::string b = text::string(u8"U\u0301");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

#if 0 // TODO!
    {
        // =  Ấ # A with circumflex & acute

        text::string a = text::string(u8"U\u0301");
        text::string b = text::string(u8"Ấ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }
#endif

    {
        // =  Â\u0301 # 

        text::string a = text::string(u8"Ấ");
        text::string b = text::string(u8"Â\u0301");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  A\u0302\u0301 # 

        text::string a = text::string(u8"Â\u0301");
        text::string b = text::string(u8"A\u0302\u0301");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 X # 

        text::string a = text::string(u8"A\u0302\u0301");
        text::string b = text::string(u8"X");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  A # 

        text::string a = text::string(u8"X");
        text::string b = text::string(u8"A");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <2 X\u030A # with ring above

        text::string a = text::string(u8"A");
        text::string b = text::string(u8"X\u030A");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

#if 0 // TODO!
    {
        // =  Å # 

        text::string a = text::string(u8"X\u030A");
        text::string b = text::string(u8"Å");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }
#endif

    {
        // =  A\u030A # 

        text::string a = text::string(u8"Å");
        text::string b = text::string(u8"A\u030A");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  \u212B # Angstrom sign

        text::string a = text::string(u8"A\u030A");
        text::string b = text::string(u8"\u212B");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// canonical closure
TEST(collation_and_tailoring, data_file_test_94)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&x=\u5140\u55C0 )"),
        "rules", error, warning);


    {
        // <1 x # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  \u5140\u55C0 # 

        text::string a = text::string(u8"x");
        text::string b = text::string(u8"\u5140\u55C0");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  \u5140\uFA0D # 

        text::string a = text::string(u8"\u5140\u55C0");
        text::string b = text::string(u8"\u5140\uFA0D");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  \uFA0C\u55C0 # 

        text::string a = text::string(u8"\u5140\uFA0D");
        text::string b = text::string(u8"\uFA0C\u55C0");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  \uFA0C\uFA0D # CJK compatibility characters

        text::string a = text::string(u8"\uFA0C\u55C0");
        text::string b = text::string(u8"\uFA0C\uFA0D");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <3 X # 

        text::string a = text::string(u8"\uFA0C\uFA0D");
        text::string b = text::string(u8"X");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// canonical closure
TEST(collation_and_tailoring, data_file_test_95)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&x=ä|ŝ )"),
        "rules", error, warning);


    {
        // <1 äs # not tailored

        text::string a = text::string(u8"");
        text::string b = text::string(u8"äs");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 äx # 

        text::string a = text::string(u8"äs");
        text::string b = text::string(u8"äx");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  äŝ # 

        text::string a = text::string(u8"äx");
        text::string b = text::string(u8"äŝ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  a\u0308s\u0302 # 

        text::string a = text::string(u8"äŝ");
        text::string b = text::string(u8"a\u0308s\u0302");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  a\u0308ŝ # 

        text::string a = text::string(u8"a\u0308s\u0302");
        text::string b = text::string(u8"a\u0308ŝ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  äs\u0302 # 

        text::string a = text::string(u8"a\u0308ŝ");
        text::string b = text::string(u8"äs\u0302");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <3 äX # 

        text::string a = text::string(u8"äs\u0302");
        text::string b = text::string(u8"äX");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// conjoining Jamo map to expansions
TEST(collation_and_tailoring, data_file_test_96)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&gg=\u1101 &nj=\u11AC )"),
        "rules", error, warning);


    {
        // <1 gg\u1161nj # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"gg\u1161nj");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  \u1101\u1161\u11AC # 

        text::string a = text::string(u8"gg\u1161nj");
        text::string b = text::string(u8"\u1101\u1161\u11AC");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  \uAE4C\u11AC # 

        text::string a = text::string(u8"\u1101\u1161\u11AC");
        text::string b = text::string(u8"\uAE4C\u11AC");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  \uAE51 # 

        text::string a = text::string(u8"\uAE4C\u11AC");
        text::string b = text::string(u8"\uAE51");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <3 gg\u1161nJ # 

        text::string a = text::string(u8"\uAE51");
        text::string b = text::string(u8"gg\u1161nJ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 \u1100\u1100 # 

        text::string a = text::string(u8"gg\u1161nJ");
        text::string b = text::string(u8"\u1100\u1100");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// canonical tail closure, ICU ticket 5913
TEST(collation_and_tailoring, data_file_test_97)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a<â )"),
        "rules", error, warning);


    {
        // <1 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 â # tailored

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"â");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  a\u0302 # 

        text::string a = text::string(u8"â");
        text::string b = text::string(u8"a\u0302");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <2 a\u0323\u0302 # discontiguous contraction

        text::string a = text::string(u8"a\u0302");
        text::string b = text::string(u8"a\u0323\u0302");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  ạ\u0302 # equivalent

        text::string a = text::string(u8"a\u0323\u0302");
        text::string b = text::string(u8"ạ\u0302");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  ậ # equivalent

        text::string a = text::string(u8"ạ\u0302");
        text::string b = text::string(u8"ậ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 b # 

        text::string a = text::string(u8"ậ");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// canonical tail closure, ICU ticket 5913
TEST(collation_and_tailoring, data_file_test_98)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a<ạ )"),
        "rules", error, warning);


    {
        // <1 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 ạ # tailored

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"ạ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  a\u0323 # 

        text::string a = text::string(u8"ạ");
        text::string b = text::string(u8"a\u0323");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <2 a\u0323\u0302 # contiguous contraction plus extra diacritic

        text::string a = text::string(u8"a\u0323");
        text::string b = text::string(u8"a\u0323\u0302");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  ạ\u0302 # equivalent

        text::string a = text::string(u8"a\u0323\u0302");
        text::string b = text::string(u8"ạ\u0302");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  ậ # equivalent

        text::string a = text::string(u8"ạ\u0302");
        text::string b = text::string(u8"ậ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 b # 

        text::string a = text::string(u8"ậ");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// canonical tail closure, ICU ticket 5913
TEST(collation_and_tailoring, data_file_test_99)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a<\u5140|câ    &x=\u5140|ca )"),
        "rules", error, warning);


    {
        // <1 \u5140a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"\u5140a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  \uFA0Ca # 

        text::string a = text::string(u8"\u5140a");
        text::string b = text::string(u8"\uFA0Ca");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 \u5140câ # tailored

        text::string a = text::string(u8"\uFA0Ca");
        text::string b = text::string(u8"\u5140câ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  \uFA0Ccâ # 

        text::string a = text::string(u8"\u5140câ");
        text::string b = text::string(u8"\uFA0Ccâ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  \u5140ca\u0302 # 

        text::string a = text::string(u8"\uFA0Ccâ");
        text::string b = text::string(u8"\u5140ca\u0302");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  \uFA0Cca\u0302 # 

        text::string a = text::string(u8"\u5140ca\u0302");
        text::string b = text::string(u8"\uFA0Cca\u0302");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <2 \u5140ca\u0323\u0302 # discontiguous contraction

        text::string a = text::string(u8"\uFA0Cca\u0302");
        text::string b = text::string(u8"\u5140ca\u0323\u0302");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  \uFA0Cca\u0323\u0302 # 

        text::string a = text::string(u8"\u5140ca\u0323\u0302");
        text::string b = text::string(u8"\uFA0Cca\u0323\u0302");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  \u5140cạ\u0302 # 

        text::string a = text::string(u8"\uFA0Cca\u0323\u0302");
        text::string b = text::string(u8"\u5140cạ\u0302");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  \uFA0Ccạ\u0302 # 

        text::string a = text::string(u8"\u5140cạ\u0302");
        text::string b = text::string(u8"\uFA0Ccạ\u0302");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  \u5140cậ # 

        text::string a = text::string(u8"\uFA0Ccạ\u0302");
        text::string b = text::string(u8"\u5140cậ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  \uFA0Ccậ # 

        text::string a = text::string(u8"\u5140cậ");
        text::string b = text::string(u8"\uFA0Ccậ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

#if 0 // TODO!
    {
        // <1 \u5140b # 

        text::string a = text::string(u8"\uFA0Ccậ");
        text::string b = text::string(u8"\u5140b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }
#endif

    {
        // =  \uFA0Cb # 

        text::string a = text::string(u8"\u5140b");
        text::string b = text::string(u8"\uFA0Cb");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 \u5140x # 

        text::string a = text::string(u8"\uFA0Cb");
        text::string b = text::string(u8"\u5140x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  \u5140ca # 

        text::string a = text::string(u8"\u5140x");
        text::string b = text::string(u8"\u5140ca");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// canonical tail closure, ICU ticket 5913
TEST(collation_and_tailoring, data_file_test_100)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a<\u5140|câ )"),
        "rules", error, warning);


    {
        // <1 \u5140a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"\u5140a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  \uFA0Ca # 

        text::string a = text::string(u8"\u5140a");
        text::string b = text::string(u8"\uFA0Ca");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 \u5140câ # tailored

        text::string a = text::string(u8"\uFA0Ca");
        text::string b = text::string(u8"\u5140câ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  \uFA0Ccâ # 

        text::string a = text::string(u8"\u5140câ");
        text::string b = text::string(u8"\uFA0Ccâ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  \u5140ca\u0302 # 

        text::string a = text::string(u8"\uFA0Ccâ");
        text::string b = text::string(u8"\u5140ca\u0302");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  \uFA0Cca\u0302 # 

        text::string a = text::string(u8"\u5140ca\u0302");
        text::string b = text::string(u8"\uFA0Cca\u0302");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 \u5140b # 

        text::string a = text::string(u8"\uFA0Cca\u0302");
        text::string b = text::string(u8"\u5140b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  \uFA0Cb # 

        text::string a = text::string(u8"\u5140b");
        text::string b = text::string(u8"\uFA0Cb");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 \u5140ca\u0323\u0302 # no discontiguous contraction

        text::string a = text::string(u8"\uFA0Cb");
        text::string b = text::string(u8"\u5140ca\u0323\u0302");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  \uFA0Cca\u0323\u0302 # 

        text::string a = text::string(u8"\u5140ca\u0323\u0302");
        text::string b = text::string(u8"\uFA0Cca\u0323\u0302");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  \u5140cạ\u0302 # 

        text::string a = text::string(u8"\uFA0Cca\u0323\u0302");
        text::string b = text::string(u8"\u5140cạ\u0302");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  \uFA0Ccạ\u0302 # 

        text::string a = text::string(u8"\u5140cạ\u0302");
        text::string b = text::string(u8"\uFA0Ccạ\u0302");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  \u5140cậ # 

        text::string a = text::string(u8"\uFA0Ccạ\u0302");
        text::string b = text::string(u8"\u5140cậ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  \uFA0Ccậ # 

        text::string a = text::string(u8"\u5140cậ");
        text::string b = text::string(u8"\uFA0Ccậ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// canonical tail closure, ICU ticket 5913
TEST(collation_and_tailoring, data_file_test_101)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a<cạ )"),
        "rules", error, warning);


    {
        // <1 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 cạ # tailored

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"cạ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  ca\u0323 # 

        text::string a = text::string(u8"cạ");
        text::string b = text::string(u8"ca\u0323");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <2 ca\u0323\u0302 # contiguous contraction plus extra diacritic

        text::string a = text::string(u8"ca\u0323");
        text::string b = text::string(u8"ca\u0323\u0302");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  cạ\u0302 # equivalent

        text::string a = text::string(u8"ca\u0323\u0302");
        text::string b = text::string(u8"cạ\u0302");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  cậ # equivalent

        text::string a = text::string(u8"cạ\u0302");
        text::string b = text::string(u8"cậ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

#if 0 // TODO!
    {
        // <1 b # 

        text::string a = text::string(u8"cậ");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }
#endif

}

// canonical tail closure, ICU ticket 5913
TEST(collation_and_tailoring, data_file_test_102)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&δ=αῳ    &ε=αω )"),
        "rules", error, warning);


    {
        // <1 δ # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"δ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  αῳ # 

        text::string a = text::string(u8"δ");
        text::string b = text::string(u8"αῳ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  αω\u0345 # 

        text::string a = text::string(u8"αῳ");
        text::string b = text::string(u8"αω\u0345");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

#if 0 // 0x313 and 0x300 are both ccc=230, forming a blocking context!
    {
        // <2 αω\u0313\u0300\u0345 # discontiguous contraction

        text::string a = text::string(u8"αω\u0345");
        text::string b = text::string(u8"αω\u0313\u0300\u0345");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }
#endif

    {
        // =  αὠ\u0300\u0345 # 

        text::string a = text::string(u8"αω\u0313\u0300\u0345");
        text::string b = text::string(u8"αὠ\u0300\u0345");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  αὢ\u0345 # 

        text::string a = text::string(u8"αὠ\u0300\u0345");
        text::string b = text::string(u8"αὢ\u0345");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  αᾢ # 

        text::string a = text::string(u8"αὢ\u0345");
        text::string b = text::string(u8"αᾢ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <2 αω\u0300\u0313\u0345 # 

        text::string a = text::string(u8"αᾢ");
        text::string b = text::string(u8"αω\u0300\u0313\u0345");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  αὼ\u0313\u0345 # 

        text::string a = text::string(u8"αω\u0300\u0313\u0345");
        text::string b = text::string(u8"αὼ\u0313\u0345");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  αῲ\u0313 # not FCD

        text::string a = text::string(u8"αὼ\u0313\u0345");
        text::string b = text::string(u8"αῲ\u0313");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 ε # 

        text::string a = text::string(u8"αῲ\u0313");
        text::string b = text::string(u8"ε");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  αω # 

        text::string a = text::string(u8"ε");
        text::string b = text::string(u8"αω");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// canonical tail closure, ICU ticket 5913
TEST(collation_and_tailoring, data_file_test_103)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&δ=αῳ )"),
        "rules", error, warning);


    {
        // <1 αω\u0313\u0300\u0345 # no discontiguous contraction

        text::string a = text::string(u8"");
        text::string b = text::string(u8"αω\u0313\u0300\u0345");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  αὠ\u0300\u0345 # 

        text::string a = text::string(u8"αω\u0313\u0300\u0345");
        text::string b = text::string(u8"αὠ\u0300\u0345");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  αὢ\u0345 # 

        text::string a = text::string(u8"αὠ\u0300\u0345");
        text::string b = text::string(u8"αὢ\u0345");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  αᾢ # 

        text::string a = text::string(u8"αὢ\u0345");
        text::string b = text::string(u8"αᾢ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <2 αω\u0300\u0313\u0345 # 

        text::string a = text::string(u8"αᾢ");
        text::string b = text::string(u8"αω\u0300\u0313\u0345");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  αὼ\u0313\u0345 # 

        text::string a = text::string(u8"αω\u0300\u0313\u0345");
        text::string b = text::string(u8"αὼ\u0313\u0345");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  αῲ\u0313 # not FCD

        text::string a = text::string(u8"αὼ\u0313\u0345");
        text::string b = text::string(u8"αῲ\u0313");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 δ # 

        text::string a = text::string(u8"αῲ\u0313");
        text::string b = text::string(u8"δ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  αῳ # 

        text::string a = text::string(u8"δ");
        text::string b = text::string(u8"αῳ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  αω\u0345 # 

        text::string a = text::string(u8"αῳ");
        text::string b = text::string(u8"αω\u0345");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// canonical tail closure, ICU ticket 5913
TEST(collation_and_tailoring, data_file_test_104)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&δ=αὼ\u0315 )"),
        "rules", error, warning);


    {
        // <1 αω\u0313\u0300\u0315 # Not tailored: The grave accent blocks the comma above.

        text::string a = text::string(u8"");
        text::string b = text::string(u8"αω\u0313\u0300\u0315");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  αὠ\u0300\u0315 # 

        text::string a = text::string(u8"αω\u0313\u0300\u0315");
        text::string b = text::string(u8"αὠ\u0300\u0315");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  αὢ\u0315 # 

        text::string a = text::string(u8"αὠ\u0300\u0315");
        text::string b = text::string(u8"αὢ\u0315");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 δ # 

        text::string a = text::string(u8"αὢ\u0315");
        text::string b = text::string(u8"δ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  αὼ\u0315 # 

        text::string a = text::string(u8"δ");
        text::string b = text::string(u8"αὼ\u0315");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  αω\u0300\u0315 # 

        text::string a = text::string(u8"αὼ\u0315");
        text::string b = text::string(u8"αω\u0300\u0315");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <2 αω\u0300\u0315\u0345 # 

        text::string a = text::string(u8"αω\u0300\u0315");
        text::string b = text::string(u8"αω\u0300\u0315\u0345");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  αὼ\u0315\u0345 # 

        text::string a = text::string(u8"αω\u0300\u0315\u0345");
        text::string b = text::string(u8"αὼ\u0315\u0345");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  αῲ\u0315 # not FCD

        text::string a = text::string(u8"αὼ\u0315\u0345");
        text::string b = text::string(u8"αῲ\u0315");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// danish a+a vs. a-umlaut, ICU ticket 9319
TEST(collation_and_tailoring, data_file_test_105)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&z<aa )"),
        "rules", error, warning);


    {
        // <1 z # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 aa # 

        text::string a = text::string(u8"z");
        text::string b = text::string(u8"aa");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

#if 0 // TODO!
    {
        // <2 aa\u0308 # 

        text::string a = text::string(u8"aa");
        text::string b = text::string(u8"aa\u0308");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }
#endif

    {
        // =  aä # 

        text::string a = text::string(u8"aa\u0308");
        text::string b = text::string(u8"aä");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

#if 0 // TODO!
// Jamo L with and in prefix
TEST(collation_and_tailoring, data_file_test_106)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"( &[last primary ignorable]<<\u1100|\u1100=\u1101|\u1100  &\u1100\u1100=\u1101      )"),
        "rules", error, warning);


    {
        // <1 \u1100 # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"\u1100");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <2 \u1100\u1100 # only one primary from a sequence of G lead consonants

        text::string a = text::string(u8"\u1100");
        text::string b = text::string(u8"\u1100\u1100");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  \u1101 # 

        text::string a = text::string(u8"\u1100\u1100");
        text::string b = text::string(u8"\u1101");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <2 \u1100\u1100\u1100 # 

        text::string a = text::string(u8"\u1101");
        text::string b = text::string(u8"\u1100\u1100\u1100");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  \u1101\u1100 # 

        text::string a = text::string(u8"\u1100\u1100\u1100");
        text::string b = text::string(u8"\u1101\u1100");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 \u1100\u1161 # 

        text::string a = text::string(u8"\u1101\u1100");
        text::string b = text::string(u8"\u1100\u1161");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  \uAC00 # 

        text::string a = text::string(u8"\u1100\u1161");
        text::string b = text::string(u8"\uAC00");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <2 \u1100\u1100\u1161 # 

        text::string a = text::string(u8"\uAC00");
        text::string b = text::string(u8"\u1100\u1100\u1161");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  \u1100\uAC00 # prefix match from the L of the LV syllable

        text::string a = text::string(u8"\u1100\u1100\u1161");
        text::string b = text::string(u8"\u1100\uAC00");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  \u1101\u1161 # 

        text::string a = text::string(u8"\u1100\uAC00");
        text::string b = text::string(u8"\u1101\u1161");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  \uAE4C # 

        text::string a = text::string(u8"\u1101\u1161");
        text::string b = text::string(u8"\uAE4C");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}
#endif

// proposed Korean "searchjl" tailoring with prefixes, CLDR ticket 6546
TEST(collation_and_tailoring, data_file_test_107)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(  &\u0332 <<\u1161<<\u1162      &\u0313 =\u1100|\u1100 =\u1103|\u1103 =\u1107|\u1107 =\u1109|\u1109 =\u110C|\u110C   &\u1100\u0313=\u1101<<<\u3132 &\u1103\u0313=\u1104<<<\u3138 &\u1107\u0313=\u1108<<<\u3143 &\u1109\u0313=\u110A<<<\u3146 &\u110C\u0313=\u110D<<<\u3149  )"),
        "rules", error, warning);


    {
        // <1 \u1100\u1161 # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"\u1100\u1161");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  \uAC00 # 

        text::string a = text::string(u8"\u1100\u1161");
        text::string b = text::string(u8"\uAC00");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <2 \u1100\u1162 # 

        text::string a = text::string(u8"\uAC00");
        text::string b = text::string(u8"\u1100\u1162");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  \uAC1C # 

        text::string a = text::string(u8"\u1100\u1162");
        text::string b = text::string(u8"\uAC1C");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <2 \u1100\u1100\u1161 # 

        text::string a = text::string(u8"\uAC1C");
        text::string b = text::string(u8"\u1100\u1100\u1161");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

#if 0 // TODO!
    {
        // =  \u1100\uAC00 # 

        text::string a = text::string(u8"\u1100\u1100\u1161");
        text::string b = text::string(u8"\u1100\uAC00");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  \u1101\u1161 # 

        text::string a = text::string(u8"\u1100\uAC00");
        text::string b = text::string(u8"\u1101\u1161");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }
#endif

    {
        // =  \uAE4C # 

        text::string a = text::string(u8"\u1101\u1161");
        text::string b = text::string(u8"\uAE4C");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <3 \u3132\u1161 # 

        text::string a = text::string(u8"\uAE4C");
        text::string b = text::string(u8"\u3132\u1161");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// Hangul syllables in prefix & in the interior of a contraction
TEST(collation_and_tailoring, data_file_test_108)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&x=\u1100\u1161|a\u1102\u1162z )"),
        "rules", error, warning);


    {
        // <1 \u1100\u1161x # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"\u1100\u1161x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

#if 0 // TODO!
    {
        // =  \u1100\u1161a\u1102\u1162z # 

        text::string a = text::string(u8"\u1100\u1161x");
        text::string b = text::string(u8"\u1100\u1161a\u1102\u1162z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }
#endif

    {
        // =  \u1100\u1161a\uB0B4z # 

        text::string a = text::string(u8"\u1100\u1161a\u1102\u1162z");
        text::string b = text::string(u8"\u1100\u1161a\uB0B4z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  \uAC00a\u1102\u1162z # 

        text::string a = text::string(u8"\u1100\u1161a\uB0B4z");
        text::string b = text::string(u8"\uAC00a\u1102\u1162z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  \uAC00a\uB0B4z # 

        text::string a = text::string(u8"\uAC00a\u1102\u1162z");
        text::string b = text::string(u8"\uAC00a\uB0B4z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// DataDrivenCollationTest/TestSimplifiedChineseOrder
TEST(collation_and_tailoring, data_file_test_109)
{
    auto const table = text::default_collation_table();


    {
        // < \u5F20 # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"\u5F20");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // < \u5F20\u4E00\u8E3F # 

        text::string a = text::string(u8"\u5F20");
        text::string b = text::string(u8"\u5F20\u4E00\u8E3F");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// DataDrivenCollationTest/TestTibetanNormalizedIterativeCrash
TEST(collation_and_tailoring, data_file_test_110)
{
    auto const table = text::default_collation_table();


    {
        // < \u0f71\u0f72\u0f80\u0f71\u0f72 # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"\u0f71\u0f72\u0f80\u0f71\u0f72");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // < \u0f80 # 

        text::string a = text::string(u8"\u0f71\u0f72\u0f80\u0f71\u0f72");
        text::string b = text::string(u8"\u0f80");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// DataDrivenCollationTest/TestJavaStyleRule
TEST(collation_and_tailoring, data_file_test_111)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&\u0001=equal<<<z<<x<<<w &[first tertiary ignorable]=a &[first primary ignorable]=b )"),
        "rules", error, warning);


    {
        // = a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // = equal # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"equal");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // < z # 

        text::string a = text::string(u8"equal");
        text::string b = text::string(u8"z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // < x # 

        text::string a = text::string(u8"z");
        text::string b = text::string(u8"x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // = b # x had become the new first primary ignorable

        text::string a = text::string(u8"x");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // < w # 

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"w");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// DataDrivenCollationTest/TestShiftedIgnorable
TEST(collation_and_tailoring, data_file_test_112)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"([alternate shifted][strength 4])"),
        "rules", error, warning);


    {
        // < a\u0020b # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a\u0020b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::quaternary),
            -1);
    }

    {
        // = a\u0020\u0300b # 

        text::string a = text::string(u8"a\u0020b");
        text::string b = text::string(u8"a\u0020\u0300b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::quaternary),
            0);
    }

    {
        // = a\u0020\u0301b # 

        text::string a = text::string(u8"a\u0020\u0300b");
        text::string b = text::string(u8"a\u0020\u0301b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::quaternary),
            0);
    }

    {
        // < a_b # 

        text::string a = text::string(u8"a\u0020\u0301b");
        text::string b = text::string(u8"a_b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::quaternary),
            -1);
    }

    {
        // = a_\u0300b # 

        text::string a = text::string(u8"a_b");
        text::string b = text::string(u8"a_\u0300b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::quaternary),
            0);
    }

    {
        // = a_\u0301b # 

        text::string a = text::string(u8"a_\u0300b");
        text::string b = text::string(u8"a_\u0301b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::quaternary),
            0);
    }

    {
        // < A\u0020b # 

        text::string a = text::string(u8"a_\u0301b");
        text::string b = text::string(u8"A\u0020b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::quaternary),
            -1);
    }

    {
        // = A\u0020\u0300b # 

        text::string a = text::string(u8"A\u0020b");
        text::string b = text::string(u8"A\u0020\u0300b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::quaternary),
            0);
    }

    {
        // = A\u0020\u0301b # 

        text::string a = text::string(u8"A\u0020\u0300b");
        text::string b = text::string(u8"A\u0020\u0301b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::quaternary),
            0);
    }

    {
        // < A_b # 

        text::string a = text::string(u8"A\u0020\u0301b");
        text::string b = text::string(u8"A_b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::quaternary),
            -1);
    }

    {
        // = A_\u0300b # 

        text::string a = text::string(u8"A_b");
        text::string b = text::string(u8"A_\u0300b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::quaternary),
            0);
    }

    {
        // = A_\u0301b # 

        text::string a = text::string(u8"A_\u0300b");
        text::string b = text::string(u8"A_\u0301b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::quaternary),
            0);
    }

    {
        // < a\u0301b # 

        text::string a = text::string(u8"A_\u0301b");
        text::string b = text::string(u8"a\u0301b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::quaternary),
            -1);
    }

    {
        // < A\u0301b # 

        text::string a = text::string(u8"a\u0301b");
        text::string b = text::string(u8"A\u0301b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::quaternary),
            -1);
    }

    {
        // < a\u0300b # 

        text::string a = text::string(u8"A\u0301b");
        text::string b = text::string(u8"a\u0300b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::quaternary),
            -1);
    }

    {
        // < A\u0300b # 

        text::string a = text::string(u8"a\u0300b");
        text::string b = text::string(u8"A\u0300b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::quaternary),
            -1);
    }

}

// DataDrivenCollationTest/TestNShiftedIgnorable
TEST(collation_and_tailoring, data_file_test_113)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"([alternate non-ignorable][strength 3])"),
        "rules", error, warning);


    {
        // < a\u0020b # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a\u0020b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // < A\u0020b # 

        text::string a = text::string(u8"a\u0020b");
        text::string b = text::string(u8"A\u0020b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // < a\u0020\u0301b # 

        text::string a = text::string(u8"A\u0020b");
        text::string b = text::string(u8"a\u0020\u0301b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // < A\u0020\u0301b # 

        text::string a = text::string(u8"a\u0020\u0301b");
        text::string b = text::string(u8"A\u0020\u0301b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // < a\u0020\u0300b # 

        text::string a = text::string(u8"A\u0020\u0301b");
        text::string b = text::string(u8"a\u0020\u0300b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // < A\u0020\u0300b # 

        text::string a = text::string(u8"a\u0020\u0300b");
        text::string b = text::string(u8"A\u0020\u0300b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // < a_b # 

        text::string a = text::string(u8"A\u0020\u0300b");
        text::string b = text::string(u8"a_b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // < A_b # 

        text::string a = text::string(u8"a_b");
        text::string b = text::string(u8"A_b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // < a_\u0301b # 

        text::string a = text::string(u8"A_b");
        text::string b = text::string(u8"a_\u0301b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // < A_\u0301b # 

        text::string a = text::string(u8"a_\u0301b");
        text::string b = text::string(u8"A_\u0301b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // < a_\u0300b # 

        text::string a = text::string(u8"A_\u0301b");
        text::string b = text::string(u8"a_\u0300b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // < A_\u0300b # 

        text::string a = text::string(u8"a_\u0300b");
        text::string b = text::string(u8"A_\u0300b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // < a\u0301b # 

        text::string a = text::string(u8"A_\u0300b");
        text::string b = text::string(u8"a\u0301b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // < A\u0301b # 

        text::string a = text::string(u8"a\u0301b");
        text::string b = text::string(u8"A\u0301b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // < a\u0300b # 

        text::string a = text::string(u8"A\u0301b");
        text::string b = text::string(u8"a\u0300b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // < A\u0300b # 

        text::string a = text::string(u8"a\u0300b");
        text::string b = text::string(u8"A\u0300b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// was ICU 52 cmsccoll/TestRedundantRules
TEST(collation_and_tailoring, data_file_test_115)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(& a < b < c < d& [before 1] c < m )"),
        "rules", error, warning);


    {
        // <1 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 b # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 m # 

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"m");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 c # 

        text::string a = text::string(u8"m");
        text::string b = text::string(u8"c");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 d # 

        text::string a = text::string(u8"c");
        text::string b = text::string(u8"d");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// was ICU 52 cmsccoll/TestRedundantRules
TEST(collation_and_tailoring, data_file_test_116)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(& a < b <<< c << d <<< e& [before 3] e <<< x )"),
        "rules", error, warning);


    {
        // <1 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 b # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 c # 

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"c");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <2 d # 

        text::string a = text::string(u8"c");
        text::string b = text::string(u8"d");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <3 x # 

        text::string a = text::string(u8"d");
        text::string b = text::string(u8"x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 e # 

        text::string a = text::string(u8"x");
        text::string b = text::string(u8"e");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// was ICU 52 cmsccoll/TestRedundantRules
TEST(collation_and_tailoring, data_file_test_117)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(& a < b <<< c << d <<< e <<< f < g& [before 1] g < x )"),
        "rules", error, warning);


    {
        // <1 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 b # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 c # 

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"c");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <2 d # 

        text::string a = text::string(u8"c");
        text::string b = text::string(u8"d");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <3 e # 

        text::string a = text::string(u8"d");
        text::string b = text::string(u8"e");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 f # 

        text::string a = text::string(u8"e");
        text::string b = text::string(u8"f");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 x # 

        text::string a = text::string(u8"f");
        text::string b = text::string(u8"x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 g # 

        text::string a = text::string(u8"x");
        text::string b = text::string(u8"g");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// was ICU 52 cmsccoll/TestRedundantRules
TEST(collation_and_tailoring, data_file_test_118)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(& a <<< b << c < d& a < m )"),
        "rules", error, warning);


    {
        // <1 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 b # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <2 c # 

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"c");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

#if 0 // TODO!
    {
        // <1 m # 

        text::string a = text::string(u8"c");
        text::string b = text::string(u8"m");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }
#endif

    {
        // <1 d # 

        text::string a = text::string(u8"m");
        text::string b = text::string(u8"d");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// was ICU 52 cmsccoll/TestRedundantRules
TEST(collation_and_tailoring, data_file_test_119)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a<b<<b\u0301 &z<b )"),
        "rules", error, warning);


    {
        // <1 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 b\u0301 # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"b\u0301");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 z # 

        text::string a = text::string(u8"b\u0301");
        text::string b = text::string(u8"z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 b # 

        text::string a = text::string(u8"z");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// was ICU 52 cmsccoll/TestRedundantRules
TEST(collation_and_tailoring, data_file_test_120)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&z<m<<<q<<<m )"),
        "rules", error, warning);


    {
        // <1 z # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 q # 

        text::string a = text::string(u8"z");
        text::string b = text::string(u8"q");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 m # 

        text::string a = text::string(u8"q");
        text::string b = text::string(u8"m");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// was ICU 52 cmsccoll/TestRedundantRules
TEST(collation_and_tailoring, data_file_test_121)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&z<<<m<q<<<m )"),
        "rules", error, warning);


    {
        // <1 z # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 q # 

        text::string a = text::string(u8"z");
        text::string b = text::string(u8"q");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 m # 

        text::string a = text::string(u8"q");
        text::string b = text::string(u8"m");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// was ICU 52 cmsccoll/TestRedundantRules
TEST(collation_and_tailoring, data_file_test_122)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(& a < b < c < d& r < c )"),
        "rules", error, warning);


    {
        // <1 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 b # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 d # 

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"d");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 r # 

        text::string a = text::string(u8"d");
        text::string b = text::string(u8"r");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 c # 

        text::string a = text::string(u8"r");
        text::string b = text::string(u8"c");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// was ICU 52 cmsccoll/TestRedundantRules
TEST(collation_and_tailoring, data_file_test_123)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(& a < b < c < d& c < m )"),
        "rules", error, warning);


    {
        // <1 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 b # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 c # 

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"c");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 m # 

        text::string a = text::string(u8"c");
        text::string b = text::string(u8"m");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 d # 

        text::string a = text::string(u8"m");
        text::string b = text::string(u8"d");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// was ICU 52 cmsccoll/TestRedundantRules
TEST(collation_and_tailoring, data_file_test_124)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(& a < b < c < d& a < m )"),
        "rules", error, warning);


    {
        // <1 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 m # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"m");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 b # 

        text::string a = text::string(u8"m");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 c # 

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"c");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 d # 

        text::string a = text::string(u8"c");
        text::string b = text::string(u8"d");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// was ICU 52 cmsccoll/TestExpansionSyntax
TEST(collation_and_tailoring, data_file_test_125)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&AE <<< a << b <<< c &d <<< f )"),
        "rules", error, warning);


    {
        // <1 AE # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"AE");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 a # 

        text::string a = text::string(u8"AE");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <2 b # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <3 c # 

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"c");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 d # 

        text::string a = text::string(u8"c");
        text::string b = text::string(u8"d");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 f # 

        text::string a = text::string(u8"d");
        text::string b = text::string(u8"f");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// was ICU 52 cmsccoll/TestExpansionSyntax
TEST(collation_and_tailoring, data_file_test_126)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&A <<< a / E << b / E <<< c /E  &d <<< f )"),
        "rules", error, warning);


    {
        // <1 AE # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"AE");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 a # 

        text::string a = text::string(u8"AE");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <2 b # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <3 c # 

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"c");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 d # 

        text::string a = text::string(u8"c");
        text::string b = text::string(u8"d");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 f # 

        text::string a = text::string(u8"d");
        text::string b = text::string(u8"f");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// was ICU 52 cmsccoll/TestExpansionSyntax
TEST(collation_and_tailoring, data_file_test_127)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&AE <<< a <<< b << c << d < e < f <<< g )"),
        "rules", error, warning);


    {
        // <1 AE # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"AE");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 a # 

        text::string a = text::string(u8"AE");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 b # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <2 c # 

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"c");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 d # 

        text::string a = text::string(u8"c");
        text::string b = text::string(u8"d");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <1 e # 

        text::string a = text::string(u8"d");
        text::string b = text::string(u8"e");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 f # 

        text::string a = text::string(u8"e");
        text::string b = text::string(u8"f");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 g # 

        text::string a = text::string(u8"f");
        text::string b = text::string(u8"g");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// was ICU 52 cmsccoll/TestExpansionSyntax
TEST(collation_and_tailoring, data_file_test_128)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&A <<< a / E <<< b / E << c / E << d / E < e < f <<< g )"),
        "rules", error, warning);


    {
        // <1 AE # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"AE");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 a # 

        text::string a = text::string(u8"AE");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 b # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <2 c # 

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"c");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 d # 

        text::string a = text::string(u8"c");
        text::string b = text::string(u8"d");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <1 e # 

        text::string a = text::string(u8"d");
        text::string b = text::string(u8"e");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 f # 

        text::string a = text::string(u8"e");
        text::string b = text::string(u8"f");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 g # 

        text::string a = text::string(u8"f");
        text::string b = text::string(u8"g");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// was ICU 52 cmsccoll/TestExpansionSyntax
TEST(collation_and_tailoring, data_file_test_129)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&AE <<< B <<< C / D <<< F )"),
        "rules", error, warning);


    {
        // <1 AE # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"AE");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 B # 

        text::string a = text::string(u8"AE");
        text::string b = text::string(u8"B");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 F # 

        text::string a = text::string(u8"B");
        text::string b = text::string(u8"F");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

#if 0 // TODO!
    {
        // <1 AED # 

        text::string a = text::string(u8"F");
        text::string b = text::string(u8"AED");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }
#endif

    {
        // <3 C # 

        text::string a = text::string(u8"AED");
        text::string b = text::string(u8"C");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// was ICU 52 cmsccoll/TestExpansionSyntax
TEST(collation_and_tailoring, data_file_test_130)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&A <<< B / E <<< C / ED <<< F / E )"),
        "rules", error, warning);


    {
        // <1 AE # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"AE");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 B # 

        text::string a = text::string(u8"AE");
        text::string b = text::string(u8"B");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 F # 

        text::string a = text::string(u8"B");
        text::string b = text::string(u8"F");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

#if 0 // TODO!
    {
        // <1 AED # 

        text::string a = text::string(u8"F");
        text::string b = text::string(u8"AED");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }
#endif

    {
        // <3 C # 

        text::string a = text::string(u8"AED");
        text::string b = text::string(u8"C");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// never reorder trailing primaries
TEST(collation_and_tailoring, data_file_test_131)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"([reorder Zzzz Grek])"),
        "rules", error, warning);


    {
        // <1 L # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"L");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 字 # 

        text::string a = text::string(u8"L");
        text::string b = text::string(u8"字");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 Ω # 

        text::string a = text::string(u8"字");
        text::string b = text::string(u8"Ω");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// fall back to mappings with shorter prefixes, not immediately to ones with no prefixes
TEST(collation_and_tailoring, data_file_test_132)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&u=ab|cd &v=b|ce )"),
        "rules", error, warning);


    {
        // <1 abc # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"abc");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 abcc # 

        text::string a = text::string(u8"abc");
        text::string b = text::string(u8"abcc");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 abcf # 

        text::string a = text::string(u8"abcc");
        text::string b = text::string(u8"abcf");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 abcd # 

        text::string a = text::string(u8"abcf");
        text::string b = text::string(u8"abcd");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  abu # 

        text::string a = text::string(u8"abcd");
        text::string b = text::string(u8"abu");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 abce # 

        text::string a = text::string(u8"abu");
        text::string b = text::string(u8"abce");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  abv # 

        text::string a = text::string(u8"abce");
        text::string b = text::string(u8"abv");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// fall back to mappings with shorter prefixes, not immediately to ones with no prefixes
TEST(collation_and_tailoring, data_file_test_133)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&x=op|ĉ &y=p|ç )"),
        "rules", error, warning);


    {
        // <1 opc # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"opc");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <2 opć # 

        text::string a = text::string(u8"opc");
        text::string b = text::string(u8"opć");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <1 opcz # 

        text::string a = text::string(u8"opć");
        text::string b = text::string(u8"opcz");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 opd # 

        text::string a = text::string(u8"opcz");
        text::string b = text::string(u8"opd");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 opĉ # 

        text::string a = text::string(u8"opd");
        text::string b = text::string(u8"opĉ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  opc\u0302 # 

        text::string a = text::string(u8"opĉ");
        text::string b = text::string(u8"opc\u0302");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  opx # 

        text::string a = text::string(u8"opc\u0302");
        text::string b = text::string(u8"opx");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 opç # 

        text::string a = text::string(u8"opx");
        text::string b = text::string(u8"opç");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  opc\u0327 # 

        text::string a = text::string(u8"opç");
        text::string b = text::string(u8"opc\u0327");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  opy # 

        text::string a = text::string(u8"opc\u0327");
        text::string b = text::string(u8"opy");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// fall back to mappings with shorter prefixes, not immediately to ones with no prefixes
TEST(collation_and_tailoring, data_file_test_134)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&❶=d &❷=de &❸=def &①=c|d &②=c|de &③=c|def &④=bc|d &⑤=bc|de &⑥=bc|def &⑦=abc|d &⑧=abc|de &⑨=abc|def )"),
        "rules", error, warning);


    {
        // <1 9aadzz # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"9aadzz");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  9aa❶zz # 

        text::string a = text::string(u8"9aadzz");
        text::string b = text::string(u8"9aa❶zz");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 9aadez # 

        text::string a = text::string(u8"9aa❶zz");
        text::string b = text::string(u8"9aadez");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  9aa❷z # 

        text::string a = text::string(u8"9aadez");
        text::string b = text::string(u8"9aa❷z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 9aadef # 

        text::string a = text::string(u8"9aa❷z");
        text::string b = text::string(u8"9aadef");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  9aa❸ # 

        text::string a = text::string(u8"9aadef");
        text::string b = text::string(u8"9aa❸");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 9acdzz # 

        text::string a = text::string(u8"9aa❸");
        text::string b = text::string(u8"9acdzz");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  9ac①zz # 

        text::string a = text::string(u8"9acdzz");
        text::string b = text::string(u8"9ac①zz");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 9acdez # 

        text::string a = text::string(u8"9ac①zz");
        text::string b = text::string(u8"9acdez");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  9ac②z # 

        text::string a = text::string(u8"9acdez");
        text::string b = text::string(u8"9ac②z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 9acdef # 

        text::string a = text::string(u8"9ac②z");
        text::string b = text::string(u8"9acdef");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  9ac③ # 

        text::string a = text::string(u8"9acdef");
        text::string b = text::string(u8"9ac③");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 9bcdzz # 

        text::string a = text::string(u8"9ac③");
        text::string b = text::string(u8"9bcdzz");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  9bc④zz # 

        text::string a = text::string(u8"9bcdzz");
        text::string b = text::string(u8"9bc④zz");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 9bcdez # 

        text::string a = text::string(u8"9bc④zz");
        text::string b = text::string(u8"9bcdez");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  9bc⑤z # 

        text::string a = text::string(u8"9bcdez");
        text::string b = text::string(u8"9bc⑤z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 9bcdef # 

        text::string a = text::string(u8"9bc⑤z");
        text::string b = text::string(u8"9bcdef");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  9bc⑥ # 

        text::string a = text::string(u8"9bcdef");
        text::string b = text::string(u8"9bc⑥");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 abcdzz # 

        text::string a = text::string(u8"9bc⑥");
        text::string b = text::string(u8"abcdzz");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  abc⑦zz # 

        text::string a = text::string(u8"abcdzz");
        text::string b = text::string(u8"abc⑦zz");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 abcdez # 

        text::string a = text::string(u8"abc⑦zz");
        text::string b = text::string(u8"abcdez");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  abc⑧z # 

        text::string a = text::string(u8"abcdez");
        text::string b = text::string(u8"abc⑧z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <1 abcdef # 

        text::string a = text::string(u8"abc⑧z");
        text::string b = text::string(u8"abcdef");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  abc⑨ # 

        text::string a = text::string(u8"abcdef");
        text::string b = text::string(u8"abc⑨");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// prefix + discontiguous contraction with missing prefix contraction
TEST(collation_and_tailoring, data_file_test_135)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&x=p|e &y=p|ê &z=op|ê     )"),
        "rules", error, warning);


    {
        // <1 oPe # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"oPe");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 ope # 

        text::string a = text::string(u8"oPe");
        text::string b = text::string(u8"ope");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  opx # 

        text::string a = text::string(u8"ope");
        text::string b = text::string(u8"opx");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

#if 0 // TODO! Requires canonical closure?
    {
        // <1 opệ # 

        text::string a = text::string(u8"opx");
        text::string b = text::string(u8"opệ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  opy\u0323 # y not z

        text::string a = text::string(u8"opệ");
        text::string b = text::string(u8"opy\u0323");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }
#endif

    {
        // <1 opê # 

        text::string a = text::string(u8"opy\u0323");
        text::string b = text::string(u8"opê");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  opz # 

        text::string a = text::string(u8"opê");
        text::string b = text::string(u8"opz");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// prefix + discontiguous contraction with missing prefix contraction
TEST(collation_and_tailoring, data_file_test_136)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&x=p|e &z=op|ê )"),
        "rules", error, warning);


    {
        // <1 oPe # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"oPe");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 ope # 

        text::string a = text::string(u8"oPe");
        text::string b = text::string(u8"ope");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  opx # 

        text::string a = text::string(u8"ope");
        text::string b = text::string(u8"opx");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

#if 0 // TODO!
    {
        // <2 opệ # 

        text::string a = text::string(u8"opx");
        text::string b = text::string(u8"opệ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  opx\u0323\u0302 # x not z

        text::string a = text::string(u8"opệ");
        text::string b = text::string(u8"opx\u0323\u0302");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }
#endif

    {
        // <1 opê # 

        text::string a = text::string(u8"opx\u0323\u0302");
        text::string b = text::string(u8"opê");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  opz # 

        text::string a = text::string(u8"opê");
        text::string b = text::string(u8"opz");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// prefix + discontiguous contraction with missing prefix contraction
TEST(collation_and_tailoring, data_file_test_137)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&x=e &z=op|ê )"),
        "rules", error, warning);


    {
        // <1 ope # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"ope");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  opx # 

        text::string a = text::string(u8"ope");
        text::string b = text::string(u8"opx");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // <3 oPe # 

        text::string a = text::string(u8"opx");
        text::string b = text::string(u8"oPe");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // =  oPx # 

        text::string a = text::string(u8"oPe");
        text::string b = text::string(u8"oPx");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

#if 0 // TODO!
    {
        // <2 opệ # 

        text::string a = text::string(u8"oPx");
        text::string b = text::string(u8"opệ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // =  opx\u0323\u0302 # x not z

        text::string a = text::string(u8"opệ");
        text::string b = text::string(u8"opx\u0323\u0302");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }
#endif

    {
        // <1 opê # 

        text::string a = text::string(u8"opx\u0323\u0302");
        text::string b = text::string(u8"opê");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  opz # 

        text::string a = text::string(u8"opê");
        text::string b = text::string(u8"opz");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// ICU4J CollationMiscTest/TestContractionClosure (ää)
TEST(collation_and_tailoring, data_file_test_138)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&b=\u00e4\u00e4 )"),
        "rules", error, warning);


    {
        // <1 b # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  \u00e4\u00e4 # 

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"\u00e4\u00e4");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  b # 

        text::string a = text::string(u8"\u00e4\u00e4");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  a\u0308a\u0308 # 

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"a\u0308a\u0308");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  b # 

        text::string a = text::string(u8"a\u0308a\u0308");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  \u00e4a\u0308 # 

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"\u00e4a\u0308");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  b # 

        text::string a = text::string(u8"\u00e4a\u0308");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  a\u0308\u00e4 # 

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"a\u0308\u00e4");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// ICU4J CollationMiscTest/TestContractionClosure (Å)
TEST(collation_and_tailoring, data_file_test_139)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&b=\u00C5 )"),
        "rules", error, warning);


    {
        // <1 b # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  \u00C5 # 

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"\u00C5");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  b # 

        text::string a = text::string(u8"\u00C5");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  A\u030A # 

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"A\u030A");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  b # 

        text::string a = text::string(u8"A\u030A");
        text::string b = text::string(u8"b");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

    {
        // =  \u212B # 

        text::string a = text::string(u8"b");
        text::string b = text::string(u8"\u212B");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            0);
    }

}

// reset-before on already-tailored characters, ICU ticket 10108
TEST(collation_and_tailoring, data_file_test_140)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a<w<<x &[before 2]x<<y )"),
        "rules", error, warning);


    {
        // <1 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 w # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"w");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <2 y # 

        text::string a = text::string(u8"w");
        text::string b = text::string(u8"y");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 x # 

        text::string a = text::string(u8"y");
        text::string b = text::string(u8"x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

}

// reset-before on already-tailored characters, ICU ticket 10108
TEST(collation_and_tailoring, data_file_test_141)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a<<w<<<x &[before 2]x<<y )"),
        "rules", error, warning);


    {
        // <1 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <2 y # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"y");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 w # 

        text::string a = text::string(u8"y");
        text::string b = text::string(u8"w");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <3 x # 

        text::string a = text::string(u8"w");
        text::string b = text::string(u8"x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// reset-before on already-tailored characters, ICU ticket 10108
TEST(collation_and_tailoring, data_file_test_142)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a<w<x &[before 2]x<<y )"),
        "rules", error, warning);


    {
        // <1 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 w # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"w");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

#if 0 // [WONTFIX 0]
    {
        // <1 y # 

        text::string a = text::string(u8"w");
        text::string b = text::string(u8"y");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }
#endif

    {
        // <2 x # 

        text::string a = text::string(u8"y");
        text::string b = text::string(u8"x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

}

// reset-before on already-tailored characters, ICU ticket 10108
TEST(collation_and_tailoring, data_file_test_143)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a<w<<<x &[before 2]x<<y )"),
        "rules", error, warning);


    {
        // <1 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

#if 0 // [WONTFIX 0] For this to pass, the tailoring above must be equivalent to
      // "&a<y<<w<<<x", which is inconsistent with
      // https://www.unicode.org/reports/tr35/tr35-collation.html#Placing_Characters_Before_Others
      // and http://userguide.icu-project.org/collation/customization both.
    {
        // <1 y # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"y");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }
#endif

    {
        // <2 w # 

        text::string a = text::string(u8"y");
        text::string b = text::string(u8"w");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <3 x # 

        text::string a = text::string(u8"w");
        text::string b = text::string(u8"x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// shifted+reordering, ICU ticket 9507
TEST(collation_and_tailoring, data_file_test_144)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"([reorder Grek punct space][alternate shifted][strength 4])"),
        "rules", error, warning);


    {
        // <4 ( # punctuation

        text::string a = text::string(u8"");
        text::string b = text::string(u8"(");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::quaternary),
            -1);
    }

    {
        // <4 ) # 

        text::string a = text::string(u8"(");
        text::string b = text::string(u8")");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::quaternary),
            -1);
    }

    {
        // <4 \u0020 # space

        text::string a = text::string(u8")");
        text::string b = text::string(u8"\u0020");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::quaternary),
            -1);
    }

#if 0 // 3.13.1 Interpretation of a reordering list says: "If any core code is
      // not present, then it is inserted at the front of the list".  "symbol"
      // is never mentioned, so it's supposed to come first.
    {
        // <1 ` # symbol

        text::string a = text::string(u8"\u0020");
        text::string b = text::string(u8"`");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }
#endif

    {
        // <1 ^ # 

        text::string a = text::string(u8"`");
        text::string b = text::string(u8"^");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 $ # currency symbol

        text::string a = text::string(u8"^");
        text::string b = text::string(u8"$");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 € # 

        text::string a = text::string(u8"$");
        text::string b = text::string(u8"€");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 0 # numbers

        text::string a = text::string(u8"€");
        text::string b = text::string(u8"0");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 ε # Greek

        text::string a = text::string(u8"0");
        text::string b = text::string(u8"ε");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 e # Latin

        text::string a = text::string(u8"ε");
        text::string b = text::string(u8"e");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 e(e # 

        text::string a = text::string(u8"e");
        text::string b = text::string(u8"e(e");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <4 e)e # 

        text::string a = text::string(u8"e(e");
        text::string b = text::string(u8"e)e");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::quaternary),
            -1);
    }

    {
        // <4 e\u0020e # 

        text::string a = text::string(u8"e)e");
        text::string b = text::string(u8"e\u0020e");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::quaternary),
            -1);
    }

    {
        // <4 ee # 

        text::string a = text::string(u8"e\u0020e");
        text::string b = text::string(u8"ee");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::quaternary),
            -1);
    }

#if 0 // TODO!
    {
        // <3 e(E # 

        text::string a = text::string(u8"ee");
        text::string b = text::string(u8"e(E");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }
#endif

    {
        // <4 e)E # 

        text::string a = text::string(u8"e(E");
        text::string b = text::string(u8"e)E");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::quaternary),
            -1);
    }

    {
        // <4 e\u0020E # 

        text::string a = text::string(u8"e)E");
        text::string b = text::string(u8"e\u0020E");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::quaternary),
            -1);
    }

    {
        // <4 eE # 

        text::string a = text::string(u8"e\u0020E");
        text::string b = text::string(u8"eE");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::quaternary),
            -1);
    }

}

// "uppercase first" could sort a string before its prefix, ICU ticket 9351
TEST(collation_and_tailoring, data_file_test_145)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&\u0001<<<b<<<B [caseFirst upper])"),
        "rules", error, warning);


    {
        // <1 aaa # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"aaa");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 aaaB # 

        text::string a = text::string(u8"aaa");
        text::string b = text::string(u8"aaaB");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

}

// secondary+case ignores secondary ignorables, ICU ticket 9355
TEST(collation_and_tailoring, data_file_test_146)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&\u0001<<<b<<<B [strength 2][caseLevel on])"),
        "rules", error, warning);


    {
        // <1 a # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // =  ab # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"ab");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            0);
    }

    {
        // =  aB # 

        text::string a = text::string(u8"ab");
        text::string b = text::string(u8"aB");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            0);
    }

}

// custom collation rules involving tail of a contraction in Malayalam, ICU ticket 6328
TEST(collation_and_tailoring, data_file_test_147)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 2] ൌ << ൗ )"),
        "rules", error, warning);


    {
        // <1 ൗx # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"ൗx");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <2 ൌx # 

        text::string a = text::string(u8"ൗx");
        text::string b = text::string(u8"ൌx");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

#if 0 // TODO!
    {
        // <1 ൗy # 

        text::string a = text::string(u8"ൌx");
        text::string b = text::string(u8"ൗy");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }
#endif

    {
        // <2 ൌy # 

        text::string a = text::string(u8"ൗy");
        text::string b = text::string(u8"ൌy");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

}

// quoted apostrophe in compact syntax, ICU ticket 8204
TEST(collation_and_tailoring, data_file_test_148)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&q<<*a''c )"),
        "rules", error, warning);


    {
        // <1 d # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"d");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 p # 

        text::string a = text::string(u8"d");
        text::string b = text::string(u8"p");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 q # 

        text::string a = text::string(u8"p");
        text::string b = text::string(u8"q");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <2 a # 

        text::string a = text::string(u8"q");
        text::string b = text::string(u8"a");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 \u0027 # 

        text::string a = text::string(u8"a");
        text::string b = text::string(u8"\u0027");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <2 c # 

        text::string a = text::string(u8"\u0027");
        text::string b = text::string(u8"c");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

    {
        // <1 r # 

        text::string a = text::string(u8"c");
        text::string b = text::string(u8"r");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// regression test for CollationFastLatinBuilder, ICU ticket 11388
TEST(collation_and_tailoring, data_file_test_149)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&x<<aa<<<Aa<<<AA [strength 2])"),
        "rules", error, warning);


    {
        // <1 AA # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"AA");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

#if 0 // TODO!
    {
        // <2 Aẩ # 

        text::string a = text::string(u8"AA");
        text::string b = text::string(u8"Aẩ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }
#endif

    {
        // <2 aą # 

        text::string a = text::string(u8"Aẩ");
        text::string b = text::string(u8"aą");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }

}

// regression test for CollationFastLatinBuilder, ICU ticket 11388
TEST(collation_and_tailoring, data_file_test_150)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&x<<aa<<<Aa<<<AA [strength 2])"),
        "rules", error, warning);


    {
        // <1 AA # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"AA");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

#if 0 // TODO!
    {
        // <2 aą # 

        text::string a = text::string(u8"AA");
        text::string b = text::string(u8"aą");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::secondary),
            -1);
    }
#endif

}

// tailor tertiary-after a common tertiary where there is a lower one
TEST(collation_and_tailoring, data_file_test_151)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&あ<<<x<<<y<<<z )"),
        "rules", error, warning);


    {
        // <1 ぁ # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"ぁ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 あ # 

        text::string a = text::string(u8"ぁ");
        text::string b = text::string(u8"あ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 x # 

        text::string a = text::string(u8"あ");
        text::string b = text::string(u8"x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 y # 

        text::string a = text::string(u8"x");
        text::string b = text::string(u8"y");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 z # 

        text::string a = text::string(u8"y");
        text::string b = text::string(u8"z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 ァ # 

        text::string a = text::string(u8"z");
        text::string b = text::string(u8"ァ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 い # 

        text::string a = text::string(u8"ァ");
        text::string b = text::string(u8"い");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// tailor tertiary-after a below-common tertiary
TEST(collation_and_tailoring, data_file_test_152)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&ぁ<<<x<<<y<<<z )"),
        "rules", error, warning);


    {
        // <1 ぁ # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"ぁ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 x # 

        text::string a = text::string(u8"ぁ");
        text::string b = text::string(u8"x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 y # 

        text::string a = text::string(u8"x");
        text::string b = text::string(u8"y");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 z # 

        text::string a = text::string(u8"y");
        text::string b = text::string(u8"z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 あ # 

        text::string a = text::string(u8"z");
        text::string b = text::string(u8"あ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 ァ # 

        text::string a = text::string(u8"あ");
        text::string b = text::string(u8"ァ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 い # 

        text::string a = text::string(u8"ァ");
        text::string b = text::string(u8"い");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// tailor tertiary-before a common tertiary where there is a lower one
TEST(collation_and_tailoring, data_file_test_153)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 3]あ<<<x<<<y<<<z )"),
        "rules", error, warning);


    {
        // <1 ぁ # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"ぁ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 x # 

        text::string a = text::string(u8"ぁ");
        text::string b = text::string(u8"x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 y # 

        text::string a = text::string(u8"x");
        text::string b = text::string(u8"y");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 z # 

        text::string a = text::string(u8"y");
        text::string b = text::string(u8"z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 あ # 

        text::string a = text::string(u8"z");
        text::string b = text::string(u8"あ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 ァ # 

        text::string a = text::string(u8"あ");
        text::string b = text::string(u8"ァ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 い # 

        text::string a = text::string(u8"ァ");
        text::string b = text::string(u8"い");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// tailor tertiary-before a below-common tertiary
TEST(collation_and_tailoring, data_file_test_154)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 3]ぁ<<<x<<<y<<<z )"),
        "rules", error, warning);


    {
        // <1 x # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"x");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <3 y # 

        text::string a = text::string(u8"x");
        text::string b = text::string(u8"y");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 z # 

        text::string a = text::string(u8"y");
        text::string b = text::string(u8"z");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 ぁ # 

        text::string a = text::string(u8"z");
        text::string b = text::string(u8"ぁ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 あ # 

        text::string a = text::string(u8"ぁ");
        text::string b = text::string(u8"あ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <3 ァ # 

        text::string a = text::string(u8"あ");
        text::string b = text::string(u8"ァ");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::tertiary),
            -1);
    }

    {
        // <1 い # 

        text::string a = text::string(u8"ァ");
        text::string b = text::string(u8"い");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

// reorder single scripts not groups, ICU ticket 11449
TEST(collation_and_tailoring, data_file_test_155)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"([reorder Goth Latn])"),
        "rules", error, warning);


    {
        // <1 4 # 

        text::string a = text::string(u8"");
        text::string b = text::string(u8"4");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 𐌰 # Gothic

        text::string a = text::string(u8"4");
        text::string b = text::string(u8"𐌰");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 L # 

        text::string a = text::string(u8"𐌰");
        text::string b = text::string(u8"L");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 Ω # 

        text::string a = text::string(u8"L");
        text::string b = text::string(u8"Ω");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 𐌈 # Old Italic

        text::string a = text::string(u8"Ω");
        text::string b = text::string(u8"𐌈");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

    {
        // <1 𐑐 # Shavian

        text::string a = text::string(u8"𐌈");
        text::string b = text::string(u8"𐑐");
        normalize_to_fcc(a);
        normalize_to_fcc(b);

        EXPECT_EQ(text::collate(
            text::utf32_range(a),
            text::utf32_range(b),
            table,
            text::collation_strength::primary),
            -1);
    }

}

