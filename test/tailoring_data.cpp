// Warning! This file is autogenerated.
#define BOOST_TEXT_COLLATION_DATA_INSTRUMENTATION 1
#include <boost/text/collation_table.hpp>
#include <boost/text/collate.hpp>
#include <boost/text/data/all.hpp>

#include <gtest/gtest.h>


using namespace boost;

auto const error = [](text::string const & s) { std::cout << s; };
auto const warning = [](text::string const & s) {};


// simple CEs & expansions
TEST(collation_and_tailoring, data_file_test_0)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&\x01 <<<\u0300 &9<\x00 &\uA00A\uA00B=\uA002 &\uA00A\uA00B\u00050005=\uA003  )", 77),
        "rules", error, warning);


    // =  \x01 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\x01")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  \x02 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\x01")),
        text::utf32_range(text::string_view(u8"\x02")),
        table,
        text::collation_strength::tertiary),
        0);

    // <3 \u0300 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\x02")),
        text::utf32_range(text::string_view(u8"\u0300")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 9 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0300")),
        text::utf32_range(text::string_view(u8"9")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 \x00 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9")),
        text::utf32_range(text::string_view(u8"\x00", 1)),
        table,
        text::collation_strength::primary),
        -1);

    // =  \x01\x00\x02 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\x00", 1)),
        text::utf32_range(text::string_view(u8"\x01\x00\x02", 3)),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\x01\x00\x02", 3)),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 a\u0300 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"a\u0300")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 a\u0308 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0300")),
        text::utf32_range(text::string_view(u8"a\u0308")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  ä # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0308")),
        text::utf32_range(text::string_view(u8"ä")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ä")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 か # Hiragana Ka (U+304B)
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"か")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 か\u3099 # plus voiced sound mark
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"か")),
        text::utf32_range(text::string_view(u8"か\u3099")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  が # Hiragana Ga (U+304C)
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"か\u3099")),
        text::utf32_range(text::string_view(u8"が")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 \uA00A\uA00B # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"が")),
        text::utf32_range(text::string_view(u8"\uA00A\uA00B")),
        table,
        text::collation_strength::primary),
        -1);

    // =  \uA002 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uA00A\uA00B")),
        text::utf32_range(text::string_view(u8"\uA002")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 \uA00A\uA00B\u00050004 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uA002")),
        text::utf32_range(text::string_view(u8"\uA00A\uA00B\u00050004")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 \uA00A\uA00B\u00050005 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uA00A\uA00B\u00050004")),
        text::utf32_range(text::string_view(u8"\uA00A\uA00B\u00050005")),
        table,
        text::collation_strength::primary),
        -1);

    // =  \uA003 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uA00A\uA00B\u00050005")),
        text::utf32_range(text::string_view(u8"\uA003")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 \uA00A\uA00B\u00050006 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uA003")),
        text::utf32_range(text::string_view(u8"\uA00A\uA00B\u00050006")),
        table,
        text::collation_strength::primary),
        -1);

}

// simple contractions
TEST(collation_and_tailoring, data_file_test_1)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ⓐ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"ⓐ")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 aa # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ⓐ")),
        text::utf32_range(text::string_view(u8"aa")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ⓐⓐ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aa")),
        text::utf32_range(text::string_view(u8"ⓐⓐ")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 ab # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ⓐⓐ")),
        text::utf32_range(text::string_view(u8"ab")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ⓐb # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ab")),
        text::utf32_range(text::string_view(u8"ⓐb")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 az # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ⓐb")),
        text::utf32_range(text::string_view(u8"az")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ⓐz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"az")),
        text::utf32_range(text::string_view(u8"ⓐz")),
        table,
        text::collation_strength::tertiary),
        0);

}

// simple contractions
TEST(collation_and_tailoring, data_file_test_2)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 a\u0308\u030a # ring blocked by diaeresis
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"a\u0308\u030a")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  ⓐ❸❷ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0308\u030a")),
        text::utf32_range(text::string_view(u8"ⓐ❸❷")),
        table,
        text::collation_strength::tertiary),
        0);

    // <2 a\u0327 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ⓐ❸❷")),
        text::utf32_range(text::string_view(u8"a\u0327")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  ⓐ❺ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0327")),
        text::utf32_range(text::string_view(u8"ⓐ❺")),
        table,
        text::collation_strength::tertiary),
        0);

}

// simple contractions
TEST(collation_and_tailoring, data_file_test_3)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    // <2 \u0308 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u0308")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  ❸ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0308")),
        text::utf32_range(text::string_view(u8"❸")),
        table,
        text::collation_strength::tertiary),
        0);

    // <2 \u0308\u030a\u0301 # acute blocked by ring
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"❸")),
        text::utf32_range(text::string_view(u8"\u0308\u030a\u0301")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  ❸❷❶ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0308\u030a\u0301")),
        text::utf32_range(text::string_view(u8"❸❷❶")),
        table,
        text::collation_strength::tertiary),
        0);

}

// simple contractions
TEST(collation_and_tailoring, data_file_test_4)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    // <1 \U0001D158 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\U0001D158")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ⁰ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\U0001D158")),
        text::utf32_range(text::string_view(u8"⁰")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 \U0001D158\U0001D165 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"⁰")),
        text::utf32_range(text::string_view(u8"\U0001D158\U0001D165")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ¼ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\U0001D158\U0001D165")),
        text::utf32_range(text::string_view(u8"¼")),
        table,
        text::collation_strength::tertiary),
        0);

}

// simple contractions
TEST(collation_and_tailoring, data_file_test_5)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    // <1 dz\u0323\u0301 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"dz\u0323\u0301")),
        table,
        text::collation_strength::primary),
        -1);

    // =  dz❻❶ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"dz\u0323\u0301")),
        text::utf32_range(text::string_view(u8"dz❻❶")),
        table,
        text::collation_strength::tertiary),
        0);

}

// simple contractions
TEST(collation_and_tailoring, data_file_test_6)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    // <1 abz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"abz")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ⓐⓑ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abz")),
        text::utf32_range(text::string_view(u8"ⓐⓑ")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 abzz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ⓐⓑ")),
        text::utf32_range(text::string_view(u8"abzz")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ⓐⓑz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abzz")),
        text::utf32_range(text::string_view(u8"ⓐⓑz")),
        table,
        text::collation_strength::tertiary),
        0);

}

// simple contractions
TEST(collation_and_tailoring, data_file_test_7)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 a\u0301 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"a\u0301")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓐ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0301")),
        text::utf32_range(text::string_view(u8"Ⓐ")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 a\u0301\u0301 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓐ")),
        text::utf32_range(text::string_view(u8"a\u0301\u0301")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓑ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0301\u0301")),
        text::utf32_range(text::string_view(u8"Ⓑ")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 a\u0301\u0301\u0358 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓑ")),
        text::utf32_range(text::string_view(u8"a\u0301\u0301\u0358")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓒ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0301\u0301\u0358")),
        text::utf32_range(text::string_view(u8"Ⓒ")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 a\u030a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓒ")),
        text::utf32_range(text::string_view(u8"a\u030a")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓓ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u030a")),
        text::utf32_range(text::string_view(u8"Ⓓ")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 a\u0323\u0358 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓓ")),
        text::utf32_range(text::string_view(u8"a\u0323\u0358")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓕ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0323\u0358")),
        text::utf32_range(text::string_view(u8"Ⓕ")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 a\u0327\u0323\u030a # match despite missing prefix
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓕ")),
        text::utf32_range(text::string_view(u8"a\u0327\u0323\u030a")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓖ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0327\u0323\u030a")),
        text::utf32_range(text::string_view(u8"Ⓖ")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 a\u0327\u0323bz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓖ")),
        text::utf32_range(text::string_view(u8"a\u0327\u0323bz")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓗ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0327\u0323bz")),
        text::utf32_range(text::string_view(u8"Ⓗ")),
        table,
        text::collation_strength::tertiary),
        0);

}

// simple contractions
TEST(collation_and_tailoring, data_file_test_8)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    // <2 \u0308\u0308\u0301 # acute blocked from first diaeresis, contracts with second
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u0308\u0308\u0301")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  ❸❹ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0308\u0308\u0301")),
        text::utf32_range(text::string_view(u8"❸❹")),
        table,
        text::collation_strength::tertiary),
        0);

}

// simple contractions
TEST(collation_and_tailoring, data_file_test_9)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    // <1 \U0001D158\U0001D165 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\U0001D158\U0001D165")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ¼ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\U0001D158\U0001D165")),
        text::utf32_range(text::string_view(u8"¼")),
        table,
        text::collation_strength::tertiary),
        0);

}

// simple contractions
TEST(collation_and_tailoring, data_file_test_10)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    // <3 \U0001D165\U0001D16D # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\U0001D165\U0001D16D")),
        table,
        text::collation_strength::tertiary),
        -1);

    // =  ³ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\U0001D165\U0001D16D")),
        text::utf32_range(text::string_view(u8"³")),
        table,
        text::collation_strength::tertiary),
        0);

}

// discontiguous contractions
TEST(collation_and_tailoring, data_file_test_11)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    // <1 a\u0327\u030a # a+ring skips cedilla
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a\u0327\u030a")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓓ❺ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0327\u030a")),
        text::utf32_range(text::string_view(u8"Ⓓ❺")),
        table,
        text::collation_strength::tertiary),
        0);

#if 0 // Two cedillas in a row forms a blocking context!
    // <2 a\u0327\u0327\u030a # a+ring skips 2 cedillas
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓓ❺")),
        text::utf32_range(text::string_view(u8"a\u0327\u0327\u030a")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  Ⓓ❺❺ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0327\u0327\u030a")),
        text::utf32_range(text::string_view(u8"Ⓓ❺❺")),
        table,
        text::collation_strength::tertiary),
        0);

    // <2 a\u0327\u0327\u0327\u030a # a+ring skips 3 cedillas
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓓ❺❺")),
        text::utf32_range(text::string_view(u8"a\u0327\u0327\u0327\u030a")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  Ⓓ❺❺❺ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0327\u0327\u0327\u030a")),
        text::utf32_range(text::string_view(u8"Ⓓ❺❺❺")),
        table,
        text::collation_strength::tertiary),
        0);

    // <2 a\u0334\u0327\u0327\u030a # a+ring skips tilde overlay & 2 cedillas
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓓ❺❺❺")),
        text::utf32_range(text::string_view(u8"a\u0334\u0327\u0327\u030a")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  Ⓓ❾❺❺ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0334\u0327\u0327\u030a")),
        text::utf32_range(text::string_view(u8"Ⓓ❾❺❺")),
        table,
        text::collation_strength::tertiary),
        0);
#endif

    // <1 a\u0327\u0323 # a+dot below skips cedilla
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓓ❾❺❺")),
        text::utf32_range(text::string_view(u8"a\u0327\u0323")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓔ❺ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0327\u0323")),
        text::utf32_range(text::string_view(u8"Ⓔ❺")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 a\u0323\u0301\u0358 # a+dot below+dot ab.r.: 2-char match, then skips acute
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓔ❺")),
        text::utf32_range(text::string_view(u8"a\u0323\u0301\u0358")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓕ❶ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0323\u0301\u0358")),
        text::utf32_range(text::string_view(u8"Ⓕ❶")),
        table,
        text::collation_strength::tertiary),
        0);

    // <2 a\u0334\u0323\u0358 # a+dot below skips tilde overlay
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓕ❶")),
        text::utf32_range(text::string_view(u8"a\u0334\u0323\u0358")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  Ⓕ❾ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0334\u0323\u0358")),
        text::utf32_range(text::string_view(u8"Ⓕ❾")),
        table,
        text::collation_strength::tertiary),
        0);

}

#if 0 // Two macrons in a row forms a blocking context!
// discontiguous contractions
TEST(collation_and_tailoring, data_file_test_12)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    // <2 \u0331\u0331\u0358 # macron below+dot ab.r. skips the second macron below
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u0331\u0331\u0358")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  ❽❼ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0331\u0331\u0358")),
        text::utf32_range(text::string_view(u8"❽❼")),
        table,
        text::collation_strength::tertiary),
        0);

}
#endif

// discontiguous contractions
TEST(collation_and_tailoring, data_file_test_13)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    // <1 a\u0327\u0331\u0323\u030a # a+ring skips cedilla, macron below, dot below (dot blocked by macron)
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a\u0327\u0331\u0323\u030a")),
        table,
        text::collation_strength::primary),
        -1);

#if 0 // Forms a blocking context!
    // =  Ⓓ❺❼❻ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0327\u0331\u0323\u030a")),
        text::utf32_range(text::string_view(u8"Ⓓ❺❼❻")),
        table,
        text::collation_strength::tertiary),
        0);
#endif

    // <1 a\u0327\u0323\U0001D16D\u030a # a+dot below skips cedilla
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓓ❺❼❻")),
        text::utf32_range(text::string_view(u8"a\u0327\u0323\U0001D16D\u030a")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓔ❺²❷ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0327\u0323\U0001D16D\u030a")),
        text::utf32_range(text::string_view(u8"Ⓔ❺²❷")),
        table,
        text::collation_strength::tertiary),
        0);

#if 0 // Forms a blocking context!
    // <2 a\u0327\u0327\u0323\u030a # a+dot below skips 2 cedillas
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓔ❺²❷")),
        text::utf32_range(text::string_view(u8"a\u0327\u0327\u0323\u030a")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  Ⓔ❺❺❷ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0327\u0327\u0323\u030a")),
        text::utf32_range(text::string_view(u8"Ⓔ❺❺❷")),
        table,
        text::collation_strength::tertiary),
        0);
#endif

    // <2 a\u0327\u0323\u0323\u030a # a+dot below skips cedilla
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓔ❺❺❷")),
        text::utf32_range(text::string_view(u8"a\u0327\u0323\u0323\u030a")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  Ⓔ❺❻❷ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0327\u0323\u0323\u030a")),
        text::utf32_range(text::string_view(u8"Ⓔ❺❻❷")),
        table,
        text::collation_strength::tertiary),
        0);

    // <2 a\u0334\u0327\u0323\u030a # a+dot below skips tilde overlay & cedilla
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓔ❺❻❷")),
        text::utf32_range(text::string_view(u8"a\u0334\u0327\u0323\u030a")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  Ⓔ❾❺❷ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0334\u0327\u0323\u030a")),
        text::utf32_range(text::string_view(u8"Ⓔ❾❺❷")),
        table,
        text::collation_strength::tertiary),
        0);

}

// discontiguous contractions
TEST(collation_and_tailoring, data_file_test_14)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    // <1 \U0001D158\u0327\U0001D165 # quarter note skips cedilla
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\U0001D158\u0327\U0001D165")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ¼❺ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\U0001D158\u0327\U0001D165")),
        text::utf32_range(text::string_view(u8"¼❺")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 a\U0001D165\u0323 # a+dot below skips stem
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"¼❺")),
        text::utf32_range(text::string_view(u8"a\U0001D165\u0323")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓔ¹ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\U0001D165\u0323")),
        text::utf32_range(text::string_view(u8"Ⓔ¹")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 a\u0327\u0323b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓔ¹")),
        text::utf32_range(text::string_view(u8"a\u0327\u0323b")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓔ❺b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0327\u0323b")),
        text::utf32_range(text::string_view(u8"Ⓔ❺b")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 a\u0327\u0323ba # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓔ❺b")),
        text::utf32_range(text::string_view(u8"a\u0327\u0323ba")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓔ❺bⓐ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0327\u0323ba")),
        text::utf32_range(text::string_view(u8"Ⓔ❺bⓐ")),
        table,
        text::collation_strength::tertiary),
        0);

}

// discontiguous contractions
TEST(collation_and_tailoring, data_file_test_15)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    // <1 a\u0327\u0301\u0301\u0358 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a\u0327\u0301\u0301\u0358")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓒ❺ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0327\u0301\u0301\u0358")),
        text::utf32_range(text::string_view(u8"Ⓒ❺")),
        table,
        text::collation_strength::tertiary),
        0);

}

#if 0 // A starter blocks subsequent nonstarters!
// discontiguous contractions
TEST(collation_and_tailoring, data_file_test_16)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    // <1 a\u0f73\u0301 # a+acute skips tibetan ii
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a\u0f73\u0301")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓐ③ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0f73\u0301")),
        text::utf32_range(text::string_view(u8"Ⓐ③")),
        table,
        text::collation_strength::tertiary),
        0);

}
#endif

#if 0 // This requires arbitrary reordering of CPs in the input, which is not
      // part of the UCA.
// discontiguous contractions
TEST(collation_and_tailoring, data_file_test_17)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    // <1 \u0f71\u0f73 # == \u0f73\u0f71 == \u0f71\u0f71\u0f72
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u0f71\u0f73")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ③① # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0f71\u0f73")),
        text::utf32_range(text::string_view(u8"③①")),
        table,
        text::collation_strength::tertiary),
        0);

}
#endif

#if 0 // 0x308 blocks 0x301; they are both ccc=230.
// discontiguous contractions with nested contractions
TEST(collation_and_tailoring, data_file_test_18)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    // <1 a\u0323\u0308\u0301\u0358 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a\u0323\u0308\u0301\u0358")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓕ❹ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0323\u0308\u0301\u0358")),
        text::utf32_range(text::string_view(u8"Ⓕ❹")),
        table,
        text::collation_strength::tertiary),
        0);

    // <2 a\u0323\u0308\u0301\u0308\u0301\u0358 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓕ❹")),
        text::utf32_range(text::string_view(u8"a\u0323\u0308\u0301\u0308\u0301\u0358")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  Ⓕ❹❹ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0323\u0308\u0301\u0308\u0301\u0358")),
        text::utf32_range(text::string_view(u8"Ⓕ❹❹")),
        table,
        text::collation_strength::tertiary),
        0);

}
#endif

// discontiguous contractions with interleaved contractions
TEST(collation_and_tailoring, data_file_test_19)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(   &a=ⓐ &b<bz=ⓑ &d<dz\u0301=ⓓ &z <a\u0301=Ⓐ <a\u0301\u0301=Ⓑ <a\u0301\u0301\u0358=Ⓒ <a\u030a=Ⓓ <a\u0323=Ⓔ <a\u0323\u0358=Ⓕ <a\u0327\u0323\u030a=Ⓖ <a\u0327\u0323bz=Ⓗ  &\U0001D158=⁰ <\U0001D158\U0001D165=¼        &\x01 <<<\U0001D165=¹ <<<\U0001D16D=² <<<\U0001D165\U0001D16D=³ &\u0301=❶ &\u030a=❷ &\u0308=❸ <<\u0308\u0301=❹ &\u0327=❺ &\u0323=❻ &\u0331=❼ <<\u0331\u0358=❽ &\u0334=❾ &\u0358=❿  &\u0f71=① &\u0f72=②  &\u0f73=③  )"),
        "rules", error, warning);


    // <1 a\u0327\u0331\u030a\u0358 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a\u0327\u0331\u030a\u0358")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓓ❺❽ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0327\u0331\u030a\u0358")),
        text::utf32_range(text::string_view(u8"Ⓓ❺❽")),
        table,
        text::collation_strength::tertiary),
        0);

    // <2 a\u0331\u030a\u0358 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓓ❺❽")),
        text::utf32_range(text::string_view(u8"a\u0331\u030a\u0358")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  Ⓓ❽ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0331\u030a\u0358")),
        text::utf32_range(text::string_view(u8"Ⓓ❽")),
        table,
        text::collation_strength::tertiary),
        0);

#if 0 // 0x331 twice is a blocking context.
    // <2 a\u0331\u0331\u030a\u0358\u0358 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓓ❽")),
        text::utf32_range(text::string_view(u8"a\u0331\u0331\u030a\u0358\u0358")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  Ⓓ❽❽ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0331\u0331\u030a\u0358\u0358")),
        text::utf32_range(text::string_view(u8"Ⓓ❽❽")),
        table,
        text::collation_strength::tertiary),
        0);

    // <2 a\u0331\u0331\u0331\u030a\u0301\u0358\u0358\u0358 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓓ❽❽")),
        text::utf32_range(text::string_view(u8"a\u0331\u0331\u0331\u030a\u0301\u0358\u0358\u0358")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  Ⓓ❽❽❽❶ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0331\u0331\u0331\u030a\u0301\u0358\u0358\u0358")),
        text::utf32_range(text::string_view(u8"Ⓓ❽❽❽❶")),
        table,
        text::collation_strength::tertiary),
        0);
#endif

    // <1 a\U0001D165\u0323\U0001D16Ddz\u0301 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ⓓ❽❽❽❶")),
        text::utf32_range(text::string_view(u8"a\U0001D165\u0323\U0001D16Ddz\u0301")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Ⓔ³ⓓ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\U0001D165\u0323\U0001D16Ddz\u0301")),
        text::utf32_range(text::string_view(u8"Ⓔ³ⓓ")),
        table,
        text::collation_strength::tertiary),
        0);

}

// some simple string comparisons
TEST(collation_and_tailoring, data_file_test_20)
{
    auto const table = text::default_collation_table();


    // = \u0000 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u0000")),
        table,
        text::collation_strength::tertiary),
        0);

    // < a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0000")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 B # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"B")),
        table,
        text::collation_strength::tertiary),
        -1);

#if 0 // This is completely wrong afaict.
    // = \u0000B\u0000 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"B")),
        text::utf32_range(text::string_view(u8"\u0000B\u0000")),
        table,
        text::collation_strength::tertiary),
        0);
#endif

}

// compare with strength=primary
TEST(collation_and_tailoring, data_file_test_21)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"([strength 1])"),
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // = B # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"B")),
        table,
        text::collation_strength::primary),
        0);

}

// compare with strength=secondary
TEST(collation_and_tailoring, data_file_test_22)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"([strength 1][strength 2])"),
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // = B # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"B")),
        table,
        text::collation_strength::secondary),
        0);

}

// compare with strength=tertiary
TEST(collation_and_tailoring, data_file_test_23)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"([strength 1][strength 2][strength 3])"),
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 B # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"B")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// compare with strength=quaternary
TEST(collation_and_tailoring, data_file_test_24)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"([strength 1][strength 2][strength 3][strength 4])"),
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 B # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"B")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// compare with strength=identical
TEST(collation_and_tailoring, data_file_test_25)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"([strength 1][strength 2][strength 3][strength 4][strength I])"),
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 B # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"B")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// côté with forwards secondary
TEST(collation_and_tailoring, data_file_test_26)
{
    auto const table = text::default_collation_table();


    // <1 cote # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"cote")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 coté # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"cote")),
        text::utf32_range(text::string_view(u8"coté")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 côte # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"coté")),
        text::utf32_range(text::string_view(u8"côte")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 côté # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"côte")),
        text::utf32_range(text::string_view(u8"côté")),
        table,
        text::collation_strength::secondary),
        -1);

}

// côté with backwards secondary
TEST(collation_and_tailoring, data_file_test_28)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"([backwards 2])"),
        "rules", error, warning);


    // <1 cote # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"cote")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 côte # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"cote")),
        text::utf32_range(text::string_view(u8"côte")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 coté # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"côte")),
        text::utf32_range(text::string_view(u8"coté")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 côté # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"coté")),
        text::utf32_range(text::string_view(u8"côté")),
        table,
        text::collation_strength::secondary),
        -1);

}

// Hani < surrogates < U+FFFD
TEST(collation_and_tailoring, data_file_test_32)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"([strength I])"),
        "rules", error, warning);


    // <1 abz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"abz")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 a\u4e00z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abz")),
        text::utf32_range(text::string_view(u8"a\u4e00z")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 a\U00020000z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u4e00z")),
        text::utf32_range(text::string_view(u8"a\U00020000z")),
        table,
        text::collation_strength::primary),
        -1);

}

// script reordering
TEST(collation_and_tailoring, data_file_test_33)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"([reorder Hani Zzzz digit])"),
        "rules", error, warning);


    // <1 ? # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"?")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 + # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"?")),
        text::utf32_range(text::string_view(u8"+")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 丂 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"+")),
        text::utf32_range(text::string_view(u8"丂")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"丂")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 α # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"α")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 5 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"α")),
        text::utf32_range(text::string_view(u8"5")),
        table,
        text::collation_strength::primary),
        -1);

}

// script reordering
TEST(collation_and_tailoring, data_file_test_34)
{
    auto const table = text::default_collation_table();


    // <1 ? # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"?")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 + # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"?")),
        text::utf32_range(text::string_view(u8"+")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 5 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"+")),
        text::utf32_range(text::string_view(u8"5")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"5")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 α # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"α")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 丂 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"α")),
        text::utf32_range(text::string_view(u8"丂")),
        table,
        text::collation_strength::primary),
        -1);

}

// empty rules
TEST(collation_and_tailoring, data_file_test_35)
{
    auto const table = text::default_collation_table();


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 ä # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"ä")),
        table,
        text::collation_strength::secondary),
        -1);

    // <3 Ä # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ä")),
        text::utf32_range(text::string_view(u8"Ä")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ä")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

}

// very simple rules
TEST(collation_and_tailoring, data_file_test_36)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a=e<<<<q<<<<r<x<<<X<<y<<<Y<<z<<<Z [strength 4])"),
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // =  e # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"e")),
        table,
        text::collation_strength::quaternary),
        0);

    // <4 q # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"e")),
        text::utf32_range(text::string_view(u8"q")),
        table,
        text::collation_strength::quaternary),
        -1);

    // <4 r # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"q")),
        text::utf32_range(text::string_view(u8"r")),
        table,
        text::collation_strength::quaternary),
        -1);

    // <1 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"r")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 X # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"X")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"X")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::secondary),
        -1);

    // <3 Y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"Y")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Y")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::secondary),
        -1);

    // <3 Z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"Z")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// tailoring twice before a root position: primary
TEST(collation_and_tailoring, data_file_test_37)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 1]b<p &[before 1]b<q )"),
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 p # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"p")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 q # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"p")),
        text::utf32_range(text::string_view(u8"q")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"q")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

}

// tailoring twice before a root position: secondary
TEST(collation_and_tailoring, data_file_test_38)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 2]ſ<<p &[before 2]ſ<<q )"),
        "rules", error, warning);


    // <1 s # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"s")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 p # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"s")),
        text::utf32_range(text::string_view(u8"p")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 q # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"p")),
        text::utf32_range(text::string_view(u8"q")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 ſ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"q")),
        text::utf32_range(text::string_view(u8"ſ")),
        table,
        text::collation_strength::secondary),
        -1);

}

// tailoring twice before a root position: secondary
TEST(collation_and_tailoring, data_file_test_39)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 2]b<<p &[before 2]b<<q )"),
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 p # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"p")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 q # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"p")),
        text::utf32_range(text::string_view(u8"q")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"q")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::secondary),
        -1);

}

// tailoring twice before a root position: tertiary
TEST(collation_and_tailoring, data_file_test_40)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 3]B<<<p &[before 3]B<<<q )"),
        "rules", error, warning);


    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 p # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"p")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 q # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"p")),
        text::utf32_range(text::string_view(u8"q")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 B # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"q")),
        text::utf32_range(text::string_view(u8"B")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// tailoring twice before a root position: tertiary
TEST(collation_and_tailoring, data_file_test_41)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 3]b<<<p &[before 3]b<<<q )"),
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 p # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"p")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 q # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"p")),
        text::utf32_range(text::string_view(u8"q")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"q")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// tailoring twice before a root position: tertiary
TEST(collation_and_tailoring, data_file_test_42)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 2]b<<s &[before 3]s<<<p &[before 3]s<<<q )"),
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 p # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"p")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 q # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"p")),
        text::utf32_range(text::string_view(u8"q")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 s # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"q")),
        text::utf32_range(text::string_view(u8"s")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"s")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::secondary),
        -1);

}

// tailor after completely ignorable
TEST(collation_and_tailoring, data_file_test_43)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&\x00<<<x<<y )", 13),
        "rules", error, warning);


    // = \x00 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\x00", 1)),
        table,
        text::collation_strength::tertiary),
        0);

    // = \x1F # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\x00", 1)),
        text::utf32_range(text::string_view(u8"\x1F")),
        table,
        text::collation_strength::tertiary),
        0);

    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\x1F")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::secondary),
        -1);

}

// secondary tailoring gaps, ICU ticket 9362
TEST(collation_and_tailoring, data_file_test_44)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 2]s<<'_' &s<<r &ſ<<*a-q &[before 2][first primary ignorable]<<u<<v &[last primary ignorable]<<y<<z  )"),
        "rules", error, warning);


    // <2 u # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"u")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 v # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"u")),
        text::utf32_range(text::string_view(u8"v")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 \u0332 # lowest secondary CE
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"v")),
        text::utf32_range(text::string_view(u8"\u0332")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 \u0308 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0332")),
        text::utf32_range(text::string_view(u8"\u0308")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0308")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 s_ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"s_")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 ss # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"s_")),
        text::utf32_range(text::string_view(u8"ss")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 sr # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ss")),
        text::utf32_range(text::string_view(u8"sr")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 sſ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"sr")),
        text::utf32_range(text::string_view(u8"sſ")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 sa # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"sſ")),
        text::utf32_range(text::string_view(u8"sa")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 sb # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"sa")),
        text::utf32_range(text::string_view(u8"sb")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 sp # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"sb")),
        text::utf32_range(text::string_view(u8"sp")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 sq # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"sp")),
        text::utf32_range(text::string_view(u8"sq")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 sus # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"sq")),
        text::utf32_range(text::string_view(u8"sus")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 svs # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"sus")),
        text::utf32_range(text::string_view(u8"svs")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 rs # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"svs")),
        text::utf32_range(text::string_view(u8"rs")),
        table,
        text::collation_strength::secondary),
        -1);

}

// tertiary tailoring gaps, ICU ticket 9362
TEST(collation_and_tailoring, data_file_test_45)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 3]t<<<'_' &t<<<r &ᵀ<<<*a-q &[before 3][first secondary ignorable]<<<u<<<v &[last secondary ignorable]<<<y<<<z  )"),
        "rules", error, warning);


    // <3 u # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"u")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 v # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"u")),
        text::utf32_range(text::string_view(u8"v")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"v")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 t_ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"t_")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 tt # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"t_")),
        text::utf32_range(text::string_view(u8"tt")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 tr # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"tt")),
        text::utf32_range(text::string_view(u8"tr")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 tｔ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"tr")),
        text::utf32_range(text::string_view(u8"tｔ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 tᵀ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"tｔ")),
        text::utf32_range(text::string_view(u8"tᵀ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 ta # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"tᵀ")),
        text::utf32_range(text::string_view(u8"ta")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 tb # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ta")),
        text::utf32_range(text::string_view(u8"tb")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 tp # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"tb")),
        text::utf32_range(text::string_view(u8"tp")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 tq # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"tp")),
        text::utf32_range(text::string_view(u8"tq")),
        table,
        text::collation_strength::tertiary),
        -1);

#if 0 // TODO!
    // <3 tut # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"tq")),
        text::utf32_range(text::string_view(u8"tut")),
        table,
        text::collation_strength::tertiary),
        -1);
#endif

    // <3 tvt # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"tut")),
        text::utf32_range(text::string_view(u8"tvt")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 rt # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"tvt")),
        text::utf32_range(text::string_view(u8"rt")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// secondary & tertiary around root character
TEST(collation_and_tailoring, data_file_test_46)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 2]m<<r &m<<s &[before 3]m<<<u &m<<<v )"),
        "rules", error, warning);


    // <1 l # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"l")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 r # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"l")),
        text::utf32_range(text::string_view(u8"r")),
        table,
        text::collation_strength::primary),
        -1);

#if 0 // [WONTFIX 0]
    // <2 u # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"r")),
        text::utf32_range(text::string_view(u8"u")),
        table,
        text::collation_strength::secondary),
        -1);
#endif

    // <3 m # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"u")),
        text::utf32_range(text::string_view(u8"m")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 v # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"m")),
        text::utf32_range(text::string_view(u8"v")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 s # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"v")),
        text::utf32_range(text::string_view(u8"s")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 n # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"s")),
        text::utf32_range(text::string_view(u8"n")),
        table,
        text::collation_strength::primary),
        -1);

}

// secondary & tertiary around tailored item
TEST(collation_and_tailoring, data_file_test_47)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&m<x &[before 2]x<<r &x<<s &[before 3]x<<<u &x<<<v )"),
        "rules", error, warning);


    // <1 m # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"m")),
        table,
        text::collation_strength::primary),
        -1);

#if 0 // [WONTFIX 0]
    // <1 r # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"m")),
        text::utf32_range(text::string_view(u8"r")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 u # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"r")),
        text::utf32_range(text::string_view(u8"u")),
        table,
        text::collation_strength::secondary),
        -1);
#endif

    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"u")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 v # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"v")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 s # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"v")),
        text::utf32_range(text::string_view(u8"s")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 n # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"s")),
        text::utf32_range(text::string_view(u8"n")),
        table,
        text::collation_strength::primary),
        -1);

}

// more nesting of secondary & tertiary before
TEST(collation_and_tailoring, data_file_test_48)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 3]m<<<u &[before 2]m<<r &[before 3]r<<<q &m<<<w &m<<t &[before 3]w<<<v &w<<<x &w<<s )"),
        "rules", error, warning);


    // <1 l # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"l")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 q # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"l")),
        text::utf32_range(text::string_view(u8"q")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 r # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"q")),
        text::utf32_range(text::string_view(u8"r")),
        table,
        text::collation_strength::tertiary),
        -1);

#if 0 // [WONTFIX 0]
    // <2 u # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"r")),
        text::utf32_range(text::string_view(u8"u")),
        table,
        text::collation_strength::secondary),
        -1);
#endif

    // <3 m # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"u")),
        text::utf32_range(text::string_view(u8"m")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 v # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"m")),
        text::utf32_range(text::string_view(u8"v")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 w # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"v")),
        text::utf32_range(text::string_view(u8"w")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"w")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

#if 0 // [WONTFIX 0]
    // <2 s # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"s")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 t # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"s")),
        text::utf32_range(text::string_view(u8"t")),
        table,
        text::collation_strength::secondary),
        -1);
#endif

    // <1 n # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"t")),
        text::utf32_range(text::string_view(u8"n")),
        table,
        text::collation_strength::primary),
        -1);

}

#if 0 // TODO!
// case bits
TEST(collation_and_tailoring, data_file_test_49)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&w<x =uv=uV=Uv=UV &ae=ch=cH=Ch=CH &rst=yz=yZ=Yz=YZ [caseFirst lower])"),
        "rules", error, warning);


    // <1 ae # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"ae")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ch # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ae")),
        text::utf32_range(text::string_view(u8"ch")),
        table,
        text::collation_strength::tertiary),
        0);

    // <3 cH # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ch")),
        text::utf32_range(text::string_view(u8"cH")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 Ch # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"cH")),
        text::utf32_range(text::string_view(u8"Ch")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 CH # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ch")),
        text::utf32_range(text::string_view(u8"CH")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 rst # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"CH")),
        text::utf32_range(text::string_view(u8"rst")),
        table,
        text::collation_strength::primary),
        -1);

    // =  yz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"rst")),
        text::utf32_range(text::string_view(u8"yz")),
        table,
        text::collation_strength::tertiary),
        0);

    // <3 yZ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"yz")),
        text::utf32_range(text::string_view(u8"yZ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 Yz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"yZ")),
        text::utf32_range(text::string_view(u8"Yz")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 YZ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Yz")),
        text::utf32_range(text::string_view(u8"YZ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 w # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"YZ")),
        text::utf32_range(text::string_view(u8"w")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"w")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::primary),
        -1);

    // =  uv # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"uv")),
        table,
        text::collation_strength::tertiary),
        0);

    // <3 uV # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"uv")),
        text::utf32_range(text::string_view(u8"uV")),
        table,
        text::collation_strength::tertiary),
        -1);

    // =  Uv # mixed case on single CE cannot distinguish variations
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"uV")),
        text::utf32_range(text::string_view(u8"Uv")),
        table,
        text::collation_strength::tertiary),
        0);

    // <3 UV # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Uv")),
        text::utf32_range(text::string_view(u8"UV")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// tertiary CEs, tertiary, caseLevel=off, caseFirst=lower
TEST(collation_and_tailoring, data_file_test_50)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&\u0001<<<t<<<T [caseFirst lower])"),
        "rules", error, warning);


    // <1 aa # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"aa")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 aat # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aa")),
        text::utf32_range(text::string_view(u8"aat")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 aaT # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aat")),
        text::utf32_range(text::string_view(u8"aaT")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 aA # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aaT")),
        text::utf32_range(text::string_view(u8"aA")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 aAt # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aA")),
        text::utf32_range(text::string_view(u8"aAt")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 ata # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aAt")),
        text::utf32_range(text::string_view(u8"ata")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 aTa # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ata")),
        text::utf32_range(text::string_view(u8"aTa")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// tertiary CEs, tertiary, caseLevel=off, caseFirst=upper
TEST(collation_and_tailoring, data_file_test_51)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&\u0001<<<t<<<T [caseFirst lower][caseFirst upper])"),
        "rules", error, warning);


    // <1 aA # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"aA")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 aAt # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aA")),
        text::utf32_range(text::string_view(u8"aAt")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 aa # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aAt")),
        text::utf32_range(text::string_view(u8"aa")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 aat # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aa")),
        text::utf32_range(text::string_view(u8"aat")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 aaT # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aat")),
        text::utf32_range(text::string_view(u8"aaT")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 ata # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aaT")),
        text::utf32_range(text::string_view(u8"ata")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 aTa # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ata")),
        text::utf32_range(text::string_view(u8"aTa")),
        table,
        text::collation_strength::tertiary),
        -1);

}
#endif

// reset on expansion, ICU tickets 9415 & 9593
TEST(collation_and_tailoring, data_file_test_52)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&æ<x &æb=bæ &각<h &⒀<<y &l·=z <<u  )"),
        "rules", error, warning);


    // <1 ae # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"ae")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 æ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ae")),
        text::utf32_range(text::string_view(u8"æ")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"æ")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 af # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"af")),
        table,
        text::collation_strength::primary),
        -1);

}

// reset on expansion, ICU tickets 9415 & 9593
TEST(collation_and_tailoring, data_file_test_53)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&æ<x &æb=bæ &각<h &⒀<<y &l·=z <<u  )"),
        "rules", error, warning);


    // <1 aeb # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"aeb")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 æb # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aeb")),
        text::utf32_range(text::string_view(u8"æb")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  bæ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"æb")),
        text::utf32_range(text::string_view(u8"bæ")),
        table,
        text::collation_strength::tertiary),
        0);

}

// reset on expansion, ICU tickets 9415 & 9593
TEST(collation_and_tailoring, data_file_test_54)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&æ<x &æb=bæ &각<h &⒀<<y &l·=z <<u  )"),
        "rules", error, warning);


    // <1 각 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"각")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 h # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"각")),
        text::utf32_range(text::string_view(u8"h")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 갂 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"h")),
        text::utf32_range(text::string_view(u8"갂")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 갃 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"갂")),
        text::utf32_range(text::string_view(u8"갃")),
        table,
        text::collation_strength::primary),
        -1);

}

// reset on expansion, ICU tickets 9415 & 9593
TEST(collation_and_tailoring, data_file_test_55)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&æ<x &æb=bæ &각<h &⒀<<y &l·=z <<u  )"),
        "rules", error, warning);


    // <1 · # by itself: primary CE
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"·")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 l # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"·")),
        text::utf32_range(text::string_view(u8"l")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 l· # l+middle dot has only a secondary difference from l
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"l")),
        text::utf32_range(text::string_view(u8"l·")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"l·")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::tertiary),
        0);

    // <2 u # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"u")),
        table,
        text::collation_strength::secondary),
        -1);

}

// reset on expansion, ICU tickets 9415 & 9593
TEST(collation_and_tailoring, data_file_test_56)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&æ<x &æb=bæ &각<h &⒀<<y &l·=z <<u  )"),
        "rules", error, warning);


    // <1 (13) # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"(13)")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 ⒀ # DUCET sets special tertiary weights in all CEs
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"(13)")),
        text::utf32_range(text::string_view(u8"⒀")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"⒀")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 (13[ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"(13[")),
        table,
        text::collation_strength::primary),
        -1);

}

// reset on expansion, ICU tickets 9415 & 9593
TEST(collation_and_tailoring, data_file_test_57)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&æ<x &æb=bæ &각<h &⒀<<y &l·=z <<u  [alternate shifted])"),
        "rules", error, warning);


    // <1 (13) # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"(13)")),
        table,
        text::collation_strength::primary),
        -1);

    // =  13 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"(13)")),
        text::utf32_range(text::string_view(u8"13")),
        table,
        text::collation_strength::tertiary),
        0);

    // <3 ⒀ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"13")),
        text::utf32_range(text::string_view(u8"⒀")),
        table,
        text::collation_strength::tertiary),
        -1);

    // =  y # alternate=shifted removes the tailoring difference on the last CE
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"⒀")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 14 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"14")),
        table,
        text::collation_strength::primary),
        -1);

}

// contraction inside extension, ICU ticket 9378
TEST(collation_and_tailoring, data_file_test_58)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&а<<х/й )"),
        "rules", error, warning);


    // <1 ай # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"ай")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 х # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ай")),
        text::utf32_range(text::string_view(u8"х")),
        table,
        text::collation_strength::secondary),
        -1);

}

// no duplicate tailored CEs for different reset positions with same CEs, ICU ticket 10104
TEST(collation_and_tailoring, data_file_test_59)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&t<x &ᵀ<y &q<u &[before 1]ꝗ<v )"),
        "rules", error, warning);


    // <1 q # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"q")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 u # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"q")),
        text::utf32_range(text::string_view(u8"u")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 v # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"u")),
        text::utf32_range(text::string_view(u8"v")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ꝗ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"v")),
        text::utf32_range(text::string_view(u8"ꝗ")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 t # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ꝗ")),
        text::utf32_range(text::string_view(u8"t")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 ᵀ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"t")),
        text::utf32_range(text::string_view(u8"ᵀ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ᵀ")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::primary),
        -1);

#if 0 // TODO!
    // <1 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::primary),
        -1);
#endif
}

// later rule does not affect earlier reset position, ICU ticket 10105
TEST(collation_and_tailoring, data_file_test_60)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a < u < v < w  &ov < x  &b < v )"),
        "rules", error, warning);


    // <1 oa # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"oa")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ou # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"oa")),
        text::utf32_range(text::string_view(u8"ou")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 x # CE(o) followed by CE between u and w
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ou")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::primary),
        -1);

#if 0 // TODO!
    // <1 ow # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"ow")),
        table,
        text::collation_strength::primary),
        -1);
#endif

    // <1 ob # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ow")),
        text::utf32_range(text::string_view(u8"ob")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ov # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ob")),
        text::utf32_range(text::string_view(u8"ov")),
        table,
        text::collation_strength::primary),
        -1);

}

// later rule does not affect earlier extension (1), ICU ticket 10105
TEST(collation_and_tailoring, data_file_test_61)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a=x/b &v=b [strength 2])"),
        "rules", error, warning);


    // <1 B # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"B")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"B")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 v # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"v")),
        table,
        text::collation_strength::primary),
        -1);

    // =  b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"v")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::secondary),
        0);

}

// later rule does not affect earlier extension (1), ICU ticket 10105
TEST(collation_and_tailoring, data_file_test_62)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a=x/b &v=b [strength 2])"),
        "rules", error, warning);


    // <1 AB # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"AB")),
        table,
        text::collation_strength::primary),
        -1);

    // =  x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"AB")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::secondary),
        0);

    // <1 ac # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"ac")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 av # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ac")),
        text::utf32_range(text::string_view(u8"av")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ab # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"av")),
        text::utf32_range(text::string_view(u8"ab")),
        table,
        text::collation_strength::secondary),
        0);

}

// later rule does not affect earlier extension (2), ICU ticket 10105
TEST(collation_and_tailoring, data_file_test_63)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a <<< c / e &g <<< e / l [strength 2])"),
        "rules", error, warning);


    // <1 AE # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"AE")),
        table,
        text::collation_strength::primary),
        -1);

    // =  c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"AE")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::secondary),
        0);

    // <2 æ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"æ")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 agl # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"æ")),
        text::utf32_range(text::string_view(u8"agl")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ae # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"agl")),
        text::utf32_range(text::string_view(u8"ae")),
        table,
        text::collation_strength::secondary),
        0);

}

// later rule does not affect earlier extension (3), ICU ticket 10105
TEST(collation_and_tailoring, data_file_test_64)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a = b / c  &d = c / e [strength 2])"),
        "rules", error, warning);


    // <1 AC # C is still only tertiary different from the original c
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"AC")),
        table,
        text::collation_strength::primary),
        -1);

    // =  b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"AC")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::secondary),
        0);

    // <1 ade # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"ade")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ac # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ade")),
        text::utf32_range(text::string_view(u8"ac")),
        table,
        text::collation_strength::secondary),
        0);

}

// extension contains tailored character, ICU ticket 10105
TEST(collation_and_tailoring, data_file_test_65)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a=e &b=u/e )"),
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // =  e # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"e")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 ba # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"e")),
        text::utf32_range(text::string_view(u8"ba")),
        table,
        text::collation_strength::primary),
        -1);

    // =  be # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ba")),
        text::utf32_range(text::string_view(u8"be")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  u # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"be")),
        text::utf32_range(text::string_view(u8"u")),
        table,
        text::collation_strength::tertiary),
        0);

}

// add simple mappings for characters with root context
TEST(collation_and_tailoring, data_file_test_66)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&z=· &n=и )"),
        "rules", error, warning);


    // <1 l # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"l")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 l· # root mapping for l|· still works
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"l")),
        text::utf32_range(text::string_view(u8"l·")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"l·")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::primary),
        -1);

    // =  · # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"·")),
        table,
        text::collation_strength::tertiary),
        0);

}

// add simple mappings for characters with root context
TEST(collation_and_tailoring, data_file_test_67)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&z=· &n=и )"),
        "rules", error, warning);


    // <1 n # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"n")),
        table,
        text::collation_strength::primary),
        -1);

    // =  и # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"n")),
        text::utf32_range(text::string_view(u8"и")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 И # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"и")),
        text::utf32_range(text::string_view(u8"И")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 и\u0306 # root mapping for й=и\u0306 still works
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"И")),
        text::utf32_range(text::string_view(u8"и\u0306")),
        table,
        text::collation_strength::primary),
        -1);

    // =  й # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"и\u0306")),
        text::utf32_range(text::string_view(u8"й")),
        table,
        text::collation_strength::tertiary),
        0);

    // <3 Й # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"й")),
        text::utf32_range(text::string_view(u8"Й")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// add context mappings around characters with root context
TEST(collation_and_tailoring, data_file_test_68)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&z=·h &n=ә|и )"),
        "rules", error, warning);


    // <1 l # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"l")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 l· # root mapping for l|· still works
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"l")),
        text::utf32_range(text::string_view(u8"l·")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"l·")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ·h # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"·h")),
        table,
        text::collation_strength::tertiary),
        0);

}

// add context mappings around characters with root context
TEST(collation_and_tailoring, data_file_test_69)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&z=·h &n=ә|и )"),
        "rules", error, warning);


    // <1 и # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"и")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 И # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"и")),
        text::utf32_range(text::string_view(u8"И")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 и\u0306 # root mapping for й=и\u0306 still works
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"И")),
        text::utf32_range(text::string_view(u8"и\u0306")),
        table,
        text::collation_strength::primary),
        -1);

    // =  й # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"и\u0306")),
        text::utf32_range(text::string_view(u8"й")),
        table,
        text::collation_strength::tertiary),
        0);

}

// add context mappings around characters with root context
TEST(collation_and_tailoring, data_file_test_70)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&z=·h &n=ә|и )"),
        "rules", error, warning);


    // <1 әn # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"әn")),
        table,
        text::collation_strength::primary),
        -1);

    // =  әи # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"әn")),
        text::utf32_range(text::string_view(u8"әи")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 әo # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"әи")),
        text::utf32_range(text::string_view(u8"әo")),
        table,
        text::collation_strength::primary),
        -1);

}

// many secondary CEs at the top of their range
TEST(collation_and_tailoring, data_file_test_71)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[last primary ignorable]<<*\u2801-\u28ff )"),
        "rules", error, warning);


    // <2 \u0308 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u0308")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 \u2801 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0308")),
        text::utf32_range(text::string_view(u8"\u2801")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 \u2802 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u2801")),
        text::utf32_range(text::string_view(u8"\u2802")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 \u2803 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u2802")),
        text::utf32_range(text::string_view(u8"\u2803")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 \u2804 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u2803")),
        text::utf32_range(text::string_view(u8"\u2804")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 \u28fd # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u2804")),
        text::utf32_range(text::string_view(u8"\u28fd")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 \u28fe # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u28fd")),
        text::utf32_range(text::string_view(u8"\u28fe")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 \u28ff # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u28fe")),
        text::utf32_range(text::string_view(u8"\u28ff")),
        table,
        text::collation_strength::secondary),
        -1);

#if 0 // TODO!
    // <1 \x20 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u28ff")),
        text::utf32_range(text::string_view(u8"\x20")),
        table,
        text::collation_strength::primary),
        -1);
#endif
}

// many tertiary CEs at the top of their range
TEST(collation_and_tailoring, data_file_test_72)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[last secondary ignorable]<<<*a-z )"),
        "rules", error, warning);


    // <3 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"d")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"d")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 \u0308 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"\u0308")),
        table,
        text::collation_strength::secondary),
        -1);

}

// tailor contraction together with nearly equivalent prefix, ICU ticket 10101
TEST(collation_and_tailoring, data_file_test_73)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a=p|x &b=px &c=op )"),
        "rules", error, warning);


    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // =  px # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"px")),
        table,
        text::collation_strength::tertiary),
        0);

    // <3 B # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"px")),
        text::utf32_range(text::string_view(u8"B")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"B")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::primary),
        -1);

    // =  op # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"op")),
        table,
        text::collation_strength::tertiary),
        0);

    // <3 C # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"op")),
        text::utf32_range(text::string_view(u8"C")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// tailor contraction together with nearly equivalent prefix, ICU ticket 10101
TEST(collation_and_tailoring, data_file_test_74)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a=p|x &b=px &c=op )"),
        "rules", error, warning);


    // <1 ca # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"ca")),
        table,
        text::collation_strength::primary),
        -1);

#if 0 // TODO!
    // =  opx # first contraction op, then prefix p|x
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ca")),
        text::utf32_range(text::string_view(u8"opx")),
        table,
        text::collation_strength::tertiary),
        0);

    // <3 cA # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opx")),
        text::utf32_range(text::string_view(u8"cA")),
        table,
        text::collation_strength::tertiary),
        -1);
#endif

    // <3 Ca # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"cA")),
        text::utf32_range(text::string_view(u8"Ca")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// reset position with prefix (pre-context), ICU ticket 10102
TEST(collation_and_tailoring, data_file_test_75)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a=p|x &px=y )"),
        "rules", error, warning);


    // <1 pa # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"pa")),
        table,
        text::collation_strength::primary),
        -1);

    // =  px # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"pa")),
        text::utf32_range(text::string_view(u8"px")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"px")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::tertiary),
        0);

    // <3 pA # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"pA")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 q # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"pA")),
        text::utf32_range(text::string_view(u8"q")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"q")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::primary),
        -1);

}

// prefix+contraction together (1), ICU ticket 10071
TEST(collation_and_tailoring, data_file_test_76)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&x=a|bc )"),
        "rules", error, warning);


    // <1 ab # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"ab")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 Abc # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ab")),
        text::utf32_range(text::string_view(u8"Abc")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 abd # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Abc")),
        text::utf32_range(text::string_view(u8"abd")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ac # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abd")),
        text::utf32_range(text::string_view(u8"ac")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 aw # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ac")),
        text::utf32_range(text::string_view(u8"aw")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ax # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aw")),
        text::utf32_range(text::string_view(u8"ax")),
        table,
        text::collation_strength::primary),
        -1);

    // =  abc # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ax")),
        text::utf32_range(text::string_view(u8"abc")),
        table,
        text::collation_strength::tertiary),
        0);

    // <3 aX # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abc")),
        text::utf32_range(text::string_view(u8"aX")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 Ax # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aX")),
        text::utf32_range(text::string_view(u8"Ax")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ax")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 bb # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"bb")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 bc # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"bb")),
        text::utf32_range(text::string_view(u8"bc")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 bC # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"bc")),
        text::utf32_range(text::string_view(u8"bC")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 Bc # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"bC")),
        text::utf32_range(text::string_view(u8"Bc")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 bd # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Bc")),
        text::utf32_range(text::string_view(u8"bd")),
        table,
        text::collation_strength::primary),
        -1);

}

// prefix+contraction together (2), ICU ticket 10071
TEST(collation_and_tailoring, data_file_test_77)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&w=bc &x=a|b )"),
        "rules", error, warning);


    // <1 w # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"w")),
        table,
        text::collation_strength::primary),
        -1);

    // =  bc # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"w")),
        text::utf32_range(text::string_view(u8"bc")),
        table,
        text::collation_strength::tertiary),
        0);

    // <3 W # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"bc")),
        text::utf32_range(text::string_view(u8"W")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// prefix+contraction together (2), ICU ticket 10071
TEST(collation_and_tailoring, data_file_test_78)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&w=bc &x=a|b )"),
        "rules", error, warning);


    // <1 aw # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"aw")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ax # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aw")),
        text::utf32_range(text::string_view(u8"ax")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ab # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ax")),
        text::utf32_range(text::string_view(u8"ab")),
        table,
        text::collation_strength::tertiary),
        0);

    // <3 aX # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ab")),
        text::utf32_range(text::string_view(u8"aX")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 axb # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aX")),
        text::utf32_range(text::string_view(u8"axb")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 axc # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"axb")),
        text::utf32_range(text::string_view(u8"axc")),
        table,
        text::collation_strength::primary),
        -1);

    // =  abc # prefix match a|b takes precedence over contraction match bc
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"axc")),
        text::utf32_range(text::string_view(u8"abc")),
        table,
        text::collation_strength::tertiary),
        0);

    // <3 abC # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abc")),
        text::utf32_range(text::string_view(u8"abC")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 abd # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abC")),
        text::utf32_range(text::string_view(u8"abd")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ay # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abd")),
        text::utf32_range(text::string_view(u8"ay")),
        table,
        text::collation_strength::primary),
        -1);

}

// prefix+contraction together (3), ICU ticket 10071
TEST(collation_and_tailoring, data_file_test_79)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&x=a|b &w=bc )"),
        "rules", error, warning);


    // <1 w # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"w")),
        table,
        text::collation_strength::primary),
        -1);

    // =  bc # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"w")),
        text::utf32_range(text::string_view(u8"bc")),
        table,
        text::collation_strength::tertiary),
        0);

    // <3 W # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"bc")),
        text::utf32_range(text::string_view(u8"W")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// prefix+contraction together (3), ICU ticket 10071
TEST(collation_and_tailoring, data_file_test_80)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&x=a|b &w=bc )"),
        "rules", error, warning);


    // <1 aw # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"aw")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ax # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aw")),
        text::utf32_range(text::string_view(u8"ax")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ab # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ax")),
        text::utf32_range(text::string_view(u8"ab")),
        table,
        text::collation_strength::tertiary),
        0);

    // <3 aX # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ab")),
        text::utf32_range(text::string_view(u8"aX")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 axb # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aX")),
        text::utf32_range(text::string_view(u8"axb")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 axc # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"axb")),
        text::utf32_range(text::string_view(u8"axc")),
        table,
        text::collation_strength::primary),
        -1);

    // =  abc # prefix match a|b takes precedence over contraction match bc
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"axc")),
        text::utf32_range(text::string_view(u8"abc")),
        table,
        text::collation_strength::tertiary),
        0);

    // <3 abC # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abc")),
        text::utf32_range(text::string_view(u8"abC")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 abd # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abC")),
        text::utf32_range(text::string_view(u8"abd")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ay # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abd")),
        text::utf32_range(text::string_view(u8"ay")),
        table,
        text::collation_strength::primary),
        -1);

}

// no mapping p|c, falls back to contraction ch, CLDR ticket 5962
TEST(collation_and_tailoring, data_file_test_81)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&d=ch &v=p|ci )"),
        "rules", error, warning);


    // <1 pc # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"pc")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 pC # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"pc")),
        text::utf32_range(text::string_view(u8"pC")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 pcH # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"pC")),
        text::utf32_range(text::string_view(u8"pcH")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 pcI # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"pcH")),
        text::utf32_range(text::string_view(u8"pcI")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 pd # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"pcI")),
        text::utf32_range(text::string_view(u8"pd")),
        table,
        text::collation_strength::primary),
        -1);

    // =  pch # no-prefix contraction ch matches
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"pd")),
        text::utf32_range(text::string_view(u8"pch")),
        table,
        text::collation_strength::tertiary),
        0);

    // <3 pD # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"pch")),
        text::utf32_range(text::string_view(u8"pD")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 pv # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"pD")),
        text::utf32_range(text::string_view(u8"pv")),
        table,
        text::collation_strength::primary),
        -1);

    // =  pci # prefix+contraction p|ci matches
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"pv")),
        text::utf32_range(text::string_view(u8"pci")),
        table,
        text::collation_strength::tertiary),
        0);

    // <3 pV # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"pci")),
        text::utf32_range(text::string_view(u8"pV")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// tailor in & around compact ranges of root primaries
TEST(collation_and_tailoring, data_file_test_82)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 1]ᚁ<a &ᚁ<b &[before 1]ᚂ<c &ᚂ<d &[before 1]ᚚ<y &ᚚ<z &[before 2]ᚁ<<r &ᚁ<<s &[before 3]ᚚ<<<t &ᚚ<<<u )"),
        "rules", error, warning);


    // <1 ᣵ # U+18F5 last Canadian Aboriginal
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"ᣵ")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ᣵ")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

#if 0 // [WONTFIX 0]
    // <1 r # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"r")),
        table,
        text::collation_strength::primary),
        -1);
#endif

    // <2 ᚁ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"r")),
        text::utf32_range(text::string_view(u8"ᚁ")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 s # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ᚁ")),
        text::utf32_range(text::string_view(u8"s")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"s")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ᚂ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"ᚂ")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ᚂ")),
        text::utf32_range(text::string_view(u8"d")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ᚃ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"d")),
        text::utf32_range(text::string_view(u8"ᚃ")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ᚙ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ᚃ")),
        text::utf32_range(text::string_view(u8"ᚙ")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ᚙ")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::primary),
        -1);

#if 0 // [WONTFIX 0]
    // <1 t # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"t")),
        table,
        text::collation_strength::primary),
        -1);
#endif

    // <3 ᚚ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"t")),
        text::utf32_range(text::string_view(u8"ᚚ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 u # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ᚚ")),
        text::utf32_range(text::string_view(u8"u")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"u")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ᚠ # U+16A0 first Runic
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"ᚠ")),
        table,
        text::collation_strength::primary),
        -1);

}

// suppressContractions
TEST(collation_and_tailoring, data_file_test_83)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&z<ch<әж [suppressContractions [·cә]] )"),
        "rules", error, warning);


    // <1 ch # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"ch")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 cH # ch was suppressed
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ch")),
        text::utf32_range(text::string_view(u8"cH")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 l # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"cH")),
        text::utf32_range(text::string_view(u8"l")),
        table,
        text::collation_strength::primary),
        -1);

#if 0 // [WONTFIX 1] Not sure if I really care about fixing this one.
    // <1 l· # primary difference, not secondary, because l|· was suppressed
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"l")),
        text::utf32_range(text::string_view(u8"l·")),
        table,
        text::collation_strength::primary),
        -1);
#endif

    // <1 ә # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"l·")),
        text::utf32_range(text::string_view(u8"ә")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 ә\u0308 # secondary difference, not primary, because contractions for ә were suppressed
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ә")),
        text::utf32_range(text::string_view(u8"ә\u0308")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 әж # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ә\u0308")),
        text::utf32_range(text::string_view(u8"әж")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 әЖ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"әж")),
        text::utf32_range(text::string_view(u8"әЖ")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// Hangul & Jamo
TEST(collation_and_tailoring, data_file_test_84)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&L=\u1100 &V=\u1161 &T=\u11A8 &\uAC01<<*\u4E00-\u4EFF )"),
        "rules", error, warning);


    // <1 Lv # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"Lv")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 LV # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Lv")),
        text::utf32_range(text::string_view(u8"LV")),
        table,
        text::collation_strength::tertiary),
        -1);

    // =  \u1100\u1161 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"LV")),
        text::utf32_range(text::string_view(u8"\u1100\u1161")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  \uAC00 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1100\u1161")),
        text::utf32_range(text::string_view(u8"\uAC00")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 LVt # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uAC00")),
        text::utf32_range(text::string_view(u8"LVt")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 LVT # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"LVt")),
        text::utf32_range(text::string_view(u8"LVT")),
        table,
        text::collation_strength::tertiary),
        -1);

    // =  \u1100\u1161\u11A8 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"LVT")),
        text::utf32_range(text::string_view(u8"\u1100\u1161\u11A8")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  \uAC00\u11A8 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1100\u1161\u11A8")),
        text::utf32_range(text::string_view(u8"\uAC00\u11A8")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  \uAC01 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uAC00\u11A8")),
        text::utf32_range(text::string_view(u8"\uAC01")),
        table,
        text::collation_strength::tertiary),
        0);

    // <2 LVT\u0308 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uAC01")),
        text::utf32_range(text::string_view(u8"LVT\u0308")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 \u4E00 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"LVT\u0308")),
        text::utf32_range(text::string_view(u8"\u4E00")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 \u4E01 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u4E00")),
        text::utf32_range(text::string_view(u8"\u4E01")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 \u4E80 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u4E01")),
        text::utf32_range(text::string_view(u8"\u4E80")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 \u4EFF # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u4E80")),
        text::utf32_range(text::string_view(u8"\u4EFF")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 LV\u0308T # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u4EFF")),
        text::utf32_range(text::string_view(u8"LV\u0308T")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 \uAC02 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"LV\u0308T")),
        text::utf32_range(text::string_view(u8"\uAC02")),
        table,
        text::collation_strength::primary),
        -1);

}

// adjust special reset positions according to previous rules, CLDR ticket 6070
TEST(collation_and_tailoring, data_file_test_85)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[last primary ignorable]<<x<<<y &[last primary ignorable]<<z )"),
        "rules", error, warning);


    // <2 \u0358 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u0358")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0358")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::secondary),
        -1);

    // <3 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::tertiary),
        -1);

#if 0 // TODO!
    // <2 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 \x20 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"\x20")),
        table,
        text::collation_strength::primary),
        -1);
#endif
}

// adjust special reset positions according to previous rules, CLDR ticket 6070
TEST(collation_and_tailoring, data_file_test_86)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[last secondary ignorable]<<<x &[last secondary ignorable]<<<y )"),
        "rules", error, warning);


    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 \u0358 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"\u0358")),
        table,
        text::collation_strength::secondary),
        -1);

}

// adjust special reset positions according to previous rules, CLDR ticket 6070
TEST(collation_and_tailoring, data_file_test_87)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 2][first variable]<<z &[before 2][first variable]<<y &[before 3][first variable]<<<x &[before 3][first variable]<<<w &[before 1][first variable]<v &[before 2][first variable]<<u &[before 3][first variable]<<<t &[before 2]\uFDD1\xA0<<s )"),
        "rules", error, warning);


    // <2 \u0358 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u0358")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 s # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0358")),
        text::utf32_range(text::string_view(u8"s")),
        table,
        text::collation_strength::primary),
        -1);

#if 0 // Invalid UTF-8 not supported.
    // <2 \uFDD1\xA0 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"s")),
        text::utf32_range(text::string_view(u8"\uFDD1\xA0")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 t # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFDD1\xA0")),
        text::utf32_range(text::string_view(u8"t")),
        table,
        text::collation_strength::primary),
        -1);
#endif

    // <3 u # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"t")),
        text::utf32_range(text::string_view(u8"u")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 v # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"u")),
        text::utf32_range(text::string_view(u8"v")),
        table,
        text::collation_strength::secondary),
        -1);

#if 0 // [WONTFIX 0]
    // <1 w # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"v")),
        text::utf32_range(text::string_view(u8"w")),
        table,
        text::collation_strength::primary),
        -1);
#endif

    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"w")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 \t # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"\t")),
        table,
        text::collation_strength::secondary),
        -1);

}

#if 0 // Invalid UTF-8 not supported.
// adjust special reset positions according to previous rules, CLDR ticket 6070
TEST(collation_and_tailoring, data_file_test_88)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 2][first regular]<<z &[before 3][first regular]<<<y &[before 1][first regular]<x &[before 3][first regular]<<<w &[before 2]\uFDD1\u263A<<v &[before 3][first regular]<<<u &[before 1][first regular]<p &[before 3][first regular]<<<t &[last variable]<q )"),
        "rules", error, warning);


    // <1 ? # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"?")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 p # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"?")),
        text::utf32_range(text::string_view(u8"p")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 q # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"p")),
        text::utf32_range(text::string_view(u8"q")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 t # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"q")),
        text::utf32_range(text::string_view(u8"t")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 u # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"t")),
        text::utf32_range(text::string_view(u8"u")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 v # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"u")),
        text::utf32_range(text::string_view(u8"v")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 w # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"v")),
        text::utf32_range(text::string_view(u8"w")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"w")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 $ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"$")),
        table,
        text::collation_strength::primary),
        -1);

}

// adjust special reset positions according to previous rules, CLDR ticket 6070
TEST(collation_and_tailoring, data_file_test_89)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 2][first regular]<<z &[before 3][first regular]<<<y &[before 1][first regular]<x &[before 3][first regular]<<<w &[before 2]\uFDD1\u263A<<v &[before 3][first regular]<<<u &[before 1][first regular]<p &[before 3][first regular]<<<t &[last variable]<q [alternate shifted])"),
        "rules", error, warning);


    // =  ? # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"?")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  p # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"?")),
        text::utf32_range(text::string_view(u8"p")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  q # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"p")),
        text::utf32_range(text::string_view(u8"q")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 t # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"q")),
        text::utf32_range(text::string_view(u8"t")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 u # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"t")),
        text::utf32_range(text::string_view(u8"u")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 v # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"u")),
        text::utf32_range(text::string_view(u8"v")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 w # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"v")),
        text::utf32_range(text::string_view(u8"w")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"w")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 $ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"$")),
        table,
        text::collation_strength::primary),
        -1);

}
#endif

// adjust special reset positions according to previous rules, CLDR ticket 6070
TEST(collation_and_tailoring, data_file_test_90)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 2][first trailing]<<z &[before 1][first trailing]<y &[before 3][first trailing]<<<x )"),
        "rules", error, warning);


    // <1 \u4E00 # first Han, first implicit
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u4E00")),
        table,
        text::collation_strength::primary),
        -1);

#if 0 // Invalid UTF-8 not supported.
    // <1 \uFDD1\uFDD0 # FractionalUCA.txt: unassigned first primary
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u4E00")),
        text::utf32_range(text::string_view(u8"\uFDD1\uFDD0")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFDD1\uFDD0")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::primary),
        -1);
#endif

#if 0 // [WONTFIX 0]
    // <3 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::tertiary),
        -1);
#endif

#if 0 // TODO!
    // <1 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::primary),
        -1);
#endif
}

// adjust special reset positions according to previous rules, CLDR ticket 6070
TEST(collation_and_tailoring, data_file_test_91)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 2][first primary ignorable]<<z &[before 2][first primary ignorable]<<y &[before 3][first primary ignorable]<<<x &[before 3][first primary ignorable]<<<w )"),
        "rules", error, warning);


    // =  \x01 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\x01")),
        table,
        text::collation_strength::tertiary),
        0);

#if 0 // TODO!
    // <2 w # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\x01")),
        text::utf32_range(text::string_view(u8"w")),
        table,
        text::collation_strength::secondary),
        -1);
#endif

#if 0 // [WONTFIX 0]
    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"w")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);
#endif

    // <3 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::tertiary),
        -1);

#if 0 // [WONTFIX 0]
    // <2 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::secondary),
        -1);
#endif

    // <2 \u0301 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"\u0301")),
        table,
        text::collation_strength::secondary),
        -1);

}

// adjust special reset positions according to previous rules, CLDR ticket 6070
TEST(collation_and_tailoring, data_file_test_92)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 3][first secondary ignorable]<<<y &[before 3][first secondary ignorable]<<<x )"),
        "rules", error, warning);


    // =  \x01 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\x01")),
        table,
        text::collation_strength::tertiary),
        0);

    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\x01")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 \u0301 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"\u0301")),
        table,
        text::collation_strength::secondary),
        -1);

}

// canonical closure
TEST(collation_and_tailoring, data_file_test_93)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&X=A &U=Â )"),
        "rules", error, warning);


    // <1 U # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"U")),
        table,
        text::collation_strength::primary),
        -1);

    // =  Â # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"U")),
        text::utf32_range(text::string_view(u8"Â")),
        table,
        text::collation_strength::tertiary),
        0);

#if 0 // Not FCC!
    // =  A\u0302 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Â")),
        text::utf32_range(text::string_view(u8"A\u0302")),
        table,
        text::collation_strength::tertiary),
        0);

    // <2 Ú # U with acute
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A\u0302")),
        text::utf32_range(text::string_view(u8"Ú")),
        table,
        text::collation_strength::secondary),
        -1);
#endif

    // =  U\u0301 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ú")),
        text::utf32_range(text::string_view(u8"U\u0301")),
        table,
        text::collation_strength::tertiary),
        0);

#if 0 // Not FCC!
    // =  Ấ # A with circumflex & acute
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"U\u0301")),
        text::utf32_range(text::string_view(u8"Ấ")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  Â\u0301 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ấ")),
        text::utf32_range(text::string_view(u8"Â\u0301")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  A\u0302\u0301 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Â\u0301")),
        text::utf32_range(text::string_view(u8"A\u0302\u0301")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 X # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A\u0302\u0301")),
        text::utf32_range(text::string_view(u8"X")),
        table,
        text::collation_strength::primary),
        -1);
#endif

    // =  A # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"X")),
        text::utf32_range(text::string_view(u8"A")),
        table,
        text::collation_strength::tertiary),
        0);

    // <2 X\u030A # with ring above
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A")),
        text::utf32_range(text::string_view(u8"X\u030A")),
        table,
        text::collation_strength::secondary),
        -1);

#if 0 // Not FCC!
    // =  Å # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"X\u030A")),
        text::utf32_range(text::string_view(u8"Å")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  A\u030A # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Å")),
        text::utf32_range(text::string_view(u8"A\u030A")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  \u212B # Angstrom sign
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A\u030A")),
        text::utf32_range(text::string_view(u8"\u212B")),
        table,
        text::collation_strength::tertiary),
        0);
#endif
}

// canonical closure
TEST(collation_and_tailoring, data_file_test_94)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&x=\u5140\u55C0 )"),
        "rules", error, warning);


    // <1 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::primary),
        -1);

    // =  \u5140\u55C0 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"\u5140\u55C0")),
        table,
        text::collation_strength::tertiary),
        0);

#if 0 // TODO! FCC?
    // =  \u5140\uFA0D # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140\u55C0")),
        text::utf32_range(text::string_view(u8"\u5140\uFA0D")),
        table,
        text::collation_strength::tertiary),
        0);
#endif

    // =  \uFA0C\u55C0 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140\uFA0D")),
        text::utf32_range(text::string_view(u8"\uFA0C\u55C0")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  \uFA0C\uFA0D # CJK compatibility characters
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFA0C\u55C0")),
        text::utf32_range(text::string_view(u8"\uFA0C\uFA0D")),
        table,
        text::collation_strength::tertiary),
        0);

#if 0 // TODO! FCC?
    // <3 X # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFA0C\uFA0D")),
        text::utf32_range(text::string_view(u8"X")),
        table,
        text::collation_strength::tertiary),
        -1);
#endif
}

// canonical closure
TEST(collation_and_tailoring, data_file_test_95)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&x=ä|ŝ )"),
        "rules", error, warning);


    // <1 äs # not tailored
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"äs")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 äx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"äs")),
        text::utf32_range(text::string_view(u8"äx")),
        table,
        text::collation_strength::primary),
        -1);

    // =  äŝ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"äx")),
        text::utf32_range(text::string_view(u8"äŝ")),
        table,
        text::collation_strength::tertiary),
        0);

#if 0 // Not FCC!
    // =  a\u0308s\u0302 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"äŝ")),
        text::utf32_range(text::string_view(u8"a\u0308s\u0302")),
        table,
        text::collation_strength::tertiary),
        0);
#endif

    // =  a\u0308ŝ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0308s\u0302")),
        text::utf32_range(text::string_view(u8"a\u0308ŝ")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  äs\u0302 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0308ŝ")),
        text::utf32_range(text::string_view(u8"äs\u0302")),
        table,
        text::collation_strength::tertiary),
        0);

    // <3 äX # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"äs\u0302")),
        text::utf32_range(text::string_view(u8"äX")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// conjoining Jamo map to expansions
TEST(collation_and_tailoring, data_file_test_96)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&gg=\u1101 &nj=\u11AC )"),
        "rules", error, warning);


    // <1 gg\u1161nj # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"gg\u1161nj")),
        table,
        text::collation_strength::primary),
        -1);

    // =  \u1101\u1161\u11AC # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"gg\u1161nj")),
        text::utf32_range(text::string_view(u8"\u1101\u1161\u11AC")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  \uAE4C\u11AC # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1101\u1161\u11AC")),
        text::utf32_range(text::string_view(u8"\uAE4C\u11AC")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  \uAE51 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uAE4C\u11AC")),
        text::utf32_range(text::string_view(u8"\uAE51")),
        table,
        text::collation_strength::tertiary),
        0);

    // <3 gg\u1161nJ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uAE51")),
        text::utf32_range(text::string_view(u8"gg\u1161nJ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 \u1100\u1100 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"gg\u1161nJ")),
        text::utf32_range(text::string_view(u8"\u1100\u1100")),
        table,
        text::collation_strength::primary),
        -1);

}

// canonical tail closure, ICU ticket 5913
TEST(collation_and_tailoring, data_file_test_97)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a<â )"),
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 â # tailored
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"â")),
        table,
        text::collation_strength::primary),
        -1);

#if 0 // Not FCC!
    // =  a\u0302 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"â")),
        text::utf32_range(text::string_view(u8"a\u0302")),
        table,
        text::collation_strength::tertiary),
        0);
#endif

    // <2 a\u0323\u0302 # discontiguous contraction
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0302")),
        text::utf32_range(text::string_view(u8"a\u0323\u0302")),
        table,
        text::collation_strength::secondary),
        -1);

#if 0 // Not FCC!
    // =  ạ\u0302 # equivalent
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0323\u0302")),
        text::utf32_range(text::string_view(u8"ạ\u0302")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  ậ # equivalent
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ạ\u0302")),
        text::utf32_range(text::string_view(u8"ậ")),
        table,
        text::collation_strength::tertiary),
        0);
#endif

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ậ")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

}

// canonical tail closure, ICU ticket 5913
TEST(collation_and_tailoring, data_file_test_98)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a<ạ )"),
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ạ # tailored
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"ạ")),
        table,
        text::collation_strength::primary),
        -1);

#if 0 // Not FCC!
    // =  a\u0323 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ạ")),
        text::utf32_range(text::string_view(u8"a\u0323")),
        table,
        text::collation_strength::tertiary),
        0);
#endif

    // <2 a\u0323\u0302 # contiguous contraction plus extra diacritic
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0323")),
        text::utf32_range(text::string_view(u8"a\u0323\u0302")),
        table,
        text::collation_strength::secondary),
        -1);

#if 0 // Not FCC!
    // =  ạ\u0302 # equivalent
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0323\u0302")),
        text::utf32_range(text::string_view(u8"ạ\u0302")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  ậ # equivalent
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ạ\u0302")),
        text::utf32_range(text::string_view(u8"ậ")),
        table,
        text::collation_strength::tertiary),
        0);
#endif

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ậ")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

}

// canonical tail closure, ICU ticket 5913
TEST(collation_and_tailoring, data_file_test_99)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a<\u5140|câ    &x=\u5140|ca )"),
        "rules", error, warning);


    // <1 \u5140a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u5140a")),
        table,
        text::collation_strength::primary),
        -1);

    // =  \uFA0Ca # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140a")),
        text::utf32_range(text::string_view(u8"\uFA0Ca")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 \u5140câ # tailored
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFA0Ca")),
        text::utf32_range(text::string_view(u8"\u5140câ")),
        table,
        text::collation_strength::primary),
        -1);

#if 0 // TODO!  This actually looks wrong -- \u5140câ is tailored to go after
      // "a", and \uFA0Ccâ lies somewhere else entirely.
    // =  \uFA0Ccâ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140câ")),
        text::utf32_range(text::string_view(u8"\uFA0Ccâ")),
        table,
        text::collation_strength::tertiary),
        0);
#endif

#if 0 // Not FCC!
    // =  \u5140ca\u0302 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFA0Ccâ")),
        text::utf32_range(text::string_view(u8"\u5140ca\u0302")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  \uFA0Cca\u0302 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140ca\u0302")),
        text::utf32_range(text::string_view(u8"\uFA0Cca\u0302")),
        table,
        text::collation_strength::tertiary),
        0);
#endif

    // <2 \u5140ca\u0323\u0302 # discontiguous contraction
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFA0Cca\u0302")),
        text::utf32_range(text::string_view(u8"\u5140ca\u0323\u0302")),
        table,
        text::collation_strength::secondary),
        -1);

#if 0 // TODO!  This actually looks wrong -- \u5140câ is tailored to go after
      // "a", and \uFA0Ccâ lies somewhere else entirely.
    // =  \uFA0Cca\u0323\u0302 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140ca\u0323\u0302")),
        text::utf32_range(text::string_view(u8"\uFA0Cca\u0323\u0302")),
        table,
        text::collation_strength::tertiary),
        0);
#endif

    // =  \u5140cạ\u0302 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFA0Cca\u0323\u0302")),
        text::utf32_range(text::string_view(u8"\u5140cạ\u0302")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  \uFA0Ccạ\u0302 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140cạ\u0302")),
        text::utf32_range(text::string_view(u8"\uFA0Ccạ\u0302")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  \u5140cậ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFA0Ccạ\u0302")),
        text::utf32_range(text::string_view(u8"\u5140cậ")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  \uFA0Ccậ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140cậ")),
        text::utf32_range(text::string_view(u8"\uFA0Ccậ")),
        table,
        text::collation_strength::tertiary),
        0);

#if 0 // TODO!
    // <1 \u5140b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFA0Ccậ")),
        text::utf32_range(text::string_view(u8"\u5140b")),
        table,
        text::collation_strength::primary),
        -1);
#endif

    // =  \uFA0Cb # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140b")),
        text::utf32_range(text::string_view(u8"\uFA0Cb")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 \u5140x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFA0Cb")),
        text::utf32_range(text::string_view(u8"\u5140x")),
        table,
        text::collation_strength::primary),
        -1);

    // =  \u5140ca # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140x")),
        text::utf32_range(text::string_view(u8"\u5140ca")),
        table,
        text::collation_strength::tertiary),
        0);

}

// canonical tail closure, ICU ticket 5913
TEST(collation_and_tailoring, data_file_test_100)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a<\u5140|câ )"),
        "rules", error, warning);


    // <1 \u5140a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u5140a")),
        table,
        text::collation_strength::primary),
        -1);

    // =  \uFA0Ca # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140a")),
        text::utf32_range(text::string_view(u8"\uFA0Ca")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 \u5140câ # tailored
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFA0Ca")),
        text::utf32_range(text::string_view(u8"\u5140câ")),
        table,
        text::collation_strength::primary),
        -1);

#if 0 // TODO!  This actually looks wrong -- \u5140câ is tailored to go after
      // "a", and \uFA0Ccâ lies somewhere else entirely.
    // =  \uFA0Ccâ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140câ")),
        text::utf32_range(text::string_view(u8"\uFA0Ccâ")),
        table,
        text::collation_strength::tertiary),
        0);
#endif

    // =  \u5140ca\u0302 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFA0Ccâ")),
        text::utf32_range(text::string_view(u8"\u5140ca\u0302")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  \uFA0Cca\u0302 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140ca\u0302")),
        text::utf32_range(text::string_view(u8"\uFA0Cca\u0302")),
        table,
        text::collation_strength::tertiary),
        0);

#if 0 // Not FCC!
    // <1 \u5140b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFA0Cca\u0302")),
        text::utf32_range(text::string_view(u8"\u5140b")),
        table,
        text::collation_strength::primary),
        -1);
#endif

    // =  \uFA0Cb # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140b")),
        text::utf32_range(text::string_view(u8"\uFA0Cb")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 \u5140ca\u0323\u0302 # no discontiguous contraction
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFA0Cb")),
        text::utf32_range(text::string_view(u8"\u5140ca\u0323\u0302")),
        table,
        text::collation_strength::primary),
        -1);

    // =  \uFA0Cca\u0323\u0302 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140ca\u0323\u0302")),
        text::utf32_range(text::string_view(u8"\uFA0Cca\u0323\u0302")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  \u5140cạ\u0302 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFA0Cca\u0323\u0302")),
        text::utf32_range(text::string_view(u8"\u5140cạ\u0302")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  \uFA0Ccạ\u0302 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140cạ\u0302")),
        text::utf32_range(text::string_view(u8"\uFA0Ccạ\u0302")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  \u5140cậ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uFA0Ccạ\u0302")),
        text::utf32_range(text::string_view(u8"\u5140cậ")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  \uFA0Ccậ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5140cậ")),
        text::utf32_range(text::string_view(u8"\uFA0Ccậ")),
        table,
        text::collation_strength::tertiary),
        0);

}

// canonical tail closure, ICU ticket 5913
TEST(collation_and_tailoring, data_file_test_101)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a<cạ )"),
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 cạ # tailored
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"cạ")),
        table,
        text::collation_strength::primary),
        -1);

#if 0 // Not FCC!
    // =  ca\u0323 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"cạ")),
        text::utf32_range(text::string_view(u8"ca\u0323")),
        table,
        text::collation_strength::tertiary),
        0);
#endif

    // <2 ca\u0323\u0302 # contiguous contraction plus extra diacritic
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ca\u0323")),
        text::utf32_range(text::string_view(u8"ca\u0323\u0302")),
        table,
        text::collation_strength::secondary),
        -1);

#if 0 // Not FCC!
    // =  cạ\u0302 # equivalent
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ca\u0323\u0302")),
        text::utf32_range(text::string_view(u8"cạ\u0302")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  cậ # equivalent
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"cạ\u0302")),
        text::utf32_range(text::string_view(u8"cậ")),
        table,
        text::collation_strength::tertiary),
        0);
#endif

#if 0 // TODO!
    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"cậ")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);
#endif
}

// canonical tail closure, ICU ticket 5913
TEST(collation_and_tailoring, data_file_test_102)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&δ=αῳ    &ε=αω )"),
        "rules", error, warning);


    // <1 δ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"δ")),
        table,
        text::collation_strength::primary),
        -1);

    // =  αῳ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"δ")),
        text::utf32_range(text::string_view(u8"αῳ")),
        table,
        text::collation_strength::tertiary),
        0);

#if 0 // Not FCC!
    // =  αω\u0345 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αῳ")),
        text::utf32_range(text::string_view(u8"αω\u0345")),
        table,
        text::collation_strength::tertiary),
        0);
#endif

#if 0 // 0x313 and 0x300 are both ccc=230, forming a blocking context!
    // <2 αω\u0313\u0300\u0345 # discontiguous contraction
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αω\u0345")),
        text::utf32_range(text::string_view(u8"αω\u0313\u0300\u0345")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  αὠ\u0300\u0345 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αω\u0313\u0300\u0345")),
        text::utf32_range(text::string_view(u8"αὠ\u0300\u0345")),
        table,
        text::collation_strength::tertiary),
        0);
#endif

    // =  αὢ\u0345 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αὠ\u0300\u0345")),
        text::utf32_range(text::string_view(u8"αὢ\u0345")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  αᾢ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αὢ\u0345")),
        text::utf32_range(text::string_view(u8"αᾢ")),
        table,
        text::collation_strength::tertiary),
        0);

    // <2 αω\u0300\u0313\u0345 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αᾢ")),
        text::utf32_range(text::string_view(u8"αω\u0300\u0313\u0345")),
        table,
        text::collation_strength::secondary),
        -1);

#if 0 // Not FCC!
    // =  αὼ\u0313\u0345 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αω\u0300\u0313\u0345")),
        text::utf32_range(text::string_view(u8"αὼ\u0313\u0345")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  αῲ\u0313 # not FCD
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αὼ\u0313\u0345")),
        text::utf32_range(text::string_view(u8"αῲ\u0313")),
        table,
        text::collation_strength::tertiary),
        0);
#endif

    // <1 ε # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αῲ\u0313")),
        text::utf32_range(text::string_view(u8"ε")),
        table,
        text::collation_strength::primary),
        -1);

    // =  αω # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ε")),
        text::utf32_range(text::string_view(u8"αω")),
        table,
        text::collation_strength::tertiary),
        0);

}

// canonical tail closure, ICU ticket 5913
TEST(collation_and_tailoring, data_file_test_103)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&δ=αῳ )"),
        "rules", error, warning);


    // <1 αω\u0313\u0300\u0345 # no discontiguous contraction
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"αω\u0313\u0300\u0345")),
        table,
        text::collation_strength::primary),
        -1);

    // =  αὠ\u0300\u0345 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αω\u0313\u0300\u0345")),
        text::utf32_range(text::string_view(u8"αὠ\u0300\u0345")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  αὢ\u0345 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αὠ\u0300\u0345")),
        text::utf32_range(text::string_view(u8"αὢ\u0345")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  αᾢ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αὢ\u0345")),
        text::utf32_range(text::string_view(u8"αᾢ")),
        table,
        text::collation_strength::tertiary),
        0);

    // <2 αω\u0300\u0313\u0345 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αᾢ")),
        text::utf32_range(text::string_view(u8"αω\u0300\u0313\u0345")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  αὼ\u0313\u0345 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αω\u0300\u0313\u0345")),
        text::utf32_range(text::string_view(u8"αὼ\u0313\u0345")),
        table,
        text::collation_strength::tertiary),
        0);

#if 0 // Not FCC!
    // =  αῲ\u0313 # not FCD
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αὼ\u0313\u0345")),
        text::utf32_range(text::string_view(u8"αῲ\u0313")),
        table,
        text::collation_strength::tertiary),
        0);
#endif

    // <1 δ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αῲ\u0313")),
        text::utf32_range(text::string_view(u8"δ")),
        table,
        text::collation_strength::primary),
        -1);

    // =  αῳ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"δ")),
        text::utf32_range(text::string_view(u8"αῳ")),
        table,
        text::collation_strength::tertiary),
        0);

#if 0 // Not FCC!
    // =  αω\u0345 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αῳ")),
        text::utf32_range(text::string_view(u8"αω\u0345")),
        table,
        text::collation_strength::tertiary),
        0);
#endif
}

// canonical tail closure, ICU ticket 5913
TEST(collation_and_tailoring, data_file_test_104)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&δ=αὼ\u0315 )"),
        "rules", error, warning);


    // <1 αω\u0313\u0300\u0315 # Not tailored: The grave accent blocks the comma above.
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"αω\u0313\u0300\u0315")),
        table,
        text::collation_strength::primary),
        -1);

    // =  αὠ\u0300\u0315 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αω\u0313\u0300\u0315")),
        text::utf32_range(text::string_view(u8"αὠ\u0300\u0315")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  αὢ\u0315 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αὠ\u0300\u0315")),
        text::utf32_range(text::string_view(u8"αὢ\u0315")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 δ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αὢ\u0315")),
        text::utf32_range(text::string_view(u8"δ")),
        table,
        text::collation_strength::primary),
        -1);

    // =  αὼ\u0315 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"δ")),
        text::utf32_range(text::string_view(u8"αὼ\u0315")),
        table,
        text::collation_strength::tertiary),
        0);

#if 0 // Not FCC!
    // =  αω\u0300\u0315 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αὼ\u0315")),
        text::utf32_range(text::string_view(u8"αω\u0300\u0315")),
        table,
        text::collation_strength::tertiary),
        0);
#endif

    // <2 αω\u0300\u0315\u0345 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αω\u0300\u0315")),
        text::utf32_range(text::string_view(u8"αω\u0300\u0315\u0345")),
        table,
        text::collation_strength::secondary),
        -1);

#if 0 // Not FCC!
    // =  αὼ\u0315\u0345 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αω\u0300\u0315\u0345")),
        text::utf32_range(text::string_view(u8"αὼ\u0315\u0345")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  αῲ\u0315 # not FCD
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"αὼ\u0315\u0345")),
        text::utf32_range(text::string_view(u8"αῲ\u0315")),
        table,
        text::collation_strength::tertiary),
        0);
#endif
}

// danish a+a vs. a-umlaut, ICU ticket 9319
TEST(collation_and_tailoring, data_file_test_105)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&z<aa )"),
        "rules", error, warning);


    // <1 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 aa # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"aa")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 aa\u0308 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aa")),
        text::utf32_range(text::string_view(u8"aa\u0308")),
        table,
        text::collation_strength::secondary),
        -1);

#if 0 // Not FCC!
    // =  aä # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aa\u0308")),
        text::utf32_range(text::string_view(u8"aä")),
        table,
        text::collation_strength::tertiary),
        0);
#endif
}

#if 0 // TODO!
// Jamo L with and in prefix
TEST(collation_and_tailoring, data_file_test_106)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"( &[last primary ignorable]<<\u1100|\u1100=\u1101|\u1100  &\u1100\u1100=\u1101      )"),
        "rules", error, warning);


    // <1 \u1100 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u1100")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 \u1100\u1100 # only one primary from a sequence of G lead consonants
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1100")),
        text::utf32_range(text::string_view(u8"\u1100\u1100")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  \u1101 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1100\u1100")),
        text::utf32_range(text::string_view(u8"\u1101")),
        table,
        text::collation_strength::tertiary),
        0);

    // <2 \u1100\u1100\u1100 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1101")),
        text::utf32_range(text::string_view(u8"\u1100\u1100\u1100")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  \u1101\u1100 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1100\u1100\u1100")),
        text::utf32_range(text::string_view(u8"\u1101\u1100")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 \u1100\u1161 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1101\u1100")),
        text::utf32_range(text::string_view(u8"\u1100\u1161")),
        table,
        text::collation_strength::primary),
        -1);

    // =  \uAC00 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1100\u1161")),
        text::utf32_range(text::string_view(u8"\uAC00")),
        table,
        text::collation_strength::tertiary),
        0);

    // <2 \u1100\u1100\u1161 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uAC00")),
        text::utf32_range(text::string_view(u8"\u1100\u1100\u1161")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  \u1100\uAC00 # prefix match from the L of the LV syllable
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1100\u1100\u1161")),
        text::utf32_range(text::string_view(u8"\u1100\uAC00")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  \u1101\u1161 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1100\uAC00")),
        text::utf32_range(text::string_view(u8"\u1101\u1161")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  \uAE4C # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1101\u1161")),
        text::utf32_range(text::string_view(u8"\uAE4C")),
        table,
        text::collation_strength::tertiary),
        0);

}
#endif

// proposed Korean "searchjl" tailoring with prefixes, CLDR ticket 6546
TEST(collation_and_tailoring, data_file_test_107)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(  &\u0332 <<\u1161<<\u1162      &\u0313 =\u1100|\u1100 =\u1103|\u1103 =\u1107|\u1107 =\u1109|\u1109 =\u110C|\u110C   &\u1100\u0313=\u1101<<<\u3132 &\u1103\u0313=\u1104<<<\u3138 &\u1107\u0313=\u1108<<<\u3143 &\u1109\u0313=\u110A<<<\u3146 &\u110C\u0313=\u110D<<<\u3149  )"),
        "rules", error, warning);


    // <1 \u1100\u1161 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u1100\u1161")),
        table,
        text::collation_strength::primary),
        -1);

    // =  \uAC00 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1100\u1161")),
        text::utf32_range(text::string_view(u8"\uAC00")),
        table,
        text::collation_strength::tertiary),
        0);

    // <2 \u1100\u1162 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uAC00")),
        text::utf32_range(text::string_view(u8"\u1100\u1162")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  \uAC1C # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1100\u1162")),
        text::utf32_range(text::string_view(u8"\uAC1C")),
        table,
        text::collation_strength::tertiary),
        0);

    // <2 \u1100\u1100\u1161 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uAC1C")),
        text::utf32_range(text::string_view(u8"\u1100\u1100\u1161")),
        table,
        text::collation_strength::secondary),
        -1);

#if 0 // TODO!
    // =  \u1100\uAC00 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1100\u1100\u1161")),
        text::utf32_range(text::string_view(u8"\u1100\uAC00")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  \u1101\u1161 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1100\uAC00")),
        text::utf32_range(text::string_view(u8"\u1101\u1161")),
        table,
        text::collation_strength::tertiary),
        0);
#endif

    // =  \uAE4C # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1101\u1161")),
        text::utf32_range(text::string_view(u8"\uAE4C")),
        table,
        text::collation_strength::tertiary),
        0);

    // <3 \u3132\u1161 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uAE4C")),
        text::utf32_range(text::string_view(u8"\u3132\u1161")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// Hangul syllables in prefix & in the interior of a contraction
TEST(collation_and_tailoring, data_file_test_108)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&x=\u1100\u1161|a\u1102\u1162z )"),
        "rules", error, warning);


    // <1 \u1100\u1161x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u1100\u1161x")),
        table,
        text::collation_strength::primary),
        -1);

    // =  \u1100\u1161a\u1102\u1162z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1100\u1161x")),
        text::utf32_range(text::string_view(u8"\u1100\u1161a\u1102\u1162z")),
        table,
        text::collation_strength::tertiary),
        0);

#if 0 // Not FCC!
    // =  \u1100\u1161a\uB0B4z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1100\u1161a\u1102\u1162z")),
        text::utf32_range(text::string_view(u8"\u1100\u1161a\uB0B4z")),
        table,
        text::collation_strength::tertiary),
        0);
#endif

    // =  \uAC00a\u1102\u1162z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u1100\u1161a\uB0B4z")),
        text::utf32_range(text::string_view(u8"\uAC00a\u1102\u1162z")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  \uAC00a\uB0B4z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\uAC00a\u1102\u1162z")),
        text::utf32_range(text::string_view(u8"\uAC00a\uB0B4z")),
        table,
        text::collation_strength::tertiary),
        0);

}

// DataDrivenCollationTest/TestSimplifiedChineseOrder
TEST(collation_and_tailoring, data_file_test_109)
{
    auto const table = text::default_collation_table();


    // < \u5F20 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u5F20")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < \u5F20\u4E00\u8E3F # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u5F20")),
        text::utf32_range(text::string_view(u8"\u5F20\u4E00\u8E3F")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// DataDrivenCollationTest/TestTibetanNormalizedIterativeCrash
TEST(collation_and_tailoring, data_file_test_110)
{
    auto const table = text::default_collation_table();


    // < \u0f71\u0f72\u0f80\u0f71\u0f72 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"\u0f71\u0f72\u0f80\u0f71\u0f72")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < \u0f80 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0f71\u0f72\u0f80\u0f71\u0f72")),
        text::utf32_range(text::string_view(u8"\u0f80")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// DataDrivenCollationTest/TestJavaStyleRule
TEST(collation_and_tailoring, data_file_test_111)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&\u0001=equal<<<z<<x<<<w &[first tertiary ignorable]=a &[first primary ignorable]=b )"),
        "rules", error, warning);


    // = a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::tertiary),
        0);

    // = equal # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"equal")),
        table,
        text::collation_strength::tertiary),
        0);

    // < z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"equal")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

    // = b # x had become the new first primary ignorable
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::tertiary),
        0);

    // < w # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"w")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// DataDrivenCollationTest/TestShiftedIgnorable
TEST(collation_and_tailoring, data_file_test_112)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"([alternate shifted][strength 4])"),
        "rules", error, warning);


    // < a\u0020b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a\u0020b")),
        table,
        text::collation_strength::quaternary),
        -1);

    // = a\u0020\u0300b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0020b")),
        text::utf32_range(text::string_view(u8"a\u0020\u0300b")),
        table,
        text::collation_strength::quaternary),
        0);

    // = a\u0020\u0301b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0020\u0300b")),
        text::utf32_range(text::string_view(u8"a\u0020\u0301b")),
        table,
        text::collation_strength::quaternary),
        0);

    // < a_b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0020\u0301b")),
        text::utf32_range(text::string_view(u8"a_b")),
        table,
        text::collation_strength::quaternary),
        -1);

    // = a_\u0300b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a_b")),
        text::utf32_range(text::string_view(u8"a_\u0300b")),
        table,
        text::collation_strength::quaternary),
        0);

    // = a_\u0301b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a_\u0300b")),
        text::utf32_range(text::string_view(u8"a_\u0301b")),
        table,
        text::collation_strength::quaternary),
        0);

    // < A\u0020b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a_\u0301b")),
        text::utf32_range(text::string_view(u8"A\u0020b")),
        table,
        text::collation_strength::quaternary),
        -1);

    // = A\u0020\u0300b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A\u0020b")),
        text::utf32_range(text::string_view(u8"A\u0020\u0300b")),
        table,
        text::collation_strength::quaternary),
        0);

    // = A\u0020\u0301b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A\u0020\u0300b")),
        text::utf32_range(text::string_view(u8"A\u0020\u0301b")),
        table,
        text::collation_strength::quaternary),
        0);

    // < A_b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A\u0020\u0301b")),
        text::utf32_range(text::string_view(u8"A_b")),
        table,
        text::collation_strength::quaternary),
        -1);

    // = A_\u0300b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A_b")),
        text::utf32_range(text::string_view(u8"A_\u0300b")),
        table,
        text::collation_strength::quaternary),
        0);

    // = A_\u0301b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A_\u0300b")),
        text::utf32_range(text::string_view(u8"A_\u0301b")),
        table,
        text::collation_strength::quaternary),
        0);

    // < a\u0301b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A_\u0301b")),
        text::utf32_range(text::string_view(u8"a\u0301b")),
        table,
        text::collation_strength::quaternary),
        -1);

    // < A\u0301b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0301b")),
        text::utf32_range(text::string_view(u8"A\u0301b")),
        table,
        text::collation_strength::quaternary),
        -1);

    // < a\u0300b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A\u0301b")),
        text::utf32_range(text::string_view(u8"a\u0300b")),
        table,
        text::collation_strength::quaternary),
        -1);

    // < A\u0300b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0300b")),
        text::utf32_range(text::string_view(u8"A\u0300b")),
        table,
        text::collation_strength::quaternary),
        -1);

}

// DataDrivenCollationTest/TestNShiftedIgnorable
TEST(collation_and_tailoring, data_file_test_113)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"([alternate non-ignorable][strength 3])"),
        "rules", error, warning);


    // < a\u0020b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a\u0020b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < A\u0020b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0020b")),
        text::utf32_range(text::string_view(u8"A\u0020b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < a\u0020\u0301b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A\u0020b")),
        text::utf32_range(text::string_view(u8"a\u0020\u0301b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < A\u0020\u0301b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0020\u0301b")),
        text::utf32_range(text::string_view(u8"A\u0020\u0301b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < a\u0020\u0300b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A\u0020\u0301b")),
        text::utf32_range(text::string_view(u8"a\u0020\u0300b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < A\u0020\u0300b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0020\u0300b")),
        text::utf32_range(text::string_view(u8"A\u0020\u0300b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < a_b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A\u0020\u0300b")),
        text::utf32_range(text::string_view(u8"a_b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < A_b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a_b")),
        text::utf32_range(text::string_view(u8"A_b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < a_\u0301b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A_b")),
        text::utf32_range(text::string_view(u8"a_\u0301b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < A_\u0301b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a_\u0301b")),
        text::utf32_range(text::string_view(u8"A_\u0301b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < a_\u0300b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A_\u0301b")),
        text::utf32_range(text::string_view(u8"a_\u0300b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < A_\u0300b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a_\u0300b")),
        text::utf32_range(text::string_view(u8"A_\u0300b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < a\u0301b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A_\u0300b")),
        text::utf32_range(text::string_view(u8"a\u0301b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < A\u0301b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0301b")),
        text::utf32_range(text::string_view(u8"A\u0301b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < a\u0300b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A\u0301b")),
        text::utf32_range(text::string_view(u8"a\u0300b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // < A\u0300b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0300b")),
        text::utf32_range(text::string_view(u8"A\u0300b")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// was ICU 52 cmsccoll/TestRedundantRules
TEST(collation_and_tailoring, data_file_test_114)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(& a < b < c < d& [before 1] c < m )"),
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 m # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"m")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"m")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"d")),
        table,
        text::collation_strength::primary),
        -1);

}

// was ICU 52 cmsccoll/TestRedundantRules
TEST(collation_and_tailoring, data_file_test_115)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(& a < b <<< c << d <<< e& [before 3] e <<< x )"),
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"d")),
        table,
        text::collation_strength::secondary),
        -1);

    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"d")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 e # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"e")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// was ICU 52 cmsccoll/TestRedundantRules
TEST(collation_and_tailoring, data_file_test_116)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(& a < b <<< c << d <<< e <<< f < g& [before 1] g < x )"),
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"d")),
        table,
        text::collation_strength::secondary),
        -1);

    // <3 e # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"d")),
        text::utf32_range(text::string_view(u8"e")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 f # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"e")),
        text::utf32_range(text::string_view(u8"f")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"f")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 g # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"g")),
        table,
        text::collation_strength::primary),
        -1);

}

// was ICU 52 cmsccoll/TestRedundantRules
TEST(collation_and_tailoring, data_file_test_117)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(& a <<< b << c < d& a < m )"),
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::secondary),
        -1);

#if 0 // TODO!
    // <1 m # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"m")),
        table,
        text::collation_strength::primary),
        -1);
#endif

    // <1 d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"m")),
        text::utf32_range(text::string_view(u8"d")),
        table,
        text::collation_strength::primary),
        -1);

}

// was ICU 52 cmsccoll/TestRedundantRules
TEST(collation_and_tailoring, data_file_test_118)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a<b<<b\u0301 &z<b )"),
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 b\u0301 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b\u0301")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b\u0301")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

}

// was ICU 52 cmsccoll/TestRedundantRules
TEST(collation_and_tailoring, data_file_test_119)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&z<m<<<q<<<m )"),
        "rules", error, warning);


    // <1 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 q # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"q")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 m # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"q")),
        text::utf32_range(text::string_view(u8"m")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// was ICU 52 cmsccoll/TestRedundantRules
TEST(collation_and_tailoring, data_file_test_120)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&z<<<m<q<<<m )"),
        "rules", error, warning);


    // <1 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 q # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"q")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 m # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"q")),
        text::utf32_range(text::string_view(u8"m")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// was ICU 52 cmsccoll/TestRedundantRules
TEST(collation_and_tailoring, data_file_test_121)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(& a < b < c < d& r < c )"),
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"d")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 r # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"d")),
        text::utf32_range(text::string_view(u8"r")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"r")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::primary),
        -1);

}

// was ICU 52 cmsccoll/TestRedundantRules
TEST(collation_and_tailoring, data_file_test_122)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(& a < b < c < d& c < m )"),
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 m # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"m")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"m")),
        text::utf32_range(text::string_view(u8"d")),
        table,
        text::collation_strength::primary),
        -1);

}

// was ICU 52 cmsccoll/TestRedundantRules
TEST(collation_and_tailoring, data_file_test_123)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(& a < b < c < d& a < m )"),
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 m # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"m")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"m")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"d")),
        table,
        text::collation_strength::primary),
        -1);

}

// was ICU 52 cmsccoll/TestExpansionSyntax
TEST(collation_and_tailoring, data_file_test_124)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&AE <<< a << b <<< c &d <<< f )"),
        "rules", error, warning);


    // <1 AE # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"AE")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"AE")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::secondary),
        -1);

    // <3 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"d")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 f # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"d")),
        text::utf32_range(text::string_view(u8"f")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// was ICU 52 cmsccoll/TestExpansionSyntax
TEST(collation_and_tailoring, data_file_test_125)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&A <<< a / E << b / E <<< c /E  &d <<< f )"),
        "rules", error, warning);


    // <1 AE # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"AE")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"AE")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::secondary),
        -1);

    // <3 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"d")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 f # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"d")),
        text::utf32_range(text::string_view(u8"f")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// was ICU 52 cmsccoll/TestExpansionSyntax
TEST(collation_and_tailoring, data_file_test_126)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&AE <<< a <<< b << c << d < e < f <<< g )"),
        "rules", error, warning);


    // <1 AE # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"AE")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"AE")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"d")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 e # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"d")),
        text::utf32_range(text::string_view(u8"e")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 f # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"e")),
        text::utf32_range(text::string_view(u8"f")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 g # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"f")),
        text::utf32_range(text::string_view(u8"g")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// was ICU 52 cmsccoll/TestExpansionSyntax
TEST(collation_and_tailoring, data_file_test_127)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&A <<< a / E <<< b / E << c / E << d / E < e < f <<< g )"),
        "rules", error, warning);


    // <1 AE # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"AE")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"AE")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <2 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"d")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 e # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"d")),
        text::utf32_range(text::string_view(u8"e")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 f # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"e")),
        text::utf32_range(text::string_view(u8"f")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 g # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"f")),
        text::utf32_range(text::string_view(u8"g")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// was ICU 52 cmsccoll/TestExpansionSyntax
TEST(collation_and_tailoring, data_file_test_128)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&AE <<< B <<< C / D <<< F )"),
        "rules", error, warning);


    // <1 AE # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"AE")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 B # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"AE")),
        text::utf32_range(text::string_view(u8"B")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 F # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"B")),
        text::utf32_range(text::string_view(u8"F")),
        table,
        text::collation_strength::tertiary),
        -1);

#if 0 // TODO!
    // <1 AED # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"F")),
        text::utf32_range(text::string_view(u8"AED")),
        table,
        text::collation_strength::primary),
        -1);
#endif

    // <3 C # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"AED")),
        text::utf32_range(text::string_view(u8"C")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// was ICU 52 cmsccoll/TestExpansionSyntax
TEST(collation_and_tailoring, data_file_test_129)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&A <<< B / E <<< C / ED <<< F / E )"),
        "rules", error, warning);


    // <1 AE # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"AE")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 B # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"AE")),
        text::utf32_range(text::string_view(u8"B")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 F # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"B")),
        text::utf32_range(text::string_view(u8"F")),
        table,
        text::collation_strength::tertiary),
        -1);

#if 0 // TODO!
    // <1 AED # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"F")),
        text::utf32_range(text::string_view(u8"AED")),
        table,
        text::collation_strength::primary),
        -1);
#endif

    // <3 C # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"AED")),
        text::utf32_range(text::string_view(u8"C")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// never reorder trailing primaries
TEST(collation_and_tailoring, data_file_test_130)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"([reorder Zzzz Grek])"),
        "rules", error, warning);


    // <1 L # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"L")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 字 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"L")),
        text::utf32_range(text::string_view(u8"字")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 Ω # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"字")),
        text::utf32_range(text::string_view(u8"Ω")),
        table,
        text::collation_strength::primary),
        -1);

}

// fall back to mappings with shorter prefixes, not immediately to ones with no prefixes
TEST(collation_and_tailoring, data_file_test_131)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&u=ab|cd &v=b|ce )"),
        "rules", error, warning);


    // <1 abc # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"abc")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 abcc # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abc")),
        text::utf32_range(text::string_view(u8"abcc")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 abcf # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abcc")),
        text::utf32_range(text::string_view(u8"abcf")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 abcd # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abcf")),
        text::utf32_range(text::string_view(u8"abcd")),
        table,
        text::collation_strength::primary),
        -1);

    // =  abu # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abcd")),
        text::utf32_range(text::string_view(u8"abu")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 abce # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abu")),
        text::utf32_range(text::string_view(u8"abce")),
        table,
        text::collation_strength::primary),
        -1);

    // =  abv # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abce")),
        text::utf32_range(text::string_view(u8"abv")),
        table,
        text::collation_strength::tertiary),
        0);

}

// fall back to mappings with shorter prefixes, not immediately to ones with no prefixes
TEST(collation_and_tailoring, data_file_test_132)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&x=op|ĉ &y=p|ç )"),
        "rules", error, warning);


    // <1 opc # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"opc")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 opć # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opc")),
        text::utf32_range(text::string_view(u8"opć")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 opcz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opć")),
        text::utf32_range(text::string_view(u8"opcz")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 opd # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opcz")),
        text::utf32_range(text::string_view(u8"opd")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 opĉ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opd")),
        text::utf32_range(text::string_view(u8"opĉ")),
        table,
        text::collation_strength::primary),
        -1);

#if 0 // This doesn't work only because these strings are not in FCC.
    // =  opc\u0302 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opĉ")),
        text::utf32_range(text::string_view(u8"opc\u0302")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  opx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opc\u0302")),
        text::utf32_range(text::string_view(u8"opx")),
        table,
        text::collation_strength::tertiary),
        0);
#endif

    // <1 opç # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opx")),
        text::utf32_range(text::string_view(u8"opç")),
        table,
        text::collation_strength::primary),
        -1);

#if 0 // This doesn't work only because these strings are not in FCC.
    // =  opc\u0327 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opç")),
        text::utf32_range(text::string_view(u8"opc\u0327")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  opy # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opc\u0327")),
        text::utf32_range(text::string_view(u8"opy")),
        table,
        text::collation_strength::tertiary),
        0);
#endif
}

// fall back to mappings with shorter prefixes, not immediately to ones with no prefixes
TEST(collation_and_tailoring, data_file_test_133)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&❶=d &❷=de &❸=def &①=c|d &②=c|de &③=c|def &④=bc|d &⑤=bc|de &⑥=bc|def &⑦=abc|d &⑧=abc|de &⑨=abc|def )"),
        "rules", error, warning);


    // <1 9aadzz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"9aadzz")),
        table,
        text::collation_strength::primary),
        -1);

    // =  9aa❶zz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9aadzz")),
        text::utf32_range(text::string_view(u8"9aa❶zz")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 9aadez # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9aa❶zz")),
        text::utf32_range(text::string_view(u8"9aadez")),
        table,
        text::collation_strength::primary),
        -1);

    // =  9aa❷z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9aadez")),
        text::utf32_range(text::string_view(u8"9aa❷z")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 9aadef # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9aa❷z")),
        text::utf32_range(text::string_view(u8"9aadef")),
        table,
        text::collation_strength::primary),
        -1);

    // =  9aa❸ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9aadef")),
        text::utf32_range(text::string_view(u8"9aa❸")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 9acdzz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9aa❸")),
        text::utf32_range(text::string_view(u8"9acdzz")),
        table,
        text::collation_strength::primary),
        -1);

    // =  9ac①zz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9acdzz")),
        text::utf32_range(text::string_view(u8"9ac①zz")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 9acdez # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9ac①zz")),
        text::utf32_range(text::string_view(u8"9acdez")),
        table,
        text::collation_strength::primary),
        -1);

    // =  9ac②z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9acdez")),
        text::utf32_range(text::string_view(u8"9ac②z")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 9acdef # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9ac②z")),
        text::utf32_range(text::string_view(u8"9acdef")),
        table,
        text::collation_strength::primary),
        -1);

    // =  9ac③ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9acdef")),
        text::utf32_range(text::string_view(u8"9ac③")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 9bcdzz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9ac③")),
        text::utf32_range(text::string_view(u8"9bcdzz")),
        table,
        text::collation_strength::primary),
        -1);

    // =  9bc④zz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9bcdzz")),
        text::utf32_range(text::string_view(u8"9bc④zz")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 9bcdez # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9bc④zz")),
        text::utf32_range(text::string_view(u8"9bcdez")),
        table,
        text::collation_strength::primary),
        -1);

    // =  9bc⑤z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9bcdez")),
        text::utf32_range(text::string_view(u8"9bc⑤z")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 9bcdef # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9bc⑤z")),
        text::utf32_range(text::string_view(u8"9bcdef")),
        table,
        text::collation_strength::primary),
        -1);

    // =  9bc⑥ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9bcdef")),
        text::utf32_range(text::string_view(u8"9bc⑥")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 abcdzz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"9bc⑥")),
        text::utf32_range(text::string_view(u8"abcdzz")),
        table,
        text::collation_strength::primary),
        -1);

    // =  abc⑦zz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abcdzz")),
        text::utf32_range(text::string_view(u8"abc⑦zz")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 abcdez # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abc⑦zz")),
        text::utf32_range(text::string_view(u8"abcdez")),
        table,
        text::collation_strength::primary),
        -1);

    // =  abc⑧z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abcdez")),
        text::utf32_range(text::string_view(u8"abc⑧z")),
        table,
        text::collation_strength::tertiary),
        0);

    // <1 abcdef # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abc⑧z")),
        text::utf32_range(text::string_view(u8"abcdef")),
        table,
        text::collation_strength::primary),
        -1);

    // =  abc⑨ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"abcdef")),
        text::utf32_range(text::string_view(u8"abc⑨")),
        table,
        text::collation_strength::tertiary),
        0);

}

// prefix + discontiguous contraction with missing prefix contraction
TEST(collation_and_tailoring, data_file_test_134)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&x=p|e &y=p|ê &z=op|ê     )"),
        "rules", error, warning);


    // <1 oPe # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"oPe")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ope # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"oPe")),
        text::utf32_range(text::string_view(u8"ope")),
        table,
        text::collation_strength::primary),
        -1);

    // =  opx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ope")),
        text::utf32_range(text::string_view(u8"opx")),
        table,
        text::collation_strength::tertiary),
        0);

#if 0 // TODO! Requires canonical closure?
    // <1 opệ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opx")),
        text::utf32_range(text::string_view(u8"opệ")), // TODO This works instead: ê\u0327")), //
        table,
        text::collation_strength::primary),
        -1);

    // =  opy\u0323 # y not z
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opệ")),
        text::utf32_range(text::string_view(u8"opy\u0323")),
        table,
        text::collation_strength::tertiary),
        0);
#endif

    // <1 opê # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opy\u0323")),
        text::utf32_range(text::string_view(u8"opê")),
        table,
        text::collation_strength::primary),
        -1);

    // =  opz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opê")),
        text::utf32_range(text::string_view(u8"opz")),
        table,
        text::collation_strength::tertiary),
        0);

}

// prefix + discontiguous contraction with missing prefix contraction
TEST(collation_and_tailoring, data_file_test_135)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&x=p|e &z=op|ê )"),
        "rules", error, warning);


    // <1 oPe # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"oPe")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ope # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"oPe")),
        text::utf32_range(text::string_view(u8"ope")),
        table,
        text::collation_strength::primary),
        -1);

    // =  opx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ope")),
        text::utf32_range(text::string_view(u8"opx")),
        table,
        text::collation_strength::tertiary),
        0);

#if 0 // TODO!
    // <2 opệ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opx")),
        text::utf32_range(text::string_view(u8"opệ")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  opx\u0323\u0302 # x not z
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opệ")),
        text::utf32_range(text::string_view(u8"opx\u0323\u0302")),
        table,
        text::collation_strength::tertiary),
        0);
#endif

    // <1 opê # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opx\u0323\u0302")),
        text::utf32_range(text::string_view(u8"opê")),
        table,
        text::collation_strength::primary),
        -1);

    // =  opz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opê")),
        text::utf32_range(text::string_view(u8"opz")),
        table,
        text::collation_strength::tertiary),
        0);

}

// prefix + discontiguous contraction with missing prefix contraction
TEST(collation_and_tailoring, data_file_test_136)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&x=e &z=op|ê )"),
        "rules", error, warning);


    // <1 ope # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"ope")),
        table,
        text::collation_strength::primary),
        -1);

    // =  opx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ope")),
        text::utf32_range(text::string_view(u8"opx")),
        table,
        text::collation_strength::tertiary),
        0);

    // <3 oPe # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opx")),
        text::utf32_range(text::string_view(u8"oPe")),
        table,
        text::collation_strength::tertiary),
        -1);

    // =  oPx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"oPe")),
        text::utf32_range(text::string_view(u8"oPx")),
        table,
        text::collation_strength::tertiary),
        0);

#if 0 // TODO!
    // <2 opệ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"oPx")),
        text::utf32_range(text::string_view(u8"opệ")),
        table,
        text::collation_strength::secondary),
        -1);

    // =  opx\u0323\u0302 # x not z
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opệ")),
        text::utf32_range(text::string_view(u8"opx\u0323\u0302")),
        table,
        text::collation_strength::tertiary),
        0);
#endif

    // <1 opê # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opx\u0323\u0302")),
        text::utf32_range(text::string_view(u8"opê")),
        table,
        text::collation_strength::primary),
        -1);

    // =  opz # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"opê")),
        text::utf32_range(text::string_view(u8"opz")),
        table,
        text::collation_strength::tertiary),
        0);

}

// ICU4J CollationMiscTest/TestContractionClosure (ää)
TEST(collation_and_tailoring, data_file_test_137)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&b=\u00e4\u00e4 )"),
        "rules", error, warning);


    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // =  \u00e4\u00e4 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"\u00e4\u00e4")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u00e4\u00e4")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::tertiary),
        0);

#if 0 // Not FCC!
    // =  a\u0308a\u0308 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"a\u0308a\u0308")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a\u0308a\u0308")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  \u00e4a\u0308 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"\u00e4a\u0308")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u00e4a\u0308")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  a\u0308\u00e4 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"a\u0308\u00e4")),
        table,
        text::collation_strength::tertiary),
        0);
#endif

}

// ICU4J CollationMiscTest/TestContractionClosure (Å)
TEST(collation_and_tailoring, data_file_test_138)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&b=\u00C5 )"),
        "rules", error, warning);


    // <1 b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::primary),
        -1);

    // =  \u00C5 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"\u00C5")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u00C5")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::tertiary),
        0);

#if 0 // Not FCC!
    // =  A\u030A # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"A\u030A")),
        table,
        text::collation_strength::tertiary),
        0);

    // =  b # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"A\u030A")),
        text::utf32_range(text::string_view(u8"b")),
        table,
        text::collation_strength::tertiary),
        0);
#endif

#if 0 // TODO!
    // =  \u212B # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"b")),
        text::utf32_range(text::string_view(u8"\u212B")),
        table,
        text::collation_strength::tertiary),
        0);
#endif

}

// reset-before on already-tailored characters, ICU ticket 10108
TEST(collation_and_tailoring, data_file_test_139)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a<w<<x &[before 2]x<<y )"),
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 w # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"w")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"w")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::secondary),
        -1);

}

// reset-before on already-tailored characters, ICU ticket 10108
TEST(collation_and_tailoring, data_file_test_140)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a<<w<<<x &[before 2]x<<y )"),
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 w # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"w")),
        table,
        text::collation_strength::secondary),
        -1);

    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"w")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// reset-before on already-tailored characters, ICU ticket 10108
TEST(collation_and_tailoring, data_file_test_141)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a<w<x &[before 2]x<<y )"),
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 w # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"w")),
        table,
        text::collation_strength::primary),
        -1);

#if 0 // [WONTFIX 0]
    // <1 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"w")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::primary),
        -1);
#endif

    // <2 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::secondary),
        -1);

}

// reset-before on already-tailored characters, ICU ticket 10108
TEST(collation_and_tailoring, data_file_test_142)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&a<w<<<x &[before 2]x<<y )"),
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

#if 0 // [WONTFIX 0] For this to pass, the tailoring above must be equivalent to
      // "&a<y<<w<<<x", which is inconsistent with
      // https://www.unicode.org/reports/tr35/tr35-collation.html#Placing_Characters_Before_Others
      // and http://userguide.icu-project.org/collation/customization both.
    // <1 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::primary),
        -1);
#endif

    // <2 w # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"w")),
        table,
        text::collation_strength::secondary),
        -1);

    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"w")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// shifted+reordering, ICU ticket 9507
TEST(collation_and_tailoring, data_file_test_143)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"([reorder Grek punct space][alternate shifted][strength 4])"),
        "rules", error, warning);


    // <4 ( # punctuation
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"(")),
        table,
        text::collation_strength::quaternary),
        -1);

    // <4 ) # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"(")),
        text::utf32_range(text::string_view(u8")")),
        table,
        text::collation_strength::quaternary),
        -1);

    // <4 \u0020 # space
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8")")),
        text::utf32_range(text::string_view(u8"\u0020")),
        table,
        text::collation_strength::quaternary),
        -1);

#if 0 // 3.13.1 Interpretation of a reordering list says: "If any core code is
      // not present, then it is inserted at the front of the list".  "symbol"
      // is never mentioned, so it's supposed to come first.
    // <1 ` # symbol
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0020")),
        text::utf32_range(text::string_view(u8"`")),
        table,
        text::collation_strength::primary),
        -1);
#endif

    // <1 ^ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"`")),
        text::utf32_range(text::string_view(u8"^")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 $ # currency symbol
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"^")),
        text::utf32_range(text::string_view(u8"$")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 € # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"$")),
        text::utf32_range(text::string_view(u8"€")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 0 # numbers
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"€")),
        text::utf32_range(text::string_view(u8"0")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 ε # Greek
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"0")),
        text::utf32_range(text::string_view(u8"ε")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 e # Latin
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ε")),
        text::utf32_range(text::string_view(u8"e")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 e(e # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"e")),
        text::utf32_range(text::string_view(u8"e(e")),
        table,
        text::collation_strength::primary),
        -1);

    // <4 e)e # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"e(e")),
        text::utf32_range(text::string_view(u8"e)e")),
        table,
        text::collation_strength::quaternary),
        -1);

    // <4 e\u0020e # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"e)e")),
        text::utf32_range(text::string_view(u8"e\u0020e")),
        table,
        text::collation_strength::quaternary),
        -1);

    // <4 ee # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"e\u0020e")),
        text::utf32_range(text::string_view(u8"ee")),
        table,
        text::collation_strength::quaternary),
        -1);

#if 0 // TODO!
    // <3 e(E # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ee")),
        text::utf32_range(text::string_view(u8"e(E")),
        table,
        text::collation_strength::tertiary),
        -1);
#endif

    // <4 e)E # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"e(E")),
        text::utf32_range(text::string_view(u8"e)E")),
        table,
        text::collation_strength::quaternary),
        -1);

    // <4 e\u0020E # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"e)E")),
        text::utf32_range(text::string_view(u8"e\u0020E")),
        table,
        text::collation_strength::quaternary),
        -1);

    // <4 eE # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"e\u0020E")),
        text::utf32_range(text::string_view(u8"eE")),
        table,
        text::collation_strength::quaternary),
        -1);

}

// "uppercase first" could sort a string before its prefix, ICU ticket 9351
TEST(collation_and_tailoring, data_file_test_144)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&\u0001<<<b<<<B [caseFirst upper])"),
        "rules", error, warning);


    // <1 aaa # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"aaa")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 aaaB # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"aaa")),
        text::utf32_range(text::string_view(u8"aaaB")),
        table,
        text::collation_strength::tertiary),
        -1);

}

// secondary+case ignores secondary ignorables, ICU ticket 9355
TEST(collation_and_tailoring, data_file_test_145)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&\u0001<<<b<<<B [strength 2][caseLevel on])"),
        "rules", error, warning);


    // <1 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::primary),
        -1);

    // =  ab # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"ab")),
        table,
        text::collation_strength::secondary),
        0);

    // =  aB # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ab")),
        text::utf32_range(text::string_view(u8"aB")),
        table,
        text::collation_strength::secondary),
        0);

}

// custom collation rules involving tail of a contraction in Malayalam, ICU ticket 6328
TEST(collation_and_tailoring, data_file_test_146)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 2] \u0D4C << ൗ )"),
        "rules", error, warning);


    // <1 ൗx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"ൗx")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 ൌx # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ൗx")),
        text::utf32_range(text::string_view(u8"ൌx")),
        table,
        text::collation_strength::secondary),
        -1);

#if 0 // TODO!
    // <1 ൗy # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ൌx")),
        text::utf32_range(text::string_view(u8"ൗy")),
        table,
        text::collation_strength::primary),
        -1);
#endif

    // <2 ൌy # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ൗy")),
        text::utf32_range(text::string_view(u8"ൌy")),
        table,
        text::collation_strength::secondary),
        -1);

}

// quoted apostrophe in compact syntax, ICU ticket 8204
TEST(collation_and_tailoring, data_file_test_147)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&q<<*a''c )"),
        "rules", error, warning);


    // <1 d # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"d")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 p # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"d")),
        text::utf32_range(text::string_view(u8"p")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 q # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"p")),
        text::utf32_range(text::string_view(u8"q")),
        table,
        text::collation_strength::primary),
        -1);

    // <2 a # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"q")),
        text::utf32_range(text::string_view(u8"a")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 \u0027 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"a")),
        text::utf32_range(text::string_view(u8"\u0027")),
        table,
        text::collation_strength::secondary),
        -1);

    // <2 c # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"\u0027")),
        text::utf32_range(text::string_view(u8"c")),
        table,
        text::collation_strength::secondary),
        -1);

    // <1 r # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"c")),
        text::utf32_range(text::string_view(u8"r")),
        table,
        text::collation_strength::primary),
        -1);

}

// regression test for CollationFastLatinBuilder, ICU ticket 11388
TEST(collation_and_tailoring, data_file_test_148)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&x<<aa<<<Aa<<<AA [strength 2])"),
        "rules", error, warning);


    // <1 AA # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"AA")),
        table,
        text::collation_strength::primary),
        -1);

#if 0 // TODO!
    // <2 Aẩ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"AA")),
        text::utf32_range(text::string_view(u8"Aẩ")),
        table,
        text::collation_strength::secondary),
        -1);
#endif

    // <2 aą # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Aẩ")),
        text::utf32_range(text::string_view(u8"aą")),
        table,
        text::collation_strength::secondary),
        -1);

}

// regression test for CollationFastLatinBuilder, ICU ticket 11388
TEST(collation_and_tailoring, data_file_test_149)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&x<<aa<<<Aa<<<AA [strength 2])"),
        "rules", error, warning);


    // <1 AA # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"AA")),
        table,
        text::collation_strength::primary),
        -1);

#if 0 // TODO!
    // <2 aą # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"AA")),
        text::utf32_range(text::string_view(u8"aą")),
        table,
        text::collation_strength::secondary),
        -1);
#endif
}

// tailor tertiary-after a common tertiary where there is a lower one
TEST(collation_and_tailoring, data_file_test_150)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&あ<<<x<<<y<<<z )"),
        "rules", error, warning);


    // <1 ぁ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"ぁ")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 あ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ぁ")),
        text::utf32_range(text::string_view(u8"あ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"あ")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 ァ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"ァ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 い # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ァ")),
        text::utf32_range(text::string_view(u8"い")),
        table,
        text::collation_strength::primary),
        -1);

}

// tailor tertiary-after a below-common tertiary
TEST(collation_and_tailoring, data_file_test_151)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&ぁ<<<x<<<y<<<z )"),
        "rules", error, warning);


    // <1 ぁ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"ぁ")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ぁ")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 あ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"あ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 ァ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"あ")),
        text::utf32_range(text::string_view(u8"ァ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 い # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ァ")),
        text::utf32_range(text::string_view(u8"い")),
        table,
        text::collation_strength::primary),
        -1);

}

// tailor tertiary-before a common tertiary where there is a lower one
TEST(collation_and_tailoring, data_file_test_152)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 3]あ<<<x<<<y<<<z )"),
        "rules", error, warning);


    // <1 ぁ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"ぁ")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ぁ")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 あ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"あ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 ァ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"あ")),
        text::utf32_range(text::string_view(u8"ァ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 い # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ァ")),
        text::utf32_range(text::string_view(u8"い")),
        table,
        text::collation_strength::primary),
        -1);

}

// tailor tertiary-before a below-common tertiary
TEST(collation_and_tailoring, data_file_test_153)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"(&[before 3]ぁ<<<x<<<y<<<z )"),
        "rules", error, warning);


    // <1 x # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"x")),
        table,
        text::collation_strength::primary),
        -1);

    // <3 y # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"x")),
        text::utf32_range(text::string_view(u8"y")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 z # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"y")),
        text::utf32_range(text::string_view(u8"z")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 ぁ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"z")),
        text::utf32_range(text::string_view(u8"ぁ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 あ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ぁ")),
        text::utf32_range(text::string_view(u8"あ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <3 ァ # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"あ")),
        text::utf32_range(text::string_view(u8"ァ")),
        table,
        text::collation_strength::tertiary),
        -1);

    // <1 い # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"ァ")),
        text::utf32_range(text::string_view(u8"い")),
        table,
        text::collation_strength::primary),
        -1);

}

// reorder single scripts not groups, ICU ticket 11449
TEST(collation_and_tailoring, data_file_test_154)
{
    auto const table = text::tailored_collation_table(
        text::string_view(u8R"([reorder Goth Latn])"),
        "rules", error, warning);


    // <1 4 # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"")),
        text::utf32_range(text::string_view(u8"4")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 𐌰 # Gothic
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"4")),
        text::utf32_range(text::string_view(u8"𐌰")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 L # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"𐌰")),
        text::utf32_range(text::string_view(u8"L")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 Ω # 
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"L")),
        text::utf32_range(text::string_view(u8"Ω")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 𐌈 # Old Italic
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"Ω")),
        text::utf32_range(text::string_view(u8"𐌈")),
        table,
        text::collation_strength::primary),
        -1);

    // <1 𐑐 # Shavian
    EXPECT_EQ(text::collate(
        text::utf32_range(text::string_view(u8"𐌈")),
        text::utf32_range(text::string_view(u8"𐑐")),
        table,
        text::collation_strength::primary),
        -1);

}
