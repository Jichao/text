// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_368_000)
{
    // 43EF 003F;	
    // (䏯) CJK UNIFIED IDEOGRAPH-43EF	[FB80 C3EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43EF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_001)
{
    // 43EF 0061;	
    // (䏯) CJK UNIFIED IDEOGRAPH-43EF	[FB80 C3EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43EF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_002)
{
    // 43EF 0041;	
    // (䏯) CJK UNIFIED IDEOGRAPH-43EF	[FB80 C3EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43EF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_003)
{
    // 43EF 0062;	
    // (䏯) CJK UNIFIED IDEOGRAPH-43EF	[FB80 C3EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43EF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_004)
{
    // 43F0 0021;	
    // (䏰) CJK UNIFIED IDEOGRAPH-43F0	[FB80 C3F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_005)
{
    // 43F0 003F;	
    // (䏰) CJK UNIFIED IDEOGRAPH-43F0	[FB80 C3F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_006)
{
    // 43F0 0061;	
    // (䏰) CJK UNIFIED IDEOGRAPH-43F0	[FB80 C3F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_007)
{
    // 43F0 0041;	
    // (䏰) CJK UNIFIED IDEOGRAPH-43F0	[FB80 C3F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43F0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_008)
{
    // 43F0 0062;	
    // (䏰) CJK UNIFIED IDEOGRAPH-43F0	[FB80 C3F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_009)
{
    // 43F1 0021;	
    // (䏱) CJK UNIFIED IDEOGRAPH-43F1	[FB80 C3F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_010)
{
    // 43F1 003F;	
    // (䏱) CJK UNIFIED IDEOGRAPH-43F1	[FB80 C3F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_011)
{
    // 43F1 0061;	
    // (䏱) CJK UNIFIED IDEOGRAPH-43F1	[FB80 C3F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_012)
{
    // 43F1 0041;	
    // (䏱) CJK UNIFIED IDEOGRAPH-43F1	[FB80 C3F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43F1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_013)
{
    // 43F1 0062;	
    // (䏱) CJK UNIFIED IDEOGRAPH-43F1	[FB80 C3F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_014)
{
    // 43F2 0021;	
    // (䏲) CJK UNIFIED IDEOGRAPH-43F2	[FB80 C3F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_015)
{
    // 43F2 003F;	
    // (䏲) CJK UNIFIED IDEOGRAPH-43F2	[FB80 C3F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_016)
{
    // 43F2 0061;	
    // (䏲) CJK UNIFIED IDEOGRAPH-43F2	[FB80 C3F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_017)
{
    // 43F2 0041;	
    // (䏲) CJK UNIFIED IDEOGRAPH-43F2	[FB80 C3F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43F2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_018)
{
    // 43F2 0062;	
    // (䏲) CJK UNIFIED IDEOGRAPH-43F2	[FB80 C3F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_019)
{
    // 43F3 0021;	
    // (䏳) CJK UNIFIED IDEOGRAPH-43F3	[FB80 C3F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_020)
{
    // 43F3 003F;	
    // (䏳) CJK UNIFIED IDEOGRAPH-43F3	[FB80 C3F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_021)
{
    // 43F3 0061;	
    // (䏳) CJK UNIFIED IDEOGRAPH-43F3	[FB80 C3F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_022)
{
    // 43F3 0041;	
    // (䏳) CJK UNIFIED IDEOGRAPH-43F3	[FB80 C3F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43F3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_023)
{
    // 43F3 0062;	
    // (䏳) CJK UNIFIED IDEOGRAPH-43F3	[FB80 C3F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_024)
{
    // 43F4 0021;	
    // (䏴) CJK UNIFIED IDEOGRAPH-43F4	[FB80 C3F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_025)
{
    // 43F4 003F;	
    // (䏴) CJK UNIFIED IDEOGRAPH-43F4	[FB80 C3F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_026)
{
    // 43F4 0061;	
    // (䏴) CJK UNIFIED IDEOGRAPH-43F4	[FB80 C3F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_027)
{
    // 43F4 0041;	
    // (䏴) CJK UNIFIED IDEOGRAPH-43F4	[FB80 C3F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43F4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_028)
{
    // 43F4 0062;	
    // (䏴) CJK UNIFIED IDEOGRAPH-43F4	[FB80 C3F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_029)
{
    // 43F5 0021;	
    // (䏵) CJK UNIFIED IDEOGRAPH-43F5	[FB80 C3F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_030)
{
    // 43F5 003F;	
    // (䏵) CJK UNIFIED IDEOGRAPH-43F5	[FB80 C3F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_031)
{
    // 43F5 0061;	
    // (䏵) CJK UNIFIED IDEOGRAPH-43F5	[FB80 C3F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_032)
{
    // 43F5 0041;	
    // (䏵) CJK UNIFIED IDEOGRAPH-43F5	[FB80 C3F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43F5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_033)
{
    // 43F5 0062;	
    // (䏵) CJK UNIFIED IDEOGRAPH-43F5	[FB80 C3F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_034)
{
    // 43F6 0021;	
    // (䏶) CJK UNIFIED IDEOGRAPH-43F6	[FB80 C3F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_035)
{
    // 43F6 003F;	
    // (䏶) CJK UNIFIED IDEOGRAPH-43F6	[FB80 C3F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_036)
{
    // 43F6 0061;	
    // (䏶) CJK UNIFIED IDEOGRAPH-43F6	[FB80 C3F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_037)
{
    // 43F6 0041;	
    // (䏶) CJK UNIFIED IDEOGRAPH-43F6	[FB80 C3F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43F6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_038)
{
    // 43F6 0062;	
    // (䏶) CJK UNIFIED IDEOGRAPH-43F6	[FB80 C3F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_039)
{
    // 43F7 0021;	
    // (䏷) CJK UNIFIED IDEOGRAPH-43F7	[FB80 C3F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_040)
{
    // 43F7 003F;	
    // (䏷) CJK UNIFIED IDEOGRAPH-43F7	[FB80 C3F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_041)
{
    // 43F7 0061;	
    // (䏷) CJK UNIFIED IDEOGRAPH-43F7	[FB80 C3F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_042)
{
    // 43F7 0041;	
    // (䏷) CJK UNIFIED IDEOGRAPH-43F7	[FB80 C3F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43F7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_043)
{
    // 43F7 0062;	
    // (䏷) CJK UNIFIED IDEOGRAPH-43F7	[FB80 C3F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_044)
{
    // 43F8 0021;	
    // (䏸) CJK UNIFIED IDEOGRAPH-43F8	[FB80 C3F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_045)
{
    // 43F8 003F;	
    // (䏸) CJK UNIFIED IDEOGRAPH-43F8	[FB80 C3F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_046)
{
    // 43F8 0061;	
    // (䏸) CJK UNIFIED IDEOGRAPH-43F8	[FB80 C3F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_047)
{
    // 43F8 0041;	
    // (䏸) CJK UNIFIED IDEOGRAPH-43F8	[FB80 C3F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43F8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_048)
{
    // 43F8 0062;	
    // (䏸) CJK UNIFIED IDEOGRAPH-43F8	[FB80 C3F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_049)
{
    // 43F9 0021;	
    // (䏹) CJK UNIFIED IDEOGRAPH-43F9	[FB80 C3F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_050)
{
    // 43F9 003F;	
    // (䏹) CJK UNIFIED IDEOGRAPH-43F9	[FB80 C3F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_051)
{
    // 43F9 0061;	
    // (䏹) CJK UNIFIED IDEOGRAPH-43F9	[FB80 C3F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_052)
{
    // 43F9 0041;	
    // (䏹) CJK UNIFIED IDEOGRAPH-43F9	[FB80 C3F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43F9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_053)
{
    // 43F9 0062;	
    // (䏹) CJK UNIFIED IDEOGRAPH-43F9	[FB80 C3F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43F9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_054)
{
    // 43FA 0021;	
    // (䏺) CJK UNIFIED IDEOGRAPH-43FA	[FB80 C3FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43FA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_055)
{
    // 43FA 003F;	
    // (䏺) CJK UNIFIED IDEOGRAPH-43FA	[FB80 C3FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43FA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_056)
{
    // 43FA 0061;	
    // (䏺) CJK UNIFIED IDEOGRAPH-43FA	[FB80 C3FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43FA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_057)
{
    // 43FA 0041;	
    // (䏺) CJK UNIFIED IDEOGRAPH-43FA	[FB80 C3FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43FA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_058)
{
    // 43FA 0062;	
    // (䏺) CJK UNIFIED IDEOGRAPH-43FA	[FB80 C3FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43FA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_059)
{
    // 43FB 0021;	
    // (䏻) CJK UNIFIED IDEOGRAPH-43FB	[FB80 C3FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43FB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_060)
{
    // 43FB 003F;	
    // (䏻) CJK UNIFIED IDEOGRAPH-43FB	[FB80 C3FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43FB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_061)
{
    // 43FB 0061;	
    // (䏻) CJK UNIFIED IDEOGRAPH-43FB	[FB80 C3FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43FB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_062)
{
    // 43FB 0041;	
    // (䏻) CJK UNIFIED IDEOGRAPH-43FB	[FB80 C3FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43FB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_063)
{
    // 43FB 0062;	
    // (䏻) CJK UNIFIED IDEOGRAPH-43FB	[FB80 C3FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43FB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_064)
{
    // 43FC 0021;	
    // (䏼) CJK UNIFIED IDEOGRAPH-43FC	[FB80 C3FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43FC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_065)
{
    // 43FC 003F;	
    // (䏼) CJK UNIFIED IDEOGRAPH-43FC	[FB80 C3FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43FC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_066)
{
    // 43FC 0061;	
    // (䏼) CJK UNIFIED IDEOGRAPH-43FC	[FB80 C3FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43FC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_067)
{
    // 43FC 0041;	
    // (䏼) CJK UNIFIED IDEOGRAPH-43FC	[FB80 C3FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43FC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_068)
{
    // 43FC 0062;	
    // (䏼) CJK UNIFIED IDEOGRAPH-43FC	[FB80 C3FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43FC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_069)
{
    // 43FD 0021;	
    // (䏽) CJK UNIFIED IDEOGRAPH-43FD	[FB80 C3FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43FD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_070)
{
    // 43FD 003F;	
    // (䏽) CJK UNIFIED IDEOGRAPH-43FD	[FB80 C3FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43FD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_071)
{
    // 43FD 0061;	
    // (䏽) CJK UNIFIED IDEOGRAPH-43FD	[FB80 C3FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43FD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_072)
{
    // 43FD 0041;	
    // (䏽) CJK UNIFIED IDEOGRAPH-43FD	[FB80 C3FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43FD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_073)
{
    // 43FD 0062;	
    // (䏽) CJK UNIFIED IDEOGRAPH-43FD	[FB80 C3FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43FD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_074)
{
    // 43FE 0021;	
    // (䏾) CJK UNIFIED IDEOGRAPH-43FE	[FB80 C3FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43FE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_075)
{
    // 43FE 003F;	
    // (䏾) CJK UNIFIED IDEOGRAPH-43FE	[FB80 C3FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43FE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_076)
{
    // 43FE 0061;	
    // (䏾) CJK UNIFIED IDEOGRAPH-43FE	[FB80 C3FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43FE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_077)
{
    // 43FE 0041;	
    // (䏾) CJK UNIFIED IDEOGRAPH-43FE	[FB80 C3FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43FE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_078)
{
    // 43FE 0062;	
    // (䏾) CJK UNIFIED IDEOGRAPH-43FE	[FB80 C3FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43FE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_079)
{
    // 43FF 0021;	
    // (䏿) CJK UNIFIED IDEOGRAPH-43FF	[FB80 C3FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43FF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_080)
{
    // 43FF 003F;	
    // (䏿) CJK UNIFIED IDEOGRAPH-43FF	[FB80 C3FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43FF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_081)
{
    // 43FF 0061;	
    // (䏿) CJK UNIFIED IDEOGRAPH-43FF	[FB80 C3FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43FF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_082)
{
    // 43FF 0041;	
    // (䏿) CJK UNIFIED IDEOGRAPH-43FF	[FB80 C3FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43FF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_083)
{
    // 43FF 0062;	
    // (䏿) CJK UNIFIED IDEOGRAPH-43FF	[FB80 C3FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43FF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_084)
{
    // 4400 0021;	
    // (䐀) CJK UNIFIED IDEOGRAPH-4400	[FB80 C400 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4400, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC400, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_085)
{
    // 4400 003F;	
    // (䐀) CJK UNIFIED IDEOGRAPH-4400	[FB80 C400 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4400, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC400, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_086)
{
    // 4400 0061;	
    // (䐀) CJK UNIFIED IDEOGRAPH-4400	[FB80 C400 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4400, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC400, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_087)
{
    // 4400 0041;	
    // (䐀) CJK UNIFIED IDEOGRAPH-4400	[FB80 C400 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4400, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC400, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_088)
{
    // 4400 0062;	
    // (䐀) CJK UNIFIED IDEOGRAPH-4400	[FB80 C400 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4400, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC400, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_089)
{
    // 4401 0021;	
    // (䐁) CJK UNIFIED IDEOGRAPH-4401	[FB80 C401 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4401, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC401, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_090)
{
    // 4401 003F;	
    // (䐁) CJK UNIFIED IDEOGRAPH-4401	[FB80 C401 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4401, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC401, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_091)
{
    // 4401 0061;	
    // (䐁) CJK UNIFIED IDEOGRAPH-4401	[FB80 C401 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4401, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC401, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_092)
{
    // 4401 0041;	
    // (䐁) CJK UNIFIED IDEOGRAPH-4401	[FB80 C401 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4401, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC401, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_093)
{
    // 4401 0062;	
    // (䐁) CJK UNIFIED IDEOGRAPH-4401	[FB80 C401 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4401, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC401, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_094)
{
    // 4402 0021;	
    // (䐂) CJK UNIFIED IDEOGRAPH-4402	[FB80 C402 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4402, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC402, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_095)
{
    // 4402 003F;	
    // (䐂) CJK UNIFIED IDEOGRAPH-4402	[FB80 C402 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4402, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC402, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_096)
{
    // 4402 0061;	
    // (䐂) CJK UNIFIED IDEOGRAPH-4402	[FB80 C402 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4402, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_097)
{
    // 4402 0041;	
    // (䐂) CJK UNIFIED IDEOGRAPH-4402	[FB80 C402 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4402, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_098)
{
    // 4402 0062;	
    // (䐂) CJK UNIFIED IDEOGRAPH-4402	[FB80 C402 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4402, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC402, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_099)
{
    // 4403 0021;	
    // (䐃) CJK UNIFIED IDEOGRAPH-4403	[FB80 C403 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4403, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC403, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_100)
{
    // 4403 003F;	
    // (䐃) CJK UNIFIED IDEOGRAPH-4403	[FB80 C403 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4403, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC403, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_101)
{
    // 4403 0061;	
    // (䐃) CJK UNIFIED IDEOGRAPH-4403	[FB80 C403 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4403, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC403, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_102)
{
    // 4403 0041;	
    // (䐃) CJK UNIFIED IDEOGRAPH-4403	[FB80 C403 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4403, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC403, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_103)
{
    // 4403 0062;	
    // (䐃) CJK UNIFIED IDEOGRAPH-4403	[FB80 C403 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4403, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC403, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_104)
{
    // 4404 0021;	
    // (䐄) CJK UNIFIED IDEOGRAPH-4404	[FB80 C404 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4404, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC404, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_105)
{
    // 4404 003F;	
    // (䐄) CJK UNIFIED IDEOGRAPH-4404	[FB80 C404 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4404, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC404, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_106)
{
    // 4404 0061;	
    // (䐄) CJK UNIFIED IDEOGRAPH-4404	[FB80 C404 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4404, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC404, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_107)
{
    // 4404 0041;	
    // (䐄) CJK UNIFIED IDEOGRAPH-4404	[FB80 C404 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4404, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC404, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_108)
{
    // 4404 0062;	
    // (䐄) CJK UNIFIED IDEOGRAPH-4404	[FB80 C404 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4404, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC404, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_109)
{
    // 4405 0021;	
    // (䐅) CJK UNIFIED IDEOGRAPH-4405	[FB80 C405 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4405, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC405, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_110)
{
    // 4405 003F;	
    // (䐅) CJK UNIFIED IDEOGRAPH-4405	[FB80 C405 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4405, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC405, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_111)
{
    // 4405 0061;	
    // (䐅) CJK UNIFIED IDEOGRAPH-4405	[FB80 C405 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4405, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC405, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_112)
{
    // 4405 0041;	
    // (䐅) CJK UNIFIED IDEOGRAPH-4405	[FB80 C405 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4405, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC405, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_113)
{
    // 4405 0062;	
    // (䐅) CJK UNIFIED IDEOGRAPH-4405	[FB80 C405 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4405, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC405, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_114)
{
    // 4406 0021;	
    // (䐆) CJK UNIFIED IDEOGRAPH-4406	[FB80 C406 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4406, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC406, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_115)
{
    // 4406 003F;	
    // (䐆) CJK UNIFIED IDEOGRAPH-4406	[FB80 C406 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4406, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC406, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_116)
{
    // 4406 0061;	
    // (䐆) CJK UNIFIED IDEOGRAPH-4406	[FB80 C406 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4406, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC406, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_117)
{
    // 4406 0041;	
    // (䐆) CJK UNIFIED IDEOGRAPH-4406	[FB80 C406 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4406, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC406, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_118)
{
    // 4406 0062;	
    // (䐆) CJK UNIFIED IDEOGRAPH-4406	[FB80 C406 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4406, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC406, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_119)
{
    // 4407 0021;	
    // (䐇) CJK UNIFIED IDEOGRAPH-4407	[FB80 C407 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4407, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC407, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_120)
{
    // 4407 003F;	
    // (䐇) CJK UNIFIED IDEOGRAPH-4407	[FB80 C407 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4407, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC407, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_121)
{
    // 4407 0061;	
    // (䐇) CJK UNIFIED IDEOGRAPH-4407	[FB80 C407 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4407, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC407, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_122)
{
    // 4407 0041;	
    // (䐇) CJK UNIFIED IDEOGRAPH-4407	[FB80 C407 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4407, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC407, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_123)
{
    // 4407 0062;	
    // (䐇) CJK UNIFIED IDEOGRAPH-4407	[FB80 C407 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4407, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC407, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_124)
{
    // 4408 0021;	
    // (䐈) CJK UNIFIED IDEOGRAPH-4408	[FB80 C408 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4408, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC408, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_125)
{
    // 4408 003F;	
    // (䐈) CJK UNIFIED IDEOGRAPH-4408	[FB80 C408 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4408, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC408, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_126)
{
    // 4408 0061;	
    // (䐈) CJK UNIFIED IDEOGRAPH-4408	[FB80 C408 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4408, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC408, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_127)
{
    // 4408 0041;	
    // (䐈) CJK UNIFIED IDEOGRAPH-4408	[FB80 C408 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4408, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC408, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_128)
{
    // 4408 0062;	
    // (䐈) CJK UNIFIED IDEOGRAPH-4408	[FB80 C408 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4408, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC408, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_129)
{
    // 4409 0021;	
    // (䐉) CJK UNIFIED IDEOGRAPH-4409	[FB80 C409 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4409, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_130)
{
    // 4409 003F;	
    // (䐉) CJK UNIFIED IDEOGRAPH-4409	[FB80 C409 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4409, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_131)
{
    // 4409 0061;	
    // (䐉) CJK UNIFIED IDEOGRAPH-4409	[FB80 C409 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4409, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_132)
{
    // 4409 0041;	
    // (䐉) CJK UNIFIED IDEOGRAPH-4409	[FB80 C409 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4409, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_133)
{
    // 4409 0062;	
    // (䐉) CJK UNIFIED IDEOGRAPH-4409	[FB80 C409 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4409, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_134)
{
    // 440A 0021;	
    // (䐊) CJK UNIFIED IDEOGRAPH-440A	[FB80 C40A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x440A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC40A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_135)
{
    // 440A 003F;	
    // (䐊) CJK UNIFIED IDEOGRAPH-440A	[FB80 C40A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x440A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC40A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_136)
{
    // 440A 0061;	
    // (䐊) CJK UNIFIED IDEOGRAPH-440A	[FB80 C40A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x440A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC40A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_137)
{
    // 440A 0041;	
    // (䐊) CJK UNIFIED IDEOGRAPH-440A	[FB80 C40A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x440A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC40A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_138)
{
    // 440A 0062;	
    // (䐊) CJK UNIFIED IDEOGRAPH-440A	[FB80 C40A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x440A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC40A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_139)
{
    // 440B 0021;	
    // (䐋) CJK UNIFIED IDEOGRAPH-440B	[FB80 C40B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x440B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC40B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_140)
{
    // 2F984 0021;	
    // (䐋) CJK COMPATIBILITY IDEOGRAPH-2F984	[FB80 C40B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F984, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC40B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_141)
{
    // 440B 003F;	
    // (䐋) CJK UNIFIED IDEOGRAPH-440B	[FB80 C40B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x440B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC40B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_142)
{
    // 2F984 003F;	
    // (䐋) CJK COMPATIBILITY IDEOGRAPH-2F984	[FB80 C40B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F984, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC40B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_143)
{
    // 440B 0061;	
    // (䐋) CJK UNIFIED IDEOGRAPH-440B	[FB80 C40B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x440B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC40B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_144)
{
    // 2F984 0061;	
    // (䐋) CJK COMPATIBILITY IDEOGRAPH-2F984	[FB80 C40B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F984, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC40B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_145)
{
    // 440B 0041;	
    // (䐋) CJK UNIFIED IDEOGRAPH-440B	[FB80 C40B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x440B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC40B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_146)
{
    // 2F984 0041;	
    // (䐋) CJK COMPATIBILITY IDEOGRAPH-2F984	[FB80 C40B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F984, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC40B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_147)
{
    // 440B 0062;	
    // (䐋) CJK UNIFIED IDEOGRAPH-440B	[FB80 C40B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x440B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC40B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_148)
{
    // 2F984 0062;	
    // (䐋) CJK COMPATIBILITY IDEOGRAPH-2F984	[FB80 C40B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F984, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC40B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_149)
{
    // 440C 0021;	
    // (䐌) CJK UNIFIED IDEOGRAPH-440C	[FB80 C40C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x440C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC40C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_150)
{
    // 440C 003F;	
    // (䐌) CJK UNIFIED IDEOGRAPH-440C	[FB80 C40C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x440C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC40C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_151)
{
    // 440C 0061;	
    // (䐌) CJK UNIFIED IDEOGRAPH-440C	[FB80 C40C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x440C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC40C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_152)
{
    // 440C 0041;	
    // (䐌) CJK UNIFIED IDEOGRAPH-440C	[FB80 C40C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x440C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC40C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_153)
{
    // 440C 0062;	
    // (䐌) CJK UNIFIED IDEOGRAPH-440C	[FB80 C40C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x440C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC40C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_154)
{
    // 440D 0021;	
    // (䐍) CJK UNIFIED IDEOGRAPH-440D	[FB80 C40D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x440D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC40D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_155)
{
    // 440D 003F;	
    // (䐍) CJK UNIFIED IDEOGRAPH-440D	[FB80 C40D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x440D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC40D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_156)
{
    // 440D 0061;	
    // (䐍) CJK UNIFIED IDEOGRAPH-440D	[FB80 C40D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x440D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC40D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_157)
{
    // 440D 0041;	
    // (䐍) CJK UNIFIED IDEOGRAPH-440D	[FB80 C40D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x440D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC40D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_158)
{
    // 440D 0062;	
    // (䐍) CJK UNIFIED IDEOGRAPH-440D	[FB80 C40D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x440D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC40D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_159)
{
    // 440E 0021;	
    // (䐎) CJK UNIFIED IDEOGRAPH-440E	[FB80 C40E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x440E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC40E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_160)
{
    // 440E 003F;	
    // (䐎) CJK UNIFIED IDEOGRAPH-440E	[FB80 C40E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x440E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC40E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_161)
{
    // 440E 0061;	
    // (䐎) CJK UNIFIED IDEOGRAPH-440E	[FB80 C40E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x440E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC40E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_162)
{
    // 440E 0041;	
    // (䐎) CJK UNIFIED IDEOGRAPH-440E	[FB80 C40E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x440E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC40E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_163)
{
    // 440E 0062;	
    // (䐎) CJK UNIFIED IDEOGRAPH-440E	[FB80 C40E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x440E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC40E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_164)
{
    // 440F 0021;	
    // (䐏) CJK UNIFIED IDEOGRAPH-440F	[FB80 C40F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x440F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC40F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_165)
{
    // 440F 003F;	
    // (䐏) CJK UNIFIED IDEOGRAPH-440F	[FB80 C40F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x440F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC40F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_166)
{
    // 440F 0061;	
    // (䐏) CJK UNIFIED IDEOGRAPH-440F	[FB80 C40F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x440F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC40F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_167)
{
    // 440F 0041;	
    // (䐏) CJK UNIFIED IDEOGRAPH-440F	[FB80 C40F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x440F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC40F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_168)
{
    // 440F 0062;	
    // (䐏) CJK UNIFIED IDEOGRAPH-440F	[FB80 C40F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x440F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC40F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_169)
{
    // 4410 0021;	
    // (䐐) CJK UNIFIED IDEOGRAPH-4410	[FB80 C410 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4410, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC410, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_170)
{
    // 4410 003F;	
    // (䐐) CJK UNIFIED IDEOGRAPH-4410	[FB80 C410 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4410, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC410, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_171)
{
    // 4410 0061;	
    // (䐐) CJK UNIFIED IDEOGRAPH-4410	[FB80 C410 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4410, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC410, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_172)
{
    // 4410 0041;	
    // (䐐) CJK UNIFIED IDEOGRAPH-4410	[FB80 C410 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4410, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC410, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_173)
{
    // 4410 0062;	
    // (䐐) CJK UNIFIED IDEOGRAPH-4410	[FB80 C410 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4410, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC410, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_174)
{
    // 4411 0021;	
    // (䐑) CJK UNIFIED IDEOGRAPH-4411	[FB80 C411 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4411, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC411, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_175)
{
    // 4411 003F;	
    // (䐑) CJK UNIFIED IDEOGRAPH-4411	[FB80 C411 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4411, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC411, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_176)
{
    // 4411 0061;	
    // (䐑) CJK UNIFIED IDEOGRAPH-4411	[FB80 C411 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4411, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC411, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_177)
{
    // 4411 0041;	
    // (䐑) CJK UNIFIED IDEOGRAPH-4411	[FB80 C411 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4411, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC411, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_178)
{
    // 4411 0062;	
    // (䐑) CJK UNIFIED IDEOGRAPH-4411	[FB80 C411 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4411, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC411, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_179)
{
    // 4412 0021;	
    // (䐒) CJK UNIFIED IDEOGRAPH-4412	[FB80 C412 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4412, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC412, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_180)
{
    // 4412 003F;	
    // (䐒) CJK UNIFIED IDEOGRAPH-4412	[FB80 C412 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4412, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC412, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_181)
{
    // 4412 0061;	
    // (䐒) CJK UNIFIED IDEOGRAPH-4412	[FB80 C412 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4412, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC412, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_182)
{
    // 4412 0041;	
    // (䐒) CJK UNIFIED IDEOGRAPH-4412	[FB80 C412 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4412, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC412, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_183)
{
    // 4412 0062;	
    // (䐒) CJK UNIFIED IDEOGRAPH-4412	[FB80 C412 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4412, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC412, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_184)
{
    // 4413 0021;	
    // (䐓) CJK UNIFIED IDEOGRAPH-4413	[FB80 C413 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4413, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC413, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_185)
{
    // 4413 003F;	
    // (䐓) CJK UNIFIED IDEOGRAPH-4413	[FB80 C413 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4413, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC413, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_186)
{
    // 4413 0061;	
    // (䐓) CJK UNIFIED IDEOGRAPH-4413	[FB80 C413 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4413, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC413, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_187)
{
    // 4413 0041;	
    // (䐓) CJK UNIFIED IDEOGRAPH-4413	[FB80 C413 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4413, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC413, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_188)
{
    // 4413 0062;	
    // (䐓) CJK UNIFIED IDEOGRAPH-4413	[FB80 C413 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4413, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC413, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_189)
{
    // 4414 0021;	
    // (䐔) CJK UNIFIED IDEOGRAPH-4414	[FB80 C414 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4414, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC414, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_190)
{
    // 4414 003F;	
    // (䐔) CJK UNIFIED IDEOGRAPH-4414	[FB80 C414 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4414, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC414, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_191)
{
    // 4414 0061;	
    // (䐔) CJK UNIFIED IDEOGRAPH-4414	[FB80 C414 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4414, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC414, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_192)
{
    // 4414 0041;	
    // (䐔) CJK UNIFIED IDEOGRAPH-4414	[FB80 C414 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4414, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC414, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_193)
{
    // 4414 0062;	
    // (䐔) CJK UNIFIED IDEOGRAPH-4414	[FB80 C414 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4414, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC414, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_194)
{
    // 4415 0021;	
    // (䐕) CJK UNIFIED IDEOGRAPH-4415	[FB80 C415 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4415, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC415, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_195)
{
    // 4415 003F;	
    // (䐕) CJK UNIFIED IDEOGRAPH-4415	[FB80 C415 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4415, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC415, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_196)
{
    // 4415 0061;	
    // (䐕) CJK UNIFIED IDEOGRAPH-4415	[FB80 C415 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4415, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC415, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_197)
{
    // 4415 0041;	
    // (䐕) CJK UNIFIED IDEOGRAPH-4415	[FB80 C415 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4415, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC415, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_198)
{
    // 4415 0062;	
    // (䐕) CJK UNIFIED IDEOGRAPH-4415	[FB80 C415 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4415, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC415, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_199)
{
    // 4416 0021;	
    // (䐖) CJK UNIFIED IDEOGRAPH-4416	[FB80 C416 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4416, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC416, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_200)
{
    // 4416 003F;	
    // (䐖) CJK UNIFIED IDEOGRAPH-4416	[FB80 C416 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4416, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC416, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_201)
{
    // 4416 0061;	
    // (䐖) CJK UNIFIED IDEOGRAPH-4416	[FB80 C416 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4416, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC416, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_202)
{
    // 4416 0041;	
    // (䐖) CJK UNIFIED IDEOGRAPH-4416	[FB80 C416 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4416, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC416, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_203)
{
    // 4416 0062;	
    // (䐖) CJK UNIFIED IDEOGRAPH-4416	[FB80 C416 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4416, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC416, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_204)
{
    // 4417 0021;	
    // (䐗) CJK UNIFIED IDEOGRAPH-4417	[FB80 C417 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4417, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC417, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_205)
{
    // 4417 003F;	
    // (䐗) CJK UNIFIED IDEOGRAPH-4417	[FB80 C417 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4417, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC417, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_206)
{
    // 4417 0061;	
    // (䐗) CJK UNIFIED IDEOGRAPH-4417	[FB80 C417 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4417, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_207)
{
    // 4417 0041;	
    // (䐗) CJK UNIFIED IDEOGRAPH-4417	[FB80 C417 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4417, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_208)
{
    // 4417 0062;	
    // (䐗) CJK UNIFIED IDEOGRAPH-4417	[FB80 C417 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4417, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_209)
{
    // 4418 0021;	
    // (䐘) CJK UNIFIED IDEOGRAPH-4418	[FB80 C418 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4418, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC418, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_210)
{
    // 4418 003F;	
    // (䐘) CJK UNIFIED IDEOGRAPH-4418	[FB80 C418 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4418, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC418, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_211)
{
    // 4418 0061;	
    // (䐘) CJK UNIFIED IDEOGRAPH-4418	[FB80 C418 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4418, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC418, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_212)
{
    // 4418 0041;	
    // (䐘) CJK UNIFIED IDEOGRAPH-4418	[FB80 C418 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4418, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC418, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_213)
{
    // 4418 0062;	
    // (䐘) CJK UNIFIED IDEOGRAPH-4418	[FB80 C418 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4418, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC418, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_214)
{
    // 4419 0021;	
    // (䐙) CJK UNIFIED IDEOGRAPH-4419	[FB80 C419 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4419, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC419, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_215)
{
    // 4419 003F;	
    // (䐙) CJK UNIFIED IDEOGRAPH-4419	[FB80 C419 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4419, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC419, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_216)
{
    // 4419 0061;	
    // (䐙) CJK UNIFIED IDEOGRAPH-4419	[FB80 C419 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4419, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC419, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_217)
{
    // 4419 0041;	
    // (䐙) CJK UNIFIED IDEOGRAPH-4419	[FB80 C419 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4419, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC419, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_218)
{
    // 4419 0062;	
    // (䐙) CJK UNIFIED IDEOGRAPH-4419	[FB80 C419 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4419, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC419, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_219)
{
    // 441A 0021;	
    // (䐚) CJK UNIFIED IDEOGRAPH-441A	[FB80 C41A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x441A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC41A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_220)
{
    // 441A 003F;	
    // (䐚) CJK UNIFIED IDEOGRAPH-441A	[FB80 C41A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x441A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC41A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_221)
{
    // 441A 0061;	
    // (䐚) CJK UNIFIED IDEOGRAPH-441A	[FB80 C41A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x441A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC41A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_222)
{
    // 441A 0041;	
    // (䐚) CJK UNIFIED IDEOGRAPH-441A	[FB80 C41A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x441A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC41A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_223)
{
    // 441A 0062;	
    // (䐚) CJK UNIFIED IDEOGRAPH-441A	[FB80 C41A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x441A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC41A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_224)
{
    // 441B 0021;	
    // (䐛) CJK UNIFIED IDEOGRAPH-441B	[FB80 C41B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x441B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC41B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_225)
{
    // 441B 003F;	
    // (䐛) CJK UNIFIED IDEOGRAPH-441B	[FB80 C41B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x441B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC41B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_226)
{
    // 441B 0061;	
    // (䐛) CJK UNIFIED IDEOGRAPH-441B	[FB80 C41B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x441B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC41B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_227)
{
    // 441B 0041;	
    // (䐛) CJK UNIFIED IDEOGRAPH-441B	[FB80 C41B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x441B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC41B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_228)
{
    // 441B 0062;	
    // (䐛) CJK UNIFIED IDEOGRAPH-441B	[FB80 C41B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x441B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC41B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_229)
{
    // 441C 0021;	
    // (䐜) CJK UNIFIED IDEOGRAPH-441C	[FB80 C41C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x441C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC41C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_230)
{
    // 441C 003F;	
    // (䐜) CJK UNIFIED IDEOGRAPH-441C	[FB80 C41C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x441C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC41C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_231)
{
    // 441C 0061;	
    // (䐜) CJK UNIFIED IDEOGRAPH-441C	[FB80 C41C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x441C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC41C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_232)
{
    // 441C 0041;	
    // (䐜) CJK UNIFIED IDEOGRAPH-441C	[FB80 C41C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x441C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC41C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_233)
{
    // 441C 0062;	
    // (䐜) CJK UNIFIED IDEOGRAPH-441C	[FB80 C41C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x441C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC41C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_234)
{
    // 441D 0021;	
    // (䐝) CJK UNIFIED IDEOGRAPH-441D	[FB80 C41D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x441D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC41D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_235)
{
    // 441D 003F;	
    // (䐝) CJK UNIFIED IDEOGRAPH-441D	[FB80 C41D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x441D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC41D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_236)
{
    // 441D 0061;	
    // (䐝) CJK UNIFIED IDEOGRAPH-441D	[FB80 C41D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x441D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC41D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_237)
{
    // 441D 0041;	
    // (䐝) CJK UNIFIED IDEOGRAPH-441D	[FB80 C41D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x441D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC41D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_238)
{
    // 441D 0062;	
    // (䐝) CJK UNIFIED IDEOGRAPH-441D	[FB80 C41D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x441D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC41D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_239)
{
    // 441E 0021;	
    // (䐞) CJK UNIFIED IDEOGRAPH-441E	[FB80 C41E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x441E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC41E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_240)
{
    // 441E 003F;	
    // (䐞) CJK UNIFIED IDEOGRAPH-441E	[FB80 C41E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x441E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC41E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_241)
{
    // 441E 0061;	
    // (䐞) CJK UNIFIED IDEOGRAPH-441E	[FB80 C41E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x441E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC41E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_242)
{
    // 441E 0041;	
    // (䐞) CJK UNIFIED IDEOGRAPH-441E	[FB80 C41E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x441E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC41E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_243)
{
    // 441E 0062;	
    // (䐞) CJK UNIFIED IDEOGRAPH-441E	[FB80 C41E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x441E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC41E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_244)
{
    // 441F 0021;	
    // (䐟) CJK UNIFIED IDEOGRAPH-441F	[FB80 C41F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x441F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC41F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_245)
{
    // 441F 003F;	
    // (䐟) CJK UNIFIED IDEOGRAPH-441F	[FB80 C41F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x441F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC41F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_246)
{
    // 441F 0061;	
    // (䐟) CJK UNIFIED IDEOGRAPH-441F	[FB80 C41F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x441F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC41F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_247)
{
    // 441F 0041;	
    // (䐟) CJK UNIFIED IDEOGRAPH-441F	[FB80 C41F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x441F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC41F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_248)
{
    // 441F 0062;	
    // (䐟) CJK UNIFIED IDEOGRAPH-441F	[FB80 C41F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x441F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC41F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_249)
{
    // 4420 0021;	
    // (䐠) CJK UNIFIED IDEOGRAPH-4420	[FB80 C420 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4420, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC420, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_250)
{
    // 4420 003F;	
    // (䐠) CJK UNIFIED IDEOGRAPH-4420	[FB80 C420 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4420, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC420, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_251)
{
    // 4420 0061;	
    // (䐠) CJK UNIFIED IDEOGRAPH-4420	[FB80 C420 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4420, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC420, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_252)
{
    // 4420 0041;	
    // (䐠) CJK UNIFIED IDEOGRAPH-4420	[FB80 C420 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4420, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC420, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_253)
{
    // 4420 0062;	
    // (䐠) CJK UNIFIED IDEOGRAPH-4420	[FB80 C420 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4420, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC420, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_254)
{
    // 4421 0021;	
    // (䐡) CJK UNIFIED IDEOGRAPH-4421	[FB80 C421 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4421, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC421, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_255)
{
    // 4421 003F;	
    // (䐡) CJK UNIFIED IDEOGRAPH-4421	[FB80 C421 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4421, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC421, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_256)
{
    // 4421 0061;	
    // (䐡) CJK UNIFIED IDEOGRAPH-4421	[FB80 C421 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4421, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC421, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_257)
{
    // 4421 0041;	
    // (䐡) CJK UNIFIED IDEOGRAPH-4421	[FB80 C421 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4421, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC421, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_258)
{
    // 4421 0062;	
    // (䐡) CJK UNIFIED IDEOGRAPH-4421	[FB80 C421 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4421, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC421, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_259)
{
    // 4422 0021;	
    // (䐢) CJK UNIFIED IDEOGRAPH-4422	[FB80 C422 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4422, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC422, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_260)
{
    // 4422 003F;	
    // (䐢) CJK UNIFIED IDEOGRAPH-4422	[FB80 C422 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4422, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC422, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_261)
{
    // 4422 0061;	
    // (䐢) CJK UNIFIED IDEOGRAPH-4422	[FB80 C422 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4422, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC422, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_262)
{
    // 4422 0041;	
    // (䐢) CJK UNIFIED IDEOGRAPH-4422	[FB80 C422 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4422, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC422, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_263)
{
    // 4422 0062;	
    // (䐢) CJK UNIFIED IDEOGRAPH-4422	[FB80 C422 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4422, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC422, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_264)
{
    // 4423 0021;	
    // (䐣) CJK UNIFIED IDEOGRAPH-4423	[FB80 C423 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4423, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC423, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_265)
{
    // 4423 003F;	
    // (䐣) CJK UNIFIED IDEOGRAPH-4423	[FB80 C423 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4423, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC423, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_266)
{
    // 4423 0061;	
    // (䐣) CJK UNIFIED IDEOGRAPH-4423	[FB80 C423 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4423, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC423, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_267)
{
    // 4423 0041;	
    // (䐣) CJK UNIFIED IDEOGRAPH-4423	[FB80 C423 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4423, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC423, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_268)
{
    // 4423 0062;	
    // (䐣) CJK UNIFIED IDEOGRAPH-4423	[FB80 C423 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4423, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC423, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_269)
{
    // 4424 0021;	
    // (䐤) CJK UNIFIED IDEOGRAPH-4424	[FB80 C424 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4424, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC424, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_270)
{
    // 4424 003F;	
    // (䐤) CJK UNIFIED IDEOGRAPH-4424	[FB80 C424 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4424, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC424, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_271)
{
    // 4424 0061;	
    // (䐤) CJK UNIFIED IDEOGRAPH-4424	[FB80 C424 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4424, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC424, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_272)
{
    // 4424 0041;	
    // (䐤) CJK UNIFIED IDEOGRAPH-4424	[FB80 C424 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4424, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC424, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_273)
{
    // 4424 0062;	
    // (䐤) CJK UNIFIED IDEOGRAPH-4424	[FB80 C424 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4424, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC424, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_274)
{
    // 4425 0021;	
    // (䐥) CJK UNIFIED IDEOGRAPH-4425	[FB80 C425 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4425, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC425, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_275)
{
    // 4425 003F;	
    // (䐥) CJK UNIFIED IDEOGRAPH-4425	[FB80 C425 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4425, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC425, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_276)
{
    // 4425 0061;	
    // (䐥) CJK UNIFIED IDEOGRAPH-4425	[FB80 C425 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4425, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC425, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_277)
{
    // 4425 0041;	
    // (䐥) CJK UNIFIED IDEOGRAPH-4425	[FB80 C425 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4425, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC425, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_278)
{
    // 4425 0062;	
    // (䐥) CJK UNIFIED IDEOGRAPH-4425	[FB80 C425 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4425, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC425, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_279)
{
    // 4426 0021;	
    // (䐦) CJK UNIFIED IDEOGRAPH-4426	[FB80 C426 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4426, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC426, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_280)
{
    // 4426 003F;	
    // (䐦) CJK UNIFIED IDEOGRAPH-4426	[FB80 C426 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4426, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC426, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_281)
{
    // 4426 0061;	
    // (䐦) CJK UNIFIED IDEOGRAPH-4426	[FB80 C426 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4426, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC426, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_282)
{
    // 4426 0041;	
    // (䐦) CJK UNIFIED IDEOGRAPH-4426	[FB80 C426 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4426, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC426, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_283)
{
    // 4426 0062;	
    // (䐦) CJK UNIFIED IDEOGRAPH-4426	[FB80 C426 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4426, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC426, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_284)
{
    // 4427 0021;	
    // (䐧) CJK UNIFIED IDEOGRAPH-4427	[FB80 C427 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4427, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC427, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_285)
{
    // 4427 003F;	
    // (䐧) CJK UNIFIED IDEOGRAPH-4427	[FB80 C427 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4427, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC427, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_286)
{
    // 4427 0061;	
    // (䐧) CJK UNIFIED IDEOGRAPH-4427	[FB80 C427 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4427, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC427, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_287)
{
    // 4427 0041;	
    // (䐧) CJK UNIFIED IDEOGRAPH-4427	[FB80 C427 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4427, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC427, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_288)
{
    // 4427 0062;	
    // (䐧) CJK UNIFIED IDEOGRAPH-4427	[FB80 C427 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4427, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC427, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_289)
{
    // 4428 0021;	
    // (䐨) CJK UNIFIED IDEOGRAPH-4428	[FB80 C428 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4428, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC428, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_290)
{
    // 4428 003F;	
    // (䐨) CJK UNIFIED IDEOGRAPH-4428	[FB80 C428 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4428, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC428, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_291)
{
    // 4428 0061;	
    // (䐨) CJK UNIFIED IDEOGRAPH-4428	[FB80 C428 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4428, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC428, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_292)
{
    // 4428 0041;	
    // (䐨) CJK UNIFIED IDEOGRAPH-4428	[FB80 C428 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4428, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC428, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_293)
{
    // 4428 0062;	
    // (䐨) CJK UNIFIED IDEOGRAPH-4428	[FB80 C428 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4428, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC428, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_294)
{
    // 4429 0021;	
    // (䐩) CJK UNIFIED IDEOGRAPH-4429	[FB80 C429 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4429, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC429, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_295)
{
    // 4429 003F;	
    // (䐩) CJK UNIFIED IDEOGRAPH-4429	[FB80 C429 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4429, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC429, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_296)
{
    // 4429 0061;	
    // (䐩) CJK UNIFIED IDEOGRAPH-4429	[FB80 C429 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4429, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC429, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_297)
{
    // 4429 0041;	
    // (䐩) CJK UNIFIED IDEOGRAPH-4429	[FB80 C429 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4429, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC429, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_298)
{
    // 4429 0062;	
    // (䐩) CJK UNIFIED IDEOGRAPH-4429	[FB80 C429 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4429, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC429, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_299)
{
    // 442A 0021;	
    // (䐪) CJK UNIFIED IDEOGRAPH-442A	[FB80 C42A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x442A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC42A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_300)
{
    // 442A 003F;	
    // (䐪) CJK UNIFIED IDEOGRAPH-442A	[FB80 C42A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x442A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC42A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_301)
{
    // 442A 0061;	
    // (䐪) CJK UNIFIED IDEOGRAPH-442A	[FB80 C42A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x442A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC42A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_302)
{
    // 442A 0041;	
    // (䐪) CJK UNIFIED IDEOGRAPH-442A	[FB80 C42A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x442A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC42A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_303)
{
    // 442A 0062;	
    // (䐪) CJK UNIFIED IDEOGRAPH-442A	[FB80 C42A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x442A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC42A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_304)
{
    // 442B 0021;	
    // (䐫) CJK UNIFIED IDEOGRAPH-442B	[FB80 C42B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x442B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC42B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_305)
{
    // 442B 003F;	
    // (䐫) CJK UNIFIED IDEOGRAPH-442B	[FB80 C42B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x442B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC42B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_306)
{
    // 442B 0061;	
    // (䐫) CJK UNIFIED IDEOGRAPH-442B	[FB80 C42B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x442B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC42B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_307)
{
    // 442B 0041;	
    // (䐫) CJK UNIFIED IDEOGRAPH-442B	[FB80 C42B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x442B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC42B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_308)
{
    // 442B 0062;	
    // (䐫) CJK UNIFIED IDEOGRAPH-442B	[FB80 C42B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x442B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC42B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_309)
{
    // 442C 0021;	
    // (䐬) CJK UNIFIED IDEOGRAPH-442C	[FB80 C42C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x442C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC42C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_310)
{
    // 442C 003F;	
    // (䐬) CJK UNIFIED IDEOGRAPH-442C	[FB80 C42C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x442C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC42C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_311)
{
    // 442C 0061;	
    // (䐬) CJK UNIFIED IDEOGRAPH-442C	[FB80 C42C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x442C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC42C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_312)
{
    // 442C 0041;	
    // (䐬) CJK UNIFIED IDEOGRAPH-442C	[FB80 C42C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x442C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC42C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_313)
{
    // 442C 0062;	
    // (䐬) CJK UNIFIED IDEOGRAPH-442C	[FB80 C42C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x442C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC42C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_314)
{
    // 442D 0021;	
    // (䐭) CJK UNIFIED IDEOGRAPH-442D	[FB80 C42D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x442D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC42D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_315)
{
    // 442D 003F;	
    // (䐭) CJK UNIFIED IDEOGRAPH-442D	[FB80 C42D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x442D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC42D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_316)
{
    // 442D 0061;	
    // (䐭) CJK UNIFIED IDEOGRAPH-442D	[FB80 C42D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x442D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC42D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_317)
{
    // 442D 0041;	
    // (䐭) CJK UNIFIED IDEOGRAPH-442D	[FB80 C42D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x442D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC42D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_318)
{
    // 442D 0062;	
    // (䐭) CJK UNIFIED IDEOGRAPH-442D	[FB80 C42D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x442D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC42D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_319)
{
    // 442E 0021;	
    // (䐮) CJK UNIFIED IDEOGRAPH-442E	[FB80 C42E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x442E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC42E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_320)
{
    // 442E 003F;	
    // (䐮) CJK UNIFIED IDEOGRAPH-442E	[FB80 C42E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x442E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC42E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_321)
{
    // 442E 0061;	
    // (䐮) CJK UNIFIED IDEOGRAPH-442E	[FB80 C42E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x442E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC42E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_322)
{
    // 442E 0041;	
    // (䐮) CJK UNIFIED IDEOGRAPH-442E	[FB80 C42E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x442E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC42E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_323)
{
    // 442E 0062;	
    // (䐮) CJK UNIFIED IDEOGRAPH-442E	[FB80 C42E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x442E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC42E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_324)
{
    // 442F 0021;	
    // (䐯) CJK UNIFIED IDEOGRAPH-442F	[FB80 C42F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x442F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC42F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_325)
{
    // 442F 003F;	
    // (䐯) CJK UNIFIED IDEOGRAPH-442F	[FB80 C42F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x442F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC42F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_326)
{
    // 442F 0061;	
    // (䐯) CJK UNIFIED IDEOGRAPH-442F	[FB80 C42F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x442F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC42F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_327)
{
    // 442F 0041;	
    // (䐯) CJK UNIFIED IDEOGRAPH-442F	[FB80 C42F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x442F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC42F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_328)
{
    // 442F 0062;	
    // (䐯) CJK UNIFIED IDEOGRAPH-442F	[FB80 C42F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x442F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC42F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_329)
{
    // 4430 0021;	
    // (䐰) CJK UNIFIED IDEOGRAPH-4430	[FB80 C430 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4430, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC430, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_330)
{
    // 4430 003F;	
    // (䐰) CJK UNIFIED IDEOGRAPH-4430	[FB80 C430 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4430, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC430, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_331)
{
    // 4430 0061;	
    // (䐰) CJK UNIFIED IDEOGRAPH-4430	[FB80 C430 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4430, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC430, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_332)
{
    // 4430 0041;	
    // (䐰) CJK UNIFIED IDEOGRAPH-4430	[FB80 C430 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4430, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC430, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_333)
{
    // 4430 0062;	
    // (䐰) CJK UNIFIED IDEOGRAPH-4430	[FB80 C430 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4430, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC430, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_334)
{
    // 4431 0021;	
    // (䐱) CJK UNIFIED IDEOGRAPH-4431	[FB80 C431 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4431, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC431, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_335)
{
    // 4431 003F;	
    // (䐱) CJK UNIFIED IDEOGRAPH-4431	[FB80 C431 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4431, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC431, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_336)
{
    // 4431 0061;	
    // (䐱) CJK UNIFIED IDEOGRAPH-4431	[FB80 C431 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4431, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC431, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_337)
{
    // 4431 0041;	
    // (䐱) CJK UNIFIED IDEOGRAPH-4431	[FB80 C431 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4431, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC431, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_338)
{
    // 4431 0062;	
    // (䐱) CJK UNIFIED IDEOGRAPH-4431	[FB80 C431 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4431, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC431, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_339)
{
    // 4432 0021;	
    // (䐲) CJK UNIFIED IDEOGRAPH-4432	[FB80 C432 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4432, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC432, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_340)
{
    // 4432 003F;	
    // (䐲) CJK UNIFIED IDEOGRAPH-4432	[FB80 C432 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4432, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC432, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_341)
{
    // 4432 0061;	
    // (䐲) CJK UNIFIED IDEOGRAPH-4432	[FB80 C432 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4432, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC432, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_342)
{
    // 4432 0041;	
    // (䐲) CJK UNIFIED IDEOGRAPH-4432	[FB80 C432 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4432, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC432, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_343)
{
    // 4432 0062;	
    // (䐲) CJK UNIFIED IDEOGRAPH-4432	[FB80 C432 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4432, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC432, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_344)
{
    // 4433 0021;	
    // (䐳) CJK UNIFIED IDEOGRAPH-4433	[FB80 C433 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4433, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC433, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_345)
{
    // 4433 003F;	
    // (䐳) CJK UNIFIED IDEOGRAPH-4433	[FB80 C433 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4433, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC433, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_346)
{
    // 4433 0061;	
    // (䐳) CJK UNIFIED IDEOGRAPH-4433	[FB80 C433 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4433, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC433, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_347)
{
    // 4433 0041;	
    // (䐳) CJK UNIFIED IDEOGRAPH-4433	[FB80 C433 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4433, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC433, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_348)
{
    // 4433 0062;	
    // (䐳) CJK UNIFIED IDEOGRAPH-4433	[FB80 C433 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4433, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC433, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_349)
{
    // 4434 0021;	
    // (䐴) CJK UNIFIED IDEOGRAPH-4434	[FB80 C434 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4434, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC434, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_350)
{
    // 4434 003F;	
    // (䐴) CJK UNIFIED IDEOGRAPH-4434	[FB80 C434 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4434, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC434, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_351)
{
    // 4434 0061;	
    // (䐴) CJK UNIFIED IDEOGRAPH-4434	[FB80 C434 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4434, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC434, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_352)
{
    // 4434 0041;	
    // (䐴) CJK UNIFIED IDEOGRAPH-4434	[FB80 C434 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4434, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC434, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_353)
{
    // 4434 0062;	
    // (䐴) CJK UNIFIED IDEOGRAPH-4434	[FB80 C434 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4434, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC434, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_354)
{
    // 4435 0021;	
    // (䐵) CJK UNIFIED IDEOGRAPH-4435	[FB80 C435 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4435, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC435, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_355)
{
    // 4435 003F;	
    // (䐵) CJK UNIFIED IDEOGRAPH-4435	[FB80 C435 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4435, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC435, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_356)
{
    // 4435 0061;	
    // (䐵) CJK UNIFIED IDEOGRAPH-4435	[FB80 C435 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4435, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC435, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_357)
{
    // 4435 0041;	
    // (䐵) CJK UNIFIED IDEOGRAPH-4435	[FB80 C435 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4435, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC435, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_358)
{
    // 4435 0062;	
    // (䐵) CJK UNIFIED IDEOGRAPH-4435	[FB80 C435 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4435, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC435, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_359)
{
    // 4436 0021;	
    // (䐶) CJK UNIFIED IDEOGRAPH-4436	[FB80 C436 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4436, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC436, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_360)
{
    // 4436 003F;	
    // (䐶) CJK UNIFIED IDEOGRAPH-4436	[FB80 C436 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4436, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC436, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_361)
{
    // 4436 0061;	
    // (䐶) CJK UNIFIED IDEOGRAPH-4436	[FB80 C436 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4436, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC436, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_362)
{
    // 4436 0041;	
    // (䐶) CJK UNIFIED IDEOGRAPH-4436	[FB80 C436 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4436, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC436, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_363)
{
    // 4436 0062;	
    // (䐶) CJK UNIFIED IDEOGRAPH-4436	[FB80 C436 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4436, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC436, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_364)
{
    // 4437 0021;	
    // (䐷) CJK UNIFIED IDEOGRAPH-4437	[FB80 C437 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4437, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC437, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_365)
{
    // 4437 003F;	
    // (䐷) CJK UNIFIED IDEOGRAPH-4437	[FB80 C437 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4437, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC437, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_366)
{
    // 4437 0061;	
    // (䐷) CJK UNIFIED IDEOGRAPH-4437	[FB80 C437 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4437, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC437, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_367)
{
    // 4437 0041;	
    // (䐷) CJK UNIFIED IDEOGRAPH-4437	[FB80 C437 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4437, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC437, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_368)
{
    // 4437 0062;	
    // (䐷) CJK UNIFIED IDEOGRAPH-4437	[FB80 C437 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4437, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC437, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_369)
{
    // 4438 0021;	
    // (䐸) CJK UNIFIED IDEOGRAPH-4438	[FB80 C438 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4438, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC438, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_370)
{
    // 4438 003F;	
    // (䐸) CJK UNIFIED IDEOGRAPH-4438	[FB80 C438 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4438, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC438, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_371)
{
    // 4438 0061;	
    // (䐸) CJK UNIFIED IDEOGRAPH-4438	[FB80 C438 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4438, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC438, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_372)
{
    // 4438 0041;	
    // (䐸) CJK UNIFIED IDEOGRAPH-4438	[FB80 C438 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4438, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC438, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_373)
{
    // 4438 0062;	
    // (䐸) CJK UNIFIED IDEOGRAPH-4438	[FB80 C438 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4438, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC438, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_374)
{
    // 4439 0021;	
    // (䐹) CJK UNIFIED IDEOGRAPH-4439	[FB80 C439 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4439, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC439, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_375)
{
    // 4439 003F;	
    // (䐹) CJK UNIFIED IDEOGRAPH-4439	[FB80 C439 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4439, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC439, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_376)
{
    // 4439 0061;	
    // (䐹) CJK UNIFIED IDEOGRAPH-4439	[FB80 C439 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4439, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC439, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_377)
{
    // 4439 0041;	
    // (䐹) CJK UNIFIED IDEOGRAPH-4439	[FB80 C439 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4439, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC439, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_378)
{
    // 4439 0062;	
    // (䐹) CJK UNIFIED IDEOGRAPH-4439	[FB80 C439 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4439, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC439, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_379)
{
    // 443A 0021;	
    // (䐺) CJK UNIFIED IDEOGRAPH-443A	[FB80 C43A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x443A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC43A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_380)
{
    // 443A 003F;	
    // (䐺) CJK UNIFIED IDEOGRAPH-443A	[FB80 C43A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x443A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC43A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_381)
{
    // 443A 0061;	
    // (䐺) CJK UNIFIED IDEOGRAPH-443A	[FB80 C43A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x443A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC43A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_382)
{
    // 443A 0041;	
    // (䐺) CJK UNIFIED IDEOGRAPH-443A	[FB80 C43A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x443A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC43A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_383)
{
    // 443A 0062;	
    // (䐺) CJK UNIFIED IDEOGRAPH-443A	[FB80 C43A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x443A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC43A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_384)
{
    // 443B 0021;	
    // (䐻) CJK UNIFIED IDEOGRAPH-443B	[FB80 C43B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x443B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC43B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_385)
{
    // 443B 003F;	
    // (䐻) CJK UNIFIED IDEOGRAPH-443B	[FB80 C43B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x443B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC43B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_386)
{
    // 443B 0061;	
    // (䐻) CJK UNIFIED IDEOGRAPH-443B	[FB80 C43B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x443B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC43B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_387)
{
    // 443B 0041;	
    // (䐻) CJK UNIFIED IDEOGRAPH-443B	[FB80 C43B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x443B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC43B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_388)
{
    // 443B 0062;	
    // (䐻) CJK UNIFIED IDEOGRAPH-443B	[FB80 C43B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x443B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC43B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_389)
{
    // 443C 0021;	
    // (䐼) CJK UNIFIED IDEOGRAPH-443C	[FB80 C43C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x443C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC43C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_390)
{
    // 443C 003F;	
    // (䐼) CJK UNIFIED IDEOGRAPH-443C	[FB80 C43C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x443C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC43C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_391)
{
    // 443C 0061;	
    // (䐼) CJK UNIFIED IDEOGRAPH-443C	[FB80 C43C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x443C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC43C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_392)
{
    // 443C 0041;	
    // (䐼) CJK UNIFIED IDEOGRAPH-443C	[FB80 C43C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x443C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC43C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_393)
{
    // 443C 0062;	
    // (䐼) CJK UNIFIED IDEOGRAPH-443C	[FB80 C43C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x443C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC43C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_394)
{
    // 443D 0021;	
    // (䐽) CJK UNIFIED IDEOGRAPH-443D	[FB80 C43D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x443D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC43D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_395)
{
    // 443D 003F;	
    // (䐽) CJK UNIFIED IDEOGRAPH-443D	[FB80 C43D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x443D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC43D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_396)
{
    // 443D 0061;	
    // (䐽) CJK UNIFIED IDEOGRAPH-443D	[FB80 C43D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x443D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC43D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_397)
{
    // 443D 0041;	
    // (䐽) CJK UNIFIED IDEOGRAPH-443D	[FB80 C43D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x443D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC43D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_398)
{
    // 443D 0062;	
    // (䐽) CJK UNIFIED IDEOGRAPH-443D	[FB80 C43D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x443D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC43D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_399)
{
    // 443E 0021;	
    // (䐾) CJK UNIFIED IDEOGRAPH-443E	[FB80 C43E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x443E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC43E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_400)
{
    // 443E 003F;	
    // (䐾) CJK UNIFIED IDEOGRAPH-443E	[FB80 C43E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x443E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC43E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_401)
{
    // 443E 0061;	
    // (䐾) CJK UNIFIED IDEOGRAPH-443E	[FB80 C43E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x443E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC43E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_402)
{
    // 443E 0041;	
    // (䐾) CJK UNIFIED IDEOGRAPH-443E	[FB80 C43E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x443E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC43E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_403)
{
    // 443E 0062;	
    // (䐾) CJK UNIFIED IDEOGRAPH-443E	[FB80 C43E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x443E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC43E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_404)
{
    // 443F 0021;	
    // (䐿) CJK UNIFIED IDEOGRAPH-443F	[FB80 C43F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x443F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC43F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_405)
{
    // 443F 003F;	
    // (䐿) CJK UNIFIED IDEOGRAPH-443F	[FB80 C43F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x443F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC43F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_406)
{
    // 443F 0061;	
    // (䐿) CJK UNIFIED IDEOGRAPH-443F	[FB80 C43F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x443F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC43F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_407)
{
    // 443F 0041;	
    // (䐿) CJK UNIFIED IDEOGRAPH-443F	[FB80 C43F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x443F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC43F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_408)
{
    // 443F 0062;	
    // (䐿) CJK UNIFIED IDEOGRAPH-443F	[FB80 C43F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x443F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC43F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_409)
{
    // 4440 0021;	
    // (䑀) CJK UNIFIED IDEOGRAPH-4440	[FB80 C440 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4440, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC440, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_410)
{
    // 4440 003F;	
    // (䑀) CJK UNIFIED IDEOGRAPH-4440	[FB80 C440 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4440, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC440, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_411)
{
    // 4440 0061;	
    // (䑀) CJK UNIFIED IDEOGRAPH-4440	[FB80 C440 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4440, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC440, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_412)
{
    // 4440 0041;	
    // (䑀) CJK UNIFIED IDEOGRAPH-4440	[FB80 C440 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4440, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC440, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_413)
{
    // 4440 0062;	
    // (䑀) CJK UNIFIED IDEOGRAPH-4440	[FB80 C440 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4440, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC440, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_414)
{
    // 4441 0021;	
    // (䑁) CJK UNIFIED IDEOGRAPH-4441	[FB80 C441 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4441, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC441, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_415)
{
    // 4441 003F;	
    // (䑁) CJK UNIFIED IDEOGRAPH-4441	[FB80 C441 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4441, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC441, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_416)
{
    // 4441 0061;	
    // (䑁) CJK UNIFIED IDEOGRAPH-4441	[FB80 C441 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4441, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC441, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_417)
{
    // 4441 0041;	
    // (䑁) CJK UNIFIED IDEOGRAPH-4441	[FB80 C441 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4441, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC441, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_418)
{
    // 4441 0062;	
    // (䑁) CJK UNIFIED IDEOGRAPH-4441	[FB80 C441 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4441, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC441, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_419)
{
    // 4442 0021;	
    // (䑂) CJK UNIFIED IDEOGRAPH-4442	[FB80 C442 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4442, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC442, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_420)
{
    // 4442 003F;	
    // (䑂) CJK UNIFIED IDEOGRAPH-4442	[FB80 C442 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4442, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC442, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_421)
{
    // 4442 0061;	
    // (䑂) CJK UNIFIED IDEOGRAPH-4442	[FB80 C442 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4442, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC442, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_422)
{
    // 4442 0041;	
    // (䑂) CJK UNIFIED IDEOGRAPH-4442	[FB80 C442 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4442, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC442, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_423)
{
    // 4442 0062;	
    // (䑂) CJK UNIFIED IDEOGRAPH-4442	[FB80 C442 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4442, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC442, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_424)
{
    // 4443 0021;	
    // (䑃) CJK UNIFIED IDEOGRAPH-4443	[FB80 C443 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4443, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC443, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_425)
{
    // 4443 003F;	
    // (䑃) CJK UNIFIED IDEOGRAPH-4443	[FB80 C443 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4443, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC443, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_426)
{
    // 4443 0061;	
    // (䑃) CJK UNIFIED IDEOGRAPH-4443	[FB80 C443 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4443, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC443, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_427)
{
    // 4443 0041;	
    // (䑃) CJK UNIFIED IDEOGRAPH-4443	[FB80 C443 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4443, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC443, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_428)
{
    // 4443 0062;	
    // (䑃) CJK UNIFIED IDEOGRAPH-4443	[FB80 C443 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4443, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC443, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_429)
{
    // 4444 0021;	
    // (䑄) CJK UNIFIED IDEOGRAPH-4444	[FB80 C444 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4444, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC444, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_430)
{
    // 4444 003F;	
    // (䑄) CJK UNIFIED IDEOGRAPH-4444	[FB80 C444 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4444, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC444, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_431)
{
    // 4444 0061;	
    // (䑄) CJK UNIFIED IDEOGRAPH-4444	[FB80 C444 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4444, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC444, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_432)
{
    // 4444 0041;	
    // (䑄) CJK UNIFIED IDEOGRAPH-4444	[FB80 C444 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4444, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC444, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_433)
{
    // 4444 0062;	
    // (䑄) CJK UNIFIED IDEOGRAPH-4444	[FB80 C444 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4444, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC444, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_434)
{
    // 4445 0021;	
    // (䑅) CJK UNIFIED IDEOGRAPH-4445	[FB80 C445 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4445, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC445, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_435)
{
    // 4445 003F;	
    // (䑅) CJK UNIFIED IDEOGRAPH-4445	[FB80 C445 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4445, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC445, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_436)
{
    // 4445 0061;	
    // (䑅) CJK UNIFIED IDEOGRAPH-4445	[FB80 C445 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4445, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC445, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_437)
{
    // 4445 0041;	
    // (䑅) CJK UNIFIED IDEOGRAPH-4445	[FB80 C445 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4445, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC445, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_438)
{
    // 4445 0062;	
    // (䑅) CJK UNIFIED IDEOGRAPH-4445	[FB80 C445 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4445, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC445, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_439)
{
    // 4446 0021;	
    // (䑆) CJK UNIFIED IDEOGRAPH-4446	[FB80 C446 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4446, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC446, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_440)
{
    // 4446 003F;	
    // (䑆) CJK UNIFIED IDEOGRAPH-4446	[FB80 C446 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4446, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC446, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_441)
{
    // 4446 0061;	
    // (䑆) CJK UNIFIED IDEOGRAPH-4446	[FB80 C446 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4446, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC446, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_442)
{
    // 4446 0041;	
    // (䑆) CJK UNIFIED IDEOGRAPH-4446	[FB80 C446 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4446, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC446, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_443)
{
    // 4446 0062;	
    // (䑆) CJK UNIFIED IDEOGRAPH-4446	[FB80 C446 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4446, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC446, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_444)
{
    // 4447 0021;	
    // (䑇) CJK UNIFIED IDEOGRAPH-4447	[FB80 C447 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4447, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC447, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_445)
{
    // 4447 003F;	
    // (䑇) CJK UNIFIED IDEOGRAPH-4447	[FB80 C447 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4447, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC447, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_446)
{
    // 4447 0061;	
    // (䑇) CJK UNIFIED IDEOGRAPH-4447	[FB80 C447 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4447, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC447, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_447)
{
    // 4447 0041;	
    // (䑇) CJK UNIFIED IDEOGRAPH-4447	[FB80 C447 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4447, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC447, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_448)
{
    // 4447 0062;	
    // (䑇) CJK UNIFIED IDEOGRAPH-4447	[FB80 C447 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4447, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC447, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_449)
{
    // 4448 0021;	
    // (䑈) CJK UNIFIED IDEOGRAPH-4448	[FB80 C448 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4448, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC448, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_450)
{
    // 4448 003F;	
    // (䑈) CJK UNIFIED IDEOGRAPH-4448	[FB80 C448 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4448, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC448, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_451)
{
    // 4448 0061;	
    // (䑈) CJK UNIFIED IDEOGRAPH-4448	[FB80 C448 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4448, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC448, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_452)
{
    // 4448 0041;	
    // (䑈) CJK UNIFIED IDEOGRAPH-4448	[FB80 C448 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4448, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC448, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_453)
{
    // 4448 0062;	
    // (䑈) CJK UNIFIED IDEOGRAPH-4448	[FB80 C448 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4448, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC448, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_454)
{
    // 4449 0021;	
    // (䑉) CJK UNIFIED IDEOGRAPH-4449	[FB80 C449 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4449, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC449, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_455)
{
    // 4449 003F;	
    // (䑉) CJK UNIFIED IDEOGRAPH-4449	[FB80 C449 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4449, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC449, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_456)
{
    // 4449 0061;	
    // (䑉) CJK UNIFIED IDEOGRAPH-4449	[FB80 C449 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4449, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC449, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_457)
{
    // 4449 0041;	
    // (䑉) CJK UNIFIED IDEOGRAPH-4449	[FB80 C449 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4449, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC449, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_458)
{
    // 4449 0062;	
    // (䑉) CJK UNIFIED IDEOGRAPH-4449	[FB80 C449 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4449, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC449, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_459)
{
    // 444A 0021;	
    // (䑊) CJK UNIFIED IDEOGRAPH-444A	[FB80 C44A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x444A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC44A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_460)
{
    // 444A 003F;	
    // (䑊) CJK UNIFIED IDEOGRAPH-444A	[FB80 C44A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x444A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC44A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_461)
{
    // 444A 0061;	
    // (䑊) CJK UNIFIED IDEOGRAPH-444A	[FB80 C44A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x444A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC44A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_462)
{
    // 444A 0041;	
    // (䑊) CJK UNIFIED IDEOGRAPH-444A	[FB80 C44A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x444A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC44A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_463)
{
    // 444A 0062;	
    // (䑊) CJK UNIFIED IDEOGRAPH-444A	[FB80 C44A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x444A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC44A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_464)
{
    // 444B 0021;	
    // (䑋) CJK UNIFIED IDEOGRAPH-444B	[FB80 C44B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x444B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC44B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_465)
{
    // 444B 003F;	
    // (䑋) CJK UNIFIED IDEOGRAPH-444B	[FB80 C44B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x444B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC44B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_466)
{
    // 444B 0061;	
    // (䑋) CJK UNIFIED IDEOGRAPH-444B	[FB80 C44B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x444B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC44B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_467)
{
    // 444B 0041;	
    // (䑋) CJK UNIFIED IDEOGRAPH-444B	[FB80 C44B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x444B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC44B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_468)
{
    // 444B 0062;	
    // (䑋) CJK UNIFIED IDEOGRAPH-444B	[FB80 C44B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x444B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC44B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_469)
{
    // 444C 0021;	
    // (䑌) CJK UNIFIED IDEOGRAPH-444C	[FB80 C44C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x444C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC44C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_470)
{
    // 444C 003F;	
    // (䑌) CJK UNIFIED IDEOGRAPH-444C	[FB80 C44C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x444C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC44C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_471)
{
    // 444C 0061;	
    // (䑌) CJK UNIFIED IDEOGRAPH-444C	[FB80 C44C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x444C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC44C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_472)
{
    // 444C 0041;	
    // (䑌) CJK UNIFIED IDEOGRAPH-444C	[FB80 C44C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x444C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC44C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_473)
{
    // 444C 0062;	
    // (䑌) CJK UNIFIED IDEOGRAPH-444C	[FB80 C44C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x444C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC44C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_474)
{
    // 444D 0021;	
    // (䑍) CJK UNIFIED IDEOGRAPH-444D	[FB80 C44D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x444D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC44D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_475)
{
    // 444D 003F;	
    // (䑍) CJK UNIFIED IDEOGRAPH-444D	[FB80 C44D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x444D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC44D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_476)
{
    // 444D 0061;	
    // (䑍) CJK UNIFIED IDEOGRAPH-444D	[FB80 C44D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x444D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC44D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_477)
{
    // 444D 0041;	
    // (䑍) CJK UNIFIED IDEOGRAPH-444D	[FB80 C44D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x444D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC44D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_478)
{
    // 444D 0062;	
    // (䑍) CJK UNIFIED IDEOGRAPH-444D	[FB80 C44D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x444D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC44D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_479)
{
    // 444E 0021;	
    // (䑎) CJK UNIFIED IDEOGRAPH-444E	[FB80 C44E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x444E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC44E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_480)
{
    // 444E 003F;	
    // (䑎) CJK UNIFIED IDEOGRAPH-444E	[FB80 C44E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x444E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC44E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_481)
{
    // 444E 0061;	
    // (䑎) CJK UNIFIED IDEOGRAPH-444E	[FB80 C44E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x444E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC44E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_482)
{
    // 444E 0041;	
    // (䑎) CJK UNIFIED IDEOGRAPH-444E	[FB80 C44E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x444E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC44E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_483)
{
    // 444E 0062;	
    // (䑎) CJK UNIFIED IDEOGRAPH-444E	[FB80 C44E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x444E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC44E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_484)
{
    // 444F 0021;	
    // (䑏) CJK UNIFIED IDEOGRAPH-444F	[FB80 C44F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x444F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC44F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_485)
{
    // 444F 003F;	
    // (䑏) CJK UNIFIED IDEOGRAPH-444F	[FB80 C44F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x444F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC44F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_486)
{
    // 444F 0061;	
    // (䑏) CJK UNIFIED IDEOGRAPH-444F	[FB80 C44F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x444F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC44F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_487)
{
    // 444F 0041;	
    // (䑏) CJK UNIFIED IDEOGRAPH-444F	[FB80 C44F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x444F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC44F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_488)
{
    // 444F 0062;	
    // (䑏) CJK UNIFIED IDEOGRAPH-444F	[FB80 C44F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x444F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC44F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_489)
{
    // 4450 0021;	
    // (䑐) CJK UNIFIED IDEOGRAPH-4450	[FB80 C450 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4450, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC450, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_490)
{
    // 4450 003F;	
    // (䑐) CJK UNIFIED IDEOGRAPH-4450	[FB80 C450 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4450, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC450, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_491)
{
    // 4450 0061;	
    // (䑐) CJK UNIFIED IDEOGRAPH-4450	[FB80 C450 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4450, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC450, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_492)
{
    // 4450 0041;	
    // (䑐) CJK UNIFIED IDEOGRAPH-4450	[FB80 C450 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4450, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC450, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_493)
{
    // 4450 0062;	
    // (䑐) CJK UNIFIED IDEOGRAPH-4450	[FB80 C450 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4450, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC450, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_494)
{
    // 4451 0021;	
    // (䑑) CJK UNIFIED IDEOGRAPH-4451	[FB80 C451 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4451, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC451, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_495)
{
    // 4451 003F;	
    // (䑑) CJK UNIFIED IDEOGRAPH-4451	[FB80 C451 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4451, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC451, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_496)
{
    // 4451 0061;	
    // (䑑) CJK UNIFIED IDEOGRAPH-4451	[FB80 C451 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4451, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC451, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_497)
{
    // 4451 0041;	
    // (䑑) CJK UNIFIED IDEOGRAPH-4451	[FB80 C451 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4451, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC451, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_498)
{
    // 4451 0062;	
    // (䑑) CJK UNIFIED IDEOGRAPH-4451	[FB80 C451 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4451, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC451, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_368_499)
{
    // 4452 0021;	
    // (䑒) CJK UNIFIED IDEOGRAPH-4452	[FB80 C452 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4452, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC452, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

