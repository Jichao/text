// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_199_000)
{
    // 1F69C ; [*16F7.0020.0002] 
    // TRACTOR

    uint32_t const cps[1] = { 0x1f69c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x16f7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_001)
{
    // 1F69D ; [*16F8.0020.0002] 
    // MONORAIL

    uint32_t const cps[1] = { 0x1f69d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x16f8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_002)
{
    // 1F69E ; [*16F9.0020.0002] 
    // MOUNTAIN RAILWAY

    uint32_t const cps[1] = { 0x1f69e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x16f9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_003)
{
    // 1F69F ; [*16FA.0020.0002] 
    // SUSPENSION RAILWAY

    uint32_t const cps[1] = { 0x1f69f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x16fa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_004)
{
    // 1F6A0 ; [*16FB.0020.0002] 
    // MOUNTAIN CABLEWAY

    uint32_t const cps[1] = { 0x1f6a0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x16fb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_005)
{
    // 1F6A1 ; [*16FC.0020.0002] 
    // AERIAL TRAMWAY

    uint32_t const cps[1] = { 0x1f6a1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x16fc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_006)
{
    // 1F6A2 ; [*16FD.0020.0002] 
    // SHIP

    uint32_t const cps[1] = { 0x1f6a2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x16fd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_007)
{
    // 1F6A3 ; [*16FE.0020.0002] 
    // ROWBOAT

    uint32_t const cps[1] = { 0x1f6a3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x16fe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_008)
{
    // 1F6A4 ; [*16FF.0020.0002] 
    // SPEEDBOAT

    uint32_t const cps[1] = { 0x1f6a4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x16ff), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_009)
{
    // 1F6A5 ; [*1700.0020.0002] 
    // HORIZONTAL TRAFFIC LIGHT

    uint32_t const cps[1] = { 0x1f6a5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1700), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_010)
{
    // 1F6A6 ; [*1701.0020.0002] 
    // VERTICAL TRAFFIC LIGHT

    uint32_t const cps[1] = { 0x1f6a6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1701), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_011)
{
    // 1F6A7 ; [*1702.0020.0002] 
    // CONSTRUCTION SIGN

    uint32_t const cps[1] = { 0x1f6a7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1702), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_012)
{
    // 1F6A8 ; [*1703.0020.0002] 
    // POLICE CARS REVOLVING LIGHT

    uint32_t const cps[1] = { 0x1f6a8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1703), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_013)
{
    // 1F6A9 ; [*1704.0020.0002] 
    // TRIANGULAR FLAG ON POST

    uint32_t const cps[1] = { 0x1f6a9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1704), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_014)
{
    // 1F6AA ; [*1705.0020.0002] 
    // DOOR

    uint32_t const cps[1] = { 0x1f6aa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1705), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_015)
{
    // 1F6AB ; [*1706.0020.0002] 
    // NO ENTRY SIGN

    uint32_t const cps[1] = { 0x1f6ab };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1706), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_016)
{
    // 1F6AC ; [*1707.0020.0002] 
    // SMOKING SYMBOL

    uint32_t const cps[1] = { 0x1f6ac };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1707), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_017)
{
    // 1F6AD ; [*1708.0020.0002] 
    // NO SMOKING SYMBOL

    uint32_t const cps[1] = { 0x1f6ad };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1708), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_018)
{
    // 1F6AE ; [*1709.0020.0002] 
    // PUT LITTER IN ITS PLACE SYMBOL

    uint32_t const cps[1] = { 0x1f6ae };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1709), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_019)
{
    // 1F6AF ; [*170A.0020.0002] 
    // DO NOT LITTER SYMBOL

    uint32_t const cps[1] = { 0x1f6af };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x170a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_020)
{
    // 1F6B0 ; [*170B.0020.0002] 
    // POTABLE WATER SYMBOL

    uint32_t const cps[1] = { 0x1f6b0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x170b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_021)
{
    // 1F6B1 ; [*170C.0020.0002] 
    // NON-POTABLE WATER SYMBOL

    uint32_t const cps[1] = { 0x1f6b1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x170c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_022)
{
    // 1F6B2 ; [*170D.0020.0002] 
    // BICYCLE

    uint32_t const cps[1] = { 0x1f6b2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x170d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_023)
{
    // 1F6B3 ; [*170E.0020.0002] 
    // NO BICYCLES

    uint32_t const cps[1] = { 0x1f6b3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x170e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_024)
{
    // 1F6B4 ; [*170F.0020.0002] 
    // BICYCLIST

    uint32_t const cps[1] = { 0x1f6b4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x170f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_025)
{
    // 1F6B5 ; [*1710.0020.0002] 
    // MOUNTAIN BICYCLIST

    uint32_t const cps[1] = { 0x1f6b5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1710), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_026)
{
    // 1F6B6 ; [*1711.0020.0002] 
    // PEDESTRIAN

    uint32_t const cps[1] = { 0x1f6b6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1711), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_027)
{
    // 1F6B7 ; [*1712.0020.0002] 
    // NO PEDESTRIANS

    uint32_t const cps[1] = { 0x1f6b7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1712), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_028)
{
    // 1F6B8 ; [*1713.0020.0002] 
    // CHILDREN CROSSING

    uint32_t const cps[1] = { 0x1f6b8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1713), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_029)
{
    // 1F6B9 ; [*1714.0020.0002] 
    // MENS SYMBOL

    uint32_t const cps[1] = { 0x1f6b9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1714), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_030)
{
    // 1F6BA ; [*1715.0020.0002] 
    // WOMENS SYMBOL

    uint32_t const cps[1] = { 0x1f6ba };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1715), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_031)
{
    // 1F6BB ; [*1716.0020.0002] 
    // RESTROOM

    uint32_t const cps[1] = { 0x1f6bb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1716), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_032)
{
    // 1F6BC ; [*1717.0020.0002] 
    // BABY SYMBOL

    uint32_t const cps[1] = { 0x1f6bc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1717), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_033)
{
    // 1F6BD ; [*1718.0020.0002] 
    // TOILET

    uint32_t const cps[1] = { 0x1f6bd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1718), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_034)
{
    // 1F6BE ; [*1719.0020.0002] 
    // WATER CLOSET

    uint32_t const cps[1] = { 0x1f6be };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1719), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_035)
{
    // 1F6BF ; [*171A.0020.0002] 
    // SHOWER

    uint32_t const cps[1] = { 0x1f6bf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x171a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_036)
{
    // 1F6C0 ; [*171B.0020.0002] 
    // BATH

    uint32_t const cps[1] = { 0x1f6c0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x171b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_037)
{
    // 1F6C1 ; [*171C.0020.0002] 
    // BATHTUB

    uint32_t const cps[1] = { 0x1f6c1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x171c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_038)
{
    // 1F6C2 ; [*171D.0020.0002] 
    // PASSPORT CONTROL

    uint32_t const cps[1] = { 0x1f6c2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x171d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_039)
{
    // 1F6C3 ; [*171E.0020.0002] 
    // CUSTOMS

    uint32_t const cps[1] = { 0x1f6c3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x171e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_040)
{
    // 1F6C4 ; [*171F.0020.0002] 
    // BAGGAGE CLAIM

    uint32_t const cps[1] = { 0x1f6c4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x171f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_041)
{
    // 1F6C5 ; [*1720.0020.0002] 
    // LEFT LUGGAGE

    uint32_t const cps[1] = { 0x1f6c5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1720), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_042)
{
    // 1F6C6 ; [*1721.0020.0002] 
    // TRIANGLE WITH ROUNDED CORNERS

    uint32_t const cps[1] = { 0x1f6c6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1721), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_043)
{
    // 1F6C7 ; [*1722.0020.0002] 
    // PROHIBITED SIGN

    uint32_t const cps[1] = { 0x1f6c7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1722), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_044)
{
    // 1F6C8 ; [*1723.0020.0002] 
    // CIRCLED INFORMATION SOURCE

    uint32_t const cps[1] = { 0x1f6c8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1723), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_045)
{
    // 1F6C9 ; [*1724.0020.0002] 
    // BOYS SYMBOL

    uint32_t const cps[1] = { 0x1f6c9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1724), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_046)
{
    // 1F6CA ; [*1725.0020.0002] 
    // GIRLS SYMBOL

    uint32_t const cps[1] = { 0x1f6ca };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1725), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_047)
{
    // 1F6CB ; [*1726.0020.0002] 
    // COUCH AND LAMP

    uint32_t const cps[1] = { 0x1f6cb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1726), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_048)
{
    // 1F6CC ; [*1727.0020.0002] 
    // SLEEPING ACCOMMODATION

    uint32_t const cps[1] = { 0x1f6cc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1727), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_049)
{
    // 1F6CD ; [*1728.0020.0002] 
    // SHOPPING BAGS

    uint32_t const cps[1] = { 0x1f6cd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1728), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_050)
{
    // 1F6CE ; [*1729.0020.0002] 
    // BELLHOP BELL

    uint32_t const cps[1] = { 0x1f6ce };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1729), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_051)
{
    // 1F6CF ; [*172A.0020.0002] 
    // BED

    uint32_t const cps[1] = { 0x1f6cf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x172a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_052)
{
    // 1F6D0 ; [*172B.0020.0002] 
    // PLACE OF WORSHIP

    uint32_t const cps[1] = { 0x1f6d0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x172b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_053)
{
    // 1F6D1 ; [*172C.0020.0002] 
    // OCTAGONAL SIGN

    uint32_t const cps[1] = { 0x1f6d1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x172c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_054)
{
    // 1F6D2 ; [*172D.0020.0002] 
    // SHOPPING TROLLEY

    uint32_t const cps[1] = { 0x1f6d2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x172d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_055)
{
    // 1F6D3 ; [*172E.0020.0002] 
    // STUPA

    uint32_t const cps[1] = { 0x1f6d3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x172e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_056)
{
    // 1F6D4 ; [*172F.0020.0002] 
    // PAGODA

    uint32_t const cps[1] = { 0x1f6d4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x172f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_057)
{
    // 1F6E0 ; [*1730.0020.0002] 
    // HAMMER AND WRENCH

    uint32_t const cps[1] = { 0x1f6e0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1730), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_058)
{
    // 1F6E1 ; [*1731.0020.0002] 
    // SHIELD

    uint32_t const cps[1] = { 0x1f6e1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1731), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_059)
{
    // 1F6E2 ; [*1732.0020.0002] 
    // OIL DRUM

    uint32_t const cps[1] = { 0x1f6e2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1732), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_060)
{
    // 1F6E3 ; [*1733.0020.0002] 
    // MOTORWAY

    uint32_t const cps[1] = { 0x1f6e3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1733), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_061)
{
    // 1F6E4 ; [*1734.0020.0002] 
    // RAILWAY TRACK

    uint32_t const cps[1] = { 0x1f6e4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1734), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_062)
{
    // 1F6E5 ; [*1735.0020.0002] 
    // MOTOR BOAT

    uint32_t const cps[1] = { 0x1f6e5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1735), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_063)
{
    // 1F6E6 ; [*1736.0020.0002] 
    // UP-POINTING MILITARY AIRPLANE

    uint32_t const cps[1] = { 0x1f6e6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1736), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_064)
{
    // 1F6E7 ; [*1737.0020.0002] 
    // UP-POINTING AIRPLANE

    uint32_t const cps[1] = { 0x1f6e7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1737), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_065)
{
    // 1F6E8 ; [*1738.0020.0002] 
    // UP-POINTING SMALL AIRPLANE

    uint32_t const cps[1] = { 0x1f6e8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1738), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_066)
{
    // 1F6E9 ; [*1739.0020.0002] 
    // SMALL AIRPLANE

    uint32_t const cps[1] = { 0x1f6e9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1739), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_067)
{
    // 1F6EA ; [*173A.0020.0002] 
    // NORTHEAST-POINTING AIRPLANE

    uint32_t const cps[1] = { 0x1f6ea };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x173a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_068)
{
    // 1F6EB ; [*173B.0020.0002] 
    // AIRPLANE DEPARTURE

    uint32_t const cps[1] = { 0x1f6eb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x173b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_069)
{
    // 1F6EC ; [*173C.0020.0002] 
    // AIRPLANE ARRIVING

    uint32_t const cps[1] = { 0x1f6ec };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x173c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_070)
{
    // 1F6F0 ; [*173D.0020.0002] 
    // SATELLITE

    uint32_t const cps[1] = { 0x1f6f0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x173d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_071)
{
    // 1F6F1 ; [*173E.0020.0002] 
    // ONCOMING FIRE ENGINE

    uint32_t const cps[1] = { 0x1f6f1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x173e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_072)
{
    // 1F6F2 ; [*173F.0020.0002] 
    // DIESEL LOCOMOTIVE

    uint32_t const cps[1] = { 0x1f6f2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x173f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_073)
{
    // 1F6F3 ; [*1740.0020.0002] 
    // PASSENGER SHIP

    uint32_t const cps[1] = { 0x1f6f3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1740), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_074)
{
    // 1F6F4 ; [*1741.0020.0002] 
    // SCOOTER

    uint32_t const cps[1] = { 0x1f6f4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1741), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_075)
{
    // 1F6F5 ; [*1742.0020.0002] 
    // MOTOR SCOOTER

    uint32_t const cps[1] = { 0x1f6f5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1742), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_076)
{
    // 1F6F6 ; [*1743.0020.0002] 
    // CANOE

    uint32_t const cps[1] = { 0x1f6f6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1743), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_077)
{
    // 1F6F7 ; [*1744.0020.0002] 
    // SLED

    uint32_t const cps[1] = { 0x1f6f7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1744), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_078)
{
    // 1F6F8 ; [*1745.0020.0002] 
    // FLYING SAUCER

    uint32_t const cps[1] = { 0x1f6f8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1745), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_079)
{
    // 1F700 ; [*1746.0020.0002] 
    // ALCHEMICAL SYMBOL FOR QUINTESSENCE

    uint32_t const cps[1] = { 0x1f700 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1746), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_080)
{
    // 1F701 ; [*1747.0020.0002] 
    // ALCHEMICAL SYMBOL FOR AIR

    uint32_t const cps[1] = { 0x1f701 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1747), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_081)
{
    // 1F702 ; [*1748.0020.0002] 
    // ALCHEMICAL SYMBOL FOR FIRE

    uint32_t const cps[1] = { 0x1f702 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1748), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_082)
{
    // 1F703 ; [*1749.0020.0002] 
    // ALCHEMICAL SYMBOL FOR EARTH

    uint32_t const cps[1] = { 0x1f703 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1749), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_083)
{
    // 1F704 ; [*174A.0020.0002] 
    // ALCHEMICAL SYMBOL FOR WATER

    uint32_t const cps[1] = { 0x1f704 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x174a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_084)
{
    // 1F705 ; [*174B.0020.0002] 
    // ALCHEMICAL SYMBOL FOR AQUAFORTIS

    uint32_t const cps[1] = { 0x1f705 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x174b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_085)
{
    // 1F706 ; [*174C.0020.0002] 
    // ALCHEMICAL SYMBOL FOR AQUA REGIA

    uint32_t const cps[1] = { 0x1f706 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x174c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_086)
{
    // 1F707 ; [*174D.0020.0002] 
    // ALCHEMICAL SYMBOL FOR AQUA REGIA-2

    uint32_t const cps[1] = { 0x1f707 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x174d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_087)
{
    // 1F708 ; [*174E.0020.0002] 
    // ALCHEMICAL SYMBOL FOR AQUA VITAE

    uint32_t const cps[1] = { 0x1f708 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x174e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_088)
{
    // 1F709 ; [*174F.0020.0002] 
    // ALCHEMICAL SYMBOL FOR AQUA VITAE-2

    uint32_t const cps[1] = { 0x1f709 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x174f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_089)
{
    // 1F70A ; [*1750.0020.0002] 
    // ALCHEMICAL SYMBOL FOR VINEGAR

    uint32_t const cps[1] = { 0x1f70a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1750), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_090)
{
    // 1F70B ; [*1751.0020.0002] 
    // ALCHEMICAL SYMBOL FOR VINEGAR-2

    uint32_t const cps[1] = { 0x1f70b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1751), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_091)
{
    // 1F70C ; [*1752.0020.0002] 
    // ALCHEMICAL SYMBOL FOR VINEGAR-3

    uint32_t const cps[1] = { 0x1f70c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1752), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_092)
{
    // 1F70D ; [*1753.0020.0002] 
    // ALCHEMICAL SYMBOL FOR SULFUR

    uint32_t const cps[1] = { 0x1f70d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1753), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_093)
{
    // 1F70E ; [*1754.0020.0002] 
    // ALCHEMICAL SYMBOL FOR PHILOSOPHERS SULFUR

    uint32_t const cps[1] = { 0x1f70e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1754), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_094)
{
    // 1F70F ; [*1755.0020.0002] 
    // ALCHEMICAL SYMBOL FOR BLACK SULFUR

    uint32_t const cps[1] = { 0x1f70f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1755), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_095)
{
    // 1F710 ; [*1756.0020.0002] 
    // ALCHEMICAL SYMBOL FOR MERCURY SUBLIMATE

    uint32_t const cps[1] = { 0x1f710 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1756), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_096)
{
    // 1F711 ; [*1757.0020.0002] 
    // ALCHEMICAL SYMBOL FOR MERCURY SUBLIMATE-2

    uint32_t const cps[1] = { 0x1f711 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1757), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_097)
{
    // 1F712 ; [*1758.0020.0002] 
    // ALCHEMICAL SYMBOL FOR MERCURY SUBLIMATE-3

    uint32_t const cps[1] = { 0x1f712 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1758), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_098)
{
    // 1F713 ; [*1759.0020.0002] 
    // ALCHEMICAL SYMBOL FOR CINNABAR

    uint32_t const cps[1] = { 0x1f713 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1759), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_099)
{
    // 1F714 ; [*175A.0020.0002] 
    // ALCHEMICAL SYMBOL FOR SALT

    uint32_t const cps[1] = { 0x1f714 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x175a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_100)
{
    // 1F715 ; [*175B.0020.0002] 
    // ALCHEMICAL SYMBOL FOR NITRE

    uint32_t const cps[1] = { 0x1f715 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x175b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_101)
{
    // 1F716 ; [*175C.0020.0002] 
    // ALCHEMICAL SYMBOL FOR VITRIOL

    uint32_t const cps[1] = { 0x1f716 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x175c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_102)
{
    // 1F717 ; [*175D.0020.0002] 
    // ALCHEMICAL SYMBOL FOR VITRIOL-2

    uint32_t const cps[1] = { 0x1f717 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x175d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_103)
{
    // 1F718 ; [*175E.0020.0002] 
    // ALCHEMICAL SYMBOL FOR ROCK SALT

    uint32_t const cps[1] = { 0x1f718 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x175e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_104)
{
    // 1F719 ; [*175F.0020.0002] 
    // ALCHEMICAL SYMBOL FOR ROCK SALT-2

    uint32_t const cps[1] = { 0x1f719 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x175f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_105)
{
    // 1F71A ; [*1760.0020.0002] 
    // ALCHEMICAL SYMBOL FOR GOLD

    uint32_t const cps[1] = { 0x1f71a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1760), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_106)
{
    // 1F71B ; [*1761.0020.0002] 
    // ALCHEMICAL SYMBOL FOR SILVER

    uint32_t const cps[1] = { 0x1f71b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1761), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_107)
{
    // 1F71C ; [*1762.0020.0002] 
    // ALCHEMICAL SYMBOL FOR IRON ORE

    uint32_t const cps[1] = { 0x1f71c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1762), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_108)
{
    // 1F71D ; [*1763.0020.0002] 
    // ALCHEMICAL SYMBOL FOR IRON ORE-2

    uint32_t const cps[1] = { 0x1f71d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1763), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_109)
{
    // 1F71E ; [*1764.0020.0002] 
    // ALCHEMICAL SYMBOL FOR CROCUS OF IRON

    uint32_t const cps[1] = { 0x1f71e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1764), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_110)
{
    // 1F71F ; [*1765.0020.0002] 
    // ALCHEMICAL SYMBOL FOR REGULUS OF IRON

    uint32_t const cps[1] = { 0x1f71f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1765), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_111)
{
    // 1F720 ; [*1766.0020.0002] 
    // ALCHEMICAL SYMBOL FOR COPPER ORE

    uint32_t const cps[1] = { 0x1f720 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1766), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_112)
{
    // 1F721 ; [*1767.0020.0002] 
    // ALCHEMICAL SYMBOL FOR IRON-COPPER ORE

    uint32_t const cps[1] = { 0x1f721 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1767), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_113)
{
    // 1F722 ; [*1768.0020.0002] 
    // ALCHEMICAL SYMBOL FOR SUBLIMATE OF COPPER

    uint32_t const cps[1] = { 0x1f722 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1768), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_114)
{
    // 1F723 ; [*1769.0020.0002] 
    // ALCHEMICAL SYMBOL FOR CROCUS OF COPPER

    uint32_t const cps[1] = { 0x1f723 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1769), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_115)
{
    // 1F724 ; [*176A.0020.0002] 
    // ALCHEMICAL SYMBOL FOR CROCUS OF COPPER-2

    uint32_t const cps[1] = { 0x1f724 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x176a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_116)
{
    // 1F725 ; [*176B.0020.0002] 
    // ALCHEMICAL SYMBOL FOR COPPER ANTIMONIATE

    uint32_t const cps[1] = { 0x1f725 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x176b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_117)
{
    // 1F726 ; [*176C.0020.0002] 
    // ALCHEMICAL SYMBOL FOR SALT OF COPPER ANTIMONIATE

    uint32_t const cps[1] = { 0x1f726 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x176c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_118)
{
    // 1F727 ; [*176D.0020.0002] 
    // ALCHEMICAL SYMBOL FOR SUBLIMATE OF SALT OF COPPER

    uint32_t const cps[1] = { 0x1f727 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x176d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_119)
{
    // 1F728 ; [*176E.0020.0002] 
    // ALCHEMICAL SYMBOL FOR VERDIGRIS

    uint32_t const cps[1] = { 0x1f728 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x176e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_120)
{
    // 1F729 ; [*176F.0020.0002] 
    // ALCHEMICAL SYMBOL FOR TIN ORE

    uint32_t const cps[1] = { 0x1f729 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x176f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_121)
{
    // 1F72A ; [*1770.0020.0002] 
    // ALCHEMICAL SYMBOL FOR LEAD ORE

    uint32_t const cps[1] = { 0x1f72a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1770), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_122)
{
    // 1F72B ; [*1771.0020.0002] 
    // ALCHEMICAL SYMBOL FOR ANTIMONY ORE

    uint32_t const cps[1] = { 0x1f72b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1771), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_123)
{
    // 1F72C ; [*1772.0020.0002] 
    // ALCHEMICAL SYMBOL FOR SUBLIMATE OF ANTIMONY

    uint32_t const cps[1] = { 0x1f72c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1772), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_124)
{
    // 1F72D ; [*1773.0020.0002] 
    // ALCHEMICAL SYMBOL FOR SALT OF ANTIMONY

    uint32_t const cps[1] = { 0x1f72d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1773), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_125)
{
    // 1F72E ; [*1774.0020.0002] 
    // ALCHEMICAL SYMBOL FOR SUBLIMATE OF SALT OF ANTIMONY

    uint32_t const cps[1] = { 0x1f72e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1774), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_126)
{
    // 1F72F ; [*1775.0020.0002] 
    // ALCHEMICAL SYMBOL FOR VINEGAR OF ANTIMONY

    uint32_t const cps[1] = { 0x1f72f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1775), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_127)
{
    // 1F730 ; [*1776.0020.0002] 
    // ALCHEMICAL SYMBOL FOR REGULUS OF ANTIMONY

    uint32_t const cps[1] = { 0x1f730 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1776), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_128)
{
    // 1F731 ; [*1777.0020.0002] 
    // ALCHEMICAL SYMBOL FOR REGULUS OF ANTIMONY-2

    uint32_t const cps[1] = { 0x1f731 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1777), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_129)
{
    // 1F732 ; [*1778.0020.0002] 
    // ALCHEMICAL SYMBOL FOR REGULUS

    uint32_t const cps[1] = { 0x1f732 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1778), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_130)
{
    // 1F733 ; [*1779.0020.0002] 
    // ALCHEMICAL SYMBOL FOR REGULUS-2

    uint32_t const cps[1] = { 0x1f733 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1779), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_131)
{
    // 1F734 ; [*177A.0020.0002] 
    // ALCHEMICAL SYMBOL FOR REGULUS-3

    uint32_t const cps[1] = { 0x1f734 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x177a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_132)
{
    // 1F735 ; [*177B.0020.0002] 
    // ALCHEMICAL SYMBOL FOR REGULUS-4

    uint32_t const cps[1] = { 0x1f735 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x177b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_133)
{
    // 1F736 ; [*177C.0020.0002] 
    // ALCHEMICAL SYMBOL FOR ALKALI

    uint32_t const cps[1] = { 0x1f736 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x177c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_134)
{
    // 1F737 ; [*177D.0020.0002] 
    // ALCHEMICAL SYMBOL FOR ALKALI-2

    uint32_t const cps[1] = { 0x1f737 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x177d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_135)
{
    // 1F738 ; [*177E.0020.0002] 
    // ALCHEMICAL SYMBOL FOR MARCASITE

    uint32_t const cps[1] = { 0x1f738 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x177e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_136)
{
    // 1F739 ; [*177F.0020.0002] 
    // ALCHEMICAL SYMBOL FOR SAL-AMMONIAC

    uint32_t const cps[1] = { 0x1f739 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x177f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_137)
{
    // 1F73A ; [*1780.0020.0002] 
    // ALCHEMICAL SYMBOL FOR ARSENIC

    uint32_t const cps[1] = { 0x1f73a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1780), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_138)
{
    // 1F73B ; [*1781.0020.0002] 
    // ALCHEMICAL SYMBOL FOR REALGAR

    uint32_t const cps[1] = { 0x1f73b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1781), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_139)
{
    // 1F73C ; [*1782.0020.0002] 
    // ALCHEMICAL SYMBOL FOR REALGAR-2

    uint32_t const cps[1] = { 0x1f73c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1782), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_140)
{
    // 1F73D ; [*1783.0020.0002] 
    // ALCHEMICAL SYMBOL FOR AURIPIGMENT

    uint32_t const cps[1] = { 0x1f73d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1783), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_141)
{
    // 1F73E ; [*1784.0020.0002] 
    // ALCHEMICAL SYMBOL FOR BISMUTH ORE

    uint32_t const cps[1] = { 0x1f73e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1784), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_142)
{
    // 1F73F ; [*1785.0020.0002] 
    // ALCHEMICAL SYMBOL FOR TARTAR

    uint32_t const cps[1] = { 0x1f73f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1785), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_143)
{
    // 1F740 ; [*1786.0020.0002] 
    // ALCHEMICAL SYMBOL FOR TARTAR-2

    uint32_t const cps[1] = { 0x1f740 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1786), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_144)
{
    // 1F741 ; [*1787.0020.0002] 
    // ALCHEMICAL SYMBOL FOR QUICK LIME

    uint32_t const cps[1] = { 0x1f741 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1787), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_145)
{
    // 1F742 ; [*1788.0020.0002] 
    // ALCHEMICAL SYMBOL FOR BORAX

    uint32_t const cps[1] = { 0x1f742 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1788), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_146)
{
    // 1F743 ; [*1789.0020.0002] 
    // ALCHEMICAL SYMBOL FOR BORAX-2

    uint32_t const cps[1] = { 0x1f743 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1789), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_147)
{
    // 1F744 ; [*178A.0020.0002] 
    // ALCHEMICAL SYMBOL FOR BORAX-3

    uint32_t const cps[1] = { 0x1f744 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x178a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_148)
{
    // 1F745 ; [*178B.0020.0002] 
    // ALCHEMICAL SYMBOL FOR ALUM

    uint32_t const cps[1] = { 0x1f745 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x178b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_199_149)
{
    // 1F746 ; [*178C.0020.0002] 
    // ALCHEMICAL SYMBOL FOR OIL

    uint32_t const cps[1] = { 0x1f746 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x178c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

