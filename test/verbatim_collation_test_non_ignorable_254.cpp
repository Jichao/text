// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_254_000)
{
    // A010 003F;	
    // (ꀐ) YI SYLLABLE OX	[4003 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA010, 0x003F };
    uint32_t const ces[9] = { 0x4003, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_001)
{
    // A010 0061;	
    // (ꀐ) YI SYLLABLE OX	[4003 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA010, 0x0061 };
    uint32_t const ces[9] = { 0x4003, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_002)
{
    // A010 0041;	
    // (ꀐ) YI SYLLABLE OX	[4003 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA010, 0x0041 };
    uint32_t const ces[9] = { 0x4003, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_003)
{
    // A010 0062;	
    // (ꀐ) YI SYLLABLE OX	[4003 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA010, 0x0062 };
    uint32_t const ces[9] = { 0x4003, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_004)
{
    // A011 0021;	
    // (ꀑ) YI SYLLABLE O	[4004 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA011, 0x0021 };
    uint32_t const ces[9] = { 0x4004, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_005)
{
    // A011 003F;	
    // (ꀑ) YI SYLLABLE O	[4004 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA011, 0x003F };
    uint32_t const ces[9] = { 0x4004, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_006)
{
    // A011 0061;	
    // (ꀑ) YI SYLLABLE O	[4004 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA011, 0x0061 };
    uint32_t const ces[9] = { 0x4004, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_007)
{
    // A011 0041;	
    // (ꀑ) YI SYLLABLE O	[4004 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA011, 0x0041 };
    uint32_t const ces[9] = { 0x4004, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_008)
{
    // A011 0062;	
    // (ꀑ) YI SYLLABLE O	[4004 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA011, 0x0062 };
    uint32_t const ces[9] = { 0x4004, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_009)
{
    // A012 0021;	
    // (ꀒ) YI SYLLABLE OP	[4005 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA012, 0x0021 };
    uint32_t const ces[9] = { 0x4005, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_010)
{
    // A012 003F;	
    // (ꀒ) YI SYLLABLE OP	[4005 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA012, 0x003F };
    uint32_t const ces[9] = { 0x4005, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_011)
{
    // A012 0061;	
    // (ꀒ) YI SYLLABLE OP	[4005 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA012, 0x0061 };
    uint32_t const ces[9] = { 0x4005, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_012)
{
    // A012 0041;	
    // (ꀒ) YI SYLLABLE OP	[4005 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA012, 0x0041 };
    uint32_t const ces[9] = { 0x4005, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_013)
{
    // A012 0062;	
    // (ꀒ) YI SYLLABLE OP	[4005 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA012, 0x0062 };
    uint32_t const ces[9] = { 0x4005, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_014)
{
    // A013 0021;	
    // (ꀓ) YI SYLLABLE EX	[4006 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA013, 0x0021 };
    uint32_t const ces[9] = { 0x4006, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_015)
{
    // A013 003F;	
    // (ꀓ) YI SYLLABLE EX	[4006 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA013, 0x003F };
    uint32_t const ces[9] = { 0x4006, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_016)
{
    // A013 0061;	
    // (ꀓ) YI SYLLABLE EX	[4006 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA013, 0x0061 };
    uint32_t const ces[9] = { 0x4006, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_017)
{
    // A013 0041;	
    // (ꀓ) YI SYLLABLE EX	[4006 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA013, 0x0041 };
    uint32_t const ces[9] = { 0x4006, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_018)
{
    // A013 0062;	
    // (ꀓ) YI SYLLABLE EX	[4006 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA013, 0x0062 };
    uint32_t const ces[9] = { 0x4006, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_019)
{
    // A014 0021;	
    // (ꀔ) YI SYLLABLE E	[4007 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA014, 0x0021 };
    uint32_t const ces[9] = { 0x4007, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_020)
{
    // A014 003F;	
    // (ꀔ) YI SYLLABLE E	[4007 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA014, 0x003F };
    uint32_t const ces[9] = { 0x4007, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_021)
{
    // A014 0061;	
    // (ꀔ) YI SYLLABLE E	[4007 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA014, 0x0061 };
    uint32_t const ces[9] = { 0x4007, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_022)
{
    // A014 0041;	
    // (ꀔ) YI SYLLABLE E	[4007 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA014, 0x0041 };
    uint32_t const ces[9] = { 0x4007, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_023)
{
    // A014 0062;	
    // (ꀔ) YI SYLLABLE E	[4007 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA014, 0x0062 };
    uint32_t const ces[9] = { 0x4007, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_024)
{
    // A015 0021;	
    // (ꀕ) YI SYLLABLE WU	[4008 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA015, 0x0021 };
    uint32_t const ces[9] = { 0x4008, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_025)
{
    // A015 003F;	
    // (ꀕ) YI SYLLABLE WU	[4008 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA015, 0x003F };
    uint32_t const ces[9] = { 0x4008, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_026)
{
    // A015 0061;	
    // (ꀕ) YI SYLLABLE WU	[4008 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA015, 0x0061 };
    uint32_t const ces[9] = { 0x4008, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_027)
{
    // A015 0041;	
    // (ꀕ) YI SYLLABLE WU	[4008 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA015, 0x0041 };
    uint32_t const ces[9] = { 0x4008, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_028)
{
    // A015 0062;	
    // (ꀕ) YI SYLLABLE WU	[4008 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA015, 0x0062 };
    uint32_t const ces[9] = { 0x4008, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_029)
{
    // A016 0021;	
    // (ꀖ) YI SYLLABLE BIT	[4009 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA016, 0x0021 };
    uint32_t const ces[9] = { 0x4009, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_030)
{
    // A016 003F;	
    // (ꀖ) YI SYLLABLE BIT	[4009 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA016, 0x003F };
    uint32_t const ces[9] = { 0x4009, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_031)
{
    // A016 0061;	
    // (ꀖ) YI SYLLABLE BIT	[4009 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA016, 0x0061 };
    uint32_t const ces[9] = { 0x4009, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_032)
{
    // A016 0041;	
    // (ꀖ) YI SYLLABLE BIT	[4009 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA016, 0x0041 };
    uint32_t const ces[9] = { 0x4009, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_033)
{
    // A016 0062;	
    // (ꀖ) YI SYLLABLE BIT	[4009 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA016, 0x0062 };
    uint32_t const ces[9] = { 0x4009, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_034)
{
    // A017 0021;	
    // (ꀗ) YI SYLLABLE BIX	[400A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA017, 0x0021 };
    uint32_t const ces[9] = { 0x400A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_035)
{
    // A017 003F;	
    // (ꀗ) YI SYLLABLE BIX	[400A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA017, 0x003F };
    uint32_t const ces[9] = { 0x400A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_036)
{
    // A017 0061;	
    // (ꀗ) YI SYLLABLE BIX	[400A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA017, 0x0061 };
    uint32_t const ces[9] = { 0x400A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_037)
{
    // A017 0041;	
    // (ꀗ) YI SYLLABLE BIX	[400A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA017, 0x0041 };
    uint32_t const ces[9] = { 0x400A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_038)
{
    // A017 0062;	
    // (ꀗ) YI SYLLABLE BIX	[400A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA017, 0x0062 };
    uint32_t const ces[9] = { 0x400A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_039)
{
    // A018 0021;	
    // (ꀘ) YI SYLLABLE BI	[400B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA018, 0x0021 };
    uint32_t const ces[9] = { 0x400B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_040)
{
    // A018 003F;	
    // (ꀘ) YI SYLLABLE BI	[400B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA018, 0x003F };
    uint32_t const ces[9] = { 0x400B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_041)
{
    // A018 0061;	
    // (ꀘ) YI SYLLABLE BI	[400B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA018, 0x0061 };
    uint32_t const ces[9] = { 0x400B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_042)
{
    // A018 0041;	
    // (ꀘ) YI SYLLABLE BI	[400B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA018, 0x0041 };
    uint32_t const ces[9] = { 0x400B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_043)
{
    // A018 0062;	
    // (ꀘ) YI SYLLABLE BI	[400B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA018, 0x0062 };
    uint32_t const ces[9] = { 0x400B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_044)
{
    // A019 0021;	
    // (ꀙ) YI SYLLABLE BIP	[400C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA019, 0x0021 };
    uint32_t const ces[9] = { 0x400C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_045)
{
    // A019 003F;	
    // (ꀙ) YI SYLLABLE BIP	[400C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA019, 0x003F };
    uint32_t const ces[9] = { 0x400C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_046)
{
    // A019 0061;	
    // (ꀙ) YI SYLLABLE BIP	[400C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA019, 0x0061 };
    uint32_t const ces[9] = { 0x400C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_047)
{
    // A019 0041;	
    // (ꀙ) YI SYLLABLE BIP	[400C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA019, 0x0041 };
    uint32_t const ces[9] = { 0x400C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_048)
{
    // A019 0062;	
    // (ꀙ) YI SYLLABLE BIP	[400C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA019, 0x0062 };
    uint32_t const ces[9] = { 0x400C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_049)
{
    // A01A 0021;	
    // (ꀚ) YI SYLLABLE BIET	[400D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA01A, 0x0021 };
    uint32_t const ces[9] = { 0x400D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_050)
{
    // A01A 003F;	
    // (ꀚ) YI SYLLABLE BIET	[400D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA01A, 0x003F };
    uint32_t const ces[9] = { 0x400D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_051)
{
    // A01A 0061;	
    // (ꀚ) YI SYLLABLE BIET	[400D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA01A, 0x0061 };
    uint32_t const ces[9] = { 0x400D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_052)
{
    // A01A 0041;	
    // (ꀚ) YI SYLLABLE BIET	[400D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA01A, 0x0041 };
    uint32_t const ces[9] = { 0x400D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_053)
{
    // A01A 0062;	
    // (ꀚ) YI SYLLABLE BIET	[400D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA01A, 0x0062 };
    uint32_t const ces[9] = { 0x400D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_054)
{
    // A01B 0021;	
    // (ꀛ) YI SYLLABLE BIEX	[400E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA01B, 0x0021 };
    uint32_t const ces[9] = { 0x400E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_055)
{
    // A01B 003F;	
    // (ꀛ) YI SYLLABLE BIEX	[400E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA01B, 0x003F };
    uint32_t const ces[9] = { 0x400E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_056)
{
    // A01B 0061;	
    // (ꀛ) YI SYLLABLE BIEX	[400E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA01B, 0x0061 };
    uint32_t const ces[9] = { 0x400E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_057)
{
    // A01B 0041;	
    // (ꀛ) YI SYLLABLE BIEX	[400E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA01B, 0x0041 };
    uint32_t const ces[9] = { 0x400E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_058)
{
    // A01B 0062;	
    // (ꀛ) YI SYLLABLE BIEX	[400E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA01B, 0x0062 };
    uint32_t const ces[9] = { 0x400E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_059)
{
    // A01C 0021;	
    // (ꀜ) YI SYLLABLE BIE	[400F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA01C, 0x0021 };
    uint32_t const ces[9] = { 0x400F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_060)
{
    // A01C 003F;	
    // (ꀜ) YI SYLLABLE BIE	[400F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA01C, 0x003F };
    uint32_t const ces[9] = { 0x400F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_061)
{
    // A01C 0061;	
    // (ꀜ) YI SYLLABLE BIE	[400F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA01C, 0x0061 };
    uint32_t const ces[9] = { 0x400F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_062)
{
    // A01C 0041;	
    // (ꀜ) YI SYLLABLE BIE	[400F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA01C, 0x0041 };
    uint32_t const ces[9] = { 0x400F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_063)
{
    // A01C 0062;	
    // (ꀜ) YI SYLLABLE BIE	[400F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA01C, 0x0062 };
    uint32_t const ces[9] = { 0x400F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_064)
{
    // A01D 0021;	
    // (ꀝ) YI SYLLABLE BIEP	[4010 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA01D, 0x0021 };
    uint32_t const ces[9] = { 0x4010, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_065)
{
    // A01D 003F;	
    // (ꀝ) YI SYLLABLE BIEP	[4010 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA01D, 0x003F };
    uint32_t const ces[9] = { 0x4010, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_066)
{
    // A01D 0061;	
    // (ꀝ) YI SYLLABLE BIEP	[4010 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA01D, 0x0061 };
    uint32_t const ces[9] = { 0x4010, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_067)
{
    // A01D 0041;	
    // (ꀝ) YI SYLLABLE BIEP	[4010 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA01D, 0x0041 };
    uint32_t const ces[9] = { 0x4010, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_068)
{
    // A01D 0062;	
    // (ꀝ) YI SYLLABLE BIEP	[4010 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA01D, 0x0062 };
    uint32_t const ces[9] = { 0x4010, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_069)
{
    // A01E 0021;	
    // (ꀞ) YI SYLLABLE BAT	[4011 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA01E, 0x0021 };
    uint32_t const ces[9] = { 0x4011, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_070)
{
    // A01E 003F;	
    // (ꀞ) YI SYLLABLE BAT	[4011 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA01E, 0x003F };
    uint32_t const ces[9] = { 0x4011, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_071)
{
    // A01E 0061;	
    // (ꀞ) YI SYLLABLE BAT	[4011 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA01E, 0x0061 };
    uint32_t const ces[9] = { 0x4011, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_072)
{
    // A01E 0041;	
    // (ꀞ) YI SYLLABLE BAT	[4011 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA01E, 0x0041 };
    uint32_t const ces[9] = { 0x4011, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_073)
{
    // A01E 0062;	
    // (ꀞ) YI SYLLABLE BAT	[4011 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA01E, 0x0062 };
    uint32_t const ces[9] = { 0x4011, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_074)
{
    // A01F 0021;	
    // (ꀟ) YI SYLLABLE BAX	[4012 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA01F, 0x0021 };
    uint32_t const ces[9] = { 0x4012, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_075)
{
    // A01F 003F;	
    // (ꀟ) YI SYLLABLE BAX	[4012 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA01F, 0x003F };
    uint32_t const ces[9] = { 0x4012, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_076)
{
    // A01F 0061;	
    // (ꀟ) YI SYLLABLE BAX	[4012 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA01F, 0x0061 };
    uint32_t const ces[9] = { 0x4012, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_077)
{
    // A01F 0041;	
    // (ꀟ) YI SYLLABLE BAX	[4012 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA01F, 0x0041 };
    uint32_t const ces[9] = { 0x4012, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_078)
{
    // A01F 0062;	
    // (ꀟ) YI SYLLABLE BAX	[4012 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA01F, 0x0062 };
    uint32_t const ces[9] = { 0x4012, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_079)
{
    // A020 0021;	
    // (ꀠ) YI SYLLABLE BA	[4013 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA020, 0x0021 };
    uint32_t const ces[9] = { 0x4013, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_080)
{
    // A020 003F;	
    // (ꀠ) YI SYLLABLE BA	[4013 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA020, 0x003F };
    uint32_t const ces[9] = { 0x4013, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_081)
{
    // A020 0061;	
    // (ꀠ) YI SYLLABLE BA	[4013 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA020, 0x0061 };
    uint32_t const ces[9] = { 0x4013, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_082)
{
    // A020 0041;	
    // (ꀠ) YI SYLLABLE BA	[4013 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA020, 0x0041 };
    uint32_t const ces[9] = { 0x4013, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_083)
{
    // A020 0062;	
    // (ꀠ) YI SYLLABLE BA	[4013 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA020, 0x0062 };
    uint32_t const ces[9] = { 0x4013, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_084)
{
    // A021 0021;	
    // (ꀡ) YI SYLLABLE BAP	[4014 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA021, 0x0021 };
    uint32_t const ces[9] = { 0x4014, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_085)
{
    // A021 003F;	
    // (ꀡ) YI SYLLABLE BAP	[4014 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA021, 0x003F };
    uint32_t const ces[9] = { 0x4014, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_086)
{
    // A021 0061;	
    // (ꀡ) YI SYLLABLE BAP	[4014 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA021, 0x0061 };
    uint32_t const ces[9] = { 0x4014, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_087)
{
    // A021 0041;	
    // (ꀡ) YI SYLLABLE BAP	[4014 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA021, 0x0041 };
    uint32_t const ces[9] = { 0x4014, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_088)
{
    // A021 0062;	
    // (ꀡ) YI SYLLABLE BAP	[4014 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA021, 0x0062 };
    uint32_t const ces[9] = { 0x4014, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_089)
{
    // A022 0021;	
    // (ꀢ) YI SYLLABLE BUOX	[4015 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA022, 0x0021 };
    uint32_t const ces[9] = { 0x4015, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_090)
{
    // A022 003F;	
    // (ꀢ) YI SYLLABLE BUOX	[4015 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA022, 0x003F };
    uint32_t const ces[9] = { 0x4015, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_091)
{
    // A022 0061;	
    // (ꀢ) YI SYLLABLE BUOX	[4015 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA022, 0x0061 };
    uint32_t const ces[9] = { 0x4015, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_092)
{
    // A022 0041;	
    // (ꀢ) YI SYLLABLE BUOX	[4015 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA022, 0x0041 };
    uint32_t const ces[9] = { 0x4015, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_093)
{
    // A022 0062;	
    // (ꀢ) YI SYLLABLE BUOX	[4015 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA022, 0x0062 };
    uint32_t const ces[9] = { 0x4015, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_094)
{
    // A023 0021;	
    // (ꀣ) YI SYLLABLE BUO	[4016 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA023, 0x0021 };
    uint32_t const ces[9] = { 0x4016, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_095)
{
    // A023 003F;	
    // (ꀣ) YI SYLLABLE BUO	[4016 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA023, 0x003F };
    uint32_t const ces[9] = { 0x4016, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_096)
{
    // A023 0061;	
    // (ꀣ) YI SYLLABLE BUO	[4016 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA023, 0x0061 };
    uint32_t const ces[9] = { 0x4016, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_097)
{
    // A023 0041;	
    // (ꀣ) YI SYLLABLE BUO	[4016 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA023, 0x0041 };
    uint32_t const ces[9] = { 0x4016, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_098)
{
    // A023 0062;	
    // (ꀣ) YI SYLLABLE BUO	[4016 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA023, 0x0062 };
    uint32_t const ces[9] = { 0x4016, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_099)
{
    // A024 0021;	
    // (ꀤ) YI SYLLABLE BUOP	[4017 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA024, 0x0021 };
    uint32_t const ces[9] = { 0x4017, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_100)
{
    // A024 003F;	
    // (ꀤ) YI SYLLABLE BUOP	[4017 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA024, 0x003F };
    uint32_t const ces[9] = { 0x4017, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_101)
{
    // A024 0061;	
    // (ꀤ) YI SYLLABLE BUOP	[4017 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA024, 0x0061 };
    uint32_t const ces[9] = { 0x4017, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_102)
{
    // A024 0041;	
    // (ꀤ) YI SYLLABLE BUOP	[4017 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA024, 0x0041 };
    uint32_t const ces[9] = { 0x4017, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_103)
{
    // A024 0062;	
    // (ꀤ) YI SYLLABLE BUOP	[4017 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA024, 0x0062 };
    uint32_t const ces[9] = { 0x4017, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_104)
{
    // A025 0021;	
    // (ꀥ) YI SYLLABLE BOT	[4018 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA025, 0x0021 };
    uint32_t const ces[9] = { 0x4018, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_105)
{
    // A025 003F;	
    // (ꀥ) YI SYLLABLE BOT	[4018 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA025, 0x003F };
    uint32_t const ces[9] = { 0x4018, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_106)
{
    // A025 0061;	
    // (ꀥ) YI SYLLABLE BOT	[4018 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA025, 0x0061 };
    uint32_t const ces[9] = { 0x4018, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_107)
{
    // A025 0041;	
    // (ꀥ) YI SYLLABLE BOT	[4018 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA025, 0x0041 };
    uint32_t const ces[9] = { 0x4018, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_108)
{
    // A025 0062;	
    // (ꀥ) YI SYLLABLE BOT	[4018 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA025, 0x0062 };
    uint32_t const ces[9] = { 0x4018, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_109)
{
    // A026 0021;	
    // (ꀦ) YI SYLLABLE BOX	[4019 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA026, 0x0021 };
    uint32_t const ces[9] = { 0x4019, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_110)
{
    // A026 003F;	
    // (ꀦ) YI SYLLABLE BOX	[4019 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA026, 0x003F };
    uint32_t const ces[9] = { 0x4019, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_111)
{
    // A026 0061;	
    // (ꀦ) YI SYLLABLE BOX	[4019 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA026, 0x0061 };
    uint32_t const ces[9] = { 0x4019, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_112)
{
    // A026 0041;	
    // (ꀦ) YI SYLLABLE BOX	[4019 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA026, 0x0041 };
    uint32_t const ces[9] = { 0x4019, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_113)
{
    // A026 0062;	
    // (ꀦ) YI SYLLABLE BOX	[4019 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA026, 0x0062 };
    uint32_t const ces[9] = { 0x4019, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_114)
{
    // A027 0021;	
    // (ꀧ) YI SYLLABLE BO	[401A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA027, 0x0021 };
    uint32_t const ces[9] = { 0x401A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_115)
{
    // A027 003F;	
    // (ꀧ) YI SYLLABLE BO	[401A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA027, 0x003F };
    uint32_t const ces[9] = { 0x401A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_116)
{
    // A027 0061;	
    // (ꀧ) YI SYLLABLE BO	[401A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA027, 0x0061 };
    uint32_t const ces[9] = { 0x401A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_117)
{
    // A027 0041;	
    // (ꀧ) YI SYLLABLE BO	[401A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA027, 0x0041 };
    uint32_t const ces[9] = { 0x401A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_118)
{
    // A027 0062;	
    // (ꀧ) YI SYLLABLE BO	[401A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA027, 0x0062 };
    uint32_t const ces[9] = { 0x401A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_119)
{
    // A028 0021;	
    // (ꀨ) YI SYLLABLE BOP	[401B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA028, 0x0021 };
    uint32_t const ces[9] = { 0x401B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_120)
{
    // A028 003F;	
    // (ꀨ) YI SYLLABLE BOP	[401B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA028, 0x003F };
    uint32_t const ces[9] = { 0x401B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_121)
{
    // A028 0061;	
    // (ꀨ) YI SYLLABLE BOP	[401B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA028, 0x0061 };
    uint32_t const ces[9] = { 0x401B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_122)
{
    // A028 0041;	
    // (ꀨ) YI SYLLABLE BOP	[401B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA028, 0x0041 };
    uint32_t const ces[9] = { 0x401B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_123)
{
    // A028 0062;	
    // (ꀨ) YI SYLLABLE BOP	[401B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA028, 0x0062 };
    uint32_t const ces[9] = { 0x401B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_124)
{
    // A029 0021;	
    // (ꀩ) YI SYLLABLE BEX	[401C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA029, 0x0021 };
    uint32_t const ces[9] = { 0x401C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_125)
{
    // A029 003F;	
    // (ꀩ) YI SYLLABLE BEX	[401C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA029, 0x003F };
    uint32_t const ces[9] = { 0x401C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_126)
{
    // A029 0061;	
    // (ꀩ) YI SYLLABLE BEX	[401C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA029, 0x0061 };
    uint32_t const ces[9] = { 0x401C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_127)
{
    // A029 0041;	
    // (ꀩ) YI SYLLABLE BEX	[401C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA029, 0x0041 };
    uint32_t const ces[9] = { 0x401C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_128)
{
    // A029 0062;	
    // (ꀩ) YI SYLLABLE BEX	[401C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA029, 0x0062 };
    uint32_t const ces[9] = { 0x401C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_129)
{
    // A02A 0021;	
    // (ꀪ) YI SYLLABLE BE	[401D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA02A, 0x0021 };
    uint32_t const ces[9] = { 0x401D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_130)
{
    // A02A 003F;	
    // (ꀪ) YI SYLLABLE BE	[401D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA02A, 0x003F };
    uint32_t const ces[9] = { 0x401D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_131)
{
    // A02A 0061;	
    // (ꀪ) YI SYLLABLE BE	[401D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA02A, 0x0061 };
    uint32_t const ces[9] = { 0x401D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_132)
{
    // A02A 0041;	
    // (ꀪ) YI SYLLABLE BE	[401D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA02A, 0x0041 };
    uint32_t const ces[9] = { 0x401D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_133)
{
    // A02A 0062;	
    // (ꀪ) YI SYLLABLE BE	[401D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA02A, 0x0062 };
    uint32_t const ces[9] = { 0x401D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_134)
{
    // A02B 0021;	
    // (ꀫ) YI SYLLABLE BEP	[401E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA02B, 0x0021 };
    uint32_t const ces[9] = { 0x401E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_135)
{
    // A02B 003F;	
    // (ꀫ) YI SYLLABLE BEP	[401E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA02B, 0x003F };
    uint32_t const ces[9] = { 0x401E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_136)
{
    // A02B 0061;	
    // (ꀫ) YI SYLLABLE BEP	[401E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA02B, 0x0061 };
    uint32_t const ces[9] = { 0x401E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_137)
{
    // A02B 0041;	
    // (ꀫ) YI SYLLABLE BEP	[401E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA02B, 0x0041 };
    uint32_t const ces[9] = { 0x401E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_138)
{
    // A02B 0062;	
    // (ꀫ) YI SYLLABLE BEP	[401E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA02B, 0x0062 };
    uint32_t const ces[9] = { 0x401E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_139)
{
    // A02C 0021;	
    // (ꀬ) YI SYLLABLE BUT	[401F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA02C, 0x0021 };
    uint32_t const ces[9] = { 0x401F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_140)
{
    // A02C 003F;	
    // (ꀬ) YI SYLLABLE BUT	[401F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA02C, 0x003F };
    uint32_t const ces[9] = { 0x401F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_141)
{
    // A02C 0061;	
    // (ꀬ) YI SYLLABLE BUT	[401F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA02C, 0x0061 };
    uint32_t const ces[9] = { 0x401F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_142)
{
    // A02C 0041;	
    // (ꀬ) YI SYLLABLE BUT	[401F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA02C, 0x0041 };
    uint32_t const ces[9] = { 0x401F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_143)
{
    // A02C 0062;	
    // (ꀬ) YI SYLLABLE BUT	[401F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA02C, 0x0062 };
    uint32_t const ces[9] = { 0x401F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_144)
{
    // A02D 0021;	
    // (ꀭ) YI SYLLABLE BUX	[4020 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA02D, 0x0021 };
    uint32_t const ces[9] = { 0x4020, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_145)
{
    // A02D 003F;	
    // (ꀭ) YI SYLLABLE BUX	[4020 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA02D, 0x003F };
    uint32_t const ces[9] = { 0x4020, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_146)
{
    // A02D 0061;	
    // (ꀭ) YI SYLLABLE BUX	[4020 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA02D, 0x0061 };
    uint32_t const ces[9] = { 0x4020, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_147)
{
    // A02D 0041;	
    // (ꀭ) YI SYLLABLE BUX	[4020 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA02D, 0x0041 };
    uint32_t const ces[9] = { 0x4020, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_148)
{
    // A02D 0062;	
    // (ꀭ) YI SYLLABLE BUX	[4020 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA02D, 0x0062 };
    uint32_t const ces[9] = { 0x4020, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_149)
{
    // A02E 0021;	
    // (ꀮ) YI SYLLABLE BU	[4021 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA02E, 0x0021 };
    uint32_t const ces[9] = { 0x4021, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_150)
{
    // A02E 003F;	
    // (ꀮ) YI SYLLABLE BU	[4021 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA02E, 0x003F };
    uint32_t const ces[9] = { 0x4021, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_151)
{
    // A02E 0061;	
    // (ꀮ) YI SYLLABLE BU	[4021 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA02E, 0x0061 };
    uint32_t const ces[9] = { 0x4021, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_152)
{
    // A02E 0041;	
    // (ꀮ) YI SYLLABLE BU	[4021 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA02E, 0x0041 };
    uint32_t const ces[9] = { 0x4021, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_153)
{
    // A02E 0062;	
    // (ꀮ) YI SYLLABLE BU	[4021 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA02E, 0x0062 };
    uint32_t const ces[9] = { 0x4021, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_154)
{
    // A02F 0021;	
    // (ꀯ) YI SYLLABLE BUP	[4022 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA02F, 0x0021 };
    uint32_t const ces[9] = { 0x4022, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_155)
{
    // A02F 003F;	
    // (ꀯ) YI SYLLABLE BUP	[4022 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA02F, 0x003F };
    uint32_t const ces[9] = { 0x4022, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_156)
{
    // A02F 0061;	
    // (ꀯ) YI SYLLABLE BUP	[4022 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA02F, 0x0061 };
    uint32_t const ces[9] = { 0x4022, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_157)
{
    // A02F 0041;	
    // (ꀯ) YI SYLLABLE BUP	[4022 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA02F, 0x0041 };
    uint32_t const ces[9] = { 0x4022, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_158)
{
    // A02F 0062;	
    // (ꀯ) YI SYLLABLE BUP	[4022 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA02F, 0x0062 };
    uint32_t const ces[9] = { 0x4022, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_159)
{
    // A030 0021;	
    // (ꀰ) YI SYLLABLE BURX	[4023 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA030, 0x0021 };
    uint32_t const ces[9] = { 0x4023, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_160)
{
    // A030 003F;	
    // (ꀰ) YI SYLLABLE BURX	[4023 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA030, 0x003F };
    uint32_t const ces[9] = { 0x4023, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_161)
{
    // A030 0061;	
    // (ꀰ) YI SYLLABLE BURX	[4023 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA030, 0x0061 };
    uint32_t const ces[9] = { 0x4023, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_162)
{
    // A030 0041;	
    // (ꀰ) YI SYLLABLE BURX	[4023 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA030, 0x0041 };
    uint32_t const ces[9] = { 0x4023, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_163)
{
    // A030 0062;	
    // (ꀰ) YI SYLLABLE BURX	[4023 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA030, 0x0062 };
    uint32_t const ces[9] = { 0x4023, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_164)
{
    // A031 0021;	
    // (ꀱ) YI SYLLABLE BUR	[4024 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA031, 0x0021 };
    uint32_t const ces[9] = { 0x4024, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_165)
{
    // A031 003F;	
    // (ꀱ) YI SYLLABLE BUR	[4024 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA031, 0x003F };
    uint32_t const ces[9] = { 0x4024, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_166)
{
    // A031 0061;	
    // (ꀱ) YI SYLLABLE BUR	[4024 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA031, 0x0061 };
    uint32_t const ces[9] = { 0x4024, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_167)
{
    // A031 0041;	
    // (ꀱ) YI SYLLABLE BUR	[4024 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA031, 0x0041 };
    uint32_t const ces[9] = { 0x4024, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_168)
{
    // A031 0062;	
    // (ꀱ) YI SYLLABLE BUR	[4024 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA031, 0x0062 };
    uint32_t const ces[9] = { 0x4024, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_169)
{
    // A032 0021;	
    // (ꀲ) YI SYLLABLE BYT	[4025 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA032, 0x0021 };
    uint32_t const ces[9] = { 0x4025, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_170)
{
    // A032 003F;	
    // (ꀲ) YI SYLLABLE BYT	[4025 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA032, 0x003F };
    uint32_t const ces[9] = { 0x4025, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_171)
{
    // A032 0061;	
    // (ꀲ) YI SYLLABLE BYT	[4025 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA032, 0x0061 };
    uint32_t const ces[9] = { 0x4025, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_172)
{
    // A032 0041;	
    // (ꀲ) YI SYLLABLE BYT	[4025 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA032, 0x0041 };
    uint32_t const ces[9] = { 0x4025, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_173)
{
    // A032 0062;	
    // (ꀲ) YI SYLLABLE BYT	[4025 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA032, 0x0062 };
    uint32_t const ces[9] = { 0x4025, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_174)
{
    // A033 0021;	
    // (ꀳ) YI SYLLABLE BYX	[4026 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA033, 0x0021 };
    uint32_t const ces[9] = { 0x4026, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_175)
{
    // A033 003F;	
    // (ꀳ) YI SYLLABLE BYX	[4026 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA033, 0x003F };
    uint32_t const ces[9] = { 0x4026, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_176)
{
    // A033 0061;	
    // (ꀳ) YI SYLLABLE BYX	[4026 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA033, 0x0061 };
    uint32_t const ces[9] = { 0x4026, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_177)
{
    // A033 0041;	
    // (ꀳ) YI SYLLABLE BYX	[4026 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA033, 0x0041 };
    uint32_t const ces[9] = { 0x4026, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_178)
{
    // A033 0062;	
    // (ꀳ) YI SYLLABLE BYX	[4026 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA033, 0x0062 };
    uint32_t const ces[9] = { 0x4026, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_179)
{
    // A034 0021;	
    // (ꀴ) YI SYLLABLE BY	[4027 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA034, 0x0021 };
    uint32_t const ces[9] = { 0x4027, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_180)
{
    // A034 003F;	
    // (ꀴ) YI SYLLABLE BY	[4027 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA034, 0x003F };
    uint32_t const ces[9] = { 0x4027, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_181)
{
    // A034 0061;	
    // (ꀴ) YI SYLLABLE BY	[4027 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA034, 0x0061 };
    uint32_t const ces[9] = { 0x4027, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_182)
{
    // A034 0041;	
    // (ꀴ) YI SYLLABLE BY	[4027 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA034, 0x0041 };
    uint32_t const ces[9] = { 0x4027, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_183)
{
    // A034 0062;	
    // (ꀴ) YI SYLLABLE BY	[4027 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA034, 0x0062 };
    uint32_t const ces[9] = { 0x4027, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_184)
{
    // A035 0021;	
    // (ꀵ) YI SYLLABLE BYP	[4028 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA035, 0x0021 };
    uint32_t const ces[9] = { 0x4028, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_185)
{
    // A035 003F;	
    // (ꀵ) YI SYLLABLE BYP	[4028 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA035, 0x003F };
    uint32_t const ces[9] = { 0x4028, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_186)
{
    // A035 0061;	
    // (ꀵ) YI SYLLABLE BYP	[4028 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA035, 0x0061 };
    uint32_t const ces[9] = { 0x4028, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_187)
{
    // A035 0041;	
    // (ꀵ) YI SYLLABLE BYP	[4028 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA035, 0x0041 };
    uint32_t const ces[9] = { 0x4028, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_188)
{
    // A035 0062;	
    // (ꀵ) YI SYLLABLE BYP	[4028 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA035, 0x0062 };
    uint32_t const ces[9] = { 0x4028, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_189)
{
    // A036 0021;	
    // (ꀶ) YI SYLLABLE BYRX	[4029 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA036, 0x0021 };
    uint32_t const ces[9] = { 0x4029, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_190)
{
    // A036 003F;	
    // (ꀶ) YI SYLLABLE BYRX	[4029 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA036, 0x003F };
    uint32_t const ces[9] = { 0x4029, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_191)
{
    // A036 0061;	
    // (ꀶ) YI SYLLABLE BYRX	[4029 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA036, 0x0061 };
    uint32_t const ces[9] = { 0x4029, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_192)
{
    // A036 0041;	
    // (ꀶ) YI SYLLABLE BYRX	[4029 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA036, 0x0041 };
    uint32_t const ces[9] = { 0x4029, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_193)
{
    // A036 0062;	
    // (ꀶ) YI SYLLABLE BYRX	[4029 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA036, 0x0062 };
    uint32_t const ces[9] = { 0x4029, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_194)
{
    // A037 0021;	
    // (ꀷ) YI SYLLABLE BYR	[402A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA037, 0x0021 };
    uint32_t const ces[9] = { 0x402A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_195)
{
    // A037 003F;	
    // (ꀷ) YI SYLLABLE BYR	[402A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA037, 0x003F };
    uint32_t const ces[9] = { 0x402A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_196)
{
    // A037 0061;	
    // (ꀷ) YI SYLLABLE BYR	[402A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA037, 0x0061 };
    uint32_t const ces[9] = { 0x402A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_197)
{
    // A037 0041;	
    // (ꀷ) YI SYLLABLE BYR	[402A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA037, 0x0041 };
    uint32_t const ces[9] = { 0x402A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_198)
{
    // A037 0062;	
    // (ꀷ) YI SYLLABLE BYR	[402A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA037, 0x0062 };
    uint32_t const ces[9] = { 0x402A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_199)
{
    // A038 0021;	
    // (ꀸ) YI SYLLABLE PIT	[402B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA038, 0x0021 };
    uint32_t const ces[9] = { 0x402B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_200)
{
    // A038 003F;	
    // (ꀸ) YI SYLLABLE PIT	[402B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA038, 0x003F };
    uint32_t const ces[9] = { 0x402B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_201)
{
    // A038 0061;	
    // (ꀸ) YI SYLLABLE PIT	[402B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA038, 0x0061 };
    uint32_t const ces[9] = { 0x402B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_202)
{
    // A038 0041;	
    // (ꀸ) YI SYLLABLE PIT	[402B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA038, 0x0041 };
    uint32_t const ces[9] = { 0x402B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_203)
{
    // A038 0062;	
    // (ꀸ) YI SYLLABLE PIT	[402B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA038, 0x0062 };
    uint32_t const ces[9] = { 0x402B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_204)
{
    // A039 0021;	
    // (ꀹ) YI SYLLABLE PIX	[402C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA039, 0x0021 };
    uint32_t const ces[9] = { 0x402C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_205)
{
    // A039 003F;	
    // (ꀹ) YI SYLLABLE PIX	[402C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA039, 0x003F };
    uint32_t const ces[9] = { 0x402C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_206)
{
    // A039 0061;	
    // (ꀹ) YI SYLLABLE PIX	[402C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA039, 0x0061 };
    uint32_t const ces[9] = { 0x402C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_207)
{
    // A039 0041;	
    // (ꀹ) YI SYLLABLE PIX	[402C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA039, 0x0041 };
    uint32_t const ces[9] = { 0x402C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_208)
{
    // A039 0062;	
    // (ꀹ) YI SYLLABLE PIX	[402C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA039, 0x0062 };
    uint32_t const ces[9] = { 0x402C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_209)
{
    // A03A 0021;	
    // (ꀺ) YI SYLLABLE PI	[402D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA03A, 0x0021 };
    uint32_t const ces[9] = { 0x402D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_210)
{
    // A03A 003F;	
    // (ꀺ) YI SYLLABLE PI	[402D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA03A, 0x003F };
    uint32_t const ces[9] = { 0x402D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_211)
{
    // A03A 0061;	
    // (ꀺ) YI SYLLABLE PI	[402D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA03A, 0x0061 };
    uint32_t const ces[9] = { 0x402D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_212)
{
    // A03A 0041;	
    // (ꀺ) YI SYLLABLE PI	[402D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA03A, 0x0041 };
    uint32_t const ces[9] = { 0x402D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_213)
{
    // A03A 0062;	
    // (ꀺ) YI SYLLABLE PI	[402D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA03A, 0x0062 };
    uint32_t const ces[9] = { 0x402D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_214)
{
    // A03B 0021;	
    // (ꀻ) YI SYLLABLE PIP	[402E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA03B, 0x0021 };
    uint32_t const ces[9] = { 0x402E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_215)
{
    // A03B 003F;	
    // (ꀻ) YI SYLLABLE PIP	[402E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA03B, 0x003F };
    uint32_t const ces[9] = { 0x402E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_216)
{
    // A03B 0061;	
    // (ꀻ) YI SYLLABLE PIP	[402E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA03B, 0x0061 };
    uint32_t const ces[9] = { 0x402E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_217)
{
    // A03B 0041;	
    // (ꀻ) YI SYLLABLE PIP	[402E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA03B, 0x0041 };
    uint32_t const ces[9] = { 0x402E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_218)
{
    // A03B 0062;	
    // (ꀻ) YI SYLLABLE PIP	[402E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA03B, 0x0062 };
    uint32_t const ces[9] = { 0x402E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_219)
{
    // A03C 0021;	
    // (ꀼ) YI SYLLABLE PIEX	[402F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA03C, 0x0021 };
    uint32_t const ces[9] = { 0x402F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_220)
{
    // A03C 003F;	
    // (ꀼ) YI SYLLABLE PIEX	[402F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA03C, 0x003F };
    uint32_t const ces[9] = { 0x402F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_221)
{
    // A03C 0061;	
    // (ꀼ) YI SYLLABLE PIEX	[402F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA03C, 0x0061 };
    uint32_t const ces[9] = { 0x402F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_222)
{
    // A03C 0041;	
    // (ꀼ) YI SYLLABLE PIEX	[402F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA03C, 0x0041 };
    uint32_t const ces[9] = { 0x402F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_223)
{
    // A03C 0062;	
    // (ꀼ) YI SYLLABLE PIEX	[402F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA03C, 0x0062 };
    uint32_t const ces[9] = { 0x402F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_224)
{
    // A03D 0021;	
    // (ꀽ) YI SYLLABLE PIE	[4030 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA03D, 0x0021 };
    uint32_t const ces[9] = { 0x4030, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_225)
{
    // A03D 003F;	
    // (ꀽ) YI SYLLABLE PIE	[4030 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA03D, 0x003F };
    uint32_t const ces[9] = { 0x4030, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_226)
{
    // A03D 0061;	
    // (ꀽ) YI SYLLABLE PIE	[4030 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA03D, 0x0061 };
    uint32_t const ces[9] = { 0x4030, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_227)
{
    // A03D 0041;	
    // (ꀽ) YI SYLLABLE PIE	[4030 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA03D, 0x0041 };
    uint32_t const ces[9] = { 0x4030, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_228)
{
    // A03D 0062;	
    // (ꀽ) YI SYLLABLE PIE	[4030 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA03D, 0x0062 };
    uint32_t const ces[9] = { 0x4030, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_229)
{
    // A03E 0021;	
    // (ꀾ) YI SYLLABLE PIEP	[4031 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA03E, 0x0021 };
    uint32_t const ces[9] = { 0x4031, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_230)
{
    // A03E 003F;	
    // (ꀾ) YI SYLLABLE PIEP	[4031 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA03E, 0x003F };
    uint32_t const ces[9] = { 0x4031, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_231)
{
    // A03E 0061;	
    // (ꀾ) YI SYLLABLE PIEP	[4031 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA03E, 0x0061 };
    uint32_t const ces[9] = { 0x4031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_232)
{
    // A03E 0041;	
    // (ꀾ) YI SYLLABLE PIEP	[4031 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA03E, 0x0041 };
    uint32_t const ces[9] = { 0x4031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_233)
{
    // A03E 0062;	
    // (ꀾ) YI SYLLABLE PIEP	[4031 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA03E, 0x0062 };
    uint32_t const ces[9] = { 0x4031, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_234)
{
    // A03F 0021;	
    // (ꀿ) YI SYLLABLE PAT	[4032 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA03F, 0x0021 };
    uint32_t const ces[9] = { 0x4032, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_235)
{
    // A03F 003F;	
    // (ꀿ) YI SYLLABLE PAT	[4032 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA03F, 0x003F };
    uint32_t const ces[9] = { 0x4032, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_236)
{
    // A03F 0061;	
    // (ꀿ) YI SYLLABLE PAT	[4032 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA03F, 0x0061 };
    uint32_t const ces[9] = { 0x4032, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_237)
{
    // A03F 0041;	
    // (ꀿ) YI SYLLABLE PAT	[4032 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA03F, 0x0041 };
    uint32_t const ces[9] = { 0x4032, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_238)
{
    // A03F 0062;	
    // (ꀿ) YI SYLLABLE PAT	[4032 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA03F, 0x0062 };
    uint32_t const ces[9] = { 0x4032, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_239)
{
    // A040 0021;	
    // (ꁀ) YI SYLLABLE PAX	[4033 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA040, 0x0021 };
    uint32_t const ces[9] = { 0x4033, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_240)
{
    // A040 003F;	
    // (ꁀ) YI SYLLABLE PAX	[4033 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA040, 0x003F };
    uint32_t const ces[9] = { 0x4033, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_241)
{
    // A040 0061;	
    // (ꁀ) YI SYLLABLE PAX	[4033 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA040, 0x0061 };
    uint32_t const ces[9] = { 0x4033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_242)
{
    // A040 0041;	
    // (ꁀ) YI SYLLABLE PAX	[4033 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA040, 0x0041 };
    uint32_t const ces[9] = { 0x4033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_243)
{
    // A040 0062;	
    // (ꁀ) YI SYLLABLE PAX	[4033 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA040, 0x0062 };
    uint32_t const ces[9] = { 0x4033, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_244)
{
    // A041 0021;	
    // (ꁁ) YI SYLLABLE PA	[4034 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA041, 0x0021 };
    uint32_t const ces[9] = { 0x4034, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_245)
{
    // A041 003F;	
    // (ꁁ) YI SYLLABLE PA	[4034 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA041, 0x003F };
    uint32_t const ces[9] = { 0x4034, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_246)
{
    // A041 0061;	
    // (ꁁ) YI SYLLABLE PA	[4034 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA041, 0x0061 };
    uint32_t const ces[9] = { 0x4034, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_247)
{
    // A041 0041;	
    // (ꁁ) YI SYLLABLE PA	[4034 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA041, 0x0041 };
    uint32_t const ces[9] = { 0x4034, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_248)
{
    // A041 0062;	
    // (ꁁ) YI SYLLABLE PA	[4034 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA041, 0x0062 };
    uint32_t const ces[9] = { 0x4034, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_249)
{
    // A042 0021;	
    // (ꁂ) YI SYLLABLE PAP	[4035 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA042, 0x0021 };
    uint32_t const ces[9] = { 0x4035, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_250)
{
    // A042 003F;	
    // (ꁂ) YI SYLLABLE PAP	[4035 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA042, 0x003F };
    uint32_t const ces[9] = { 0x4035, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_251)
{
    // A042 0061;	
    // (ꁂ) YI SYLLABLE PAP	[4035 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA042, 0x0061 };
    uint32_t const ces[9] = { 0x4035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_252)
{
    // A042 0041;	
    // (ꁂ) YI SYLLABLE PAP	[4035 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA042, 0x0041 };
    uint32_t const ces[9] = { 0x4035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_253)
{
    // A042 0062;	
    // (ꁂ) YI SYLLABLE PAP	[4035 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA042, 0x0062 };
    uint32_t const ces[9] = { 0x4035, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_254)
{
    // A043 0021;	
    // (ꁃ) YI SYLLABLE PUOX	[4036 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA043, 0x0021 };
    uint32_t const ces[9] = { 0x4036, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_255)
{
    // A043 003F;	
    // (ꁃ) YI SYLLABLE PUOX	[4036 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA043, 0x003F };
    uint32_t const ces[9] = { 0x4036, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_256)
{
    // A043 0061;	
    // (ꁃ) YI SYLLABLE PUOX	[4036 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA043, 0x0061 };
    uint32_t const ces[9] = { 0x4036, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_257)
{
    // A043 0041;	
    // (ꁃ) YI SYLLABLE PUOX	[4036 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA043, 0x0041 };
    uint32_t const ces[9] = { 0x4036, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_258)
{
    // A043 0062;	
    // (ꁃ) YI SYLLABLE PUOX	[4036 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA043, 0x0062 };
    uint32_t const ces[9] = { 0x4036, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_259)
{
    // A044 0021;	
    // (ꁄ) YI SYLLABLE PUO	[4037 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA044, 0x0021 };
    uint32_t const ces[9] = { 0x4037, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_260)
{
    // A044 003F;	
    // (ꁄ) YI SYLLABLE PUO	[4037 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA044, 0x003F };
    uint32_t const ces[9] = { 0x4037, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_261)
{
    // A044 0061;	
    // (ꁄ) YI SYLLABLE PUO	[4037 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA044, 0x0061 };
    uint32_t const ces[9] = { 0x4037, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_262)
{
    // A044 0041;	
    // (ꁄ) YI SYLLABLE PUO	[4037 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA044, 0x0041 };
    uint32_t const ces[9] = { 0x4037, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_263)
{
    // A044 0062;	
    // (ꁄ) YI SYLLABLE PUO	[4037 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA044, 0x0062 };
    uint32_t const ces[9] = { 0x4037, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_264)
{
    // A045 0021;	
    // (ꁅ) YI SYLLABLE PUOP	[4038 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA045, 0x0021 };
    uint32_t const ces[9] = { 0x4038, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_265)
{
    // A045 003F;	
    // (ꁅ) YI SYLLABLE PUOP	[4038 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA045, 0x003F };
    uint32_t const ces[9] = { 0x4038, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_266)
{
    // A045 0061;	
    // (ꁅ) YI SYLLABLE PUOP	[4038 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA045, 0x0061 };
    uint32_t const ces[9] = { 0x4038, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_267)
{
    // A045 0041;	
    // (ꁅ) YI SYLLABLE PUOP	[4038 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA045, 0x0041 };
    uint32_t const ces[9] = { 0x4038, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_268)
{
    // A045 0062;	
    // (ꁅ) YI SYLLABLE PUOP	[4038 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA045, 0x0062 };
    uint32_t const ces[9] = { 0x4038, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_269)
{
    // A046 0021;	
    // (ꁆ) YI SYLLABLE POT	[4039 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA046, 0x0021 };
    uint32_t const ces[9] = { 0x4039, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_270)
{
    // A046 003F;	
    // (ꁆ) YI SYLLABLE POT	[4039 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA046, 0x003F };
    uint32_t const ces[9] = { 0x4039, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_271)
{
    // A046 0061;	
    // (ꁆ) YI SYLLABLE POT	[4039 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA046, 0x0061 };
    uint32_t const ces[9] = { 0x4039, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_272)
{
    // A046 0041;	
    // (ꁆ) YI SYLLABLE POT	[4039 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA046, 0x0041 };
    uint32_t const ces[9] = { 0x4039, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_273)
{
    // A046 0062;	
    // (ꁆ) YI SYLLABLE POT	[4039 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA046, 0x0062 };
    uint32_t const ces[9] = { 0x4039, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_274)
{
    // A047 0021;	
    // (ꁇ) YI SYLLABLE POX	[403A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA047, 0x0021 };
    uint32_t const ces[9] = { 0x403A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_275)
{
    // A047 003F;	
    // (ꁇ) YI SYLLABLE POX	[403A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA047, 0x003F };
    uint32_t const ces[9] = { 0x403A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_276)
{
    // A047 0061;	
    // (ꁇ) YI SYLLABLE POX	[403A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA047, 0x0061 };
    uint32_t const ces[9] = { 0x403A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_277)
{
    // A047 0041;	
    // (ꁇ) YI SYLLABLE POX	[403A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA047, 0x0041 };
    uint32_t const ces[9] = { 0x403A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_278)
{
    // A047 0062;	
    // (ꁇ) YI SYLLABLE POX	[403A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA047, 0x0062 };
    uint32_t const ces[9] = { 0x403A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_279)
{
    // A048 0021;	
    // (ꁈ) YI SYLLABLE PO	[403B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA048, 0x0021 };
    uint32_t const ces[9] = { 0x403B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_280)
{
    // A048 003F;	
    // (ꁈ) YI SYLLABLE PO	[403B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA048, 0x003F };
    uint32_t const ces[9] = { 0x403B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_281)
{
    // A048 0061;	
    // (ꁈ) YI SYLLABLE PO	[403B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA048, 0x0061 };
    uint32_t const ces[9] = { 0x403B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_282)
{
    // A048 0041;	
    // (ꁈ) YI SYLLABLE PO	[403B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA048, 0x0041 };
    uint32_t const ces[9] = { 0x403B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_283)
{
    // A048 0062;	
    // (ꁈ) YI SYLLABLE PO	[403B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA048, 0x0062 };
    uint32_t const ces[9] = { 0x403B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_284)
{
    // A049 0021;	
    // (ꁉ) YI SYLLABLE POP	[403C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA049, 0x0021 };
    uint32_t const ces[9] = { 0x403C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_285)
{
    // A049 003F;	
    // (ꁉ) YI SYLLABLE POP	[403C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA049, 0x003F };
    uint32_t const ces[9] = { 0x403C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_286)
{
    // A049 0061;	
    // (ꁉ) YI SYLLABLE POP	[403C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA049, 0x0061 };
    uint32_t const ces[9] = { 0x403C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_287)
{
    // A049 0041;	
    // (ꁉ) YI SYLLABLE POP	[403C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA049, 0x0041 };
    uint32_t const ces[9] = { 0x403C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_288)
{
    // A049 0062;	
    // (ꁉ) YI SYLLABLE POP	[403C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA049, 0x0062 };
    uint32_t const ces[9] = { 0x403C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_289)
{
    // A04A 0021;	
    // (ꁊ) YI SYLLABLE PUT	[403D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA04A, 0x0021 };
    uint32_t const ces[9] = { 0x403D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_290)
{
    // A04A 003F;	
    // (ꁊ) YI SYLLABLE PUT	[403D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA04A, 0x003F };
    uint32_t const ces[9] = { 0x403D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_291)
{
    // A04A 0061;	
    // (ꁊ) YI SYLLABLE PUT	[403D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA04A, 0x0061 };
    uint32_t const ces[9] = { 0x403D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_292)
{
    // A04A 0041;	
    // (ꁊ) YI SYLLABLE PUT	[403D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA04A, 0x0041 };
    uint32_t const ces[9] = { 0x403D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_293)
{
    // A04A 0062;	
    // (ꁊ) YI SYLLABLE PUT	[403D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA04A, 0x0062 };
    uint32_t const ces[9] = { 0x403D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_294)
{
    // A04B 0021;	
    // (ꁋ) YI SYLLABLE PUX	[403E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA04B, 0x0021 };
    uint32_t const ces[9] = { 0x403E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_295)
{
    // A04B 003F;	
    // (ꁋ) YI SYLLABLE PUX	[403E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA04B, 0x003F };
    uint32_t const ces[9] = { 0x403E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_296)
{
    // A04B 0061;	
    // (ꁋ) YI SYLLABLE PUX	[403E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA04B, 0x0061 };
    uint32_t const ces[9] = { 0x403E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_297)
{
    // A04B 0041;	
    // (ꁋ) YI SYLLABLE PUX	[403E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA04B, 0x0041 };
    uint32_t const ces[9] = { 0x403E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_298)
{
    // A04B 0062;	
    // (ꁋ) YI SYLLABLE PUX	[403E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA04B, 0x0062 };
    uint32_t const ces[9] = { 0x403E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_299)
{
    // A04C 0021;	
    // (ꁌ) YI SYLLABLE PU	[403F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA04C, 0x0021 };
    uint32_t const ces[9] = { 0x403F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_300)
{
    // A04C 003F;	
    // (ꁌ) YI SYLLABLE PU	[403F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA04C, 0x003F };
    uint32_t const ces[9] = { 0x403F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_301)
{
    // A04C 0061;	
    // (ꁌ) YI SYLLABLE PU	[403F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA04C, 0x0061 };
    uint32_t const ces[9] = { 0x403F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_302)
{
    // A04C 0041;	
    // (ꁌ) YI SYLLABLE PU	[403F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA04C, 0x0041 };
    uint32_t const ces[9] = { 0x403F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_303)
{
    // A04C 0062;	
    // (ꁌ) YI SYLLABLE PU	[403F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA04C, 0x0062 };
    uint32_t const ces[9] = { 0x403F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_304)
{
    // A04D 0021;	
    // (ꁍ) YI SYLLABLE PUP	[4040 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA04D, 0x0021 };
    uint32_t const ces[9] = { 0x4040, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_305)
{
    // A04D 003F;	
    // (ꁍ) YI SYLLABLE PUP	[4040 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA04D, 0x003F };
    uint32_t const ces[9] = { 0x4040, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_306)
{
    // A04D 0061;	
    // (ꁍ) YI SYLLABLE PUP	[4040 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA04D, 0x0061 };
    uint32_t const ces[9] = { 0x4040, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_307)
{
    // A04D 0041;	
    // (ꁍ) YI SYLLABLE PUP	[4040 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA04D, 0x0041 };
    uint32_t const ces[9] = { 0x4040, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_308)
{
    // A04D 0062;	
    // (ꁍ) YI SYLLABLE PUP	[4040 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA04D, 0x0062 };
    uint32_t const ces[9] = { 0x4040, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_309)
{
    // A04E 0021;	
    // (ꁎ) YI SYLLABLE PURX	[4041 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA04E, 0x0021 };
    uint32_t const ces[9] = { 0x4041, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_310)
{
    // A04E 003F;	
    // (ꁎ) YI SYLLABLE PURX	[4041 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA04E, 0x003F };
    uint32_t const ces[9] = { 0x4041, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_311)
{
    // A04E 0061;	
    // (ꁎ) YI SYLLABLE PURX	[4041 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA04E, 0x0061 };
    uint32_t const ces[9] = { 0x4041, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_312)
{
    // A04E 0041;	
    // (ꁎ) YI SYLLABLE PURX	[4041 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA04E, 0x0041 };
    uint32_t const ces[9] = { 0x4041, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_313)
{
    // A04E 0062;	
    // (ꁎ) YI SYLLABLE PURX	[4041 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA04E, 0x0062 };
    uint32_t const ces[9] = { 0x4041, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_314)
{
    // A04F 0021;	
    // (ꁏ) YI SYLLABLE PUR	[4042 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA04F, 0x0021 };
    uint32_t const ces[9] = { 0x4042, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_315)
{
    // A04F 003F;	
    // (ꁏ) YI SYLLABLE PUR	[4042 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA04F, 0x003F };
    uint32_t const ces[9] = { 0x4042, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_316)
{
    // A04F 0061;	
    // (ꁏ) YI SYLLABLE PUR	[4042 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA04F, 0x0061 };
    uint32_t const ces[9] = { 0x4042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_317)
{
    // A04F 0041;	
    // (ꁏ) YI SYLLABLE PUR	[4042 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA04F, 0x0041 };
    uint32_t const ces[9] = { 0x4042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_318)
{
    // A04F 0062;	
    // (ꁏ) YI SYLLABLE PUR	[4042 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA04F, 0x0062 };
    uint32_t const ces[9] = { 0x4042, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_319)
{
    // A050 0021;	
    // (ꁐ) YI SYLLABLE PYT	[4043 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA050, 0x0021 };
    uint32_t const ces[9] = { 0x4043, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_320)
{
    // A050 003F;	
    // (ꁐ) YI SYLLABLE PYT	[4043 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA050, 0x003F };
    uint32_t const ces[9] = { 0x4043, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_321)
{
    // A050 0061;	
    // (ꁐ) YI SYLLABLE PYT	[4043 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA050, 0x0061 };
    uint32_t const ces[9] = { 0x4043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_322)
{
    // A050 0041;	
    // (ꁐ) YI SYLLABLE PYT	[4043 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA050, 0x0041 };
    uint32_t const ces[9] = { 0x4043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_323)
{
    // A050 0062;	
    // (ꁐ) YI SYLLABLE PYT	[4043 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA050, 0x0062 };
    uint32_t const ces[9] = { 0x4043, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_324)
{
    // A051 0021;	
    // (ꁑ) YI SYLLABLE PYX	[4044 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA051, 0x0021 };
    uint32_t const ces[9] = { 0x4044, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_325)
{
    // A051 003F;	
    // (ꁑ) YI SYLLABLE PYX	[4044 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA051, 0x003F };
    uint32_t const ces[9] = { 0x4044, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_326)
{
    // A051 0061;	
    // (ꁑ) YI SYLLABLE PYX	[4044 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA051, 0x0061 };
    uint32_t const ces[9] = { 0x4044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_327)
{
    // A051 0041;	
    // (ꁑ) YI SYLLABLE PYX	[4044 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA051, 0x0041 };
    uint32_t const ces[9] = { 0x4044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_328)
{
    // A051 0062;	
    // (ꁑ) YI SYLLABLE PYX	[4044 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA051, 0x0062 };
    uint32_t const ces[9] = { 0x4044, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_329)
{
    // A052 0021;	
    // (ꁒ) YI SYLLABLE PY	[4045 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA052, 0x0021 };
    uint32_t const ces[9] = { 0x4045, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_330)
{
    // A052 003F;	
    // (ꁒ) YI SYLLABLE PY	[4045 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA052, 0x003F };
    uint32_t const ces[9] = { 0x4045, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_331)
{
    // A052 0061;	
    // (ꁒ) YI SYLLABLE PY	[4045 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA052, 0x0061 };
    uint32_t const ces[9] = { 0x4045, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_332)
{
    // A052 0041;	
    // (ꁒ) YI SYLLABLE PY	[4045 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA052, 0x0041 };
    uint32_t const ces[9] = { 0x4045, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_333)
{
    // A052 0062;	
    // (ꁒ) YI SYLLABLE PY	[4045 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA052, 0x0062 };
    uint32_t const ces[9] = { 0x4045, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_334)
{
    // A053 0021;	
    // (ꁓ) YI SYLLABLE PYP	[4046 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA053, 0x0021 };
    uint32_t const ces[9] = { 0x4046, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_335)
{
    // A053 003F;	
    // (ꁓ) YI SYLLABLE PYP	[4046 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA053, 0x003F };
    uint32_t const ces[9] = { 0x4046, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_336)
{
    // A053 0061;	
    // (ꁓ) YI SYLLABLE PYP	[4046 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA053, 0x0061 };
    uint32_t const ces[9] = { 0x4046, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_337)
{
    // A053 0041;	
    // (ꁓ) YI SYLLABLE PYP	[4046 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA053, 0x0041 };
    uint32_t const ces[9] = { 0x4046, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_338)
{
    // A053 0062;	
    // (ꁓ) YI SYLLABLE PYP	[4046 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA053, 0x0062 };
    uint32_t const ces[9] = { 0x4046, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_339)
{
    // A054 0021;	
    // (ꁔ) YI SYLLABLE PYRX	[4047 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA054, 0x0021 };
    uint32_t const ces[9] = { 0x4047, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_340)
{
    // A054 003F;	
    // (ꁔ) YI SYLLABLE PYRX	[4047 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA054, 0x003F };
    uint32_t const ces[9] = { 0x4047, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_341)
{
    // A054 0061;	
    // (ꁔ) YI SYLLABLE PYRX	[4047 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA054, 0x0061 };
    uint32_t const ces[9] = { 0x4047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_342)
{
    // A054 0041;	
    // (ꁔ) YI SYLLABLE PYRX	[4047 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA054, 0x0041 };
    uint32_t const ces[9] = { 0x4047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_343)
{
    // A054 0062;	
    // (ꁔ) YI SYLLABLE PYRX	[4047 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA054, 0x0062 };
    uint32_t const ces[9] = { 0x4047, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_344)
{
    // A055 0021;	
    // (ꁕ) YI SYLLABLE PYR	[4048 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA055, 0x0021 };
    uint32_t const ces[9] = { 0x4048, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_345)
{
    // A055 003F;	
    // (ꁕ) YI SYLLABLE PYR	[4048 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA055, 0x003F };
    uint32_t const ces[9] = { 0x4048, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_346)
{
    // A055 0061;	
    // (ꁕ) YI SYLLABLE PYR	[4048 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA055, 0x0061 };
    uint32_t const ces[9] = { 0x4048, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_347)
{
    // A055 0041;	
    // (ꁕ) YI SYLLABLE PYR	[4048 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA055, 0x0041 };
    uint32_t const ces[9] = { 0x4048, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_348)
{
    // A055 0062;	
    // (ꁕ) YI SYLLABLE PYR	[4048 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA055, 0x0062 };
    uint32_t const ces[9] = { 0x4048, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_349)
{
    // A056 0021;	
    // (ꁖ) YI SYLLABLE BBIT	[4049 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA056, 0x0021 };
    uint32_t const ces[9] = { 0x4049, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_350)
{
    // A056 003F;	
    // (ꁖ) YI SYLLABLE BBIT	[4049 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA056, 0x003F };
    uint32_t const ces[9] = { 0x4049, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_351)
{
    // A056 0061;	
    // (ꁖ) YI SYLLABLE BBIT	[4049 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA056, 0x0061 };
    uint32_t const ces[9] = { 0x4049, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_352)
{
    // A056 0041;	
    // (ꁖ) YI SYLLABLE BBIT	[4049 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA056, 0x0041 };
    uint32_t const ces[9] = { 0x4049, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_353)
{
    // A056 0062;	
    // (ꁖ) YI SYLLABLE BBIT	[4049 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA056, 0x0062 };
    uint32_t const ces[9] = { 0x4049, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_354)
{
    // A057 0021;	
    // (ꁗ) YI SYLLABLE BBIX	[404A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA057, 0x0021 };
    uint32_t const ces[9] = { 0x404A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_355)
{
    // A057 003F;	
    // (ꁗ) YI SYLLABLE BBIX	[404A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA057, 0x003F };
    uint32_t const ces[9] = { 0x404A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_356)
{
    // A057 0061;	
    // (ꁗ) YI SYLLABLE BBIX	[404A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA057, 0x0061 };
    uint32_t const ces[9] = { 0x404A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_357)
{
    // A057 0041;	
    // (ꁗ) YI SYLLABLE BBIX	[404A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA057, 0x0041 };
    uint32_t const ces[9] = { 0x404A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_358)
{
    // A057 0062;	
    // (ꁗ) YI SYLLABLE BBIX	[404A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA057, 0x0062 };
    uint32_t const ces[9] = { 0x404A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_359)
{
    // A058 0021;	
    // (ꁘ) YI SYLLABLE BBI	[404B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA058, 0x0021 };
    uint32_t const ces[9] = { 0x404B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_360)
{
    // A058 003F;	
    // (ꁘ) YI SYLLABLE BBI	[404B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA058, 0x003F };
    uint32_t const ces[9] = { 0x404B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_361)
{
    // A058 0061;	
    // (ꁘ) YI SYLLABLE BBI	[404B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA058, 0x0061 };
    uint32_t const ces[9] = { 0x404B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_362)
{
    // A058 0041;	
    // (ꁘ) YI SYLLABLE BBI	[404B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA058, 0x0041 };
    uint32_t const ces[9] = { 0x404B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_363)
{
    // A058 0062;	
    // (ꁘ) YI SYLLABLE BBI	[404B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA058, 0x0062 };
    uint32_t const ces[9] = { 0x404B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_364)
{
    // A059 0021;	
    // (ꁙ) YI SYLLABLE BBIP	[404C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA059, 0x0021 };
    uint32_t const ces[9] = { 0x404C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_365)
{
    // A059 003F;	
    // (ꁙ) YI SYLLABLE BBIP	[404C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA059, 0x003F };
    uint32_t const ces[9] = { 0x404C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_366)
{
    // A059 0061;	
    // (ꁙ) YI SYLLABLE BBIP	[404C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA059, 0x0061 };
    uint32_t const ces[9] = { 0x404C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_367)
{
    // A059 0041;	
    // (ꁙ) YI SYLLABLE BBIP	[404C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA059, 0x0041 };
    uint32_t const ces[9] = { 0x404C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_368)
{
    // A059 0062;	
    // (ꁙ) YI SYLLABLE BBIP	[404C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA059, 0x0062 };
    uint32_t const ces[9] = { 0x404C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_369)
{
    // A05A 0021;	
    // (ꁚ) YI SYLLABLE BBIET	[404D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA05A, 0x0021 };
    uint32_t const ces[9] = { 0x404D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_370)
{
    // A05A 003F;	
    // (ꁚ) YI SYLLABLE BBIET	[404D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA05A, 0x003F };
    uint32_t const ces[9] = { 0x404D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_371)
{
    // A05A 0061;	
    // (ꁚ) YI SYLLABLE BBIET	[404D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA05A, 0x0061 };
    uint32_t const ces[9] = { 0x404D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_372)
{
    // A05A 0041;	
    // (ꁚ) YI SYLLABLE BBIET	[404D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA05A, 0x0041 };
    uint32_t const ces[9] = { 0x404D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_373)
{
    // A05A 0062;	
    // (ꁚ) YI SYLLABLE BBIET	[404D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA05A, 0x0062 };
    uint32_t const ces[9] = { 0x404D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_374)
{
    // A05B 0021;	
    // (ꁛ) YI SYLLABLE BBIEX	[404E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA05B, 0x0021 };
    uint32_t const ces[9] = { 0x404E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_375)
{
    // A05B 003F;	
    // (ꁛ) YI SYLLABLE BBIEX	[404E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA05B, 0x003F };
    uint32_t const ces[9] = { 0x404E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_376)
{
    // A05B 0061;	
    // (ꁛ) YI SYLLABLE BBIEX	[404E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA05B, 0x0061 };
    uint32_t const ces[9] = { 0x404E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_377)
{
    // A05B 0041;	
    // (ꁛ) YI SYLLABLE BBIEX	[404E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA05B, 0x0041 };
    uint32_t const ces[9] = { 0x404E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_378)
{
    // A05B 0062;	
    // (ꁛ) YI SYLLABLE BBIEX	[404E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA05B, 0x0062 };
    uint32_t const ces[9] = { 0x404E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_379)
{
    // A05C 0021;	
    // (ꁜ) YI SYLLABLE BBIE	[404F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA05C, 0x0021 };
    uint32_t const ces[9] = { 0x404F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_380)
{
    // A05C 003F;	
    // (ꁜ) YI SYLLABLE BBIE	[404F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA05C, 0x003F };
    uint32_t const ces[9] = { 0x404F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_381)
{
    // A05C 0061;	
    // (ꁜ) YI SYLLABLE BBIE	[404F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA05C, 0x0061 };
    uint32_t const ces[9] = { 0x404F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_382)
{
    // A05C 0041;	
    // (ꁜ) YI SYLLABLE BBIE	[404F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA05C, 0x0041 };
    uint32_t const ces[9] = { 0x404F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_383)
{
    // A05C 0062;	
    // (ꁜ) YI SYLLABLE BBIE	[404F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA05C, 0x0062 };
    uint32_t const ces[9] = { 0x404F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_384)
{
    // A05D 0021;	
    // (ꁝ) YI SYLLABLE BBIEP	[4050 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA05D, 0x0021 };
    uint32_t const ces[9] = { 0x4050, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_385)
{
    // A05D 003F;	
    // (ꁝ) YI SYLLABLE BBIEP	[4050 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA05D, 0x003F };
    uint32_t const ces[9] = { 0x4050, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_386)
{
    // A05D 0061;	
    // (ꁝ) YI SYLLABLE BBIEP	[4050 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA05D, 0x0061 };
    uint32_t const ces[9] = { 0x4050, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_387)
{
    // A05D 0041;	
    // (ꁝ) YI SYLLABLE BBIEP	[4050 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA05D, 0x0041 };
    uint32_t const ces[9] = { 0x4050, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_388)
{
    // A05D 0062;	
    // (ꁝ) YI SYLLABLE BBIEP	[4050 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA05D, 0x0062 };
    uint32_t const ces[9] = { 0x4050, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_389)
{
    // A05E 0021;	
    // (ꁞ) YI SYLLABLE BBAT	[4051 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA05E, 0x0021 };
    uint32_t const ces[9] = { 0x4051, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_390)
{
    // A05E 003F;	
    // (ꁞ) YI SYLLABLE BBAT	[4051 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA05E, 0x003F };
    uint32_t const ces[9] = { 0x4051, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_391)
{
    // A05E 0061;	
    // (ꁞ) YI SYLLABLE BBAT	[4051 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA05E, 0x0061 };
    uint32_t const ces[9] = { 0x4051, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_392)
{
    // A05E 0041;	
    // (ꁞ) YI SYLLABLE BBAT	[4051 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA05E, 0x0041 };
    uint32_t const ces[9] = { 0x4051, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_393)
{
    // A05E 0062;	
    // (ꁞ) YI SYLLABLE BBAT	[4051 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA05E, 0x0062 };
    uint32_t const ces[9] = { 0x4051, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_394)
{
    // A05F 0021;	
    // (ꁟ) YI SYLLABLE BBAX	[4052 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA05F, 0x0021 };
    uint32_t const ces[9] = { 0x4052, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_395)
{
    // A05F 003F;	
    // (ꁟ) YI SYLLABLE BBAX	[4052 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA05F, 0x003F };
    uint32_t const ces[9] = { 0x4052, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_396)
{
    // A05F 0061;	
    // (ꁟ) YI SYLLABLE BBAX	[4052 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA05F, 0x0061 };
    uint32_t const ces[9] = { 0x4052, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_397)
{
    // A05F 0041;	
    // (ꁟ) YI SYLLABLE BBAX	[4052 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA05F, 0x0041 };
    uint32_t const ces[9] = { 0x4052, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_398)
{
    // A05F 0062;	
    // (ꁟ) YI SYLLABLE BBAX	[4052 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA05F, 0x0062 };
    uint32_t const ces[9] = { 0x4052, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_399)
{
    // A060 0021;	
    // (ꁠ) YI SYLLABLE BBA	[4053 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA060, 0x0021 };
    uint32_t const ces[9] = { 0x4053, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_400)
{
    // A060 003F;	
    // (ꁠ) YI SYLLABLE BBA	[4053 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA060, 0x003F };
    uint32_t const ces[9] = { 0x4053, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_401)
{
    // A060 0061;	
    // (ꁠ) YI SYLLABLE BBA	[4053 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA060, 0x0061 };
    uint32_t const ces[9] = { 0x4053, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_402)
{
    // A060 0041;	
    // (ꁠ) YI SYLLABLE BBA	[4053 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA060, 0x0041 };
    uint32_t const ces[9] = { 0x4053, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_403)
{
    // A060 0062;	
    // (ꁠ) YI SYLLABLE BBA	[4053 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA060, 0x0062 };
    uint32_t const ces[9] = { 0x4053, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_404)
{
    // A061 0021;	
    // (ꁡ) YI SYLLABLE BBAP	[4054 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA061, 0x0021 };
    uint32_t const ces[9] = { 0x4054, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_405)
{
    // A061 003F;	
    // (ꁡ) YI SYLLABLE BBAP	[4054 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA061, 0x003F };
    uint32_t const ces[9] = { 0x4054, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_406)
{
    // A061 0061;	
    // (ꁡ) YI SYLLABLE BBAP	[4054 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA061, 0x0061 };
    uint32_t const ces[9] = { 0x4054, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_407)
{
    // A061 0041;	
    // (ꁡ) YI SYLLABLE BBAP	[4054 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA061, 0x0041 };
    uint32_t const ces[9] = { 0x4054, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_408)
{
    // A061 0062;	
    // (ꁡ) YI SYLLABLE BBAP	[4054 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA061, 0x0062 };
    uint32_t const ces[9] = { 0x4054, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_409)
{
    // A062 0021;	
    // (ꁢ) YI SYLLABLE BBUOX	[4055 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA062, 0x0021 };
    uint32_t const ces[9] = { 0x4055, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_410)
{
    // A062 003F;	
    // (ꁢ) YI SYLLABLE BBUOX	[4055 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA062, 0x003F };
    uint32_t const ces[9] = { 0x4055, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_411)
{
    // A062 0061;	
    // (ꁢ) YI SYLLABLE BBUOX	[4055 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA062, 0x0061 };
    uint32_t const ces[9] = { 0x4055, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_412)
{
    // A062 0041;	
    // (ꁢ) YI SYLLABLE BBUOX	[4055 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA062, 0x0041 };
    uint32_t const ces[9] = { 0x4055, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_413)
{
    // A062 0062;	
    // (ꁢ) YI SYLLABLE BBUOX	[4055 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA062, 0x0062 };
    uint32_t const ces[9] = { 0x4055, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_414)
{
    // A063 0021;	
    // (ꁣ) YI SYLLABLE BBUO	[4056 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA063, 0x0021 };
    uint32_t const ces[9] = { 0x4056, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_415)
{
    // A063 003F;	
    // (ꁣ) YI SYLLABLE BBUO	[4056 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA063, 0x003F };
    uint32_t const ces[9] = { 0x4056, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_416)
{
    // A063 0061;	
    // (ꁣ) YI SYLLABLE BBUO	[4056 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA063, 0x0061 };
    uint32_t const ces[9] = { 0x4056, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_417)
{
    // A063 0041;	
    // (ꁣ) YI SYLLABLE BBUO	[4056 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA063, 0x0041 };
    uint32_t const ces[9] = { 0x4056, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_418)
{
    // A063 0062;	
    // (ꁣ) YI SYLLABLE BBUO	[4056 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA063, 0x0062 };
    uint32_t const ces[9] = { 0x4056, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_419)
{
    // A064 0021;	
    // (ꁤ) YI SYLLABLE BBUOP	[4057 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA064, 0x0021 };
    uint32_t const ces[9] = { 0x4057, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_420)
{
    // A064 003F;	
    // (ꁤ) YI SYLLABLE BBUOP	[4057 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA064, 0x003F };
    uint32_t const ces[9] = { 0x4057, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_421)
{
    // A064 0061;	
    // (ꁤ) YI SYLLABLE BBUOP	[4057 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA064, 0x0061 };
    uint32_t const ces[9] = { 0x4057, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_422)
{
    // A064 0041;	
    // (ꁤ) YI SYLLABLE BBUOP	[4057 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA064, 0x0041 };
    uint32_t const ces[9] = { 0x4057, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_423)
{
    // A064 0062;	
    // (ꁤ) YI SYLLABLE BBUOP	[4057 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA064, 0x0062 };
    uint32_t const ces[9] = { 0x4057, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_424)
{
    // A065 0021;	
    // (ꁥ) YI SYLLABLE BBOT	[4058 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA065, 0x0021 };
    uint32_t const ces[9] = { 0x4058, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_425)
{
    // A065 003F;	
    // (ꁥ) YI SYLLABLE BBOT	[4058 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA065, 0x003F };
    uint32_t const ces[9] = { 0x4058, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_426)
{
    // A065 0061;	
    // (ꁥ) YI SYLLABLE BBOT	[4058 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA065, 0x0061 };
    uint32_t const ces[9] = { 0x4058, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_427)
{
    // A065 0041;	
    // (ꁥ) YI SYLLABLE BBOT	[4058 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA065, 0x0041 };
    uint32_t const ces[9] = { 0x4058, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_428)
{
    // A065 0062;	
    // (ꁥ) YI SYLLABLE BBOT	[4058 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA065, 0x0062 };
    uint32_t const ces[9] = { 0x4058, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_429)
{
    // A066 0021;	
    // (ꁦ) YI SYLLABLE BBOX	[4059 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA066, 0x0021 };
    uint32_t const ces[9] = { 0x4059, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_430)
{
    // A066 003F;	
    // (ꁦ) YI SYLLABLE BBOX	[4059 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA066, 0x003F };
    uint32_t const ces[9] = { 0x4059, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_431)
{
    // A066 0061;	
    // (ꁦ) YI SYLLABLE BBOX	[4059 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA066, 0x0061 };
    uint32_t const ces[9] = { 0x4059, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_432)
{
    // A066 0041;	
    // (ꁦ) YI SYLLABLE BBOX	[4059 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA066, 0x0041 };
    uint32_t const ces[9] = { 0x4059, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_433)
{
    // A066 0062;	
    // (ꁦ) YI SYLLABLE BBOX	[4059 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA066, 0x0062 };
    uint32_t const ces[9] = { 0x4059, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_434)
{
    // A067 0021;	
    // (ꁧ) YI SYLLABLE BBO	[405A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA067, 0x0021 };
    uint32_t const ces[9] = { 0x405A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_435)
{
    // A067 003F;	
    // (ꁧ) YI SYLLABLE BBO	[405A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA067, 0x003F };
    uint32_t const ces[9] = { 0x405A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_436)
{
    // A067 0061;	
    // (ꁧ) YI SYLLABLE BBO	[405A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA067, 0x0061 };
    uint32_t const ces[9] = { 0x405A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_437)
{
    // A067 0041;	
    // (ꁧ) YI SYLLABLE BBO	[405A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA067, 0x0041 };
    uint32_t const ces[9] = { 0x405A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_438)
{
    // A067 0062;	
    // (ꁧ) YI SYLLABLE BBO	[405A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA067, 0x0062 };
    uint32_t const ces[9] = { 0x405A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_439)
{
    // A068 0021;	
    // (ꁨ) YI SYLLABLE BBOP	[405B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA068, 0x0021 };
    uint32_t const ces[9] = { 0x405B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_440)
{
    // A068 003F;	
    // (ꁨ) YI SYLLABLE BBOP	[405B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA068, 0x003F };
    uint32_t const ces[9] = { 0x405B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_441)
{
    // A068 0061;	
    // (ꁨ) YI SYLLABLE BBOP	[405B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA068, 0x0061 };
    uint32_t const ces[9] = { 0x405B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_442)
{
    // A068 0041;	
    // (ꁨ) YI SYLLABLE BBOP	[405B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA068, 0x0041 };
    uint32_t const ces[9] = { 0x405B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_443)
{
    // A068 0062;	
    // (ꁨ) YI SYLLABLE BBOP	[405B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA068, 0x0062 };
    uint32_t const ces[9] = { 0x405B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_444)
{
    // A069 0021;	
    // (ꁩ) YI SYLLABLE BBEX	[405C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA069, 0x0021 };
    uint32_t const ces[9] = { 0x405C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_445)
{
    // A069 003F;	
    // (ꁩ) YI SYLLABLE BBEX	[405C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA069, 0x003F };
    uint32_t const ces[9] = { 0x405C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_446)
{
    // A069 0061;	
    // (ꁩ) YI SYLLABLE BBEX	[405C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA069, 0x0061 };
    uint32_t const ces[9] = { 0x405C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_447)
{
    // A069 0041;	
    // (ꁩ) YI SYLLABLE BBEX	[405C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA069, 0x0041 };
    uint32_t const ces[9] = { 0x405C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_448)
{
    // A069 0062;	
    // (ꁩ) YI SYLLABLE BBEX	[405C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA069, 0x0062 };
    uint32_t const ces[9] = { 0x405C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_449)
{
    // A06A 0021;	
    // (ꁪ) YI SYLLABLE BBE	[405D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA06A, 0x0021 };
    uint32_t const ces[9] = { 0x405D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_450)
{
    // A06A 003F;	
    // (ꁪ) YI SYLLABLE BBE	[405D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA06A, 0x003F };
    uint32_t const ces[9] = { 0x405D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_451)
{
    // A06A 0061;	
    // (ꁪ) YI SYLLABLE BBE	[405D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA06A, 0x0061 };
    uint32_t const ces[9] = { 0x405D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_452)
{
    // A06A 0041;	
    // (ꁪ) YI SYLLABLE BBE	[405D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA06A, 0x0041 };
    uint32_t const ces[9] = { 0x405D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_453)
{
    // A06A 0062;	
    // (ꁪ) YI SYLLABLE BBE	[405D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA06A, 0x0062 };
    uint32_t const ces[9] = { 0x405D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_454)
{
    // A06B 0021;	
    // (ꁫ) YI SYLLABLE BBEP	[405E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA06B, 0x0021 };
    uint32_t const ces[9] = { 0x405E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_455)
{
    // A06B 003F;	
    // (ꁫ) YI SYLLABLE BBEP	[405E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA06B, 0x003F };
    uint32_t const ces[9] = { 0x405E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_456)
{
    // A06B 0061;	
    // (ꁫ) YI SYLLABLE BBEP	[405E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA06B, 0x0061 };
    uint32_t const ces[9] = { 0x405E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_457)
{
    // A06B 0041;	
    // (ꁫ) YI SYLLABLE BBEP	[405E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA06B, 0x0041 };
    uint32_t const ces[9] = { 0x405E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_458)
{
    // A06B 0062;	
    // (ꁫ) YI SYLLABLE BBEP	[405E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA06B, 0x0062 };
    uint32_t const ces[9] = { 0x405E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_459)
{
    // A06C 0021;	
    // (ꁬ) YI SYLLABLE BBUT	[405F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA06C, 0x0021 };
    uint32_t const ces[9] = { 0x405F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_460)
{
    // A06C 003F;	
    // (ꁬ) YI SYLLABLE BBUT	[405F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA06C, 0x003F };
    uint32_t const ces[9] = { 0x405F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_461)
{
    // A06C 0061;	
    // (ꁬ) YI SYLLABLE BBUT	[405F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA06C, 0x0061 };
    uint32_t const ces[9] = { 0x405F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_462)
{
    // A06C 0041;	
    // (ꁬ) YI SYLLABLE BBUT	[405F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA06C, 0x0041 };
    uint32_t const ces[9] = { 0x405F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_463)
{
    // A06C 0062;	
    // (ꁬ) YI SYLLABLE BBUT	[405F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA06C, 0x0062 };
    uint32_t const ces[9] = { 0x405F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_464)
{
    // A06D 0021;	
    // (ꁭ) YI SYLLABLE BBUX	[4060 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA06D, 0x0021 };
    uint32_t const ces[9] = { 0x4060, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_465)
{
    // A06D 003F;	
    // (ꁭ) YI SYLLABLE BBUX	[4060 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA06D, 0x003F };
    uint32_t const ces[9] = { 0x4060, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_466)
{
    // A06D 0061;	
    // (ꁭ) YI SYLLABLE BBUX	[4060 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA06D, 0x0061 };
    uint32_t const ces[9] = { 0x4060, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_467)
{
    // A06D 0041;	
    // (ꁭ) YI SYLLABLE BBUX	[4060 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA06D, 0x0041 };
    uint32_t const ces[9] = { 0x4060, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_468)
{
    // A06D 0062;	
    // (ꁭ) YI SYLLABLE BBUX	[4060 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA06D, 0x0062 };
    uint32_t const ces[9] = { 0x4060, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_469)
{
    // A06E 0021;	
    // (ꁮ) YI SYLLABLE BBU	[4061 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA06E, 0x0021 };
    uint32_t const ces[9] = { 0x4061, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_470)
{
    // A06E 003F;	
    // (ꁮ) YI SYLLABLE BBU	[4061 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA06E, 0x003F };
    uint32_t const ces[9] = { 0x4061, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_471)
{
    // A06E 0061;	
    // (ꁮ) YI SYLLABLE BBU	[4061 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA06E, 0x0061 };
    uint32_t const ces[9] = { 0x4061, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_472)
{
    // A06E 0041;	
    // (ꁮ) YI SYLLABLE BBU	[4061 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA06E, 0x0041 };
    uint32_t const ces[9] = { 0x4061, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_473)
{
    // A06E 0062;	
    // (ꁮ) YI SYLLABLE BBU	[4061 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA06E, 0x0062 };
    uint32_t const ces[9] = { 0x4061, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_474)
{
    // A06F 0021;	
    // (ꁯ) YI SYLLABLE BBUP	[4062 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA06F, 0x0021 };
    uint32_t const ces[9] = { 0x4062, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_475)
{
    // A06F 003F;	
    // (ꁯ) YI SYLLABLE BBUP	[4062 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA06F, 0x003F };
    uint32_t const ces[9] = { 0x4062, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_476)
{
    // A06F 0061;	
    // (ꁯ) YI SYLLABLE BBUP	[4062 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA06F, 0x0061 };
    uint32_t const ces[9] = { 0x4062, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_477)
{
    // A06F 0041;	
    // (ꁯ) YI SYLLABLE BBUP	[4062 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA06F, 0x0041 };
    uint32_t const ces[9] = { 0x4062, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_478)
{
    // A06F 0062;	
    // (ꁯ) YI SYLLABLE BBUP	[4062 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA06F, 0x0062 };
    uint32_t const ces[9] = { 0x4062, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_479)
{
    // A070 0021;	
    // (ꁰ) YI SYLLABLE BBURX	[4063 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA070, 0x0021 };
    uint32_t const ces[9] = { 0x4063, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_480)
{
    // A070 003F;	
    // (ꁰ) YI SYLLABLE BBURX	[4063 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA070, 0x003F };
    uint32_t const ces[9] = { 0x4063, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_481)
{
    // A070 0061;	
    // (ꁰ) YI SYLLABLE BBURX	[4063 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA070, 0x0061 };
    uint32_t const ces[9] = { 0x4063, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_482)
{
    // A070 0041;	
    // (ꁰ) YI SYLLABLE BBURX	[4063 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA070, 0x0041 };
    uint32_t const ces[9] = { 0x4063, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_483)
{
    // A070 0062;	
    // (ꁰ) YI SYLLABLE BBURX	[4063 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA070, 0x0062 };
    uint32_t const ces[9] = { 0x4063, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_484)
{
    // A071 0021;	
    // (ꁱ) YI SYLLABLE BBUR	[4064 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA071, 0x0021 };
    uint32_t const ces[9] = { 0x4064, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_485)
{
    // A071 003F;	
    // (ꁱ) YI SYLLABLE BBUR	[4064 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA071, 0x003F };
    uint32_t const ces[9] = { 0x4064, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_486)
{
    // A071 0061;	
    // (ꁱ) YI SYLLABLE BBUR	[4064 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA071, 0x0061 };
    uint32_t const ces[9] = { 0x4064, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_487)
{
    // A071 0041;	
    // (ꁱ) YI SYLLABLE BBUR	[4064 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA071, 0x0041 };
    uint32_t const ces[9] = { 0x4064, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_488)
{
    // A071 0062;	
    // (ꁱ) YI SYLLABLE BBUR	[4064 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA071, 0x0062 };
    uint32_t const ces[9] = { 0x4064, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_489)
{
    // A072 0021;	
    // (ꁲ) YI SYLLABLE BBYT	[4065 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA072, 0x0021 };
    uint32_t const ces[9] = { 0x4065, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_490)
{
    // A072 003F;	
    // (ꁲ) YI SYLLABLE BBYT	[4065 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA072, 0x003F };
    uint32_t const ces[9] = { 0x4065, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_491)
{
    // A072 0061;	
    // (ꁲ) YI SYLLABLE BBYT	[4065 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA072, 0x0061 };
    uint32_t const ces[9] = { 0x4065, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_492)
{
    // A072 0041;	
    // (ꁲ) YI SYLLABLE BBYT	[4065 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA072, 0x0041 };
    uint32_t const ces[9] = { 0x4065, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_493)
{
    // A072 0062;	
    // (ꁲ) YI SYLLABLE BBYT	[4065 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA072, 0x0062 };
    uint32_t const ces[9] = { 0x4065, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_494)
{
    // A073 0021;	
    // (ꁳ) YI SYLLABLE BBYX	[4066 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA073, 0x0021 };
    uint32_t const ces[9] = { 0x4066, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_495)
{
    // A073 003F;	
    // (ꁳ) YI SYLLABLE BBYX	[4066 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA073, 0x003F };
    uint32_t const ces[9] = { 0x4066, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_496)
{
    // A073 0061;	
    // (ꁳ) YI SYLLABLE BBYX	[4066 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA073, 0x0061 };
    uint32_t const ces[9] = { 0x4066, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_497)
{
    // A073 0041;	
    // (ꁳ) YI SYLLABLE BBYX	[4066 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA073, 0x0041 };
    uint32_t const ces[9] = { 0x4066, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_498)
{
    // A073 0062;	
    // (ꁳ) YI SYLLABLE BBYX	[4066 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA073, 0x0062 };
    uint32_t const ces[9] = { 0x4066, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_254_499)
{
    // A074 0021;	
    // (ꁴ) YI SYLLABLE BBY	[4067 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA074, 0x0021 };
    uint32_t const ces[9] = { 0x4067, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

