// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_177_000)
{
    // 112C1 0041;	
    // (ëãÅ) KHUDAWADI LETTER CHA	[2B19 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112C1, 0x0041 };
    uint32_t const ces[9] = { 0x2B19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_001)
{
    // 112C1 0062;	
    // (ëãÅ) KHUDAWADI LETTER CHA	[2B19 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C1, 0x0062 };
    uint32_t const ces[9] = { 0x2B19, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_002)
{
    // 112C2 0021;	
    // (ëãÇ) KHUDAWADI LETTER JA	[2B1A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C2, 0x0021 };
    uint32_t const ces[9] = { 0x2B1A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_003)
{
    // 112C2 003F;	
    // (ëãÇ) KHUDAWADI LETTER JA	[2B1A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C2, 0x003F };
    uint32_t const ces[9] = { 0x2B1A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_004)
{
    // 112C2 0061;	
    // (ëãÇ) KHUDAWADI LETTER JA	[2B1A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C2, 0x0061 };
    uint32_t const ces[9] = { 0x2B1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_005)
{
    // 112C2 0041;	
    // (ëãÇ) KHUDAWADI LETTER JA	[2B1A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112C2, 0x0041 };
    uint32_t const ces[9] = { 0x2B1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_006)
{
    // 112C2 0062;	
    // (ëãÇ) KHUDAWADI LETTER JA	[2B1A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C2, 0x0062 };
    uint32_t const ces[9] = { 0x2B1A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_007)
{
    // 112C3 0021;	
    // (ëãÉ) KHUDAWADI LETTER JJA	[2B1B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C3, 0x0021 };
    uint32_t const ces[9] = { 0x2B1B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_008)
{
    // 112C3 003F;	
    // (ëãÉ) KHUDAWADI LETTER JJA	[2B1B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C3, 0x003F };
    uint32_t const ces[9] = { 0x2B1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_009)
{
    // 112C3 0061;	
    // (ëãÉ) KHUDAWADI LETTER JJA	[2B1B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C3, 0x0061 };
    uint32_t const ces[9] = { 0x2B1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_010)
{
    // 112C3 0041;	
    // (ëãÉ) KHUDAWADI LETTER JJA	[2B1B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112C3, 0x0041 };
    uint32_t const ces[9] = { 0x2B1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_011)
{
    // 112C3 0062;	
    // (ëãÉ) KHUDAWADI LETTER JJA	[2B1B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C3, 0x0062 };
    uint32_t const ces[9] = { 0x2B1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_012)
{
    // 112C4 0021;	
    // (ëãÑ) KHUDAWADI LETTER JHA	[2B1C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C4, 0x0021 };
    uint32_t const ces[9] = { 0x2B1C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_013)
{
    // 112C4 003F;	
    // (ëãÑ) KHUDAWADI LETTER JHA	[2B1C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C4, 0x003F };
    uint32_t const ces[9] = { 0x2B1C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_014)
{
    // 112C4 0061;	
    // (ëãÑ) KHUDAWADI LETTER JHA	[2B1C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C4, 0x0061 };
    uint32_t const ces[9] = { 0x2B1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_015)
{
    // 112C4 0041;	
    // (ëãÑ) KHUDAWADI LETTER JHA	[2B1C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112C4, 0x0041 };
    uint32_t const ces[9] = { 0x2B1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_016)
{
    // 112C4 0062;	
    // (ëãÑ) KHUDAWADI LETTER JHA	[2B1C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C4, 0x0062 };
    uint32_t const ces[9] = { 0x2B1C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_017)
{
    // 112C5 0021;	
    // (ëãÖ) KHUDAWADI LETTER NYA	[2B1D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C5, 0x0021 };
    uint32_t const ces[9] = { 0x2B1D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_018)
{
    // 112C5 003F;	
    // (ëãÖ) KHUDAWADI LETTER NYA	[2B1D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C5, 0x003F };
    uint32_t const ces[9] = { 0x2B1D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_019)
{
    // 112C5 0061;	
    // (ëãÖ) KHUDAWADI LETTER NYA	[2B1D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C5, 0x0061 };
    uint32_t const ces[9] = { 0x2B1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_020)
{
    // 112C5 0041;	
    // (ëãÖ) KHUDAWADI LETTER NYA	[2B1D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112C5, 0x0041 };
    uint32_t const ces[9] = { 0x2B1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_021)
{
    // 112C5 0062;	
    // (ëãÖ) KHUDAWADI LETTER NYA	[2B1D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C5, 0x0062 };
    uint32_t const ces[9] = { 0x2B1D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_022)
{
    // 112C6 0021;	
    // (ëãÜ) KHUDAWADI LETTER TTA	[2B1E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C6, 0x0021 };
    uint32_t const ces[9] = { 0x2B1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_023)
{
    // 112C6 003F;	
    // (ëãÜ) KHUDAWADI LETTER TTA	[2B1E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C6, 0x003F };
    uint32_t const ces[9] = { 0x2B1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_024)
{
    // 112C6 0061;	
    // (ëãÜ) KHUDAWADI LETTER TTA	[2B1E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C6, 0x0061 };
    uint32_t const ces[9] = { 0x2B1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_025)
{
    // 112C6 0041;	
    // (ëãÜ) KHUDAWADI LETTER TTA	[2B1E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112C6, 0x0041 };
    uint32_t const ces[9] = { 0x2B1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_026)
{
    // 112C6 0062;	
    // (ëãÜ) KHUDAWADI LETTER TTA	[2B1E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C6, 0x0062 };
    uint32_t const ces[9] = { 0x2B1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_027)
{
    // 112C7 0021;	
    // (ëãá) KHUDAWADI LETTER TTHA	[2B1F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C7, 0x0021 };
    uint32_t const ces[9] = { 0x2B1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_028)
{
    // 112C7 003F;	
    // (ëãá) KHUDAWADI LETTER TTHA	[2B1F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C7, 0x003F };
    uint32_t const ces[9] = { 0x2B1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_029)
{
    // 112C7 0061;	
    // (ëãá) KHUDAWADI LETTER TTHA	[2B1F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C7, 0x0061 };
    uint32_t const ces[9] = { 0x2B1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_030)
{
    // 112C7 0041;	
    // (ëãá) KHUDAWADI LETTER TTHA	[2B1F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112C7, 0x0041 };
    uint32_t const ces[9] = { 0x2B1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_031)
{
    // 112C7 0062;	
    // (ëãá) KHUDAWADI LETTER TTHA	[2B1F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C7, 0x0062 };
    uint32_t const ces[9] = { 0x2B1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_032)
{
    // 112C8 0021;	
    // (ëãà) KHUDAWADI LETTER DDA	[2B20 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C8, 0x0021 };
    uint32_t const ces[9] = { 0x2B20, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_033)
{
    // 112C8 003F;	
    // (ëãà) KHUDAWADI LETTER DDA	[2B20 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C8, 0x003F };
    uint32_t const ces[9] = { 0x2B20, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_034)
{
    // 112C8 0061;	
    // (ëãà) KHUDAWADI LETTER DDA	[2B20 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C8, 0x0061 };
    uint32_t const ces[9] = { 0x2B20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_035)
{
    // 112C8 0041;	
    // (ëãà) KHUDAWADI LETTER DDA	[2B20 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112C8, 0x0041 };
    uint32_t const ces[9] = { 0x2B20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_036)
{
    // 112C8 0062;	
    // (ëãà) KHUDAWADI LETTER DDA	[2B20 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C8, 0x0062 };
    uint32_t const ces[9] = { 0x2B20, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_037)
{
    // 112C9 0021;	
    // (ëãâ) KHUDAWADI LETTER DDDA	[2B21 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C9, 0x0021 };
    uint32_t const ces[9] = { 0x2B21, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_038)
{
    // 112C9 003F;	
    // (ëãâ) KHUDAWADI LETTER DDDA	[2B21 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C9, 0x003F };
    uint32_t const ces[9] = { 0x2B21, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_039)
{
    // 112C9 0061;	
    // (ëãâ) KHUDAWADI LETTER DDDA	[2B21 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C9, 0x0061 };
    uint32_t const ces[9] = { 0x2B21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_040)
{
    // 112C9 0041;	
    // (ëãâ) KHUDAWADI LETTER DDDA	[2B21 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112C9, 0x0041 };
    uint32_t const ces[9] = { 0x2B21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_041)
{
    // 112C9 0062;	
    // (ëãâ) KHUDAWADI LETTER DDDA	[2B21 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112C9, 0x0062 };
    uint32_t const ces[9] = { 0x2B21, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_042)
{
    // 112CA 0021;	
    // (ëãä) KHUDAWADI LETTER RRA	[2B22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112CA, 0x0021 };
    uint32_t const ces[9] = { 0x2B22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_043)
{
    // 112CA 003F;	
    // (ëãä) KHUDAWADI LETTER RRA	[2B22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112CA, 0x003F };
    uint32_t const ces[9] = { 0x2B22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_044)
{
    // 112CA 0061;	
    // (ëãä) KHUDAWADI LETTER RRA	[2B22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112CA, 0x0061 };
    uint32_t const ces[9] = { 0x2B22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_045)
{
    // 112CA 0041;	
    // (ëãä) KHUDAWADI LETTER RRA	[2B22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112CA, 0x0041 };
    uint32_t const ces[9] = { 0x2B22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_046)
{
    // 112CA 0062;	
    // (ëãä) KHUDAWADI LETTER RRA	[2B22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112CA, 0x0062 };
    uint32_t const ces[9] = { 0x2B22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_047)
{
    // 112CB 0021;	
    // (ëãã) KHUDAWADI LETTER DDHA	[2B23 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112CB, 0x0021 };
    uint32_t const ces[9] = { 0x2B23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_048)
{
    // 112CB 003F;	
    // (ëãã) KHUDAWADI LETTER DDHA	[2B23 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112CB, 0x003F };
    uint32_t const ces[9] = { 0x2B23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_049)
{
    // 112CB 0061;	
    // (ëãã) KHUDAWADI LETTER DDHA	[2B23 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112CB, 0x0061 };
    uint32_t const ces[9] = { 0x2B23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_050)
{
    // 112CB 0041;	
    // (ëãã) KHUDAWADI LETTER DDHA	[2B23 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112CB, 0x0041 };
    uint32_t const ces[9] = { 0x2B23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_051)
{
    // 112CB 0062;	
    // (ëãã) KHUDAWADI LETTER DDHA	[2B23 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112CB, 0x0062 };
    uint32_t const ces[9] = { 0x2B23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_052)
{
    // 112CC 0021;	
    // (ëãå) KHUDAWADI LETTER NNA	[2B24 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112CC, 0x0021 };
    uint32_t const ces[9] = { 0x2B24, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_053)
{
    // 112CC 003F;	
    // (ëãå) KHUDAWADI LETTER NNA	[2B24 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112CC, 0x003F };
    uint32_t const ces[9] = { 0x2B24, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_054)
{
    // 112CC 0061;	
    // (ëãå) KHUDAWADI LETTER NNA	[2B24 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112CC, 0x0061 };
    uint32_t const ces[9] = { 0x2B24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_055)
{
    // 112CC 0041;	
    // (ëãå) KHUDAWADI LETTER NNA	[2B24 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112CC, 0x0041 };
    uint32_t const ces[9] = { 0x2B24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_056)
{
    // 112CC 0062;	
    // (ëãå) KHUDAWADI LETTER NNA	[2B24 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112CC, 0x0062 };
    uint32_t const ces[9] = { 0x2B24, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_057)
{
    // 112CD 0021;	
    // (ëãç) KHUDAWADI LETTER TA	[2B25 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112CD, 0x0021 };
    uint32_t const ces[9] = { 0x2B25, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_058)
{
    // 112CD 003F;	
    // (ëãç) KHUDAWADI LETTER TA	[2B25 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112CD, 0x003F };
    uint32_t const ces[9] = { 0x2B25, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_059)
{
    // 112CD 0061;	
    // (ëãç) KHUDAWADI LETTER TA	[2B25 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112CD, 0x0061 };
    uint32_t const ces[9] = { 0x2B25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_060)
{
    // 112CD 0041;	
    // (ëãç) KHUDAWADI LETTER TA	[2B25 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112CD, 0x0041 };
    uint32_t const ces[9] = { 0x2B25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_061)
{
    // 112CD 0062;	
    // (ëãç) KHUDAWADI LETTER TA	[2B25 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112CD, 0x0062 };
    uint32_t const ces[9] = { 0x2B25, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_062)
{
    // 112CE 0021;	
    // (ëãé) KHUDAWADI LETTER THA	[2B26 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112CE, 0x0021 };
    uint32_t const ces[9] = { 0x2B26, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_063)
{
    // 112CE 003F;	
    // (ëãé) KHUDAWADI LETTER THA	[2B26 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112CE, 0x003F };
    uint32_t const ces[9] = { 0x2B26, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_064)
{
    // 112CE 0061;	
    // (ëãé) KHUDAWADI LETTER THA	[2B26 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112CE, 0x0061 };
    uint32_t const ces[9] = { 0x2B26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_065)
{
    // 112CE 0041;	
    // (ëãé) KHUDAWADI LETTER THA	[2B26 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112CE, 0x0041 };
    uint32_t const ces[9] = { 0x2B26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_066)
{
    // 112CE 0062;	
    // (ëãé) KHUDAWADI LETTER THA	[2B26 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112CE, 0x0062 };
    uint32_t const ces[9] = { 0x2B26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_067)
{
    // 112CF 0021;	
    // (ëãè) KHUDAWADI LETTER DA	[2B27 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112CF, 0x0021 };
    uint32_t const ces[9] = { 0x2B27, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_068)
{
    // 112CF 003F;	
    // (ëãè) KHUDAWADI LETTER DA	[2B27 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112CF, 0x003F };
    uint32_t const ces[9] = { 0x2B27, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_069)
{
    // 112CF 0061;	
    // (ëãè) KHUDAWADI LETTER DA	[2B27 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112CF, 0x0061 };
    uint32_t const ces[9] = { 0x2B27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_070)
{
    // 112CF 0041;	
    // (ëãè) KHUDAWADI LETTER DA	[2B27 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112CF, 0x0041 };
    uint32_t const ces[9] = { 0x2B27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_071)
{
    // 112CF 0062;	
    // (ëãè) KHUDAWADI LETTER DA	[2B27 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112CF, 0x0062 };
    uint32_t const ces[9] = { 0x2B27, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_072)
{
    // 112D0 0021;	
    // (ëãê) KHUDAWADI LETTER DHA	[2B28 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D0, 0x0021 };
    uint32_t const ces[9] = { 0x2B28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_073)
{
    // 112D0 003F;	
    // (ëãê) KHUDAWADI LETTER DHA	[2B28 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D0, 0x003F };
    uint32_t const ces[9] = { 0x2B28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_074)
{
    // 112D0 0061;	
    // (ëãê) KHUDAWADI LETTER DHA	[2B28 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D0, 0x0061 };
    uint32_t const ces[9] = { 0x2B28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_075)
{
    // 112D0 0041;	
    // (ëãê) KHUDAWADI LETTER DHA	[2B28 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112D0, 0x0041 };
    uint32_t const ces[9] = { 0x2B28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_076)
{
    // 112D0 0062;	
    // (ëãê) KHUDAWADI LETTER DHA	[2B28 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D0, 0x0062 };
    uint32_t const ces[9] = { 0x2B28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_077)
{
    // 112D1 0021;	
    // (ëãë) KHUDAWADI LETTER NA	[2B29 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D1, 0x0021 };
    uint32_t const ces[9] = { 0x2B29, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_078)
{
    // 112D1 003F;	
    // (ëãë) KHUDAWADI LETTER NA	[2B29 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D1, 0x003F };
    uint32_t const ces[9] = { 0x2B29, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_079)
{
    // 112D1 0061;	
    // (ëãë) KHUDAWADI LETTER NA	[2B29 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D1, 0x0061 };
    uint32_t const ces[9] = { 0x2B29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_080)
{
    // 112D1 0041;	
    // (ëãë) KHUDAWADI LETTER NA	[2B29 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112D1, 0x0041 };
    uint32_t const ces[9] = { 0x2B29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_081)
{
    // 112D1 0062;	
    // (ëãë) KHUDAWADI LETTER NA	[2B29 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D1, 0x0062 };
    uint32_t const ces[9] = { 0x2B29, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_082)
{
    // 112D2 0021;	
    // (ëãí) KHUDAWADI LETTER PA	[2B2A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D2, 0x0021 };
    uint32_t const ces[9] = { 0x2B2A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_083)
{
    // 112D2 003F;	
    // (ëãí) KHUDAWADI LETTER PA	[2B2A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D2, 0x003F };
    uint32_t const ces[9] = { 0x2B2A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_084)
{
    // 112D2 0061;	
    // (ëãí) KHUDAWADI LETTER PA	[2B2A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D2, 0x0061 };
    uint32_t const ces[9] = { 0x2B2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_085)
{
    // 112D2 0041;	
    // (ëãí) KHUDAWADI LETTER PA	[2B2A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112D2, 0x0041 };
    uint32_t const ces[9] = { 0x2B2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_086)
{
    // 112D2 0062;	
    // (ëãí) KHUDAWADI LETTER PA	[2B2A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D2, 0x0062 };
    uint32_t const ces[9] = { 0x2B2A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_087)
{
    // 112D3 0021;	
    // (ëãì) KHUDAWADI LETTER PHA	[2B2B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D3, 0x0021 };
    uint32_t const ces[9] = { 0x2B2B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_088)
{
    // 112D3 003F;	
    // (ëãì) KHUDAWADI LETTER PHA	[2B2B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D3, 0x003F };
    uint32_t const ces[9] = { 0x2B2B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_089)
{
    // 112D3 0061;	
    // (ëãì) KHUDAWADI LETTER PHA	[2B2B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D3, 0x0061 };
    uint32_t const ces[9] = { 0x2B2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_090)
{
    // 112D3 0041;	
    // (ëãì) KHUDAWADI LETTER PHA	[2B2B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112D3, 0x0041 };
    uint32_t const ces[9] = { 0x2B2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_091)
{
    // 112D3 0062;	
    // (ëãì) KHUDAWADI LETTER PHA	[2B2B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D3, 0x0062 };
    uint32_t const ces[9] = { 0x2B2B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_092)
{
    // 112D4 0021;	
    // (ëãî) KHUDAWADI LETTER BA	[2B2C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D4, 0x0021 };
    uint32_t const ces[9] = { 0x2B2C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_093)
{
    // 112D4 003F;	
    // (ëãî) KHUDAWADI LETTER BA	[2B2C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D4, 0x003F };
    uint32_t const ces[9] = { 0x2B2C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_094)
{
    // 112D4 0061;	
    // (ëãî) KHUDAWADI LETTER BA	[2B2C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D4, 0x0061 };
    uint32_t const ces[9] = { 0x2B2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_095)
{
    // 112D4 0041;	
    // (ëãî) KHUDAWADI LETTER BA	[2B2C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112D4, 0x0041 };
    uint32_t const ces[9] = { 0x2B2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_096)
{
    // 112D4 0062;	
    // (ëãî) KHUDAWADI LETTER BA	[2B2C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D4, 0x0062 };
    uint32_t const ces[9] = { 0x2B2C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_097)
{
    // 112D5 0021;	
    // (ëãï) KHUDAWADI LETTER BBA	[2B2D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D5, 0x0021 };
    uint32_t const ces[9] = { 0x2B2D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_098)
{
    // 112D5 003F;	
    // (ëãï) KHUDAWADI LETTER BBA	[2B2D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D5, 0x003F };
    uint32_t const ces[9] = { 0x2B2D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_099)
{
    // 112D5 0061;	
    // (ëãï) KHUDAWADI LETTER BBA	[2B2D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D5, 0x0061 };
    uint32_t const ces[9] = { 0x2B2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_100)
{
    // 112D5 0041;	
    // (ëãï) KHUDAWADI LETTER BBA	[2B2D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112D5, 0x0041 };
    uint32_t const ces[9] = { 0x2B2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_101)
{
    // 112D5 0062;	
    // (ëãï) KHUDAWADI LETTER BBA	[2B2D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D5, 0x0062 };
    uint32_t const ces[9] = { 0x2B2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_102)
{
    // 112D6 0021;	
    // (ëãñ) KHUDAWADI LETTER BHA	[2B2E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D6, 0x0021 };
    uint32_t const ces[9] = { 0x2B2E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_103)
{
    // 112D6 003F;	
    // (ëãñ) KHUDAWADI LETTER BHA	[2B2E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D6, 0x003F };
    uint32_t const ces[9] = { 0x2B2E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_104)
{
    // 112D6 0061;	
    // (ëãñ) KHUDAWADI LETTER BHA	[2B2E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D6, 0x0061 };
    uint32_t const ces[9] = { 0x2B2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_105)
{
    // 112D6 0041;	
    // (ëãñ) KHUDAWADI LETTER BHA	[2B2E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112D6, 0x0041 };
    uint32_t const ces[9] = { 0x2B2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_106)
{
    // 112D6 0062;	
    // (ëãñ) KHUDAWADI LETTER BHA	[2B2E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D6, 0x0062 };
    uint32_t const ces[9] = { 0x2B2E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_107)
{
    // 112D7 0021;	
    // (ëãó) KHUDAWADI LETTER MA	[2B2F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D7, 0x0021 };
    uint32_t const ces[9] = { 0x2B2F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_108)
{
    // 112D7 003F;	
    // (ëãó) KHUDAWADI LETTER MA	[2B2F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D7, 0x003F };
    uint32_t const ces[9] = { 0x2B2F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_109)
{
    // 112D7 0061;	
    // (ëãó) KHUDAWADI LETTER MA	[2B2F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D7, 0x0061 };
    uint32_t const ces[9] = { 0x2B2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_110)
{
    // 112D7 0041;	
    // (ëãó) KHUDAWADI LETTER MA	[2B2F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112D7, 0x0041 };
    uint32_t const ces[9] = { 0x2B2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_111)
{
    // 112D7 0062;	
    // (ëãó) KHUDAWADI LETTER MA	[2B2F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D7, 0x0062 };
    uint32_t const ces[9] = { 0x2B2F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_112)
{
    // 112D8 0021;	
    // (ëãò) KHUDAWADI LETTER YA	[2B30 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D8, 0x0021 };
    uint32_t const ces[9] = { 0x2B30, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_113)
{
    // 112D8 003F;	
    // (ëãò) KHUDAWADI LETTER YA	[2B30 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D8, 0x003F };
    uint32_t const ces[9] = { 0x2B30, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_114)
{
    // 112D8 0061;	
    // (ëãò) KHUDAWADI LETTER YA	[2B30 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D8, 0x0061 };
    uint32_t const ces[9] = { 0x2B30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_115)
{
    // 112D8 0041;	
    // (ëãò) KHUDAWADI LETTER YA	[2B30 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112D8, 0x0041 };
    uint32_t const ces[9] = { 0x2B30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_116)
{
    // 112D8 0062;	
    // (ëãò) KHUDAWADI LETTER YA	[2B30 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D8, 0x0062 };
    uint32_t const ces[9] = { 0x2B30, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_117)
{
    // 112D9 0021;	
    // (ëãô) KHUDAWADI LETTER RA	[2B31 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D9, 0x0021 };
    uint32_t const ces[9] = { 0x2B31, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_118)
{
    // 112D9 003F;	
    // (ëãô) KHUDAWADI LETTER RA	[2B31 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D9, 0x003F };
    uint32_t const ces[9] = { 0x2B31, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_119)
{
    // 112D9 0061;	
    // (ëãô) KHUDAWADI LETTER RA	[2B31 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D9, 0x0061 };
    uint32_t const ces[9] = { 0x2B31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_120)
{
    // 112D9 0041;	
    // (ëãô) KHUDAWADI LETTER RA	[2B31 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112D9, 0x0041 };
    uint32_t const ces[9] = { 0x2B31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_121)
{
    // 112D9 0062;	
    // (ëãô) KHUDAWADI LETTER RA	[2B31 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112D9, 0x0062 };
    uint32_t const ces[9] = { 0x2B31, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_122)
{
    // 112DA 0021;	
    // (ëãö) KHUDAWADI LETTER LA	[2B32 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112DA, 0x0021 };
    uint32_t const ces[9] = { 0x2B32, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_123)
{
    // 112DA 003F;	
    // (ëãö) KHUDAWADI LETTER LA	[2B32 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112DA, 0x003F };
    uint32_t const ces[9] = { 0x2B32, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_124)
{
    // 112DA 0061;	
    // (ëãö) KHUDAWADI LETTER LA	[2B32 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112DA, 0x0061 };
    uint32_t const ces[9] = { 0x2B32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_125)
{
    // 112DA 0041;	
    // (ëãö) KHUDAWADI LETTER LA	[2B32 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112DA, 0x0041 };
    uint32_t const ces[9] = { 0x2B32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_126)
{
    // 112DA 0062;	
    // (ëãö) KHUDAWADI LETTER LA	[2B32 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112DA, 0x0062 };
    uint32_t const ces[9] = { 0x2B32, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_127)
{
    // 112DB 0021;	
    // (ëãõ) KHUDAWADI LETTER VA	[2B33 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112DB, 0x0021 };
    uint32_t const ces[9] = { 0x2B33, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_128)
{
    // 112DB 003F;	
    // (ëãõ) KHUDAWADI LETTER VA	[2B33 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112DB, 0x003F };
    uint32_t const ces[9] = { 0x2B33, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_129)
{
    // 112DB 0061;	
    // (ëãõ) KHUDAWADI LETTER VA	[2B33 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112DB, 0x0061 };
    uint32_t const ces[9] = { 0x2B33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_130)
{
    // 112DB 0041;	
    // (ëãõ) KHUDAWADI LETTER VA	[2B33 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112DB, 0x0041 };
    uint32_t const ces[9] = { 0x2B33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_131)
{
    // 112DB 0062;	
    // (ëãõ) KHUDAWADI LETTER VA	[2B33 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112DB, 0x0062 };
    uint32_t const ces[9] = { 0x2B33, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_132)
{
    // 112DC 0021;	
    // (ëãú) KHUDAWADI LETTER SHA	[2B34 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112DC, 0x0021 };
    uint32_t const ces[9] = { 0x2B34, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_133)
{
    // 112DC 003F;	
    // (ëãú) KHUDAWADI LETTER SHA	[2B34 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112DC, 0x003F };
    uint32_t const ces[9] = { 0x2B34, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_134)
{
    // 112DC 0061;	
    // (ëãú) KHUDAWADI LETTER SHA	[2B34 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112DC, 0x0061 };
    uint32_t const ces[9] = { 0x2B34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_135)
{
    // 112DC 0041;	
    // (ëãú) KHUDAWADI LETTER SHA	[2B34 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112DC, 0x0041 };
    uint32_t const ces[9] = { 0x2B34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_136)
{
    // 112DC 0062;	
    // (ëãú) KHUDAWADI LETTER SHA	[2B34 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112DC, 0x0062 };
    uint32_t const ces[9] = { 0x2B34, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_137)
{
    // 112DD 0021;	
    // (ëãù) KHUDAWADI LETTER SA	[2B35 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112DD, 0x0021 };
    uint32_t const ces[9] = { 0x2B35, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_138)
{
    // 112DD 003F;	
    // (ëãù) KHUDAWADI LETTER SA	[2B35 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112DD, 0x003F };
    uint32_t const ces[9] = { 0x2B35, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_139)
{
    // 112DD 0061;	
    // (ëãù) KHUDAWADI LETTER SA	[2B35 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112DD, 0x0061 };
    uint32_t const ces[9] = { 0x2B35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_140)
{
    // 112DD 0041;	
    // (ëãù) KHUDAWADI LETTER SA	[2B35 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112DD, 0x0041 };
    uint32_t const ces[9] = { 0x2B35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_141)
{
    // 112DD 0062;	
    // (ëãù) KHUDAWADI LETTER SA	[2B35 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112DD, 0x0062 };
    uint32_t const ces[9] = { 0x2B35, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_142)
{
    // 112DE 0021;	
    // (ëãû) KHUDAWADI LETTER HA	[2B36 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112DE, 0x0021 };
    uint32_t const ces[9] = { 0x2B36, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_143)
{
    // 112DE 003F;	
    // (ëãû) KHUDAWADI LETTER HA	[2B36 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112DE, 0x003F };
    uint32_t const ces[9] = { 0x2B36, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_144)
{
    // 112DE 0061;	
    // (ëãû) KHUDAWADI LETTER HA	[2B36 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112DE, 0x0061 };
    uint32_t const ces[9] = { 0x2B36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_145)
{
    // 112DE 0041;	
    // (ëãû) KHUDAWADI LETTER HA	[2B36 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112DE, 0x0041 };
    uint32_t const ces[9] = { 0x2B36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_146)
{
    // 112DE 0062;	
    // (ëãû) KHUDAWADI LETTER HA	[2B36 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112DE, 0x0062 };
    uint32_t const ces[9] = { 0x2B36, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_147)
{
    // 112E0 0021;	
    // (ëã†) KHUDAWADI VOWEL SIGN AA	[2B37 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E0, 0x0021 };
    uint32_t const ces[9] = { 0x2B37, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_148)
{
    // 112E0 003F;	
    // (ëã†) KHUDAWADI VOWEL SIGN AA	[2B37 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E0, 0x003F };
    uint32_t const ces[9] = { 0x2B37, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_149)
{
    // 112E0 0061;	
    // (ëã†) KHUDAWADI VOWEL SIGN AA	[2B37 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E0, 0x0061 };
    uint32_t const ces[9] = { 0x2B37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_150)
{
    // 112E0 0041;	
    // (ëã†) KHUDAWADI VOWEL SIGN AA	[2B37 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112E0, 0x0041 };
    uint32_t const ces[9] = { 0x2B37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_151)
{
    // 112E0 0062;	
    // (ëã†) KHUDAWADI VOWEL SIGN AA	[2B37 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E0, 0x0062 };
    uint32_t const ces[9] = { 0x2B37, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_152)
{
    // 112E1 0021;	
    // (ëã°) KHUDAWADI VOWEL SIGN I	[2B38 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E1, 0x0021 };
    uint32_t const ces[9] = { 0x2B38, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_153)
{
    // 112E1 003F;	
    // (ëã°) KHUDAWADI VOWEL SIGN I	[2B38 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E1, 0x003F };
    uint32_t const ces[9] = { 0x2B38, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_154)
{
    // 112E1 0061;	
    // (ëã°) KHUDAWADI VOWEL SIGN I	[2B38 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E1, 0x0061 };
    uint32_t const ces[9] = { 0x2B38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_155)
{
    // 112E1 0041;	
    // (ëã°) KHUDAWADI VOWEL SIGN I	[2B38 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112E1, 0x0041 };
    uint32_t const ces[9] = { 0x2B38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_156)
{
    // 112E1 0062;	
    // (ëã°) KHUDAWADI VOWEL SIGN I	[2B38 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E1, 0x0062 };
    uint32_t const ces[9] = { 0x2B38, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_157)
{
    // 112E2 0021;	
    // (ëã¢) KHUDAWADI VOWEL SIGN II	[2B39 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E2, 0x0021 };
    uint32_t const ces[9] = { 0x2B39, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_158)
{
    // 112E2 003F;	
    // (ëã¢) KHUDAWADI VOWEL SIGN II	[2B39 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E2, 0x003F };
    uint32_t const ces[9] = { 0x2B39, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_159)
{
    // 112E2 0061;	
    // (ëã¢) KHUDAWADI VOWEL SIGN II	[2B39 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E2, 0x0061 };
    uint32_t const ces[9] = { 0x2B39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_160)
{
    // 112E2 0041;	
    // (ëã¢) KHUDAWADI VOWEL SIGN II	[2B39 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112E2, 0x0041 };
    uint32_t const ces[9] = { 0x2B39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_161)
{
    // 112E2 0062;	
    // (ëã¢) KHUDAWADI VOWEL SIGN II	[2B39 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E2, 0x0062 };
    uint32_t const ces[9] = { 0x2B39, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_162)
{
    // 112E3 0021;	
    // (ëã£) KHUDAWADI VOWEL SIGN U	[2B3A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E3, 0x0021 };
    uint32_t const ces[9] = { 0x2B3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_163)
{
    // 112E3 003F;	
    // (ëã£) KHUDAWADI VOWEL SIGN U	[2B3A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E3, 0x003F };
    uint32_t const ces[9] = { 0x2B3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_164)
{
    // 112E3 0061;	
    // (ëã£) KHUDAWADI VOWEL SIGN U	[2B3A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E3, 0x0061 };
    uint32_t const ces[9] = { 0x2B3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_165)
{
    // 112E3 0041;	
    // (ëã£) KHUDAWADI VOWEL SIGN U	[2B3A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112E3, 0x0041 };
    uint32_t const ces[9] = { 0x2B3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_166)
{
    // 112E3 0062;	
    // (ëã£) KHUDAWADI VOWEL SIGN U	[2B3A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E3, 0x0062 };
    uint32_t const ces[9] = { 0x2B3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_167)
{
    // 112E4 0021;	
    // (ëã§) KHUDAWADI VOWEL SIGN UU	[2B3B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E4, 0x0021 };
    uint32_t const ces[9] = { 0x2B3B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_168)
{
    // 112E4 003F;	
    // (ëã§) KHUDAWADI VOWEL SIGN UU	[2B3B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E4, 0x003F };
    uint32_t const ces[9] = { 0x2B3B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_169)
{
    // 112E4 0061;	
    // (ëã§) KHUDAWADI VOWEL SIGN UU	[2B3B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E4, 0x0061 };
    uint32_t const ces[9] = { 0x2B3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_170)
{
    // 112E4 0041;	
    // (ëã§) KHUDAWADI VOWEL SIGN UU	[2B3B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112E4, 0x0041 };
    uint32_t const ces[9] = { 0x2B3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_171)
{
    // 112E4 0062;	
    // (ëã§) KHUDAWADI VOWEL SIGN UU	[2B3B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E4, 0x0062 };
    uint32_t const ces[9] = { 0x2B3B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_172)
{
    // 112E5 0021;	
    // (ëã•) KHUDAWADI VOWEL SIGN E	[2B3C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E5, 0x0021 };
    uint32_t const ces[9] = { 0x2B3C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_173)
{
    // 112E5 003F;	
    // (ëã•) KHUDAWADI VOWEL SIGN E	[2B3C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E5, 0x003F };
    uint32_t const ces[9] = { 0x2B3C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_174)
{
    // 112E5 0061;	
    // (ëã•) KHUDAWADI VOWEL SIGN E	[2B3C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E5, 0x0061 };
    uint32_t const ces[9] = { 0x2B3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_175)
{
    // 112E5 0041;	
    // (ëã•) KHUDAWADI VOWEL SIGN E	[2B3C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112E5, 0x0041 };
    uint32_t const ces[9] = { 0x2B3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_176)
{
    // 112E5 0062;	
    // (ëã•) KHUDAWADI VOWEL SIGN E	[2B3C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E5, 0x0062 };
    uint32_t const ces[9] = { 0x2B3C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_177)
{
    // 112E6 0021;	
    // (ëã¶) KHUDAWADI VOWEL SIGN AI	[2B3D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E6, 0x0021 };
    uint32_t const ces[9] = { 0x2B3D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_178)
{
    // 112E6 003F;	
    // (ëã¶) KHUDAWADI VOWEL SIGN AI	[2B3D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E6, 0x003F };
    uint32_t const ces[9] = { 0x2B3D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_179)
{
    // 112E6 0061;	
    // (ëã¶) KHUDAWADI VOWEL SIGN AI	[2B3D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E6, 0x0061 };
    uint32_t const ces[9] = { 0x2B3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_180)
{
    // 112E6 0041;	
    // (ëã¶) KHUDAWADI VOWEL SIGN AI	[2B3D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112E6, 0x0041 };
    uint32_t const ces[9] = { 0x2B3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_181)
{
    // 112E6 0062;	
    // (ëã¶) KHUDAWADI VOWEL SIGN AI	[2B3D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E6, 0x0062 };
    uint32_t const ces[9] = { 0x2B3D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_182)
{
    // 112E7 0021;	
    // (ëãß) KHUDAWADI VOWEL SIGN O	[2B3E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E7, 0x0021 };
    uint32_t const ces[9] = { 0x2B3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_183)
{
    // 112E7 003F;	
    // (ëãß) KHUDAWADI VOWEL SIGN O	[2B3E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E7, 0x003F };
    uint32_t const ces[9] = { 0x2B3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_184)
{
    // 112E7 0061;	
    // (ëãß) KHUDAWADI VOWEL SIGN O	[2B3E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E7, 0x0061 };
    uint32_t const ces[9] = { 0x2B3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_185)
{
    // 112E7 0041;	
    // (ëãß) KHUDAWADI VOWEL SIGN O	[2B3E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112E7, 0x0041 };
    uint32_t const ces[9] = { 0x2B3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_186)
{
    // 112E7 0062;	
    // (ëãß) KHUDAWADI VOWEL SIGN O	[2B3E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E7, 0x0062 };
    uint32_t const ces[9] = { 0x2B3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_187)
{
    // 112E8 0021;	
    // (ëã®) KHUDAWADI VOWEL SIGN AU	[2B3F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E8, 0x0021 };
    uint32_t const ces[9] = { 0x2B3F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_188)
{
    // 112E8 003F;	
    // (ëã®) KHUDAWADI VOWEL SIGN AU	[2B3F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E8, 0x003F };
    uint32_t const ces[9] = { 0x2B3F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_189)
{
    // 112E8 0061;	
    // (ëã®) KHUDAWADI VOWEL SIGN AU	[2B3F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E8, 0x0061 };
    uint32_t const ces[9] = { 0x2B3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_190)
{
    // 112E8 0041;	
    // (ëã®) KHUDAWADI VOWEL SIGN AU	[2B3F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112E8, 0x0041 };
    uint32_t const ces[9] = { 0x2B3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_191)
{
    // 112E8 0062;	
    // (ëã®) KHUDAWADI VOWEL SIGN AU	[2B3F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E8, 0x0062 };
    uint32_t const ces[9] = { 0x2B3F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_192)
{
    // 0334 112EA;	
    // (ëã™) KHUDAWADI SIGN VIRAMA	[2B40 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x112EA };
    uint32_t const ces[8] = { 0x2B40, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_193)
{
    // 112EA 0334;	
    // (ëã™) KHUDAWADI SIGN VIRAMA	[2B40 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112EA, 0x0334 };
    uint32_t const ces[8] = { 0x2B40, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_194)
{
    // 112EA 0021;	
    // (ëã™) KHUDAWADI SIGN VIRAMA	[2B40 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112EA, 0x0021 };
    uint32_t const ces[9] = { 0x2B40, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_195)
{
    // 112EA 003F;	
    // (ëã™) KHUDAWADI SIGN VIRAMA	[2B40 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112EA, 0x003F };
    uint32_t const ces[9] = { 0x2B40, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_196)
{
    // 112EA 0061;	
    // (ëã™) KHUDAWADI SIGN VIRAMA	[2B40 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112EA, 0x0061 };
    uint32_t const ces[9] = { 0x2B40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_197)
{
    // 112EA 0041;	
    // (ëã™) KHUDAWADI SIGN VIRAMA	[2B40 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112EA, 0x0041 };
    uint32_t const ces[9] = { 0x2B40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_198)
{
    // 112EA 0062;	
    // (ëã™) KHUDAWADI SIGN VIRAMA	[2B40 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112EA, 0x0062 };
    uint32_t const ces[9] = { 0x2B40, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_199)
{
    // 11280 0021;	
    // (ëäÄ) MULTANI LETTER A	[2B41 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11280, 0x0021 };
    uint32_t const ces[9] = { 0x2B41, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_200)
{
    // 11280 003F;	
    // (ëäÄ) MULTANI LETTER A	[2B41 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11280, 0x003F };
    uint32_t const ces[9] = { 0x2B41, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_201)
{
    // 11280 0061;	
    // (ëäÄ) MULTANI LETTER A	[2B41 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11280, 0x0061 };
    uint32_t const ces[9] = { 0x2B41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_202)
{
    // 11280 0041;	
    // (ëäÄ) MULTANI LETTER A	[2B41 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11280, 0x0041 };
    uint32_t const ces[9] = { 0x2B41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_203)
{
    // 11280 0062;	
    // (ëäÄ) MULTANI LETTER A	[2B41 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11280, 0x0062 };
    uint32_t const ces[9] = { 0x2B41, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_204)
{
    // 11281 0021;	
    // (ëäÅ) MULTANI LETTER I	[2B42 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11281, 0x0021 };
    uint32_t const ces[9] = { 0x2B42, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_205)
{
    // 11281 003F;	
    // (ëäÅ) MULTANI LETTER I	[2B42 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11281, 0x003F };
    uint32_t const ces[9] = { 0x2B42, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_206)
{
    // 11281 0061;	
    // (ëäÅ) MULTANI LETTER I	[2B42 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11281, 0x0061 };
    uint32_t const ces[9] = { 0x2B42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_207)
{
    // 11281 0041;	
    // (ëäÅ) MULTANI LETTER I	[2B42 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11281, 0x0041 };
    uint32_t const ces[9] = { 0x2B42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_208)
{
    // 11281 0062;	
    // (ëäÅ) MULTANI LETTER I	[2B42 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11281, 0x0062 };
    uint32_t const ces[9] = { 0x2B42, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_209)
{
    // 11282 0021;	
    // (ëäÇ) MULTANI LETTER U	[2B43 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11282, 0x0021 };
    uint32_t const ces[9] = { 0x2B43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_210)
{
    // 11282 003F;	
    // (ëäÇ) MULTANI LETTER U	[2B43 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11282, 0x003F };
    uint32_t const ces[9] = { 0x2B43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_211)
{
    // 11282 0061;	
    // (ëäÇ) MULTANI LETTER U	[2B43 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11282, 0x0061 };
    uint32_t const ces[9] = { 0x2B43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_212)
{
    // 11282 0041;	
    // (ëäÇ) MULTANI LETTER U	[2B43 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11282, 0x0041 };
    uint32_t const ces[9] = { 0x2B43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_213)
{
    // 11282 0062;	
    // (ëäÇ) MULTANI LETTER U	[2B43 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11282, 0x0062 };
    uint32_t const ces[9] = { 0x2B43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_214)
{
    // 11283 0021;	
    // (ëäÉ) MULTANI LETTER E	[2B44 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11283, 0x0021 };
    uint32_t const ces[9] = { 0x2B44, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_215)
{
    // 11283 003F;	
    // (ëäÉ) MULTANI LETTER E	[2B44 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11283, 0x003F };
    uint32_t const ces[9] = { 0x2B44, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_216)
{
    // 11283 0061;	
    // (ëäÉ) MULTANI LETTER E	[2B44 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11283, 0x0061 };
    uint32_t const ces[9] = { 0x2B44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_217)
{
    // 11283 0041;	
    // (ëäÉ) MULTANI LETTER E	[2B44 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11283, 0x0041 };
    uint32_t const ces[9] = { 0x2B44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_218)
{
    // 11283 0062;	
    // (ëäÉ) MULTANI LETTER E	[2B44 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11283, 0x0062 };
    uint32_t const ces[9] = { 0x2B44, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_219)
{
    // 112A5 0021;	
    // (ëä•) MULTANI LETTER SA	[2B45 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A5, 0x0021 };
    uint32_t const ces[9] = { 0x2B45, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_220)
{
    // 112A5 003F;	
    // (ëä•) MULTANI LETTER SA	[2B45 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A5, 0x003F };
    uint32_t const ces[9] = { 0x2B45, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_221)
{
    // 112A5 0061;	
    // (ëä•) MULTANI LETTER SA	[2B45 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A5, 0x0061 };
    uint32_t const ces[9] = { 0x2B45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_222)
{
    // 112A5 0041;	
    // (ëä•) MULTANI LETTER SA	[2B45 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112A5, 0x0041 };
    uint32_t const ces[9] = { 0x2B45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_223)
{
    // 112A5 0062;	
    // (ëä•) MULTANI LETTER SA	[2B45 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A5, 0x0062 };
    uint32_t const ces[9] = { 0x2B45, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_224)
{
    // 112A6 0021;	
    // (ëä¶) MULTANI LETTER HA	[2B46 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A6, 0x0021 };
    uint32_t const ces[9] = { 0x2B46, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_225)
{
    // 112A6 003F;	
    // (ëä¶) MULTANI LETTER HA	[2B46 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A6, 0x003F };
    uint32_t const ces[9] = { 0x2B46, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_226)
{
    // 112A6 0061;	
    // (ëä¶) MULTANI LETTER HA	[2B46 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A6, 0x0061 };
    uint32_t const ces[9] = { 0x2B46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_227)
{
    // 112A6 0041;	
    // (ëä¶) MULTANI LETTER HA	[2B46 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112A6, 0x0041 };
    uint32_t const ces[9] = { 0x2B46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_228)
{
    // 112A6 0062;	
    // (ëä¶) MULTANI LETTER HA	[2B46 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A6, 0x0062 };
    uint32_t const ces[9] = { 0x2B46, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_229)
{
    // 11284 0021;	
    // (ëäÑ) MULTANI LETTER KA	[2B47 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11284, 0x0021 };
    uint32_t const ces[9] = { 0x2B47, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_230)
{
    // 11284 003F;	
    // (ëäÑ) MULTANI LETTER KA	[2B47 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11284, 0x003F };
    uint32_t const ces[9] = { 0x2B47, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_231)
{
    // 11284 0061;	
    // (ëäÑ) MULTANI LETTER KA	[2B47 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11284, 0x0061 };
    uint32_t const ces[9] = { 0x2B47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_232)
{
    // 11284 0041;	
    // (ëäÑ) MULTANI LETTER KA	[2B47 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11284, 0x0041 };
    uint32_t const ces[9] = { 0x2B47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_233)
{
    // 11284 0062;	
    // (ëäÑ) MULTANI LETTER KA	[2B47 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11284, 0x0062 };
    uint32_t const ces[9] = { 0x2B47, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_234)
{
    // 11285 0021;	
    // (ëäÖ) MULTANI LETTER KHA	[2B48 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11285, 0x0021 };
    uint32_t const ces[9] = { 0x2B48, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_235)
{
    // 11285 003F;	
    // (ëäÖ) MULTANI LETTER KHA	[2B48 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11285, 0x003F };
    uint32_t const ces[9] = { 0x2B48, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_236)
{
    // 11285 0061;	
    // (ëäÖ) MULTANI LETTER KHA	[2B48 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11285, 0x0061 };
    uint32_t const ces[9] = { 0x2B48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_237)
{
    // 11285 0041;	
    // (ëäÖ) MULTANI LETTER KHA	[2B48 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11285, 0x0041 };
    uint32_t const ces[9] = { 0x2B48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_238)
{
    // 11285 0062;	
    // (ëäÖ) MULTANI LETTER KHA	[2B48 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11285, 0x0062 };
    uint32_t const ces[9] = { 0x2B48, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_239)
{
    // 11286 0021;	
    // (ëäÜ) MULTANI LETTER GA	[2B49 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11286, 0x0021 };
    uint32_t const ces[9] = { 0x2B49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_240)
{
    // 11286 003F;	
    // (ëäÜ) MULTANI LETTER GA	[2B49 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11286, 0x003F };
    uint32_t const ces[9] = { 0x2B49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_241)
{
    // 11286 0061;	
    // (ëäÜ) MULTANI LETTER GA	[2B49 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11286, 0x0061 };
    uint32_t const ces[9] = { 0x2B49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_242)
{
    // 11286 0041;	
    // (ëäÜ) MULTANI LETTER GA	[2B49 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11286, 0x0041 };
    uint32_t const ces[9] = { 0x2B49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_243)
{
    // 11286 0062;	
    // (ëäÜ) MULTANI LETTER GA	[2B49 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11286, 0x0062 };
    uint32_t const ces[9] = { 0x2B49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_244)
{
    // 11288 0021;	
    // (ëäà) MULTANI LETTER GHA	[2B4A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11288, 0x0021 };
    uint32_t const ces[9] = { 0x2B4A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_245)
{
    // 11288 003F;	
    // (ëäà) MULTANI LETTER GHA	[2B4A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11288, 0x003F };
    uint32_t const ces[9] = { 0x2B4A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_246)
{
    // 11288 0061;	
    // (ëäà) MULTANI LETTER GHA	[2B4A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11288, 0x0061 };
    uint32_t const ces[9] = { 0x2B4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_247)
{
    // 11288 0041;	
    // (ëäà) MULTANI LETTER GHA	[2B4A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11288, 0x0041 };
    uint32_t const ces[9] = { 0x2B4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_248)
{
    // 11288 0062;	
    // (ëäà) MULTANI LETTER GHA	[2B4A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11288, 0x0062 };
    uint32_t const ces[9] = { 0x2B4A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_249)
{
    // 1128A 0021;	
    // (ëää) MULTANI LETTER CA	[2B4B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1128A, 0x0021 };
    uint32_t const ces[9] = { 0x2B4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_250)
{
    // 1128A 003F;	
    // (ëää) MULTANI LETTER CA	[2B4B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1128A, 0x003F };
    uint32_t const ces[9] = { 0x2B4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_251)
{
    // 1128A 0061;	
    // (ëää) MULTANI LETTER CA	[2B4B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1128A, 0x0061 };
    uint32_t const ces[9] = { 0x2B4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_252)
{
    // 1128A 0041;	
    // (ëää) MULTANI LETTER CA	[2B4B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1128A, 0x0041 };
    uint32_t const ces[9] = { 0x2B4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_253)
{
    // 1128A 0062;	
    // (ëää) MULTANI LETTER CA	[2B4B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1128A, 0x0062 };
    uint32_t const ces[9] = { 0x2B4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_254)
{
    // 1128B 0021;	
    // (ëäã) MULTANI LETTER CHA	[2B4C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1128B, 0x0021 };
    uint32_t const ces[9] = { 0x2B4C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_255)
{
    // 1128B 003F;	
    // (ëäã) MULTANI LETTER CHA	[2B4C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1128B, 0x003F };
    uint32_t const ces[9] = { 0x2B4C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_256)
{
    // 1128B 0061;	
    // (ëäã) MULTANI LETTER CHA	[2B4C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1128B, 0x0061 };
    uint32_t const ces[9] = { 0x2B4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_257)
{
    // 1128B 0041;	
    // (ëäã) MULTANI LETTER CHA	[2B4C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1128B, 0x0041 };
    uint32_t const ces[9] = { 0x2B4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_258)
{
    // 1128B 0062;	
    // (ëäã) MULTANI LETTER CHA	[2B4C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1128B, 0x0062 };
    uint32_t const ces[9] = { 0x2B4C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_259)
{
    // 1128C 0021;	
    // (ëäå) MULTANI LETTER JA	[2B4D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1128C, 0x0021 };
    uint32_t const ces[9] = { 0x2B4D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_260)
{
    // 1128C 003F;	
    // (ëäå) MULTANI LETTER JA	[2B4D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1128C, 0x003F };
    uint32_t const ces[9] = { 0x2B4D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_261)
{
    // 1128C 0061;	
    // (ëäå) MULTANI LETTER JA	[2B4D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1128C, 0x0061 };
    uint32_t const ces[9] = { 0x2B4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_262)
{
    // 1128C 0041;	
    // (ëäå) MULTANI LETTER JA	[2B4D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1128C, 0x0041 };
    uint32_t const ces[9] = { 0x2B4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_263)
{
    // 1128C 0062;	
    // (ëäå) MULTANI LETTER JA	[2B4D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1128C, 0x0062 };
    uint32_t const ces[9] = { 0x2B4D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_264)
{
    // 1128D 0021;	
    // (ëäç) MULTANI LETTER JJA	[2B4E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1128D, 0x0021 };
    uint32_t const ces[9] = { 0x2B4E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_265)
{
    // 1128D 003F;	
    // (ëäç) MULTANI LETTER JJA	[2B4E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1128D, 0x003F };
    uint32_t const ces[9] = { 0x2B4E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_266)
{
    // 1128D 0061;	
    // (ëäç) MULTANI LETTER JJA	[2B4E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1128D, 0x0061 };
    uint32_t const ces[9] = { 0x2B4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_267)
{
    // 1128D 0041;	
    // (ëäç) MULTANI LETTER JJA	[2B4E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1128D, 0x0041 };
    uint32_t const ces[9] = { 0x2B4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_268)
{
    // 1128D 0062;	
    // (ëäç) MULTANI LETTER JJA	[2B4E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1128D, 0x0062 };
    uint32_t const ces[9] = { 0x2B4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_269)
{
    // 1128F 0021;	
    // (ëäè) MULTANI LETTER NYA	[2B4F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1128F, 0x0021 };
    uint32_t const ces[9] = { 0x2B4F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_270)
{
    // 1128F 003F;	
    // (ëäè) MULTANI LETTER NYA	[2B4F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1128F, 0x003F };
    uint32_t const ces[9] = { 0x2B4F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_271)
{
    // 1128F 0061;	
    // (ëäè) MULTANI LETTER NYA	[2B4F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1128F, 0x0061 };
    uint32_t const ces[9] = { 0x2B4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_272)
{
    // 1128F 0041;	
    // (ëäè) MULTANI LETTER NYA	[2B4F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1128F, 0x0041 };
    uint32_t const ces[9] = { 0x2B4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_273)
{
    // 1128F 0062;	
    // (ëäè) MULTANI LETTER NYA	[2B4F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1128F, 0x0062 };
    uint32_t const ces[9] = { 0x2B4F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_274)
{
    // 11290 0021;	
    // (ëäê) MULTANI LETTER TTA	[2B50 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11290, 0x0021 };
    uint32_t const ces[9] = { 0x2B50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_275)
{
    // 11290 003F;	
    // (ëäê) MULTANI LETTER TTA	[2B50 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11290, 0x003F };
    uint32_t const ces[9] = { 0x2B50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_276)
{
    // 11290 0061;	
    // (ëäê) MULTANI LETTER TTA	[2B50 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11290, 0x0061 };
    uint32_t const ces[9] = { 0x2B50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_277)
{
    // 11290 0041;	
    // (ëäê) MULTANI LETTER TTA	[2B50 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11290, 0x0041 };
    uint32_t const ces[9] = { 0x2B50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_278)
{
    // 11290 0062;	
    // (ëäê) MULTANI LETTER TTA	[2B50 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11290, 0x0062 };
    uint32_t const ces[9] = { 0x2B50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_279)
{
    // 11291 0021;	
    // (ëäë) MULTANI LETTER TTHA	[2B51 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11291, 0x0021 };
    uint32_t const ces[9] = { 0x2B51, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_280)
{
    // 11291 003F;	
    // (ëäë) MULTANI LETTER TTHA	[2B51 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11291, 0x003F };
    uint32_t const ces[9] = { 0x2B51, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_281)
{
    // 11291 0061;	
    // (ëäë) MULTANI LETTER TTHA	[2B51 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11291, 0x0061 };
    uint32_t const ces[9] = { 0x2B51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_282)
{
    // 11291 0041;	
    // (ëäë) MULTANI LETTER TTHA	[2B51 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11291, 0x0041 };
    uint32_t const ces[9] = { 0x2B51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_283)
{
    // 11291 0062;	
    // (ëäë) MULTANI LETTER TTHA	[2B51 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11291, 0x0062 };
    uint32_t const ces[9] = { 0x2B51, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_284)
{
    // 11292 0021;	
    // (ëäí) MULTANI LETTER DDA	[2B52 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11292, 0x0021 };
    uint32_t const ces[9] = { 0x2B52, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_285)
{
    // 11292 003F;	
    // (ëäí) MULTANI LETTER DDA	[2B52 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11292, 0x003F };
    uint32_t const ces[9] = { 0x2B52, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_286)
{
    // 11292 0061;	
    // (ëäí) MULTANI LETTER DDA	[2B52 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11292, 0x0061 };
    uint32_t const ces[9] = { 0x2B52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_287)
{
    // 11292 0041;	
    // (ëäí) MULTANI LETTER DDA	[2B52 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11292, 0x0041 };
    uint32_t const ces[9] = { 0x2B52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_288)
{
    // 11292 0062;	
    // (ëäí) MULTANI LETTER DDA	[2B52 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11292, 0x0062 };
    uint32_t const ces[9] = { 0x2B52, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_289)
{
    // 11293 0021;	
    // (ëäì) MULTANI LETTER DDDA	[2B53 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11293, 0x0021 };
    uint32_t const ces[9] = { 0x2B53, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_290)
{
    // 11293 003F;	
    // (ëäì) MULTANI LETTER DDDA	[2B53 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11293, 0x003F };
    uint32_t const ces[9] = { 0x2B53, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_291)
{
    // 11293 0061;	
    // (ëäì) MULTANI LETTER DDDA	[2B53 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11293, 0x0061 };
    uint32_t const ces[9] = { 0x2B53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_292)
{
    // 11293 0041;	
    // (ëäì) MULTANI LETTER DDDA	[2B53 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11293, 0x0041 };
    uint32_t const ces[9] = { 0x2B53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_293)
{
    // 11293 0062;	
    // (ëäì) MULTANI LETTER DDDA	[2B53 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11293, 0x0062 };
    uint32_t const ces[9] = { 0x2B53, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_294)
{
    // 11294 0021;	
    // (ëäî) MULTANI LETTER DDHA	[2B54 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11294, 0x0021 };
    uint32_t const ces[9] = { 0x2B54, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_295)
{
    // 11294 003F;	
    // (ëäî) MULTANI LETTER DDHA	[2B54 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11294, 0x003F };
    uint32_t const ces[9] = { 0x2B54, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_296)
{
    // 11294 0061;	
    // (ëäî) MULTANI LETTER DDHA	[2B54 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11294, 0x0061 };
    uint32_t const ces[9] = { 0x2B54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_297)
{
    // 11294 0041;	
    // (ëäî) MULTANI LETTER DDHA	[2B54 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11294, 0x0041 };
    uint32_t const ces[9] = { 0x2B54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_298)
{
    // 11294 0062;	
    // (ëäî) MULTANI LETTER DDHA	[2B54 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11294, 0x0062 };
    uint32_t const ces[9] = { 0x2B54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_299)
{
    // 11295 0021;	
    // (ëäï) MULTANI LETTER NNA	[2B55 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11295, 0x0021 };
    uint32_t const ces[9] = { 0x2B55, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_300)
{
    // 11295 003F;	
    // (ëäï) MULTANI LETTER NNA	[2B55 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11295, 0x003F };
    uint32_t const ces[9] = { 0x2B55, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_301)
{
    // 11295 0061;	
    // (ëäï) MULTANI LETTER NNA	[2B55 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11295, 0x0061 };
    uint32_t const ces[9] = { 0x2B55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_302)
{
    // 11295 0041;	
    // (ëäï) MULTANI LETTER NNA	[2B55 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11295, 0x0041 };
    uint32_t const ces[9] = { 0x2B55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_303)
{
    // 11295 0062;	
    // (ëäï) MULTANI LETTER NNA	[2B55 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11295, 0x0062 };
    uint32_t const ces[9] = { 0x2B55, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_304)
{
    // 11296 0021;	
    // (ëäñ) MULTANI LETTER TA	[2B56 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11296, 0x0021 };
    uint32_t const ces[9] = { 0x2B56, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_305)
{
    // 11296 003F;	
    // (ëäñ) MULTANI LETTER TA	[2B56 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11296, 0x003F };
    uint32_t const ces[9] = { 0x2B56, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_306)
{
    // 11296 0061;	
    // (ëäñ) MULTANI LETTER TA	[2B56 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11296, 0x0061 };
    uint32_t const ces[9] = { 0x2B56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_307)
{
    // 11296 0041;	
    // (ëäñ) MULTANI LETTER TA	[2B56 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11296, 0x0041 };
    uint32_t const ces[9] = { 0x2B56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_308)
{
    // 11296 0062;	
    // (ëäñ) MULTANI LETTER TA	[2B56 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11296, 0x0062 };
    uint32_t const ces[9] = { 0x2B56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_309)
{
    // 11297 0021;	
    // (ëäó) MULTANI LETTER THA	[2B57 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11297, 0x0021 };
    uint32_t const ces[9] = { 0x2B57, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_310)
{
    // 11297 003F;	
    // (ëäó) MULTANI LETTER THA	[2B57 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11297, 0x003F };
    uint32_t const ces[9] = { 0x2B57, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_311)
{
    // 11297 0061;	
    // (ëäó) MULTANI LETTER THA	[2B57 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11297, 0x0061 };
    uint32_t const ces[9] = { 0x2B57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_312)
{
    // 11297 0041;	
    // (ëäó) MULTANI LETTER THA	[2B57 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11297, 0x0041 };
    uint32_t const ces[9] = { 0x2B57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_313)
{
    // 11297 0062;	
    // (ëäó) MULTANI LETTER THA	[2B57 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11297, 0x0062 };
    uint32_t const ces[9] = { 0x2B57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_314)
{
    // 11298 0021;	
    // (ëäò) MULTANI LETTER DA	[2B58 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11298, 0x0021 };
    uint32_t const ces[9] = { 0x2B58, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_315)
{
    // 11298 003F;	
    // (ëäò) MULTANI LETTER DA	[2B58 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11298, 0x003F };
    uint32_t const ces[9] = { 0x2B58, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_316)
{
    // 11298 0061;	
    // (ëäò) MULTANI LETTER DA	[2B58 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11298, 0x0061 };
    uint32_t const ces[9] = { 0x2B58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_317)
{
    // 11298 0041;	
    // (ëäò) MULTANI LETTER DA	[2B58 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11298, 0x0041 };
    uint32_t const ces[9] = { 0x2B58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_318)
{
    // 11298 0062;	
    // (ëäò) MULTANI LETTER DA	[2B58 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11298, 0x0062 };
    uint32_t const ces[9] = { 0x2B58, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_319)
{
    // 11299 0021;	
    // (ëäô) MULTANI LETTER DHA	[2B59 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11299, 0x0021 };
    uint32_t const ces[9] = { 0x2B59, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_320)
{
    // 11299 003F;	
    // (ëäô) MULTANI LETTER DHA	[2B59 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11299, 0x003F };
    uint32_t const ces[9] = { 0x2B59, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_321)
{
    // 11299 0061;	
    // (ëäô) MULTANI LETTER DHA	[2B59 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11299, 0x0061 };
    uint32_t const ces[9] = { 0x2B59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_322)
{
    // 11299 0041;	
    // (ëäô) MULTANI LETTER DHA	[2B59 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11299, 0x0041 };
    uint32_t const ces[9] = { 0x2B59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_323)
{
    // 11299 0062;	
    // (ëäô) MULTANI LETTER DHA	[2B59 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11299, 0x0062 };
    uint32_t const ces[9] = { 0x2B59, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_324)
{
    // 1129A 0021;	
    // (ëäö) MULTANI LETTER NA	[2B5A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1129A, 0x0021 };
    uint32_t const ces[9] = { 0x2B5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_325)
{
    // 1129A 003F;	
    // (ëäö) MULTANI LETTER NA	[2B5A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1129A, 0x003F };
    uint32_t const ces[9] = { 0x2B5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_326)
{
    // 1129A 0061;	
    // (ëäö) MULTANI LETTER NA	[2B5A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1129A, 0x0061 };
    uint32_t const ces[9] = { 0x2B5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_327)
{
    // 1129A 0041;	
    // (ëäö) MULTANI LETTER NA	[2B5A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1129A, 0x0041 };
    uint32_t const ces[9] = { 0x2B5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_328)
{
    // 1129A 0062;	
    // (ëäö) MULTANI LETTER NA	[2B5A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1129A, 0x0062 };
    uint32_t const ces[9] = { 0x2B5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_329)
{
    // 1129B 0021;	
    // (ëäõ) MULTANI LETTER PA	[2B5B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1129B, 0x0021 };
    uint32_t const ces[9] = { 0x2B5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_330)
{
    // 1129B 003F;	
    // (ëäõ) MULTANI LETTER PA	[2B5B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1129B, 0x003F };
    uint32_t const ces[9] = { 0x2B5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_331)
{
    // 1129B 0061;	
    // (ëäõ) MULTANI LETTER PA	[2B5B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1129B, 0x0061 };
    uint32_t const ces[9] = { 0x2B5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_332)
{
    // 1129B 0041;	
    // (ëäõ) MULTANI LETTER PA	[2B5B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1129B, 0x0041 };
    uint32_t const ces[9] = { 0x2B5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_333)
{
    // 1129B 0062;	
    // (ëäõ) MULTANI LETTER PA	[2B5B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1129B, 0x0062 };
    uint32_t const ces[9] = { 0x2B5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_334)
{
    // 1129C 0021;	
    // (ëäú) MULTANI LETTER PHA	[2B5C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1129C, 0x0021 };
    uint32_t const ces[9] = { 0x2B5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_335)
{
    // 1129C 003F;	
    // (ëäú) MULTANI LETTER PHA	[2B5C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1129C, 0x003F };
    uint32_t const ces[9] = { 0x2B5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_336)
{
    // 1129C 0061;	
    // (ëäú) MULTANI LETTER PHA	[2B5C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1129C, 0x0061 };
    uint32_t const ces[9] = { 0x2B5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_337)
{
    // 1129C 0041;	
    // (ëäú) MULTANI LETTER PHA	[2B5C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1129C, 0x0041 };
    uint32_t const ces[9] = { 0x2B5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_338)
{
    // 1129C 0062;	
    // (ëäú) MULTANI LETTER PHA	[2B5C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1129C, 0x0062 };
    uint32_t const ces[9] = { 0x2B5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_339)
{
    // 1129D 0021;	
    // (ëäù) MULTANI LETTER BA	[2B5D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1129D, 0x0021 };
    uint32_t const ces[9] = { 0x2B5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_340)
{
    // 1129D 003F;	
    // (ëäù) MULTANI LETTER BA	[2B5D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1129D, 0x003F };
    uint32_t const ces[9] = { 0x2B5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_341)
{
    // 1129D 0061;	
    // (ëäù) MULTANI LETTER BA	[2B5D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1129D, 0x0061 };
    uint32_t const ces[9] = { 0x2B5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_342)
{
    // 1129D 0041;	
    // (ëäù) MULTANI LETTER BA	[2B5D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1129D, 0x0041 };
    uint32_t const ces[9] = { 0x2B5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_343)
{
    // 1129D 0062;	
    // (ëäù) MULTANI LETTER BA	[2B5D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1129D, 0x0062 };
    uint32_t const ces[9] = { 0x2B5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_344)
{
    // 1129F 0021;	
    // (ëäü) MULTANI LETTER BHA	[2B5E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1129F, 0x0021 };
    uint32_t const ces[9] = { 0x2B5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_345)
{
    // 1129F 003F;	
    // (ëäü) MULTANI LETTER BHA	[2B5E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1129F, 0x003F };
    uint32_t const ces[9] = { 0x2B5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_346)
{
    // 1129F 0061;	
    // (ëäü) MULTANI LETTER BHA	[2B5E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1129F, 0x0061 };
    uint32_t const ces[9] = { 0x2B5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_347)
{
    // 1129F 0041;	
    // (ëäü) MULTANI LETTER BHA	[2B5E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1129F, 0x0041 };
    uint32_t const ces[9] = { 0x2B5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_348)
{
    // 1129F 0062;	
    // (ëäü) MULTANI LETTER BHA	[2B5E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1129F, 0x0062 };
    uint32_t const ces[9] = { 0x2B5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_349)
{
    // 112A0 0021;	
    // (ëä†) MULTANI LETTER MA	[2B5F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A0, 0x0021 };
    uint32_t const ces[9] = { 0x2B5F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_350)
{
    // 112A0 003F;	
    // (ëä†) MULTANI LETTER MA	[2B5F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A0, 0x003F };
    uint32_t const ces[9] = { 0x2B5F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_351)
{
    // 112A0 0061;	
    // (ëä†) MULTANI LETTER MA	[2B5F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A0, 0x0061 };
    uint32_t const ces[9] = { 0x2B5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_352)
{
    // 112A0 0041;	
    // (ëä†) MULTANI LETTER MA	[2B5F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112A0, 0x0041 };
    uint32_t const ces[9] = { 0x2B5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_353)
{
    // 112A0 0062;	
    // (ëä†) MULTANI LETTER MA	[2B5F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A0, 0x0062 };
    uint32_t const ces[9] = { 0x2B5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_354)
{
    // 112A1 0021;	
    // (ëä°) MULTANI LETTER YA	[2B60 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A1, 0x0021 };
    uint32_t const ces[9] = { 0x2B60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_355)
{
    // 112A1 003F;	
    // (ëä°) MULTANI LETTER YA	[2B60 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A1, 0x003F };
    uint32_t const ces[9] = { 0x2B60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_356)
{
    // 112A1 0061;	
    // (ëä°) MULTANI LETTER YA	[2B60 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A1, 0x0061 };
    uint32_t const ces[9] = { 0x2B60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_357)
{
    // 112A1 0041;	
    // (ëä°) MULTANI LETTER YA	[2B60 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112A1, 0x0041 };
    uint32_t const ces[9] = { 0x2B60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_358)
{
    // 112A1 0062;	
    // (ëä°) MULTANI LETTER YA	[2B60 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A1, 0x0062 };
    uint32_t const ces[9] = { 0x2B60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_359)
{
    // 112A2 0021;	
    // (ëä¢) MULTANI LETTER RA	[2B61 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A2, 0x0021 };
    uint32_t const ces[9] = { 0x2B61, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_360)
{
    // 112A2 003F;	
    // (ëä¢) MULTANI LETTER RA	[2B61 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A2, 0x003F };
    uint32_t const ces[9] = { 0x2B61, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_361)
{
    // 112A2 0061;	
    // (ëä¢) MULTANI LETTER RA	[2B61 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A2, 0x0061 };
    uint32_t const ces[9] = { 0x2B61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_362)
{
    // 112A2 0041;	
    // (ëä¢) MULTANI LETTER RA	[2B61 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112A2, 0x0041 };
    uint32_t const ces[9] = { 0x2B61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_363)
{
    // 112A2 0062;	
    // (ëä¢) MULTANI LETTER RA	[2B61 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A2, 0x0062 };
    uint32_t const ces[9] = { 0x2B61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_364)
{
    // 112A3 0021;	
    // (ëä£) MULTANI LETTER LA	[2B62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A3, 0x0021 };
    uint32_t const ces[9] = { 0x2B62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_365)
{
    // 112A3 003F;	
    // (ëä£) MULTANI LETTER LA	[2B62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A3, 0x003F };
    uint32_t const ces[9] = { 0x2B62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_366)
{
    // 112A3 0061;	
    // (ëä£) MULTANI LETTER LA	[2B62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A3, 0x0061 };
    uint32_t const ces[9] = { 0x2B62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_367)
{
    // 112A3 0041;	
    // (ëä£) MULTANI LETTER LA	[2B62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112A3, 0x0041 };
    uint32_t const ces[9] = { 0x2B62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_368)
{
    // 112A3 0062;	
    // (ëä£) MULTANI LETTER LA	[2B62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A3, 0x0062 };
    uint32_t const ces[9] = { 0x2B62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_369)
{
    // 112A4 0021;	
    // (ëä§) MULTANI LETTER VA	[2B63 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A4, 0x0021 };
    uint32_t const ces[9] = { 0x2B63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_370)
{
    // 112A4 003F;	
    // (ëä§) MULTANI LETTER VA	[2B63 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A4, 0x003F };
    uint32_t const ces[9] = { 0x2B63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_371)
{
    // 112A4 0061;	
    // (ëä§) MULTANI LETTER VA	[2B63 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A4, 0x0061 };
    uint32_t const ces[9] = { 0x2B63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_372)
{
    // 112A4 0041;	
    // (ëä§) MULTANI LETTER VA	[2B63 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112A4, 0x0041 };
    uint32_t const ces[9] = { 0x2B63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_373)
{
    // 112A4 0062;	
    // (ëä§) MULTANI LETTER VA	[2B63 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A4, 0x0062 };
    uint32_t const ces[9] = { 0x2B63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_374)
{
    // 112A7 0021;	
    // (ëäß) MULTANI LETTER RRA	[2B64 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A7, 0x0021 };
    uint32_t const ces[9] = { 0x2B64, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_375)
{
    // 112A7 003F;	
    // (ëäß) MULTANI LETTER RRA	[2B64 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A7, 0x003F };
    uint32_t const ces[9] = { 0x2B64, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_376)
{
    // 112A7 0061;	
    // (ëäß) MULTANI LETTER RRA	[2B64 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A7, 0x0061 };
    uint32_t const ces[9] = { 0x2B64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_377)
{
    // 112A7 0041;	
    // (ëäß) MULTANI LETTER RRA	[2B64 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112A7, 0x0041 };
    uint32_t const ces[9] = { 0x2B64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_378)
{
    // 112A7 0062;	
    // (ëäß) MULTANI LETTER RRA	[2B64 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A7, 0x0062 };
    uint32_t const ces[9] = { 0x2B64, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_379)
{
    // 112A8 0021;	
    // (ëä®) MULTANI LETTER RHA	[2B65 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A8, 0x0021 };
    uint32_t const ces[9] = { 0x2B65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_380)
{
    // 112A8 003F;	
    // (ëä®) MULTANI LETTER RHA	[2B65 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A8, 0x003F };
    uint32_t const ces[9] = { 0x2B65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_381)
{
    // 112A8 0061;	
    // (ëä®) MULTANI LETTER RHA	[2B65 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A8, 0x0061 };
    uint32_t const ces[9] = { 0x2B65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_382)
{
    // 112A8 0041;	
    // (ëä®) MULTANI LETTER RHA	[2B65 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x112A8, 0x0041 };
    uint32_t const ces[9] = { 0x2B65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_383)
{
    // 112A8 0062;	
    // (ëä®) MULTANI LETTER RHA	[2B65 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112A8, 0x0062 };
    uint32_t const ces[9] = { 0x2B65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_384)
{
    // 11350 0021;	
    // (ëçê) GRANTHA OM	[2B66 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11350, 0x0021 };
    uint32_t const ces[9] = { 0x2B66, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_385)
{
    // 11350 003F;	
    // (ëçê) GRANTHA OM	[2B66 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11350, 0x003F };
    uint32_t const ces[9] = { 0x2B66, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_386)
{
    // 11350 0061;	
    // (ëçê) GRANTHA OM	[2B66 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11350, 0x0061 };
    uint32_t const ces[9] = { 0x2B66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_387)
{
    // 11350 0041;	
    // (ëçê) GRANTHA OM	[2B66 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11350, 0x0041 };
    uint32_t const ces[9] = { 0x2B66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_388)
{
    // 11350 0062;	
    // (ëçê) GRANTHA OM	[2B66 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11350, 0x0062 };
    uint32_t const ces[9] = { 0x2B66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_389)
{
    // 11305 0021;	
    // (ëåÖ) GRANTHA LETTER A	[2B67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11305, 0x0021 };
    uint32_t const ces[9] = { 0x2B67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_390)
{
    // 11305 003F;	
    // (ëåÖ) GRANTHA LETTER A	[2B67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11305, 0x003F };
    uint32_t const ces[9] = { 0x2B67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_391)
{
    // 11305 0061;	
    // (ëåÖ) GRANTHA LETTER A	[2B67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11305, 0x0061 };
    uint32_t const ces[9] = { 0x2B67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_392)
{
    // 11305 0041;	
    // (ëåÖ) GRANTHA LETTER A	[2B67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11305, 0x0041 };
    uint32_t const ces[9] = { 0x2B67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_393)
{
    // 11305 0062;	
    // (ëåÖ) GRANTHA LETTER A	[2B67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11305, 0x0062 };
    uint32_t const ces[9] = { 0x2B67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_394)
{
    // 11306 0021;	
    // (ëåÜ) GRANTHA LETTER AA	[2B68 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11306, 0x0021 };
    uint32_t const ces[9] = { 0x2B68, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_395)
{
    // 11306 003F;	
    // (ëåÜ) GRANTHA LETTER AA	[2B68 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11306, 0x003F };
    uint32_t const ces[9] = { 0x2B68, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_396)
{
    // 11306 0061;	
    // (ëåÜ) GRANTHA LETTER AA	[2B68 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11306, 0x0061 };
    uint32_t const ces[9] = { 0x2B68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_397)
{
    // 11306 0041;	
    // (ëåÜ) GRANTHA LETTER AA	[2B68 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11306, 0x0041 };
    uint32_t const ces[9] = { 0x2B68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_398)
{
    // 11306 0062;	
    // (ëåÜ) GRANTHA LETTER AA	[2B68 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11306, 0x0062 };
    uint32_t const ces[9] = { 0x2B68, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_399)
{
    // 11307 0021;	
    // (ëåá) GRANTHA LETTER I	[2B69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11307, 0x0021 };
    uint32_t const ces[9] = { 0x2B69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_400)
{
    // 11307 003F;	
    // (ëåá) GRANTHA LETTER I	[2B69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11307, 0x003F };
    uint32_t const ces[9] = { 0x2B69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_401)
{
    // 11307 0061;	
    // (ëåá) GRANTHA LETTER I	[2B69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11307, 0x0061 };
    uint32_t const ces[9] = { 0x2B69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_402)
{
    // 11307 0041;	
    // (ëåá) GRANTHA LETTER I	[2B69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11307, 0x0041 };
    uint32_t const ces[9] = { 0x2B69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_403)
{
    // 11307 0062;	
    // (ëåá) GRANTHA LETTER I	[2B69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11307, 0x0062 };
    uint32_t const ces[9] = { 0x2B69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_404)
{
    // 11308 0021;	
    // (ëåà) GRANTHA LETTER II	[2B6A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11308, 0x0021 };
    uint32_t const ces[9] = { 0x2B6A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_405)
{
    // 11308 003F;	
    // (ëåà) GRANTHA LETTER II	[2B6A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11308, 0x003F };
    uint32_t const ces[9] = { 0x2B6A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_406)
{
    // 11308 0061;	
    // (ëåà) GRANTHA LETTER II	[2B6A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11308, 0x0061 };
    uint32_t const ces[9] = { 0x2B6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_407)
{
    // 11308 0041;	
    // (ëåà) GRANTHA LETTER II	[2B6A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11308, 0x0041 };
    uint32_t const ces[9] = { 0x2B6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_408)
{
    // 11308 0062;	
    // (ëåà) GRANTHA LETTER II	[2B6A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11308, 0x0062 };
    uint32_t const ces[9] = { 0x2B6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_409)
{
    // 11309 0021;	
    // (ëåâ) GRANTHA LETTER U	[2B6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11309, 0x0021 };
    uint32_t const ces[9] = { 0x2B6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_410)
{
    // 11309 003F;	
    // (ëåâ) GRANTHA LETTER U	[2B6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11309, 0x003F };
    uint32_t const ces[9] = { 0x2B6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_411)
{
    // 11309 0061;	
    // (ëåâ) GRANTHA LETTER U	[2B6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11309, 0x0061 };
    uint32_t const ces[9] = { 0x2B6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_412)
{
    // 11309 0041;	
    // (ëåâ) GRANTHA LETTER U	[2B6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11309, 0x0041 };
    uint32_t const ces[9] = { 0x2B6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_413)
{
    // 11309 0062;	
    // (ëåâ) GRANTHA LETTER U	[2B6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11309, 0x0062 };
    uint32_t const ces[9] = { 0x2B6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_414)
{
    // 1130A 0021;	
    // (ëåä) GRANTHA LETTER UU	[2B6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1130A, 0x0021 };
    uint32_t const ces[9] = { 0x2B6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_415)
{
    // 1130A 003F;	
    // (ëåä) GRANTHA LETTER UU	[2B6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1130A, 0x003F };
    uint32_t const ces[9] = { 0x2B6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_416)
{
    // 1130A 0061;	
    // (ëåä) GRANTHA LETTER UU	[2B6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1130A, 0x0061 };
    uint32_t const ces[9] = { 0x2B6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_417)
{
    // 1130A 0041;	
    // (ëåä) GRANTHA LETTER UU	[2B6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1130A, 0x0041 };
    uint32_t const ces[9] = { 0x2B6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_418)
{
    // 1130A 0062;	
    // (ëåä) GRANTHA LETTER UU	[2B6C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1130A, 0x0062 };
    uint32_t const ces[9] = { 0x2B6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_419)
{
    // 1130B 0021;	
    // (ëåã) GRANTHA LETTER VOCALIC R	[2B6D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1130B, 0x0021 };
    uint32_t const ces[9] = { 0x2B6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_420)
{
    // 1130B 003F;	
    // (ëåã) GRANTHA LETTER VOCALIC R	[2B6D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1130B, 0x003F };
    uint32_t const ces[9] = { 0x2B6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_421)
{
    // 1130B 0061;	
    // (ëåã) GRANTHA LETTER VOCALIC R	[2B6D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1130B, 0x0061 };
    uint32_t const ces[9] = { 0x2B6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_422)
{
    // 1130B 0041;	
    // (ëåã) GRANTHA LETTER VOCALIC R	[2B6D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1130B, 0x0041 };
    uint32_t const ces[9] = { 0x2B6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_423)
{
    // 1130B 0062;	
    // (ëåã) GRANTHA LETTER VOCALIC R	[2B6D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1130B, 0x0062 };
    uint32_t const ces[9] = { 0x2B6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_424)
{
    // 11360 0021;	
    // (ëç†) GRANTHA LETTER VOCALIC RR	[2B6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11360, 0x0021 };
    uint32_t const ces[9] = { 0x2B6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_425)
{
    // 11360 003F;	
    // (ëç†) GRANTHA LETTER VOCALIC RR	[2B6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11360, 0x003F };
    uint32_t const ces[9] = { 0x2B6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_426)
{
    // 11360 0061;	
    // (ëç†) GRANTHA LETTER VOCALIC RR	[2B6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11360, 0x0061 };
    uint32_t const ces[9] = { 0x2B6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_427)
{
    // 11360 0041;	
    // (ëç†) GRANTHA LETTER VOCALIC RR	[2B6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11360, 0x0041 };
    uint32_t const ces[9] = { 0x2B6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_428)
{
    // 11360 0062;	
    // (ëç†) GRANTHA LETTER VOCALIC RR	[2B6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11360, 0x0062 };
    uint32_t const ces[9] = { 0x2B6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_429)
{
    // 1130C 0021;	
    // (ëåå) GRANTHA LETTER VOCALIC L	[2B6F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1130C, 0x0021 };
    uint32_t const ces[9] = { 0x2B6F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_430)
{
    // 1130C 003F;	
    // (ëåå) GRANTHA LETTER VOCALIC L	[2B6F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1130C, 0x003F };
    uint32_t const ces[9] = { 0x2B6F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_431)
{
    // 1130C 0061;	
    // (ëåå) GRANTHA LETTER VOCALIC L	[2B6F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1130C, 0x0061 };
    uint32_t const ces[9] = { 0x2B6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_432)
{
    // 1130C 0041;	
    // (ëåå) GRANTHA LETTER VOCALIC L	[2B6F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1130C, 0x0041 };
    uint32_t const ces[9] = { 0x2B6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_433)
{
    // 1130C 0062;	
    // (ëåå) GRANTHA LETTER VOCALIC L	[2B6F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1130C, 0x0062 };
    uint32_t const ces[9] = { 0x2B6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_434)
{
    // 11361 0021;	
    // (ëç°) GRANTHA LETTER VOCALIC LL	[2B70 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11361, 0x0021 };
    uint32_t const ces[9] = { 0x2B70, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_435)
{
    // 11361 003F;	
    // (ëç°) GRANTHA LETTER VOCALIC LL	[2B70 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11361, 0x003F };
    uint32_t const ces[9] = { 0x2B70, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_436)
{
    // 11361 0061;	
    // (ëç°) GRANTHA LETTER VOCALIC LL	[2B70 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11361, 0x0061 };
    uint32_t const ces[9] = { 0x2B70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_437)
{
    // 11361 0041;	
    // (ëç°) GRANTHA LETTER VOCALIC LL	[2B70 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11361, 0x0041 };
    uint32_t const ces[9] = { 0x2B70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_438)
{
    // 11361 0062;	
    // (ëç°) GRANTHA LETTER VOCALIC LL	[2B70 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11361, 0x0062 };
    uint32_t const ces[9] = { 0x2B70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_439)
{
    // 1130F 0021;	
    // (ëåè) GRANTHA LETTER EE	[2B71 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1130F, 0x0021 };
    uint32_t const ces[9] = { 0x2B71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_440)
{
    // 1130F 003F;	
    // (ëåè) GRANTHA LETTER EE	[2B71 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1130F, 0x003F };
    uint32_t const ces[9] = { 0x2B71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_441)
{
    // 1130F 0061;	
    // (ëåè) GRANTHA LETTER EE	[2B71 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1130F, 0x0061 };
    uint32_t const ces[9] = { 0x2B71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_442)
{
    // 1130F 0041;	
    // (ëåè) GRANTHA LETTER EE	[2B71 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1130F, 0x0041 };
    uint32_t const ces[9] = { 0x2B71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_443)
{
    // 1130F 0062;	
    // (ëåè) GRANTHA LETTER EE	[2B71 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1130F, 0x0062 };
    uint32_t const ces[9] = { 0x2B71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_444)
{
    // 11310 0021;	
    // (ëåê) GRANTHA LETTER AI	[2B72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11310, 0x0021 };
    uint32_t const ces[9] = { 0x2B72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_445)
{
    // 11310 003F;	
    // (ëåê) GRANTHA LETTER AI	[2B72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11310, 0x003F };
    uint32_t const ces[9] = { 0x2B72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_446)
{
    // 11310 0061;	
    // (ëåê) GRANTHA LETTER AI	[2B72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11310, 0x0061 };
    uint32_t const ces[9] = { 0x2B72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_447)
{
    // 11310 0041;	
    // (ëåê) GRANTHA LETTER AI	[2B72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11310, 0x0041 };
    uint32_t const ces[9] = { 0x2B72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_448)
{
    // 11310 0062;	
    // (ëåê) GRANTHA LETTER AI	[2B72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11310, 0x0062 };
    uint32_t const ces[9] = { 0x2B72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_449)
{
    // 11313 0021;	
    // (ëåì) GRANTHA LETTER OO	[2B73 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11313, 0x0021 };
    uint32_t const ces[9] = { 0x2B73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_450)
{
    // 11313 003F;	
    // (ëåì) GRANTHA LETTER OO	[2B73 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11313, 0x003F };
    uint32_t const ces[9] = { 0x2B73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_451)
{
    // 11313 0061;	
    // (ëåì) GRANTHA LETTER OO	[2B73 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11313, 0x0061 };
    uint32_t const ces[9] = { 0x2B73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_452)
{
    // 11313 0041;	
    // (ëåì) GRANTHA LETTER OO	[2B73 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11313, 0x0041 };
    uint32_t const ces[9] = { 0x2B73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_453)
{
    // 11313 0062;	
    // (ëåì) GRANTHA LETTER OO	[2B73 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11313, 0x0062 };
    uint32_t const ces[9] = { 0x2B73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_454)
{
    // 11314 0021;	
    // (ëåî) GRANTHA LETTER AU	[2B74 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11314, 0x0021 };
    uint32_t const ces[9] = { 0x2B74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_455)
{
    // 11314 003F;	
    // (ëåî) GRANTHA LETTER AU	[2B74 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11314, 0x003F };
    uint32_t const ces[9] = { 0x2B74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_456)
{
    // 11314 0061;	
    // (ëåî) GRANTHA LETTER AU	[2B74 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11314, 0x0061 };
    uint32_t const ces[9] = { 0x2B74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_457)
{
    // 11314 0041;	
    // (ëåî) GRANTHA LETTER AU	[2B74 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11314, 0x0041 };
    uint32_t const ces[9] = { 0x2B74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_458)
{
    // 11314 0062;	
    // (ëåî) GRANTHA LETTER AU	[2B74 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11314, 0x0062 };
    uint32_t const ces[9] = { 0x2B74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_459)
{
    // 11315 0021;	
    // (ëåï) GRANTHA LETTER KA	[2B75 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11315, 0x0021 };
    uint32_t const ces[9] = { 0x2B75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_460)
{
    // 11315 003F;	
    // (ëåï) GRANTHA LETTER KA	[2B75 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11315, 0x003F };
    uint32_t const ces[9] = { 0x2B75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_461)
{
    // 11315 0061;	
    // (ëåï) GRANTHA LETTER KA	[2B75 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11315, 0x0061 };
    uint32_t const ces[9] = { 0x2B75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_462)
{
    // 11315 0041;	
    // (ëåï) GRANTHA LETTER KA	[2B75 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11315, 0x0041 };
    uint32_t const ces[9] = { 0x2B75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_463)
{
    // 11315 0062;	
    // (ëåï) GRANTHA LETTER KA	[2B75 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11315, 0x0062 };
    uint32_t const ces[9] = { 0x2B75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_464)
{
    // 11316 0021;	
    // (ëåñ) GRANTHA LETTER KHA	[2B76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11316, 0x0021 };
    uint32_t const ces[9] = { 0x2B76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_465)
{
    // 11316 003F;	
    // (ëåñ) GRANTHA LETTER KHA	[2B76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11316, 0x003F };
    uint32_t const ces[9] = { 0x2B76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_466)
{
    // 11316 0061;	
    // (ëåñ) GRANTHA LETTER KHA	[2B76 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11316, 0x0061 };
    uint32_t const ces[9] = { 0x2B76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_467)
{
    // 11316 0041;	
    // (ëåñ) GRANTHA LETTER KHA	[2B76 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11316, 0x0041 };
    uint32_t const ces[9] = { 0x2B76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_468)
{
    // 11316 0062;	
    // (ëåñ) GRANTHA LETTER KHA	[2B76 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11316, 0x0062 };
    uint32_t const ces[9] = { 0x2B76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_469)
{
    // 11317 0021;	
    // (ëåó) GRANTHA LETTER GA	[2B77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11317, 0x0021 };
    uint32_t const ces[9] = { 0x2B77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_470)
{
    // 11317 003F;	
    // (ëåó) GRANTHA LETTER GA	[2B77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11317, 0x003F };
    uint32_t const ces[9] = { 0x2B77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_471)
{
    // 11317 0061;	
    // (ëåó) GRANTHA LETTER GA	[2B77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11317, 0x0061 };
    uint32_t const ces[9] = { 0x2B77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_472)
{
    // 11317 0041;	
    // (ëåó) GRANTHA LETTER GA	[2B77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11317, 0x0041 };
    uint32_t const ces[9] = { 0x2B77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_473)
{
    // 11317 0062;	
    // (ëåó) GRANTHA LETTER GA	[2B77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11317, 0x0062 };
    uint32_t const ces[9] = { 0x2B77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_474)
{
    // 11318 0021;	
    // (ëåò) GRANTHA LETTER GHA	[2B78 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11318, 0x0021 };
    uint32_t const ces[9] = { 0x2B78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_475)
{
    // 11318 003F;	
    // (ëåò) GRANTHA LETTER GHA	[2B78 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11318, 0x003F };
    uint32_t const ces[9] = { 0x2B78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_476)
{
    // 11318 0061;	
    // (ëåò) GRANTHA LETTER GHA	[2B78 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11318, 0x0061 };
    uint32_t const ces[9] = { 0x2B78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_477)
{
    // 11318 0041;	
    // (ëåò) GRANTHA LETTER GHA	[2B78 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11318, 0x0041 };
    uint32_t const ces[9] = { 0x2B78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_478)
{
    // 11318 0062;	
    // (ëåò) GRANTHA LETTER GHA	[2B78 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11318, 0x0062 };
    uint32_t const ces[9] = { 0x2B78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_479)
{
    // 11319 0021;	
    // (ëåô) GRANTHA LETTER NGA	[2B79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11319, 0x0021 };
    uint32_t const ces[9] = { 0x2B79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_480)
{
    // 11319 003F;	
    // (ëåô) GRANTHA LETTER NGA	[2B79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11319, 0x003F };
    uint32_t const ces[9] = { 0x2B79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_481)
{
    // 11319 0061;	
    // (ëåô) GRANTHA LETTER NGA	[2B79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11319, 0x0061 };
    uint32_t const ces[9] = { 0x2B79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_482)
{
    // 11319 0041;	
    // (ëåô) GRANTHA LETTER NGA	[2B79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11319, 0x0041 };
    uint32_t const ces[9] = { 0x2B79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_483)
{
    // 11319 0062;	
    // (ëåô) GRANTHA LETTER NGA	[2B79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11319, 0x0062 };
    uint32_t const ces[9] = { 0x2B79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_484)
{
    // 1131A 0021;	
    // (ëåö) GRANTHA LETTER CA	[2B7A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1131A, 0x0021 };
    uint32_t const ces[9] = { 0x2B7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_485)
{
    // 1131A 003F;	
    // (ëåö) GRANTHA LETTER CA	[2B7A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1131A, 0x003F };
    uint32_t const ces[9] = { 0x2B7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_486)
{
    // 1131A 0061;	
    // (ëåö) GRANTHA LETTER CA	[2B7A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1131A, 0x0061 };
    uint32_t const ces[9] = { 0x2B7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_487)
{
    // 1131A 0041;	
    // (ëåö) GRANTHA LETTER CA	[2B7A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1131A, 0x0041 };
    uint32_t const ces[9] = { 0x2B7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_488)
{
    // 1131A 0062;	
    // (ëåö) GRANTHA LETTER CA	[2B7A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1131A, 0x0062 };
    uint32_t const ces[9] = { 0x2B7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_489)
{
    // 1131B 0021;	
    // (ëåõ) GRANTHA LETTER CHA	[2B7B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1131B, 0x0021 };
    uint32_t const ces[9] = { 0x2B7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_490)
{
    // 1131B 003F;	
    // (ëåõ) GRANTHA LETTER CHA	[2B7B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1131B, 0x003F };
    uint32_t const ces[9] = { 0x2B7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_491)
{
    // 1131B 0061;	
    // (ëåõ) GRANTHA LETTER CHA	[2B7B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1131B, 0x0061 };
    uint32_t const ces[9] = { 0x2B7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_492)
{
    // 1131B 0041;	
    // (ëåõ) GRANTHA LETTER CHA	[2B7B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1131B, 0x0041 };
    uint32_t const ces[9] = { 0x2B7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_493)
{
    // 1131B 0062;	
    // (ëåõ) GRANTHA LETTER CHA	[2B7B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1131B, 0x0062 };
    uint32_t const ces[9] = { 0x2B7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_494)
{
    // 1131C 0021;	
    // (ëåú) GRANTHA LETTER JA	[2B7C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1131C, 0x0021 };
    uint32_t const ces[9] = { 0x2B7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_495)
{
    // 1131C 003F;	
    // (ëåú) GRANTHA LETTER JA	[2B7C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1131C, 0x003F };
    uint32_t const ces[9] = { 0x2B7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_496)
{
    // 1131C 0061;	
    // (ëåú) GRANTHA LETTER JA	[2B7C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1131C, 0x0061 };
    uint32_t const ces[9] = { 0x2B7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_497)
{
    // 1131C 0041;	
    // (ëåú) GRANTHA LETTER JA	[2B7C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1131C, 0x0041 };
    uint32_t const ces[9] = { 0x2B7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_498)
{
    // 1131C 0062;	
    // (ëåú) GRANTHA LETTER JA	[2B7C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1131C, 0x0062 };
    uint32_t const ces[9] = { 0x2B7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_177_499)
{
    // 1131D 0021;	
    // (ëåù) GRANTHA LETTER JHA	[2B7D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1131D, 0x0021 };
    uint32_t const ces[9] = { 0x2B7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

