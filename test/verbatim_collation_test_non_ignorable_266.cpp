// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_266_000)
{
    // 16F06 0061;	
    // (𖼆) MIAO LETTER ARCHAIC MA	[44B2 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x16F06, 0x0061 };
    uint32_t const ces[9] = { 0x44B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_001)
{
    // 16F06 0041;	
    // (𖼆) MIAO LETTER ARCHAIC MA	[44B2 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x16F06, 0x0041 };
    uint32_t const ces[9] = { 0x44B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_002)
{
    // 16F04 0062;	
    // (𖼄) MIAO LETTER MA	[44B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F04, 0x0062 };
    uint32_t const ces[9] = { 0x44B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_003)
{
    // 16F06 0062;	
    // (𖼆) MIAO LETTER ARCHAIC MA	[44B2 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x16F06, 0x0062 };
    uint32_t const ces[9] = { 0x44B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_004)
{
    // 16F05 0021;	
    // (𖼅) MIAO LETTER MHA	[44B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F05, 0x0021 };
    uint32_t const ces[9] = { 0x44B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_005)
{
    // 16F05 003F;	
    // (𖼅) MIAO LETTER MHA	[44B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F05, 0x003F };
    uint32_t const ces[9] = { 0x44B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_006)
{
    // 16F05 0061;	
    // (𖼅) MIAO LETTER MHA	[44B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F05, 0x0061 };
    uint32_t const ces[9] = { 0x44B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_007)
{
    // 16F05 0041;	
    // (𖼅) MIAO LETTER MHA	[44B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F05, 0x0041 };
    uint32_t const ces[9] = { 0x44B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_008)
{
    // 16F05 0062;	
    // (𖼅) MIAO LETTER MHA	[44B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F05, 0x0062 };
    uint32_t const ces[9] = { 0x44B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_009)
{
    // 16F07 0021;	
    // (𖼇) MIAO LETTER FA	[44B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F07, 0x0021 };
    uint32_t const ces[9] = { 0x44B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_010)
{
    // 16F07 003F;	
    // (𖼇) MIAO LETTER FA	[44B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F07, 0x003F };
    uint32_t const ces[9] = { 0x44B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_011)
{
    // 16F07 0061;	
    // (𖼇) MIAO LETTER FA	[44B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F07, 0x0061 };
    uint32_t const ces[9] = { 0x44B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_012)
{
    // 16F07 0041;	
    // (𖼇) MIAO LETTER FA	[44B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F07, 0x0041 };
    uint32_t const ces[9] = { 0x44B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_013)
{
    // 16F07 0062;	
    // (𖼇) MIAO LETTER FA	[44B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F07, 0x0062 };
    uint32_t const ces[9] = { 0x44B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_014)
{
    // 16F08 0021;	
    // (𖼈) MIAO LETTER VA	[44B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F08, 0x0021 };
    uint32_t const ces[9] = { 0x44B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_015)
{
    // 16F08 003F;	
    // (𖼈) MIAO LETTER VA	[44B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F08, 0x003F };
    uint32_t const ces[9] = { 0x44B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_016)
{
    // 16F08 0061;	
    // (𖼈) MIAO LETTER VA	[44B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F08, 0x0061 };
    uint32_t const ces[9] = { 0x44B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_017)
{
    // 16F08 0041;	
    // (𖼈) MIAO LETTER VA	[44B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F08, 0x0041 };
    uint32_t const ces[9] = { 0x44B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_018)
{
    // 16F08 0062;	
    // (𖼈) MIAO LETTER VA	[44B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F08, 0x0062 };
    uint32_t const ces[9] = { 0x44B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_019)
{
    // 16F09 0021;	
    // (𖼉) MIAO LETTER VFA	[44B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F09, 0x0021 };
    uint32_t const ces[9] = { 0x44B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_020)
{
    // 16F09 003F;	
    // (𖼉) MIAO LETTER VFA	[44B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F09, 0x003F };
    uint32_t const ces[9] = { 0x44B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_021)
{
    // 16F09 0061;	
    // (𖼉) MIAO LETTER VFA	[44B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F09, 0x0061 };
    uint32_t const ces[9] = { 0x44B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_022)
{
    // 16F09 0041;	
    // (𖼉) MIAO LETTER VFA	[44B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F09, 0x0041 };
    uint32_t const ces[9] = { 0x44B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_023)
{
    // 16F09 0062;	
    // (𖼉) MIAO LETTER VFA	[44B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F09, 0x0062 };
    uint32_t const ces[9] = { 0x44B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_024)
{
    // 16F0A 0021;	
    // (𖼊) MIAO LETTER TA	[44B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F0A, 0x0021 };
    uint32_t const ces[9] = { 0x44B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_025)
{
    // 16F0A 003F;	
    // (𖼊) MIAO LETTER TA	[44B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F0A, 0x003F };
    uint32_t const ces[9] = { 0x44B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_026)
{
    // 16F0A 0061;	
    // (𖼊) MIAO LETTER TA	[44B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F0A, 0x0061 };
    uint32_t const ces[9] = { 0x44B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_027)
{
    // 16F0A 0041;	
    // (𖼊) MIAO LETTER TA	[44B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F0A, 0x0041 };
    uint32_t const ces[9] = { 0x44B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_028)
{
    // 16F0A 0062;	
    // (𖼊) MIAO LETTER TA	[44B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F0A, 0x0062 };
    uint32_t const ces[9] = { 0x44B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_029)
{
    // 16F0B 0021;	
    // (𖼋) MIAO LETTER DA	[44B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F0B, 0x0021 };
    uint32_t const ces[9] = { 0x44B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_030)
{
    // 16F0B 003F;	
    // (𖼋) MIAO LETTER DA	[44B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F0B, 0x003F };
    uint32_t const ces[9] = { 0x44B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_031)
{
    // 16F0B 0061;	
    // (𖼋) MIAO LETTER DA	[44B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F0B, 0x0061 };
    uint32_t const ces[9] = { 0x44B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_032)
{
    // 16F0B 0041;	
    // (𖼋) MIAO LETTER DA	[44B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F0B, 0x0041 };
    uint32_t const ces[9] = { 0x44B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_033)
{
    // 16F0B 0062;	
    // (𖼋) MIAO LETTER DA	[44B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F0B, 0x0062 };
    uint32_t const ces[9] = { 0x44B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_034)
{
    // 16F0C 0021;	
    // (𖼌) MIAO LETTER YI TTA	[44B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F0C, 0x0021 };
    uint32_t const ces[9] = { 0x44B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_035)
{
    // 16F0C 003F;	
    // (𖼌) MIAO LETTER YI TTA	[44B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F0C, 0x003F };
    uint32_t const ces[9] = { 0x44B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_036)
{
    // 16F0C 0061;	
    // (𖼌) MIAO LETTER YI TTA	[44B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F0C, 0x0061 };
    uint32_t const ces[9] = { 0x44B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_037)
{
    // 16F0C 0041;	
    // (𖼌) MIAO LETTER YI TTA	[44B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F0C, 0x0041 };
    uint32_t const ces[9] = { 0x44B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_038)
{
    // 16F0C 0062;	
    // (𖼌) MIAO LETTER YI TTA	[44B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F0C, 0x0062 };
    uint32_t const ces[9] = { 0x44B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_039)
{
    // 16F0D 0021;	
    // (𖼍) MIAO LETTER YI TA	[44BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F0D, 0x0021 };
    uint32_t const ces[9] = { 0x44BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_040)
{
    // 16F0D 003F;	
    // (𖼍) MIAO LETTER YI TA	[44BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F0D, 0x003F };
    uint32_t const ces[9] = { 0x44BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_041)
{
    // 16F0D 0061;	
    // (𖼍) MIAO LETTER YI TA	[44BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F0D, 0x0061 };
    uint32_t const ces[9] = { 0x44BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_042)
{
    // 16F0D 0041;	
    // (𖼍) MIAO LETTER YI TA	[44BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F0D, 0x0041 };
    uint32_t const ces[9] = { 0x44BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_043)
{
    // 16F0D 0062;	
    // (𖼍) MIAO LETTER YI TA	[44BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F0D, 0x0062 };
    uint32_t const ces[9] = { 0x44BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_044)
{
    // 16F0E 0021;	
    // (𖼎) MIAO LETTER TTA	[44BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F0E, 0x0021 };
    uint32_t const ces[9] = { 0x44BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_045)
{
    // 16F0E 003F;	
    // (𖼎) MIAO LETTER TTA	[44BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F0E, 0x003F };
    uint32_t const ces[9] = { 0x44BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_046)
{
    // 16F0E 0061;	
    // (𖼎) MIAO LETTER TTA	[44BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F0E, 0x0061 };
    uint32_t const ces[9] = { 0x44BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_047)
{
    // 16F0E 0041;	
    // (𖼎) MIAO LETTER TTA	[44BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F0E, 0x0041 };
    uint32_t const ces[9] = { 0x44BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_048)
{
    // 16F0E 0062;	
    // (𖼎) MIAO LETTER TTA	[44BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F0E, 0x0062 };
    uint32_t const ces[9] = { 0x44BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_049)
{
    // 16F0F 0021;	
    // (𖼏) MIAO LETTER DDA	[44BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F0F, 0x0021 };
    uint32_t const ces[9] = { 0x44BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_050)
{
    // 16F0F 003F;	
    // (𖼏) MIAO LETTER DDA	[44BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F0F, 0x003F };
    uint32_t const ces[9] = { 0x44BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_051)
{
    // 16F0F 0061;	
    // (𖼏) MIAO LETTER DDA	[44BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F0F, 0x0061 };
    uint32_t const ces[9] = { 0x44BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_052)
{
    // 16F0F 0041;	
    // (𖼏) MIAO LETTER DDA	[44BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F0F, 0x0041 };
    uint32_t const ces[9] = { 0x44BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_053)
{
    // 16F0F 0062;	
    // (𖼏) MIAO LETTER DDA	[44BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F0F, 0x0062 };
    uint32_t const ces[9] = { 0x44BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_054)
{
    // 16F10 0021;	
    // (𖼐) MIAO LETTER NA	[44BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F10, 0x0021 };
    uint32_t const ces[9] = { 0x44BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_055)
{
    // 16F13 0021;	
    // (𖼓) MIAO LETTER ARCHAIC NA	[44BD 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x16F13, 0x0021 };
    uint32_t const ces[9] = { 0x44BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_056)
{
    // 16F10 003F;	
    // (𖼐) MIAO LETTER NA	[44BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F10, 0x003F };
    uint32_t const ces[9] = { 0x44BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_057)
{
    // 16F13 003F;	
    // (𖼓) MIAO LETTER ARCHAIC NA	[44BD 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x16F13, 0x003F };
    uint32_t const ces[9] = { 0x44BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_058)
{
    // 16F10 0061;	
    // (𖼐) MIAO LETTER NA	[44BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F10, 0x0061 };
    uint32_t const ces[9] = { 0x44BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_059)
{
    // 16F10 0041;	
    // (𖼐) MIAO LETTER NA	[44BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F10, 0x0041 };
    uint32_t const ces[9] = { 0x44BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_060)
{
    // 16F13 0061;	
    // (𖼓) MIAO LETTER ARCHAIC NA	[44BD 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x16F13, 0x0061 };
    uint32_t const ces[9] = { 0x44BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_061)
{
    // 16F13 0041;	
    // (𖼓) MIAO LETTER ARCHAIC NA	[44BD 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x16F13, 0x0041 };
    uint32_t const ces[9] = { 0x44BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_062)
{
    // 16F10 0062;	
    // (𖼐) MIAO LETTER NA	[44BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F10, 0x0062 };
    uint32_t const ces[9] = { 0x44BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_063)
{
    // 16F13 0062;	
    // (𖼓) MIAO LETTER ARCHAIC NA	[44BD 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x16F13, 0x0062 };
    uint32_t const ces[9] = { 0x44BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_064)
{
    // 16F11 0021;	
    // (𖼑) MIAO LETTER NHA	[44BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F11, 0x0021 };
    uint32_t const ces[9] = { 0x44BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_065)
{
    // 16F11 003F;	
    // (𖼑) MIAO LETTER NHA	[44BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F11, 0x003F };
    uint32_t const ces[9] = { 0x44BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_066)
{
    // 16F11 0061;	
    // (𖼑) MIAO LETTER NHA	[44BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F11, 0x0061 };
    uint32_t const ces[9] = { 0x44BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_067)
{
    // 16F11 0041;	
    // (𖼑) MIAO LETTER NHA	[44BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F11, 0x0041 };
    uint32_t const ces[9] = { 0x44BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_068)
{
    // 16F11 0062;	
    // (𖼑) MIAO LETTER NHA	[44BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F11, 0x0062 };
    uint32_t const ces[9] = { 0x44BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_069)
{
    // 16F12 0021;	
    // (𖼒) MIAO LETTER YI NNA	[44BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F12, 0x0021 };
    uint32_t const ces[9] = { 0x44BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_070)
{
    // 16F12 003F;	
    // (𖼒) MIAO LETTER YI NNA	[44BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F12, 0x003F };
    uint32_t const ces[9] = { 0x44BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_071)
{
    // 16F12 0061;	
    // (𖼒) MIAO LETTER YI NNA	[44BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F12, 0x0061 };
    uint32_t const ces[9] = { 0x44BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_072)
{
    // 16F12 0041;	
    // (𖼒) MIAO LETTER YI NNA	[44BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F12, 0x0041 };
    uint32_t const ces[9] = { 0x44BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_073)
{
    // 16F12 0062;	
    // (𖼒) MIAO LETTER YI NNA	[44BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F12, 0x0062 };
    uint32_t const ces[9] = { 0x44BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_074)
{
    // 16F14 0021;	
    // (𖼔) MIAO LETTER NNA	[44C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F14, 0x0021 };
    uint32_t const ces[9] = { 0x44C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_075)
{
    // 16F14 003F;	
    // (𖼔) MIAO LETTER NNA	[44C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F14, 0x003F };
    uint32_t const ces[9] = { 0x44C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_076)
{
    // 16F14 0061;	
    // (𖼔) MIAO LETTER NNA	[44C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F14, 0x0061 };
    uint32_t const ces[9] = { 0x44C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_077)
{
    // 16F14 0041;	
    // (𖼔) MIAO LETTER NNA	[44C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F14, 0x0041 };
    uint32_t const ces[9] = { 0x44C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_078)
{
    // 16F14 0062;	
    // (𖼔) MIAO LETTER NNA	[44C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F14, 0x0062 };
    uint32_t const ces[9] = { 0x44C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_079)
{
    // 16F15 0021;	
    // (𖼕) MIAO LETTER NNHA	[44C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F15, 0x0021 };
    uint32_t const ces[9] = { 0x44C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_080)
{
    // 16F15 003F;	
    // (𖼕) MIAO LETTER NNHA	[44C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F15, 0x003F };
    uint32_t const ces[9] = { 0x44C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_081)
{
    // 16F15 0061;	
    // (𖼕) MIAO LETTER NNHA	[44C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F15, 0x0061 };
    uint32_t const ces[9] = { 0x44C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_082)
{
    // 16F15 0041;	
    // (𖼕) MIAO LETTER NNHA	[44C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F15, 0x0041 };
    uint32_t const ces[9] = { 0x44C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_083)
{
    // 16F15 0062;	
    // (𖼕) MIAO LETTER NNHA	[44C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F15, 0x0062 };
    uint32_t const ces[9] = { 0x44C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_084)
{
    // 16F16 0021;	
    // (𖼖) MIAO LETTER LA	[44C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F16, 0x0021 };
    uint32_t const ces[9] = { 0x44C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_085)
{
    // 16F16 003F;	
    // (𖼖) MIAO LETTER LA	[44C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F16, 0x003F };
    uint32_t const ces[9] = { 0x44C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_086)
{
    // 16F16 0061;	
    // (𖼖) MIAO LETTER LA	[44C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F16, 0x0061 };
    uint32_t const ces[9] = { 0x44C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_087)
{
    // 16F16 0041;	
    // (𖼖) MIAO LETTER LA	[44C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F16, 0x0041 };
    uint32_t const ces[9] = { 0x44C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_088)
{
    // 16F16 0062;	
    // (𖼖) MIAO LETTER LA	[44C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F16, 0x0062 };
    uint32_t const ces[9] = { 0x44C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_089)
{
    // 16F17 0021;	
    // (𖼗) MIAO LETTER LYA	[44C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F17, 0x0021 };
    uint32_t const ces[9] = { 0x44C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_090)
{
    // 16F17 003F;	
    // (𖼗) MIAO LETTER LYA	[44C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F17, 0x003F };
    uint32_t const ces[9] = { 0x44C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_091)
{
    // 16F17 0061;	
    // (𖼗) MIAO LETTER LYA	[44C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F17, 0x0061 };
    uint32_t const ces[9] = { 0x44C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_092)
{
    // 16F17 0041;	
    // (𖼗) MIAO LETTER LYA	[44C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F17, 0x0041 };
    uint32_t const ces[9] = { 0x44C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_093)
{
    // 16F17 0062;	
    // (𖼗) MIAO LETTER LYA	[44C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F17, 0x0062 };
    uint32_t const ces[9] = { 0x44C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_094)
{
    // 16F18 0021;	
    // (𖼘) MIAO LETTER LHA	[44C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F18, 0x0021 };
    uint32_t const ces[9] = { 0x44C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_095)
{
    // 16F18 003F;	
    // (𖼘) MIAO LETTER LHA	[44C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F18, 0x003F };
    uint32_t const ces[9] = { 0x44C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_096)
{
    // 16F18 0061;	
    // (𖼘) MIAO LETTER LHA	[44C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F18, 0x0061 };
    uint32_t const ces[9] = { 0x44C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_097)
{
    // 16F18 0041;	
    // (𖼘) MIAO LETTER LHA	[44C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F18, 0x0041 };
    uint32_t const ces[9] = { 0x44C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_098)
{
    // 16F18 0062;	
    // (𖼘) MIAO LETTER LHA	[44C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F18, 0x0062 };
    uint32_t const ces[9] = { 0x44C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_099)
{
    // 16F19 0021;	
    // (𖼙) MIAO LETTER LHYA	[44C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F19, 0x0021 };
    uint32_t const ces[9] = { 0x44C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_100)
{
    // 16F19 003F;	
    // (𖼙) MIAO LETTER LHYA	[44C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F19, 0x003F };
    uint32_t const ces[9] = { 0x44C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_101)
{
    // 16F19 0061;	
    // (𖼙) MIAO LETTER LHYA	[44C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F19, 0x0061 };
    uint32_t const ces[9] = { 0x44C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_102)
{
    // 16F19 0041;	
    // (𖼙) MIAO LETTER LHYA	[44C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F19, 0x0041 };
    uint32_t const ces[9] = { 0x44C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_103)
{
    // 16F19 0062;	
    // (𖼙) MIAO LETTER LHYA	[44C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F19, 0x0062 };
    uint32_t const ces[9] = { 0x44C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_104)
{
    // 16F1A 0021;	
    // (𖼚) MIAO LETTER TLHA	[44C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F1A, 0x0021 };
    uint32_t const ces[9] = { 0x44C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_105)
{
    // 16F1A 003F;	
    // (𖼚) MIAO LETTER TLHA	[44C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F1A, 0x003F };
    uint32_t const ces[9] = { 0x44C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_106)
{
    // 16F1A 0061;	
    // (𖼚) MIAO LETTER TLHA	[44C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F1A, 0x0061 };
    uint32_t const ces[9] = { 0x44C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_107)
{
    // 16F1A 0041;	
    // (𖼚) MIAO LETTER TLHA	[44C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F1A, 0x0041 };
    uint32_t const ces[9] = { 0x44C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_108)
{
    // 16F1A 0062;	
    // (𖼚) MIAO LETTER TLHA	[44C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F1A, 0x0062 };
    uint32_t const ces[9] = { 0x44C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_109)
{
    // 16F1B 0021;	
    // (𖼛) MIAO LETTER DLHA	[44C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F1B, 0x0021 };
    uint32_t const ces[9] = { 0x44C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_110)
{
    // 16F1B 003F;	
    // (𖼛) MIAO LETTER DLHA	[44C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F1B, 0x003F };
    uint32_t const ces[9] = { 0x44C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_111)
{
    // 16F1B 0061;	
    // (𖼛) MIAO LETTER DLHA	[44C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F1B, 0x0061 };
    uint32_t const ces[9] = { 0x44C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_112)
{
    // 16F1B 0041;	
    // (𖼛) MIAO LETTER DLHA	[44C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F1B, 0x0041 };
    uint32_t const ces[9] = { 0x44C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_113)
{
    // 16F1B 0062;	
    // (𖼛) MIAO LETTER DLHA	[44C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F1B, 0x0062 };
    uint32_t const ces[9] = { 0x44C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_114)
{
    // 16F1C 0021;	
    // (𖼜) MIAO LETTER TLHYA	[44C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F1C, 0x0021 };
    uint32_t const ces[9] = { 0x44C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_115)
{
    // 16F1C 003F;	
    // (𖼜) MIAO LETTER TLHYA	[44C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F1C, 0x003F };
    uint32_t const ces[9] = { 0x44C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_116)
{
    // 16F1C 0061;	
    // (𖼜) MIAO LETTER TLHYA	[44C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F1C, 0x0061 };
    uint32_t const ces[9] = { 0x44C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_117)
{
    // 16F1C 0041;	
    // (𖼜) MIAO LETTER TLHYA	[44C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F1C, 0x0041 };
    uint32_t const ces[9] = { 0x44C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_118)
{
    // 16F1C 0062;	
    // (𖼜) MIAO LETTER TLHYA	[44C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F1C, 0x0062 };
    uint32_t const ces[9] = { 0x44C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_119)
{
    // 16F1D 0021;	
    // (𖼝) MIAO LETTER DLHYA	[44C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F1D, 0x0021 };
    uint32_t const ces[9] = { 0x44C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_120)
{
    // 16F1D 003F;	
    // (𖼝) MIAO LETTER DLHYA	[44C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F1D, 0x003F };
    uint32_t const ces[9] = { 0x44C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_121)
{
    // 16F1D 0061;	
    // (𖼝) MIAO LETTER DLHYA	[44C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F1D, 0x0061 };
    uint32_t const ces[9] = { 0x44C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_122)
{
    // 16F1D 0041;	
    // (𖼝) MIAO LETTER DLHYA	[44C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F1D, 0x0041 };
    uint32_t const ces[9] = { 0x44C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_123)
{
    // 16F1D 0062;	
    // (𖼝) MIAO LETTER DLHYA	[44C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F1D, 0x0062 };
    uint32_t const ces[9] = { 0x44C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_124)
{
    // 16F1E 0021;	
    // (𖼞) MIAO LETTER KA	[44CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F1E, 0x0021 };
    uint32_t const ces[9] = { 0x44CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_125)
{
    // 16F1E 003F;	
    // (𖼞) MIAO LETTER KA	[44CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F1E, 0x003F };
    uint32_t const ces[9] = { 0x44CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_126)
{
    // 16F1E 0061;	
    // (𖼞) MIAO LETTER KA	[44CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F1E, 0x0061 };
    uint32_t const ces[9] = { 0x44CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_127)
{
    // 16F1E 0041;	
    // (𖼞) MIAO LETTER KA	[44CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F1E, 0x0041 };
    uint32_t const ces[9] = { 0x44CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_128)
{
    // 16F1E 0062;	
    // (𖼞) MIAO LETTER KA	[44CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F1E, 0x0062 };
    uint32_t const ces[9] = { 0x44CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_129)
{
    // 16F1F 0021;	
    // (𖼟) MIAO LETTER GA	[44CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F1F, 0x0021 };
    uint32_t const ces[9] = { 0x44CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_130)
{
    // 16F1F 003F;	
    // (𖼟) MIAO LETTER GA	[44CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F1F, 0x003F };
    uint32_t const ces[9] = { 0x44CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_131)
{
    // 16F1F 0061;	
    // (𖼟) MIAO LETTER GA	[44CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F1F, 0x0061 };
    uint32_t const ces[9] = { 0x44CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_132)
{
    // 16F1F 0041;	
    // (𖼟) MIAO LETTER GA	[44CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F1F, 0x0041 };
    uint32_t const ces[9] = { 0x44CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_133)
{
    // 16F1F 0062;	
    // (𖼟) MIAO LETTER GA	[44CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F1F, 0x0062 };
    uint32_t const ces[9] = { 0x44CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_134)
{
    // 16F20 0021;	
    // (𖼠) MIAO LETTER YI KA	[44CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F20, 0x0021 };
    uint32_t const ces[9] = { 0x44CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_135)
{
    // 16F20 003F;	
    // (𖼠) MIAO LETTER YI KA	[44CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F20, 0x003F };
    uint32_t const ces[9] = { 0x44CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_136)
{
    // 16F20 0061;	
    // (𖼠) MIAO LETTER YI KA	[44CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F20, 0x0061 };
    uint32_t const ces[9] = { 0x44CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_137)
{
    // 16F20 0041;	
    // (𖼠) MIAO LETTER YI KA	[44CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F20, 0x0041 };
    uint32_t const ces[9] = { 0x44CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_138)
{
    // 16F20 0062;	
    // (𖼠) MIAO LETTER YI KA	[44CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F20, 0x0062 };
    uint32_t const ces[9] = { 0x44CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_139)
{
    // 16F21 0021;	
    // (𖼡) MIAO LETTER QA	[44CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F21, 0x0021 };
    uint32_t const ces[9] = { 0x44CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_140)
{
    // 16F21 003F;	
    // (𖼡) MIAO LETTER QA	[44CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F21, 0x003F };
    uint32_t const ces[9] = { 0x44CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_141)
{
    // 16F21 0061;	
    // (𖼡) MIAO LETTER QA	[44CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F21, 0x0061 };
    uint32_t const ces[9] = { 0x44CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_142)
{
    // 16F21 0041;	
    // (𖼡) MIAO LETTER QA	[44CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F21, 0x0041 };
    uint32_t const ces[9] = { 0x44CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_143)
{
    // 16F21 0062;	
    // (𖼡) MIAO LETTER QA	[44CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F21, 0x0062 };
    uint32_t const ces[9] = { 0x44CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_144)
{
    // 16F22 0021;	
    // (𖼢) MIAO LETTER QGA	[44CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F22, 0x0021 };
    uint32_t const ces[9] = { 0x44CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_145)
{
    // 16F22 003F;	
    // (𖼢) MIAO LETTER QGA	[44CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F22, 0x003F };
    uint32_t const ces[9] = { 0x44CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_146)
{
    // 16F22 0061;	
    // (𖼢) MIAO LETTER QGA	[44CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F22, 0x0061 };
    uint32_t const ces[9] = { 0x44CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_147)
{
    // 16F22 0041;	
    // (𖼢) MIAO LETTER QGA	[44CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F22, 0x0041 };
    uint32_t const ces[9] = { 0x44CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_148)
{
    // 16F22 0062;	
    // (𖼢) MIAO LETTER QGA	[44CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F22, 0x0062 };
    uint32_t const ces[9] = { 0x44CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_149)
{
    // 16F23 0021;	
    // (𖼣) MIAO LETTER NGA	[44CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F23, 0x0021 };
    uint32_t const ces[9] = { 0x44CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_150)
{
    // 16F25 0021;	
    // (𖼥) MIAO LETTER ARCHAIC NGA	[44CF 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x16F25, 0x0021 };
    uint32_t const ces[9] = { 0x44CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_151)
{
    // 16F23 003F;	
    // (𖼣) MIAO LETTER NGA	[44CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F23, 0x003F };
    uint32_t const ces[9] = { 0x44CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_152)
{
    // 16F25 003F;	
    // (𖼥) MIAO LETTER ARCHAIC NGA	[44CF 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x16F25, 0x003F };
    uint32_t const ces[9] = { 0x44CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_153)
{
    // 16F23 0061;	
    // (𖼣) MIAO LETTER NGA	[44CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F23, 0x0061 };
    uint32_t const ces[9] = { 0x44CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_154)
{
    // 16F23 0041;	
    // (𖼣) MIAO LETTER NGA	[44CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F23, 0x0041 };
    uint32_t const ces[9] = { 0x44CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_155)
{
    // 16F25 0061;	
    // (𖼥) MIAO LETTER ARCHAIC NGA	[44CF 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x16F25, 0x0061 };
    uint32_t const ces[9] = { 0x44CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_156)
{
    // 16F25 0041;	
    // (𖼥) MIAO LETTER ARCHAIC NGA	[44CF 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x16F25, 0x0041 };
    uint32_t const ces[9] = { 0x44CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_157)
{
    // 16F23 0062;	
    // (𖼣) MIAO LETTER NGA	[44CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F23, 0x0062 };
    uint32_t const ces[9] = { 0x44CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_158)
{
    // 16F25 0062;	
    // (𖼥) MIAO LETTER ARCHAIC NGA	[44CF 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x16F25, 0x0062 };
    uint32_t const ces[9] = { 0x44CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_159)
{
    // 16F24 0021;	
    // (𖼤) MIAO LETTER NGHA	[44D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F24, 0x0021 };
    uint32_t const ces[9] = { 0x44D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_160)
{
    // 16F24 003F;	
    // (𖼤) MIAO LETTER NGHA	[44D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F24, 0x003F };
    uint32_t const ces[9] = { 0x44D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_161)
{
    // 16F24 0061;	
    // (𖼤) MIAO LETTER NGHA	[44D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F24, 0x0061 };
    uint32_t const ces[9] = { 0x44D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_162)
{
    // 16F24 0041;	
    // (𖼤) MIAO LETTER NGHA	[44D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F24, 0x0041 };
    uint32_t const ces[9] = { 0x44D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_163)
{
    // 16F24 0062;	
    // (𖼤) MIAO LETTER NGHA	[44D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F24, 0x0062 };
    uint32_t const ces[9] = { 0x44D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_164)
{
    // 16F26 0021;	
    // (𖼦) MIAO LETTER HA	[44D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F26, 0x0021 };
    uint32_t const ces[9] = { 0x44D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_165)
{
    // 16F26 003F;	
    // (𖼦) MIAO LETTER HA	[44D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F26, 0x003F };
    uint32_t const ces[9] = { 0x44D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_166)
{
    // 16F26 0061;	
    // (𖼦) MIAO LETTER HA	[44D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F26, 0x0061 };
    uint32_t const ces[9] = { 0x44D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_167)
{
    // 16F26 0041;	
    // (𖼦) MIAO LETTER HA	[44D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F26, 0x0041 };
    uint32_t const ces[9] = { 0x44D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_168)
{
    // 16F26 0062;	
    // (𖼦) MIAO LETTER HA	[44D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F26, 0x0062 };
    uint32_t const ces[9] = { 0x44D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_169)
{
    // 16F27 0021;	
    // (𖼧) MIAO LETTER XA	[44D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F27, 0x0021 };
    uint32_t const ces[9] = { 0x44D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_170)
{
    // 16F27 003F;	
    // (𖼧) MIAO LETTER XA	[44D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F27, 0x003F };
    uint32_t const ces[9] = { 0x44D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_171)
{
    // 16F27 0061;	
    // (𖼧) MIAO LETTER XA	[44D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F27, 0x0061 };
    uint32_t const ces[9] = { 0x44D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_172)
{
    // 16F27 0041;	
    // (𖼧) MIAO LETTER XA	[44D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F27, 0x0041 };
    uint32_t const ces[9] = { 0x44D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_173)
{
    // 16F27 0062;	
    // (𖼧) MIAO LETTER XA	[44D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F27, 0x0062 };
    uint32_t const ces[9] = { 0x44D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_174)
{
    // 16F28 0021;	
    // (𖼨) MIAO LETTER GHA	[44D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F28, 0x0021 };
    uint32_t const ces[9] = { 0x44D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_175)
{
    // 16F28 003F;	
    // (𖼨) MIAO LETTER GHA	[44D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F28, 0x003F };
    uint32_t const ces[9] = { 0x44D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_176)
{
    // 16F28 0061;	
    // (𖼨) MIAO LETTER GHA	[44D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F28, 0x0061 };
    uint32_t const ces[9] = { 0x44D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_177)
{
    // 16F28 0041;	
    // (𖼨) MIAO LETTER GHA	[44D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F28, 0x0041 };
    uint32_t const ces[9] = { 0x44D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_178)
{
    // 16F28 0062;	
    // (𖼨) MIAO LETTER GHA	[44D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F28, 0x0062 };
    uint32_t const ces[9] = { 0x44D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_179)
{
    // 16F29 0021;	
    // (𖼩) MIAO LETTER GHHA	[44D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F29, 0x0021 };
    uint32_t const ces[9] = { 0x44D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_180)
{
    // 16F29 003F;	
    // (𖼩) MIAO LETTER GHHA	[44D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F29, 0x003F };
    uint32_t const ces[9] = { 0x44D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_181)
{
    // 16F29 0061;	
    // (𖼩) MIAO LETTER GHHA	[44D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F29, 0x0061 };
    uint32_t const ces[9] = { 0x44D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_182)
{
    // 16F29 0041;	
    // (𖼩) MIAO LETTER GHHA	[44D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F29, 0x0041 };
    uint32_t const ces[9] = { 0x44D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_183)
{
    // 16F29 0062;	
    // (𖼩) MIAO LETTER GHHA	[44D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F29, 0x0062 };
    uint32_t const ces[9] = { 0x44D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_184)
{
    // 16F2A 0021;	
    // (𖼪) MIAO LETTER TSSA	[44D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F2A, 0x0021 };
    uint32_t const ces[9] = { 0x44D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_185)
{
    // 16F2A 003F;	
    // (𖼪) MIAO LETTER TSSA	[44D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F2A, 0x003F };
    uint32_t const ces[9] = { 0x44D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_186)
{
    // 16F2A 0061;	
    // (𖼪) MIAO LETTER TSSA	[44D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F2A, 0x0061 };
    uint32_t const ces[9] = { 0x44D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_187)
{
    // 16F2A 0041;	
    // (𖼪) MIAO LETTER TSSA	[44D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F2A, 0x0041 };
    uint32_t const ces[9] = { 0x44D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_188)
{
    // 16F2A 0062;	
    // (𖼪) MIAO LETTER TSSA	[44D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F2A, 0x0062 };
    uint32_t const ces[9] = { 0x44D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_189)
{
    // 16F2B 0021;	
    // (𖼫) MIAO LETTER DZZA	[44D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F2B, 0x0021 };
    uint32_t const ces[9] = { 0x44D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_190)
{
    // 16F2B 003F;	
    // (𖼫) MIAO LETTER DZZA	[44D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F2B, 0x003F };
    uint32_t const ces[9] = { 0x44D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_191)
{
    // 16F2B 0061;	
    // (𖼫) MIAO LETTER DZZA	[44D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F2B, 0x0061 };
    uint32_t const ces[9] = { 0x44D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_192)
{
    // 16F2B 0041;	
    // (𖼫) MIAO LETTER DZZA	[44D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F2B, 0x0041 };
    uint32_t const ces[9] = { 0x44D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_193)
{
    // 16F2B 0062;	
    // (𖼫) MIAO LETTER DZZA	[44D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F2B, 0x0062 };
    uint32_t const ces[9] = { 0x44D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_194)
{
    // 16F2C 0021;	
    // (𖼬) MIAO LETTER NYA	[44D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F2C, 0x0021 };
    uint32_t const ces[9] = { 0x44D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_195)
{
    // 16F2C 003F;	
    // (𖼬) MIAO LETTER NYA	[44D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F2C, 0x003F };
    uint32_t const ces[9] = { 0x44D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_196)
{
    // 16F2C 0061;	
    // (𖼬) MIAO LETTER NYA	[44D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F2C, 0x0061 };
    uint32_t const ces[9] = { 0x44D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_197)
{
    // 16F2C 0041;	
    // (𖼬) MIAO LETTER NYA	[44D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F2C, 0x0041 };
    uint32_t const ces[9] = { 0x44D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_198)
{
    // 16F2C 0062;	
    // (𖼬) MIAO LETTER NYA	[44D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F2C, 0x0062 };
    uint32_t const ces[9] = { 0x44D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_199)
{
    // 16F2D 0021;	
    // (𖼭) MIAO LETTER NYHA	[44D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F2D, 0x0021 };
    uint32_t const ces[9] = { 0x44D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_200)
{
    // 16F2D 003F;	
    // (𖼭) MIAO LETTER NYHA	[44D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F2D, 0x003F };
    uint32_t const ces[9] = { 0x44D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_201)
{
    // 16F2D 0061;	
    // (𖼭) MIAO LETTER NYHA	[44D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F2D, 0x0061 };
    uint32_t const ces[9] = { 0x44D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_202)
{
    // 16F2D 0041;	
    // (𖼭) MIAO LETTER NYHA	[44D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F2D, 0x0041 };
    uint32_t const ces[9] = { 0x44D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_203)
{
    // 16F2D 0062;	
    // (𖼭) MIAO LETTER NYHA	[44D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F2D, 0x0062 };
    uint32_t const ces[9] = { 0x44D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_204)
{
    // 16F2E 0021;	
    // (𖼮) MIAO LETTER TSHA	[44D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F2E, 0x0021 };
    uint32_t const ces[9] = { 0x44D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_205)
{
    // 16F2E 003F;	
    // (𖼮) MIAO LETTER TSHA	[44D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F2E, 0x003F };
    uint32_t const ces[9] = { 0x44D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_206)
{
    // 16F2E 0061;	
    // (𖼮) MIAO LETTER TSHA	[44D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F2E, 0x0061 };
    uint32_t const ces[9] = { 0x44D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_207)
{
    // 16F2E 0041;	
    // (𖼮) MIAO LETTER TSHA	[44D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F2E, 0x0041 };
    uint32_t const ces[9] = { 0x44D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_208)
{
    // 16F2E 0062;	
    // (𖼮) MIAO LETTER TSHA	[44D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F2E, 0x0062 };
    uint32_t const ces[9] = { 0x44D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_209)
{
    // 16F2F 0021;	
    // (𖼯) MIAO LETTER DZHA	[44DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F2F, 0x0021 };
    uint32_t const ces[9] = { 0x44DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_210)
{
    // 16F2F 003F;	
    // (𖼯) MIAO LETTER DZHA	[44DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F2F, 0x003F };
    uint32_t const ces[9] = { 0x44DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_211)
{
    // 16F2F 0061;	
    // (𖼯) MIAO LETTER DZHA	[44DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F2F, 0x0061 };
    uint32_t const ces[9] = { 0x44DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_212)
{
    // 16F2F 0041;	
    // (𖼯) MIAO LETTER DZHA	[44DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F2F, 0x0041 };
    uint32_t const ces[9] = { 0x44DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_213)
{
    // 16F2F 0062;	
    // (𖼯) MIAO LETTER DZHA	[44DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F2F, 0x0062 };
    uint32_t const ces[9] = { 0x44DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_214)
{
    // 16F30 0021;	
    // (𖼰) MIAO LETTER YI TSHA	[44DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F30, 0x0021 };
    uint32_t const ces[9] = { 0x44DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_215)
{
    // 16F30 003F;	
    // (𖼰) MIAO LETTER YI TSHA	[44DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F30, 0x003F };
    uint32_t const ces[9] = { 0x44DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_216)
{
    // 16F30 0061;	
    // (𖼰) MIAO LETTER YI TSHA	[44DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F30, 0x0061 };
    uint32_t const ces[9] = { 0x44DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_217)
{
    // 16F30 0041;	
    // (𖼰) MIAO LETTER YI TSHA	[44DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F30, 0x0041 };
    uint32_t const ces[9] = { 0x44DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_218)
{
    // 16F30 0062;	
    // (𖼰) MIAO LETTER YI TSHA	[44DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F30, 0x0062 };
    uint32_t const ces[9] = { 0x44DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_219)
{
    // 16F31 0021;	
    // (𖼱) MIAO LETTER YI DZHA	[44DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F31, 0x0021 };
    uint32_t const ces[9] = { 0x44DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_220)
{
    // 16F31 003F;	
    // (𖼱) MIAO LETTER YI DZHA	[44DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F31, 0x003F };
    uint32_t const ces[9] = { 0x44DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_221)
{
    // 16F31 0061;	
    // (𖼱) MIAO LETTER YI DZHA	[44DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F31, 0x0061 };
    uint32_t const ces[9] = { 0x44DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_222)
{
    // 16F31 0041;	
    // (𖼱) MIAO LETTER YI DZHA	[44DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F31, 0x0041 };
    uint32_t const ces[9] = { 0x44DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_223)
{
    // 16F31 0062;	
    // (𖼱) MIAO LETTER YI DZHA	[44DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F31, 0x0062 };
    uint32_t const ces[9] = { 0x44DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_224)
{
    // 16F32 0021;	
    // (𖼲) MIAO LETTER REFORMED TSHA	[44DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F32, 0x0021 };
    uint32_t const ces[9] = { 0x44DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_225)
{
    // 16F32 003F;	
    // (𖼲) MIAO LETTER REFORMED TSHA	[44DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F32, 0x003F };
    uint32_t const ces[9] = { 0x44DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_226)
{
    // 16F32 0061;	
    // (𖼲) MIAO LETTER REFORMED TSHA	[44DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F32, 0x0061 };
    uint32_t const ces[9] = { 0x44DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_227)
{
    // 16F32 0041;	
    // (𖼲) MIAO LETTER REFORMED TSHA	[44DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F32, 0x0041 };
    uint32_t const ces[9] = { 0x44DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_228)
{
    // 16F32 0062;	
    // (𖼲) MIAO LETTER REFORMED TSHA	[44DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F32, 0x0062 };
    uint32_t const ces[9] = { 0x44DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_229)
{
    // 16F33 0021;	
    // (𖼳) MIAO LETTER SHA	[44DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F33, 0x0021 };
    uint32_t const ces[9] = { 0x44DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_230)
{
    // 16F33 003F;	
    // (𖼳) MIAO LETTER SHA	[44DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F33, 0x003F };
    uint32_t const ces[9] = { 0x44DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_231)
{
    // 16F33 0061;	
    // (𖼳) MIAO LETTER SHA	[44DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F33, 0x0061 };
    uint32_t const ces[9] = { 0x44DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_232)
{
    // 16F33 0041;	
    // (𖼳) MIAO LETTER SHA	[44DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F33, 0x0041 };
    uint32_t const ces[9] = { 0x44DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_233)
{
    // 16F33 0062;	
    // (𖼳) MIAO LETTER SHA	[44DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F33, 0x0062 };
    uint32_t const ces[9] = { 0x44DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_234)
{
    // 16F34 0021;	
    // (𖼴) MIAO LETTER SSA	[44DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F34, 0x0021 };
    uint32_t const ces[9] = { 0x44DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_235)
{
    // 16F34 003F;	
    // (𖼴) MIAO LETTER SSA	[44DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F34, 0x003F };
    uint32_t const ces[9] = { 0x44DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_236)
{
    // 16F34 0061;	
    // (𖼴) MIAO LETTER SSA	[44DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F34, 0x0061 };
    uint32_t const ces[9] = { 0x44DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_237)
{
    // 16F34 0041;	
    // (𖼴) MIAO LETTER SSA	[44DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F34, 0x0041 };
    uint32_t const ces[9] = { 0x44DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_238)
{
    // 16F34 0062;	
    // (𖼴) MIAO LETTER SSA	[44DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F34, 0x0062 };
    uint32_t const ces[9] = { 0x44DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_239)
{
    // 16F35 0021;	
    // (𖼵) MIAO LETTER ZHA	[44E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F35, 0x0021 };
    uint32_t const ces[9] = { 0x44E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_240)
{
    // 16F35 003F;	
    // (𖼵) MIAO LETTER ZHA	[44E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F35, 0x003F };
    uint32_t const ces[9] = { 0x44E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_241)
{
    // 16F35 0061;	
    // (𖼵) MIAO LETTER ZHA	[44E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F35, 0x0061 };
    uint32_t const ces[9] = { 0x44E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_242)
{
    // 16F35 0041;	
    // (𖼵) MIAO LETTER ZHA	[44E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F35, 0x0041 };
    uint32_t const ces[9] = { 0x44E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_243)
{
    // 16F35 0062;	
    // (𖼵) MIAO LETTER ZHA	[44E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F35, 0x0062 };
    uint32_t const ces[9] = { 0x44E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_244)
{
    // 16F36 0021;	
    // (𖼶) MIAO LETTER ZSHA	[44E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F36, 0x0021 };
    uint32_t const ces[9] = { 0x44E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_245)
{
    // 16F36 003F;	
    // (𖼶) MIAO LETTER ZSHA	[44E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F36, 0x003F };
    uint32_t const ces[9] = { 0x44E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_246)
{
    // 16F36 0061;	
    // (𖼶) MIAO LETTER ZSHA	[44E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F36, 0x0061 };
    uint32_t const ces[9] = { 0x44E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_247)
{
    // 16F36 0041;	
    // (𖼶) MIAO LETTER ZSHA	[44E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F36, 0x0041 };
    uint32_t const ces[9] = { 0x44E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_248)
{
    // 16F36 0062;	
    // (𖼶) MIAO LETTER ZSHA	[44E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F36, 0x0062 };
    uint32_t const ces[9] = { 0x44E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_249)
{
    // 16F37 0021;	
    // (𖼷) MIAO LETTER TSA	[44E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F37, 0x0021 };
    uint32_t const ces[9] = { 0x44E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_250)
{
    // 16F37 003F;	
    // (𖼷) MIAO LETTER TSA	[44E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F37, 0x003F };
    uint32_t const ces[9] = { 0x44E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_251)
{
    // 16F37 0061;	
    // (𖼷) MIAO LETTER TSA	[44E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F37, 0x0061 };
    uint32_t const ces[9] = { 0x44E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_252)
{
    // 16F37 0041;	
    // (𖼷) MIAO LETTER TSA	[44E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F37, 0x0041 };
    uint32_t const ces[9] = { 0x44E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_253)
{
    // 16F37 0062;	
    // (𖼷) MIAO LETTER TSA	[44E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F37, 0x0062 };
    uint32_t const ces[9] = { 0x44E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_254)
{
    // 16F38 0021;	
    // (𖼸) MIAO LETTER DZA	[44E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F38, 0x0021 };
    uint32_t const ces[9] = { 0x44E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_255)
{
    // 16F38 003F;	
    // (𖼸) MIAO LETTER DZA	[44E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F38, 0x003F };
    uint32_t const ces[9] = { 0x44E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_256)
{
    // 16F38 0061;	
    // (𖼸) MIAO LETTER DZA	[44E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F38, 0x0061 };
    uint32_t const ces[9] = { 0x44E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_257)
{
    // 16F38 0041;	
    // (𖼸) MIAO LETTER DZA	[44E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F38, 0x0041 };
    uint32_t const ces[9] = { 0x44E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_258)
{
    // 16F38 0062;	
    // (𖼸) MIAO LETTER DZA	[44E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F38, 0x0062 };
    uint32_t const ces[9] = { 0x44E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_259)
{
    // 16F39 0021;	
    // (𖼹) MIAO LETTER YI TSA	[44E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F39, 0x0021 };
    uint32_t const ces[9] = { 0x44E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_260)
{
    // 16F39 003F;	
    // (𖼹) MIAO LETTER YI TSA	[44E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F39, 0x003F };
    uint32_t const ces[9] = { 0x44E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_261)
{
    // 16F39 0061;	
    // (𖼹) MIAO LETTER YI TSA	[44E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F39, 0x0061 };
    uint32_t const ces[9] = { 0x44E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_262)
{
    // 16F39 0041;	
    // (𖼹) MIAO LETTER YI TSA	[44E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F39, 0x0041 };
    uint32_t const ces[9] = { 0x44E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_263)
{
    // 16F39 0062;	
    // (𖼹) MIAO LETTER YI TSA	[44E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F39, 0x0062 };
    uint32_t const ces[9] = { 0x44E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_264)
{
    // 16F3A 0021;	
    // (𖼺) MIAO LETTER SA	[44E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F3A, 0x0021 };
    uint32_t const ces[9] = { 0x44E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_265)
{
    // 16F3A 003F;	
    // (𖼺) MIAO LETTER SA	[44E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F3A, 0x003F };
    uint32_t const ces[9] = { 0x44E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_266)
{
    // 16F3A 0061;	
    // (𖼺) MIAO LETTER SA	[44E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F3A, 0x0061 };
    uint32_t const ces[9] = { 0x44E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_267)
{
    // 16F3A 0041;	
    // (𖼺) MIAO LETTER SA	[44E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F3A, 0x0041 };
    uint32_t const ces[9] = { 0x44E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_268)
{
    // 16F3A 0062;	
    // (𖼺) MIAO LETTER SA	[44E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F3A, 0x0062 };
    uint32_t const ces[9] = { 0x44E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_269)
{
    // 16F3B 0021;	
    // (𖼻) MIAO LETTER ZA	[44E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F3B, 0x0021 };
    uint32_t const ces[9] = { 0x44E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_270)
{
    // 16F3B 003F;	
    // (𖼻) MIAO LETTER ZA	[44E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F3B, 0x003F };
    uint32_t const ces[9] = { 0x44E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_271)
{
    // 16F3B 0061;	
    // (𖼻) MIAO LETTER ZA	[44E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F3B, 0x0061 };
    uint32_t const ces[9] = { 0x44E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_272)
{
    // 16F3B 0041;	
    // (𖼻) MIAO LETTER ZA	[44E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F3B, 0x0041 };
    uint32_t const ces[9] = { 0x44E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_273)
{
    // 16F3B 0062;	
    // (𖼻) MIAO LETTER ZA	[44E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F3B, 0x0062 };
    uint32_t const ces[9] = { 0x44E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_274)
{
    // 16F3C 0021;	
    // (𖼼) MIAO LETTER ZSA	[44E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F3C, 0x0021 };
    uint32_t const ces[9] = { 0x44E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_275)
{
    // 16F3C 003F;	
    // (𖼼) MIAO LETTER ZSA	[44E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F3C, 0x003F };
    uint32_t const ces[9] = { 0x44E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_276)
{
    // 16F3C 0061;	
    // (𖼼) MIAO LETTER ZSA	[44E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F3C, 0x0061 };
    uint32_t const ces[9] = { 0x44E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_277)
{
    // 16F3C 0041;	
    // (𖼼) MIAO LETTER ZSA	[44E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F3C, 0x0041 };
    uint32_t const ces[9] = { 0x44E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_278)
{
    // 16F3C 0062;	
    // (𖼼) MIAO LETTER ZSA	[44E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F3C, 0x0062 };
    uint32_t const ces[9] = { 0x44E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_279)
{
    // 16F3D 0021;	
    // (𖼽) MIAO LETTER ZZA	[44E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F3D, 0x0021 };
    uint32_t const ces[9] = { 0x44E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_280)
{
    // 16F3F 0021;	
    // (𖼿) MIAO LETTER ARCHAIC ZZA	[44E8 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x16F3F, 0x0021 };
    uint32_t const ces[9] = { 0x44E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_281)
{
    // 16F3D 003F;	
    // (𖼽) MIAO LETTER ZZA	[44E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F3D, 0x003F };
    uint32_t const ces[9] = { 0x44E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_282)
{
    // 16F3F 003F;	
    // (𖼿) MIAO LETTER ARCHAIC ZZA	[44E8 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x16F3F, 0x003F };
    uint32_t const ces[9] = { 0x44E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_283)
{
    // 16F3D 0061;	
    // (𖼽) MIAO LETTER ZZA	[44E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F3D, 0x0061 };
    uint32_t const ces[9] = { 0x44E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_284)
{
    // 16F3D 0041;	
    // (𖼽) MIAO LETTER ZZA	[44E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F3D, 0x0041 };
    uint32_t const ces[9] = { 0x44E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_285)
{
    // 16F3F 0061;	
    // (𖼿) MIAO LETTER ARCHAIC ZZA	[44E8 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x16F3F, 0x0061 };
    uint32_t const ces[9] = { 0x44E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_286)
{
    // 16F3F 0041;	
    // (𖼿) MIAO LETTER ARCHAIC ZZA	[44E8 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x16F3F, 0x0041 };
    uint32_t const ces[9] = { 0x44E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_287)
{
    // 16F3D 0062;	
    // (𖼽) MIAO LETTER ZZA	[44E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F3D, 0x0062 };
    uint32_t const ces[9] = { 0x44E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_288)
{
    // 16F3F 0062;	
    // (𖼿) MIAO LETTER ARCHAIC ZZA	[44E8 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x16F3F, 0x0062 };
    uint32_t const ces[9] = { 0x44E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_289)
{
    // 16F3E 0021;	
    // (𖼾) MIAO LETTER ZZSA	[44E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F3E, 0x0021 };
    uint32_t const ces[9] = { 0x44E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_290)
{
    // 16F3E 003F;	
    // (𖼾) MIAO LETTER ZZSA	[44E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F3E, 0x003F };
    uint32_t const ces[9] = { 0x44E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_291)
{
    // 16F3E 0061;	
    // (𖼾) MIAO LETTER ZZSA	[44E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F3E, 0x0061 };
    uint32_t const ces[9] = { 0x44E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_292)
{
    // 16F3E 0041;	
    // (𖼾) MIAO LETTER ZZSA	[44E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F3E, 0x0041 };
    uint32_t const ces[9] = { 0x44E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_293)
{
    // 16F3E 0062;	
    // (𖼾) MIAO LETTER ZZSA	[44E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F3E, 0x0062 };
    uint32_t const ces[9] = { 0x44E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_294)
{
    // 16F40 0021;	
    // (𖽀) MIAO LETTER ZZYA	[44EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F40, 0x0021 };
    uint32_t const ces[9] = { 0x44EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_295)
{
    // 16F40 003F;	
    // (𖽀) MIAO LETTER ZZYA	[44EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F40, 0x003F };
    uint32_t const ces[9] = { 0x44EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_296)
{
    // 16F40 0061;	
    // (𖽀) MIAO LETTER ZZYA	[44EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F40, 0x0061 };
    uint32_t const ces[9] = { 0x44EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_297)
{
    // 16F40 0041;	
    // (𖽀) MIAO LETTER ZZYA	[44EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F40, 0x0041 };
    uint32_t const ces[9] = { 0x44EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_298)
{
    // 16F40 0062;	
    // (𖽀) MIAO LETTER ZZYA	[44EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F40, 0x0062 };
    uint32_t const ces[9] = { 0x44EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_299)
{
    // 16F41 0021;	
    // (𖽁) MIAO LETTER ZZSYA	[44EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F41, 0x0021 };
    uint32_t const ces[9] = { 0x44EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_300)
{
    // 16F41 003F;	
    // (𖽁) MIAO LETTER ZZSYA	[44EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F41, 0x003F };
    uint32_t const ces[9] = { 0x44EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_301)
{
    // 16F41 0061;	
    // (𖽁) MIAO LETTER ZZSYA	[44EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F41, 0x0061 };
    uint32_t const ces[9] = { 0x44EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_302)
{
    // 16F41 0041;	
    // (𖽁) MIAO LETTER ZZSYA	[44EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F41, 0x0041 };
    uint32_t const ces[9] = { 0x44EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_303)
{
    // 16F41 0062;	
    // (𖽁) MIAO LETTER ZZSYA	[44EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F41, 0x0062 };
    uint32_t const ces[9] = { 0x44EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_304)
{
    // 16F42 0021;	
    // (𖽂) MIAO LETTER WA	[44EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F42, 0x0021 };
    uint32_t const ces[9] = { 0x44EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_305)
{
    // 16F42 003F;	
    // (𖽂) MIAO LETTER WA	[44EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F42, 0x003F };
    uint32_t const ces[9] = { 0x44EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_306)
{
    // 16F42 0061;	
    // (𖽂) MIAO LETTER WA	[44EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F42, 0x0061 };
    uint32_t const ces[9] = { 0x44EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_307)
{
    // 16F42 0041;	
    // (𖽂) MIAO LETTER WA	[44EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F42, 0x0041 };
    uint32_t const ces[9] = { 0x44EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_308)
{
    // 16F42 0062;	
    // (𖽂) MIAO LETTER WA	[44EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F42, 0x0062 };
    uint32_t const ces[9] = { 0x44EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_309)
{
    // 16F43 0021;	
    // (𖽃) MIAO LETTER AH	[44ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F43, 0x0021 };
    uint32_t const ces[9] = { 0x44ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_310)
{
    // 16F43 003F;	
    // (𖽃) MIAO LETTER AH	[44ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F43, 0x003F };
    uint32_t const ces[9] = { 0x44ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_311)
{
    // 16F43 0061;	
    // (𖽃) MIAO LETTER AH	[44ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F43, 0x0061 };
    uint32_t const ces[9] = { 0x44ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_312)
{
    // 16F43 0041;	
    // (𖽃) MIAO LETTER AH	[44ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F43, 0x0041 };
    uint32_t const ces[9] = { 0x44ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_313)
{
    // 16F43 0062;	
    // (𖽃) MIAO LETTER AH	[44ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F43, 0x0062 };
    uint32_t const ces[9] = { 0x44ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_314)
{
    // 16F44 0021;	
    // (𖽄) MIAO LETTER HHA	[44EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F44, 0x0021 };
    uint32_t const ces[9] = { 0x44EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_315)
{
    // 16F44 003F;	
    // (𖽄) MIAO LETTER HHA	[44EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F44, 0x003F };
    uint32_t const ces[9] = { 0x44EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_316)
{
    // 16F44 0061;	
    // (𖽄) MIAO LETTER HHA	[44EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F44, 0x0061 };
    uint32_t const ces[9] = { 0x44EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_317)
{
    // 16F44 0041;	
    // (𖽄) MIAO LETTER HHA	[44EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F44, 0x0041 };
    uint32_t const ces[9] = { 0x44EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_318)
{
    // 16F44 0062;	
    // (𖽄) MIAO LETTER HHA	[44EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F44, 0x0062 };
    uint32_t const ces[9] = { 0x44EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_319)
{
    // 16F50 0021;	
    // (𖽐) MIAO LETTER NASALIZATION	[44EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F50, 0x0021 };
    uint32_t const ces[9] = { 0x44EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_320)
{
    // 16F50 003F;	
    // (𖽐) MIAO LETTER NASALIZATION	[44EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F50, 0x003F };
    uint32_t const ces[9] = { 0x44EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_321)
{
    // 16F50 0061;	
    // (𖽐) MIAO LETTER NASALIZATION	[44EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F50, 0x0061 };
    uint32_t const ces[9] = { 0x44EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_322)
{
    // 16F50 0041;	
    // (𖽐) MIAO LETTER NASALIZATION	[44EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F50, 0x0041 };
    uint32_t const ces[9] = { 0x44EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_323)
{
    // 16F50 0062;	
    // (𖽐) MIAO LETTER NASALIZATION	[44EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F50, 0x0062 };
    uint32_t const ces[9] = { 0x44EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_324)
{
    // 16F51 0021;	
    // (𖽑) MIAO SIGN ASPIRATION	[44F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F51, 0x0021 };
    uint32_t const ces[9] = { 0x44F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_325)
{
    // 16F51 003F;	
    // (𖽑) MIAO SIGN ASPIRATION	[44F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F51, 0x003F };
    uint32_t const ces[9] = { 0x44F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_326)
{
    // 16F51 0061;	
    // (𖽑) MIAO SIGN ASPIRATION	[44F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F51, 0x0061 };
    uint32_t const ces[9] = { 0x44F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_327)
{
    // 16F51 0041;	
    // (𖽑) MIAO SIGN ASPIRATION	[44F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F51, 0x0041 };
    uint32_t const ces[9] = { 0x44F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_328)
{
    // 16F51 0062;	
    // (𖽑) MIAO SIGN ASPIRATION	[44F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F51, 0x0062 };
    uint32_t const ces[9] = { 0x44F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_329)
{
    // 16F52 0021;	
    // (𖽒) MIAO SIGN REFORMED VOICING	[44F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F52, 0x0021 };
    uint32_t const ces[9] = { 0x44F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_330)
{
    // 16F52 003F;	
    // (𖽒) MIAO SIGN REFORMED VOICING	[44F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F52, 0x003F };
    uint32_t const ces[9] = { 0x44F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_331)
{
    // 16F52 0061;	
    // (𖽒) MIAO SIGN REFORMED VOICING	[44F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F52, 0x0061 };
    uint32_t const ces[9] = { 0x44F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_332)
{
    // 16F52 0041;	
    // (𖽒) MIAO SIGN REFORMED VOICING	[44F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F52, 0x0041 };
    uint32_t const ces[9] = { 0x44F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_333)
{
    // 16F52 0062;	
    // (𖽒) MIAO SIGN REFORMED VOICING	[44F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F52, 0x0062 };
    uint32_t const ces[9] = { 0x44F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_334)
{
    // 16F53 0021;	
    // (𖽓) MIAO SIGN REFORMED ASPIRATION	[44F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F53, 0x0021 };
    uint32_t const ces[9] = { 0x44F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_335)
{
    // 16F53 003F;	
    // (𖽓) MIAO SIGN REFORMED ASPIRATION	[44F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F53, 0x003F };
    uint32_t const ces[9] = { 0x44F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_336)
{
    // 16F53 0061;	
    // (𖽓) MIAO SIGN REFORMED ASPIRATION	[44F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F53, 0x0061 };
    uint32_t const ces[9] = { 0x44F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_337)
{
    // 16F53 0041;	
    // (𖽓) MIAO SIGN REFORMED ASPIRATION	[44F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F53, 0x0041 };
    uint32_t const ces[9] = { 0x44F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_338)
{
    // 16F53 0062;	
    // (𖽓) MIAO SIGN REFORMED ASPIRATION	[44F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F53, 0x0062 };
    uint32_t const ces[9] = { 0x44F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_339)
{
    // 16F54 0021;	
    // (𖽔) MIAO VOWEL SIGN A	[44F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F54, 0x0021 };
    uint32_t const ces[9] = { 0x44F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_340)
{
    // 16F54 003F;	
    // (𖽔) MIAO VOWEL SIGN A	[44F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F54, 0x003F };
    uint32_t const ces[9] = { 0x44F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_341)
{
    // 16F54 0061;	
    // (𖽔) MIAO VOWEL SIGN A	[44F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F54, 0x0061 };
    uint32_t const ces[9] = { 0x44F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_342)
{
    // 16F54 0041;	
    // (𖽔) MIAO VOWEL SIGN A	[44F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F54, 0x0041 };
    uint32_t const ces[9] = { 0x44F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_343)
{
    // 16F54 0062;	
    // (𖽔) MIAO VOWEL SIGN A	[44F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F54, 0x0062 };
    uint32_t const ces[9] = { 0x44F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_344)
{
    // 16F55 0021;	
    // (𖽕) MIAO VOWEL SIGN AA	[44F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F55, 0x0021 };
    uint32_t const ces[9] = { 0x44F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_345)
{
    // 16F55 003F;	
    // (𖽕) MIAO VOWEL SIGN AA	[44F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F55, 0x003F };
    uint32_t const ces[9] = { 0x44F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_346)
{
    // 16F55 0061;	
    // (𖽕) MIAO VOWEL SIGN AA	[44F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F55, 0x0061 };
    uint32_t const ces[9] = { 0x44F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_347)
{
    // 16F55 0041;	
    // (𖽕) MIAO VOWEL SIGN AA	[44F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F55, 0x0041 };
    uint32_t const ces[9] = { 0x44F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_348)
{
    // 16F55 0062;	
    // (𖽕) MIAO VOWEL SIGN AA	[44F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F55, 0x0062 };
    uint32_t const ces[9] = { 0x44F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_349)
{
    // 16F56 0021;	
    // (𖽖) MIAO VOWEL SIGN AHH	[44F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F56, 0x0021 };
    uint32_t const ces[9] = { 0x44F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_350)
{
    // 16F56 003F;	
    // (𖽖) MIAO VOWEL SIGN AHH	[44F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F56, 0x003F };
    uint32_t const ces[9] = { 0x44F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_351)
{
    // 16F56 0061;	
    // (𖽖) MIAO VOWEL SIGN AHH	[44F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F56, 0x0061 };
    uint32_t const ces[9] = { 0x44F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_352)
{
    // 16F56 0041;	
    // (𖽖) MIAO VOWEL SIGN AHH	[44F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F56, 0x0041 };
    uint32_t const ces[9] = { 0x44F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_353)
{
    // 16F56 0062;	
    // (𖽖) MIAO VOWEL SIGN AHH	[44F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F56, 0x0062 };
    uint32_t const ces[9] = { 0x44F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_354)
{
    // 16F57 0021;	
    // (𖽗) MIAO VOWEL SIGN AN	[44F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F57, 0x0021 };
    uint32_t const ces[9] = { 0x44F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_355)
{
    // 16F57 003F;	
    // (𖽗) MIAO VOWEL SIGN AN	[44F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F57, 0x003F };
    uint32_t const ces[9] = { 0x44F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_356)
{
    // 16F57 0061;	
    // (𖽗) MIAO VOWEL SIGN AN	[44F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F57, 0x0061 };
    uint32_t const ces[9] = { 0x44F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_357)
{
    // 16F57 0041;	
    // (𖽗) MIAO VOWEL SIGN AN	[44F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F57, 0x0041 };
    uint32_t const ces[9] = { 0x44F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_358)
{
    // 16F57 0062;	
    // (𖽗) MIAO VOWEL SIGN AN	[44F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F57, 0x0062 };
    uint32_t const ces[9] = { 0x44F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_359)
{
    // 16F58 0021;	
    // (𖽘) MIAO VOWEL SIGN ANG	[44F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F58, 0x0021 };
    uint32_t const ces[9] = { 0x44F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_360)
{
    // 16F58 003F;	
    // (𖽘) MIAO VOWEL SIGN ANG	[44F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F58, 0x003F };
    uint32_t const ces[9] = { 0x44F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_361)
{
    // 16F58 0061;	
    // (𖽘) MIAO VOWEL SIGN ANG	[44F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F58, 0x0061 };
    uint32_t const ces[9] = { 0x44F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_362)
{
    // 16F58 0041;	
    // (𖽘) MIAO VOWEL SIGN ANG	[44F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F58, 0x0041 };
    uint32_t const ces[9] = { 0x44F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_363)
{
    // 16F58 0062;	
    // (𖽘) MIAO VOWEL SIGN ANG	[44F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F58, 0x0062 };
    uint32_t const ces[9] = { 0x44F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_364)
{
    // 16F59 0021;	
    // (𖽙) MIAO VOWEL SIGN O	[44F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F59, 0x0021 };
    uint32_t const ces[9] = { 0x44F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_365)
{
    // 16F59 003F;	
    // (𖽙) MIAO VOWEL SIGN O	[44F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F59, 0x003F };
    uint32_t const ces[9] = { 0x44F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_366)
{
    // 16F59 0061;	
    // (𖽙) MIAO VOWEL SIGN O	[44F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F59, 0x0061 };
    uint32_t const ces[9] = { 0x44F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_367)
{
    // 16F59 0041;	
    // (𖽙) MIAO VOWEL SIGN O	[44F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F59, 0x0041 };
    uint32_t const ces[9] = { 0x44F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_368)
{
    // 16F59 0062;	
    // (𖽙) MIAO VOWEL SIGN O	[44F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F59, 0x0062 };
    uint32_t const ces[9] = { 0x44F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_369)
{
    // 16F5A 0021;	
    // (𖽚) MIAO VOWEL SIGN OO	[44F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F5A, 0x0021 };
    uint32_t const ces[9] = { 0x44F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_370)
{
    // 16F5A 003F;	
    // (𖽚) MIAO VOWEL SIGN OO	[44F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F5A, 0x003F };
    uint32_t const ces[9] = { 0x44F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_371)
{
    // 16F5A 0061;	
    // (𖽚) MIAO VOWEL SIGN OO	[44F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F5A, 0x0061 };
    uint32_t const ces[9] = { 0x44F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_372)
{
    // 16F5A 0041;	
    // (𖽚) MIAO VOWEL SIGN OO	[44F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F5A, 0x0041 };
    uint32_t const ces[9] = { 0x44F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_373)
{
    // 16F5A 0062;	
    // (𖽚) MIAO VOWEL SIGN OO	[44F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F5A, 0x0062 };
    uint32_t const ces[9] = { 0x44F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_374)
{
    // 16F5B 0021;	
    // (𖽛) MIAO VOWEL SIGN WO	[44FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F5B, 0x0021 };
    uint32_t const ces[9] = { 0x44FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_375)
{
    // 16F5B 003F;	
    // (𖽛) MIAO VOWEL SIGN WO	[44FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F5B, 0x003F };
    uint32_t const ces[9] = { 0x44FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_376)
{
    // 16F5B 0061;	
    // (𖽛) MIAO VOWEL SIGN WO	[44FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F5B, 0x0061 };
    uint32_t const ces[9] = { 0x44FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_377)
{
    // 16F5B 0041;	
    // (𖽛) MIAO VOWEL SIGN WO	[44FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F5B, 0x0041 };
    uint32_t const ces[9] = { 0x44FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_378)
{
    // 16F5B 0062;	
    // (𖽛) MIAO VOWEL SIGN WO	[44FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F5B, 0x0062 };
    uint32_t const ces[9] = { 0x44FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_379)
{
    // 16F5C 0021;	
    // (𖽜) MIAO VOWEL SIGN W	[44FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F5C, 0x0021 };
    uint32_t const ces[9] = { 0x44FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_380)
{
    // 16F5C 003F;	
    // (𖽜) MIAO VOWEL SIGN W	[44FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F5C, 0x003F };
    uint32_t const ces[9] = { 0x44FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_381)
{
    // 16F5C 0061;	
    // (𖽜) MIAO VOWEL SIGN W	[44FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F5C, 0x0061 };
    uint32_t const ces[9] = { 0x44FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_382)
{
    // 16F5C 0041;	
    // (𖽜) MIAO VOWEL SIGN W	[44FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F5C, 0x0041 };
    uint32_t const ces[9] = { 0x44FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_383)
{
    // 16F5C 0062;	
    // (𖽜) MIAO VOWEL SIGN W	[44FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F5C, 0x0062 };
    uint32_t const ces[9] = { 0x44FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_384)
{
    // 16F5D 0021;	
    // (𖽝) MIAO VOWEL SIGN E	[44FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F5D, 0x0021 };
    uint32_t const ces[9] = { 0x44FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_385)
{
    // 16F5D 003F;	
    // (𖽝) MIAO VOWEL SIGN E	[44FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F5D, 0x003F };
    uint32_t const ces[9] = { 0x44FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_386)
{
    // 16F5D 0061;	
    // (𖽝) MIAO VOWEL SIGN E	[44FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F5D, 0x0061 };
    uint32_t const ces[9] = { 0x44FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_387)
{
    // 16F5D 0041;	
    // (𖽝) MIAO VOWEL SIGN E	[44FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F5D, 0x0041 };
    uint32_t const ces[9] = { 0x44FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_388)
{
    // 16F5D 0062;	
    // (𖽝) MIAO VOWEL SIGN E	[44FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F5D, 0x0062 };
    uint32_t const ces[9] = { 0x44FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_389)
{
    // 16F5E 0021;	
    // (𖽞) MIAO VOWEL SIGN EN	[44FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F5E, 0x0021 };
    uint32_t const ces[9] = { 0x44FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_390)
{
    // 16F5E 003F;	
    // (𖽞) MIAO VOWEL SIGN EN	[44FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F5E, 0x003F };
    uint32_t const ces[9] = { 0x44FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_391)
{
    // 16F5E 0061;	
    // (𖽞) MIAO VOWEL SIGN EN	[44FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F5E, 0x0061 };
    uint32_t const ces[9] = { 0x44FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_392)
{
    // 16F5E 0041;	
    // (𖽞) MIAO VOWEL SIGN EN	[44FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F5E, 0x0041 };
    uint32_t const ces[9] = { 0x44FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_393)
{
    // 16F5E 0062;	
    // (𖽞) MIAO VOWEL SIGN EN	[44FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F5E, 0x0062 };
    uint32_t const ces[9] = { 0x44FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_394)
{
    // 16F5F 0021;	
    // (𖽟) MIAO VOWEL SIGN ENG	[44FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F5F, 0x0021 };
    uint32_t const ces[9] = { 0x44FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_395)
{
    // 16F5F 003F;	
    // (𖽟) MIAO VOWEL SIGN ENG	[44FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F5F, 0x003F };
    uint32_t const ces[9] = { 0x44FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_396)
{
    // 16F5F 0061;	
    // (𖽟) MIAO VOWEL SIGN ENG	[44FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F5F, 0x0061 };
    uint32_t const ces[9] = { 0x44FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_397)
{
    // 16F5F 0041;	
    // (𖽟) MIAO VOWEL SIGN ENG	[44FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F5F, 0x0041 };
    uint32_t const ces[9] = { 0x44FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_398)
{
    // 16F5F 0062;	
    // (𖽟) MIAO VOWEL SIGN ENG	[44FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F5F, 0x0062 };
    uint32_t const ces[9] = { 0x44FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_399)
{
    // 16F60 0021;	
    // (𖽠) MIAO VOWEL SIGN OEY	[44FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F60, 0x0021 };
    uint32_t const ces[9] = { 0x44FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_400)
{
    // 16F60 003F;	
    // (𖽠) MIAO VOWEL SIGN OEY	[44FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F60, 0x003F };
    uint32_t const ces[9] = { 0x44FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_401)
{
    // 16F60 0061;	
    // (𖽠) MIAO VOWEL SIGN OEY	[44FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F60, 0x0061 };
    uint32_t const ces[9] = { 0x44FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_402)
{
    // 16F60 0041;	
    // (𖽠) MIAO VOWEL SIGN OEY	[44FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F60, 0x0041 };
    uint32_t const ces[9] = { 0x44FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_403)
{
    // 16F60 0062;	
    // (𖽠) MIAO VOWEL SIGN OEY	[44FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F60, 0x0062 };
    uint32_t const ces[9] = { 0x44FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_404)
{
    // 16F61 0021;	
    // (𖽡) MIAO VOWEL SIGN I	[4500 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F61, 0x0021 };
    uint32_t const ces[9] = { 0x4500, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_405)
{
    // 16F61 003F;	
    // (𖽡) MIAO VOWEL SIGN I	[4500 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F61, 0x003F };
    uint32_t const ces[9] = { 0x4500, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_406)
{
    // 16F61 0061;	
    // (𖽡) MIAO VOWEL SIGN I	[4500 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F61, 0x0061 };
    uint32_t const ces[9] = { 0x4500, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_407)
{
    // 16F61 0041;	
    // (𖽡) MIAO VOWEL SIGN I	[4500 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F61, 0x0041 };
    uint32_t const ces[9] = { 0x4500, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_408)
{
    // 16F61 0062;	
    // (𖽡) MIAO VOWEL SIGN I	[4500 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F61, 0x0062 };
    uint32_t const ces[9] = { 0x4500, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_409)
{
    // 16F62 0021;	
    // (𖽢) MIAO VOWEL SIGN IA	[4501 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F62, 0x0021 };
    uint32_t const ces[9] = { 0x4501, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_410)
{
    // 16F62 003F;	
    // (𖽢) MIAO VOWEL SIGN IA	[4501 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F62, 0x003F };
    uint32_t const ces[9] = { 0x4501, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_411)
{
    // 16F62 0061;	
    // (𖽢) MIAO VOWEL SIGN IA	[4501 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F62, 0x0061 };
    uint32_t const ces[9] = { 0x4501, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_412)
{
    // 16F62 0041;	
    // (𖽢) MIAO VOWEL SIGN IA	[4501 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F62, 0x0041 };
    uint32_t const ces[9] = { 0x4501, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_413)
{
    // 16F62 0062;	
    // (𖽢) MIAO VOWEL SIGN IA	[4501 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F62, 0x0062 };
    uint32_t const ces[9] = { 0x4501, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_414)
{
    // 16F63 0021;	
    // (𖽣) MIAO VOWEL SIGN IAN	[4502 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F63, 0x0021 };
    uint32_t const ces[9] = { 0x4502, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_415)
{
    // 16F63 003F;	
    // (𖽣) MIAO VOWEL SIGN IAN	[4502 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F63, 0x003F };
    uint32_t const ces[9] = { 0x4502, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_416)
{
    // 16F63 0061;	
    // (𖽣) MIAO VOWEL SIGN IAN	[4502 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F63, 0x0061 };
    uint32_t const ces[9] = { 0x4502, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_417)
{
    // 16F63 0041;	
    // (𖽣) MIAO VOWEL SIGN IAN	[4502 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F63, 0x0041 };
    uint32_t const ces[9] = { 0x4502, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_418)
{
    // 16F63 0062;	
    // (𖽣) MIAO VOWEL SIGN IAN	[4502 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F63, 0x0062 };
    uint32_t const ces[9] = { 0x4502, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_419)
{
    // 16F64 0021;	
    // (𖽤) MIAO VOWEL SIGN IANG	[4503 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F64, 0x0021 };
    uint32_t const ces[9] = { 0x4503, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_420)
{
    // 16F64 003F;	
    // (𖽤) MIAO VOWEL SIGN IANG	[4503 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F64, 0x003F };
    uint32_t const ces[9] = { 0x4503, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_421)
{
    // 16F64 0061;	
    // (𖽤) MIAO VOWEL SIGN IANG	[4503 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F64, 0x0061 };
    uint32_t const ces[9] = { 0x4503, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_422)
{
    // 16F64 0041;	
    // (𖽤) MIAO VOWEL SIGN IANG	[4503 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F64, 0x0041 };
    uint32_t const ces[9] = { 0x4503, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_423)
{
    // 16F64 0062;	
    // (𖽤) MIAO VOWEL SIGN IANG	[4503 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F64, 0x0062 };
    uint32_t const ces[9] = { 0x4503, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_424)
{
    // 16F65 0021;	
    // (𖽥) MIAO VOWEL SIGN IO	[4504 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F65, 0x0021 };
    uint32_t const ces[9] = { 0x4504, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_425)
{
    // 16F65 003F;	
    // (𖽥) MIAO VOWEL SIGN IO	[4504 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F65, 0x003F };
    uint32_t const ces[9] = { 0x4504, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_426)
{
    // 16F65 0061;	
    // (𖽥) MIAO VOWEL SIGN IO	[4504 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F65, 0x0061 };
    uint32_t const ces[9] = { 0x4504, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_427)
{
    // 16F65 0041;	
    // (𖽥) MIAO VOWEL SIGN IO	[4504 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F65, 0x0041 };
    uint32_t const ces[9] = { 0x4504, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_428)
{
    // 16F65 0062;	
    // (𖽥) MIAO VOWEL SIGN IO	[4504 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F65, 0x0062 };
    uint32_t const ces[9] = { 0x4504, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_429)
{
    // 16F66 0021;	
    // (𖽦) MIAO VOWEL SIGN IE	[4505 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F66, 0x0021 };
    uint32_t const ces[9] = { 0x4505, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_430)
{
    // 16F66 003F;	
    // (𖽦) MIAO VOWEL SIGN IE	[4505 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F66, 0x003F };
    uint32_t const ces[9] = { 0x4505, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_431)
{
    // 16F66 0061;	
    // (𖽦) MIAO VOWEL SIGN IE	[4505 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F66, 0x0061 };
    uint32_t const ces[9] = { 0x4505, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_432)
{
    // 16F66 0041;	
    // (𖽦) MIAO VOWEL SIGN IE	[4505 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F66, 0x0041 };
    uint32_t const ces[9] = { 0x4505, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_433)
{
    // 16F66 0062;	
    // (𖽦) MIAO VOWEL SIGN IE	[4505 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F66, 0x0062 };
    uint32_t const ces[9] = { 0x4505, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_434)
{
    // 16F67 0021;	
    // (𖽧) MIAO VOWEL SIGN II	[4506 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F67, 0x0021 };
    uint32_t const ces[9] = { 0x4506, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_435)
{
    // 16F67 003F;	
    // (𖽧) MIAO VOWEL SIGN II	[4506 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F67, 0x003F };
    uint32_t const ces[9] = { 0x4506, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_436)
{
    // 16F67 0061;	
    // (𖽧) MIAO VOWEL SIGN II	[4506 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F67, 0x0061 };
    uint32_t const ces[9] = { 0x4506, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_437)
{
    // 16F67 0041;	
    // (𖽧) MIAO VOWEL SIGN II	[4506 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F67, 0x0041 };
    uint32_t const ces[9] = { 0x4506, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_438)
{
    // 16F67 0062;	
    // (𖽧) MIAO VOWEL SIGN II	[4506 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F67, 0x0062 };
    uint32_t const ces[9] = { 0x4506, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_439)
{
    // 16F68 0021;	
    // (𖽨) MIAO VOWEL SIGN IU	[4507 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F68, 0x0021 };
    uint32_t const ces[9] = { 0x4507, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_440)
{
    // 16F68 003F;	
    // (𖽨) MIAO VOWEL SIGN IU	[4507 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F68, 0x003F };
    uint32_t const ces[9] = { 0x4507, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_441)
{
    // 16F68 0061;	
    // (𖽨) MIAO VOWEL SIGN IU	[4507 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F68, 0x0061 };
    uint32_t const ces[9] = { 0x4507, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_442)
{
    // 16F68 0041;	
    // (𖽨) MIAO VOWEL SIGN IU	[4507 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F68, 0x0041 };
    uint32_t const ces[9] = { 0x4507, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_443)
{
    // 16F68 0062;	
    // (𖽨) MIAO VOWEL SIGN IU	[4507 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F68, 0x0062 };
    uint32_t const ces[9] = { 0x4507, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_444)
{
    // 16F69 0021;	
    // (𖽩) MIAO VOWEL SIGN ING	[4508 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F69, 0x0021 };
    uint32_t const ces[9] = { 0x4508, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_445)
{
    // 16F69 003F;	
    // (𖽩) MIAO VOWEL SIGN ING	[4508 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F69, 0x003F };
    uint32_t const ces[9] = { 0x4508, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_446)
{
    // 16F69 0061;	
    // (𖽩) MIAO VOWEL SIGN ING	[4508 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F69, 0x0061 };
    uint32_t const ces[9] = { 0x4508, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_447)
{
    // 16F69 0041;	
    // (𖽩) MIAO VOWEL SIGN ING	[4508 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F69, 0x0041 };
    uint32_t const ces[9] = { 0x4508, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_448)
{
    // 16F69 0062;	
    // (𖽩) MIAO VOWEL SIGN ING	[4508 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F69, 0x0062 };
    uint32_t const ces[9] = { 0x4508, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_449)
{
    // 16F6A 0021;	
    // (𖽪) MIAO VOWEL SIGN U	[4509 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F6A, 0x0021 };
    uint32_t const ces[9] = { 0x4509, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_450)
{
    // 16F6A 003F;	
    // (𖽪) MIAO VOWEL SIGN U	[4509 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F6A, 0x003F };
    uint32_t const ces[9] = { 0x4509, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_451)
{
    // 16F6A 0061;	
    // (𖽪) MIAO VOWEL SIGN U	[4509 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F6A, 0x0061 };
    uint32_t const ces[9] = { 0x4509, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_452)
{
    // 16F6A 0041;	
    // (𖽪) MIAO VOWEL SIGN U	[4509 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F6A, 0x0041 };
    uint32_t const ces[9] = { 0x4509, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_453)
{
    // 16F6A 0062;	
    // (𖽪) MIAO VOWEL SIGN U	[4509 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F6A, 0x0062 };
    uint32_t const ces[9] = { 0x4509, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_454)
{
    // 16F6B 0021;	
    // (𖽫) MIAO VOWEL SIGN UA	[450A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F6B, 0x0021 };
    uint32_t const ces[9] = { 0x450A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_455)
{
    // 16F6B 003F;	
    // (𖽫) MIAO VOWEL SIGN UA	[450A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F6B, 0x003F };
    uint32_t const ces[9] = { 0x450A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_456)
{
    // 16F6B 0061;	
    // (𖽫) MIAO VOWEL SIGN UA	[450A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F6B, 0x0061 };
    uint32_t const ces[9] = { 0x450A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_457)
{
    // 16F6B 0041;	
    // (𖽫) MIAO VOWEL SIGN UA	[450A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F6B, 0x0041 };
    uint32_t const ces[9] = { 0x450A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_458)
{
    // 16F6B 0062;	
    // (𖽫) MIAO VOWEL SIGN UA	[450A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F6B, 0x0062 };
    uint32_t const ces[9] = { 0x450A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_459)
{
    // 16F6C 0021;	
    // (𖽬) MIAO VOWEL SIGN UAN	[450B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F6C, 0x0021 };
    uint32_t const ces[9] = { 0x450B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_460)
{
    // 16F6C 003F;	
    // (𖽬) MIAO VOWEL SIGN UAN	[450B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F6C, 0x003F };
    uint32_t const ces[9] = { 0x450B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_461)
{
    // 16F6C 0061;	
    // (𖽬) MIAO VOWEL SIGN UAN	[450B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F6C, 0x0061 };
    uint32_t const ces[9] = { 0x450B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_462)
{
    // 16F6C 0041;	
    // (𖽬) MIAO VOWEL SIGN UAN	[450B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F6C, 0x0041 };
    uint32_t const ces[9] = { 0x450B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_463)
{
    // 16F6C 0062;	
    // (𖽬) MIAO VOWEL SIGN UAN	[450B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F6C, 0x0062 };
    uint32_t const ces[9] = { 0x450B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_464)
{
    // 16F6D 0021;	
    // (𖽭) MIAO VOWEL SIGN UANG	[450C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F6D, 0x0021 };
    uint32_t const ces[9] = { 0x450C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_465)
{
    // 16F6D 003F;	
    // (𖽭) MIAO VOWEL SIGN UANG	[450C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F6D, 0x003F };
    uint32_t const ces[9] = { 0x450C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_466)
{
    // 16F6D 0061;	
    // (𖽭) MIAO VOWEL SIGN UANG	[450C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F6D, 0x0061 };
    uint32_t const ces[9] = { 0x450C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_467)
{
    // 16F6D 0041;	
    // (𖽭) MIAO VOWEL SIGN UANG	[450C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F6D, 0x0041 };
    uint32_t const ces[9] = { 0x450C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_468)
{
    // 16F6D 0062;	
    // (𖽭) MIAO VOWEL SIGN UANG	[450C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F6D, 0x0062 };
    uint32_t const ces[9] = { 0x450C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_469)
{
    // 16F6E 0021;	
    // (𖽮) MIAO VOWEL SIGN UU	[450D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F6E, 0x0021 };
    uint32_t const ces[9] = { 0x450D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_470)
{
    // 16F6E 003F;	
    // (𖽮) MIAO VOWEL SIGN UU	[450D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F6E, 0x003F };
    uint32_t const ces[9] = { 0x450D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_471)
{
    // 16F6E 0061;	
    // (𖽮) MIAO VOWEL SIGN UU	[450D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F6E, 0x0061 };
    uint32_t const ces[9] = { 0x450D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_472)
{
    // 16F6E 0041;	
    // (𖽮) MIAO VOWEL SIGN UU	[450D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F6E, 0x0041 };
    uint32_t const ces[9] = { 0x450D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_473)
{
    // 16F6E 0062;	
    // (𖽮) MIAO VOWEL SIGN UU	[450D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F6E, 0x0062 };
    uint32_t const ces[9] = { 0x450D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_474)
{
    // 16F6F 0021;	
    // (𖽯) MIAO VOWEL SIGN UEI	[450E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F6F, 0x0021 };
    uint32_t const ces[9] = { 0x450E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_475)
{
    // 16F6F 003F;	
    // (𖽯) MIAO VOWEL SIGN UEI	[450E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F6F, 0x003F };
    uint32_t const ces[9] = { 0x450E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_476)
{
    // 16F6F 0061;	
    // (𖽯) MIAO VOWEL SIGN UEI	[450E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F6F, 0x0061 };
    uint32_t const ces[9] = { 0x450E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_477)
{
    // 16F6F 0041;	
    // (𖽯) MIAO VOWEL SIGN UEI	[450E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F6F, 0x0041 };
    uint32_t const ces[9] = { 0x450E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_478)
{
    // 16F6F 0062;	
    // (𖽯) MIAO VOWEL SIGN UEI	[450E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F6F, 0x0062 };
    uint32_t const ces[9] = { 0x450E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_479)
{
    // 16F70 0021;	
    // (𖽰) MIAO VOWEL SIGN UNG	[450F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F70, 0x0021 };
    uint32_t const ces[9] = { 0x450F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_480)
{
    // 16F70 003F;	
    // (𖽰) MIAO VOWEL SIGN UNG	[450F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F70, 0x003F };
    uint32_t const ces[9] = { 0x450F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_481)
{
    // 16F70 0061;	
    // (𖽰) MIAO VOWEL SIGN UNG	[450F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F70, 0x0061 };
    uint32_t const ces[9] = { 0x450F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_482)
{
    // 16F70 0041;	
    // (𖽰) MIAO VOWEL SIGN UNG	[450F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F70, 0x0041 };
    uint32_t const ces[9] = { 0x450F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_483)
{
    // 16F70 0062;	
    // (𖽰) MIAO VOWEL SIGN UNG	[450F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F70, 0x0062 };
    uint32_t const ces[9] = { 0x450F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_484)
{
    // 16F71 0021;	
    // (𖽱) MIAO VOWEL SIGN Y	[4510 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F71, 0x0021 };
    uint32_t const ces[9] = { 0x4510, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_485)
{
    // 16F71 003F;	
    // (𖽱) MIAO VOWEL SIGN Y	[4510 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F71, 0x003F };
    uint32_t const ces[9] = { 0x4510, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_486)
{
    // 16F71 0061;	
    // (𖽱) MIAO VOWEL SIGN Y	[4510 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F71, 0x0061 };
    uint32_t const ces[9] = { 0x4510, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_487)
{
    // 16F71 0041;	
    // (𖽱) MIAO VOWEL SIGN Y	[4510 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F71, 0x0041 };
    uint32_t const ces[9] = { 0x4510, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_488)
{
    // 16F71 0062;	
    // (𖽱) MIAO VOWEL SIGN Y	[4510 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F71, 0x0062 };
    uint32_t const ces[9] = { 0x4510, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_489)
{
    // 16F72 0021;	
    // (𖽲) MIAO VOWEL SIGN YI	[4511 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F72, 0x0021 };
    uint32_t const ces[9] = { 0x4511, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_490)
{
    // 16F72 003F;	
    // (𖽲) MIAO VOWEL SIGN YI	[4511 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F72, 0x003F };
    uint32_t const ces[9] = { 0x4511, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_491)
{
    // 16F72 0061;	
    // (𖽲) MIAO VOWEL SIGN YI	[4511 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F72, 0x0061 };
    uint32_t const ces[9] = { 0x4511, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_492)
{
    // 16F72 0041;	
    // (𖽲) MIAO VOWEL SIGN YI	[4511 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F72, 0x0041 };
    uint32_t const ces[9] = { 0x4511, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_493)
{
    // 16F72 0062;	
    // (𖽲) MIAO VOWEL SIGN YI	[4511 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F72, 0x0062 };
    uint32_t const ces[9] = { 0x4511, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_494)
{
    // 16F73 0021;	
    // (𖽳) MIAO VOWEL SIGN AE	[4512 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F73, 0x0021 };
    uint32_t const ces[9] = { 0x4512, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_495)
{
    // 16F73 003F;	
    // (𖽳) MIAO VOWEL SIGN AE	[4512 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F73, 0x003F };
    uint32_t const ces[9] = { 0x4512, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_496)
{
    // 16F73 0061;	
    // (𖽳) MIAO VOWEL SIGN AE	[4512 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F73, 0x0061 };
    uint32_t const ces[9] = { 0x4512, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_497)
{
    // 16F73 0041;	
    // (𖽳) MIAO VOWEL SIGN AE	[4512 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16F73, 0x0041 };
    uint32_t const ces[9] = { 0x4512, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_498)
{
    // 16F73 0062;	
    // (𖽳) MIAO VOWEL SIGN AE	[4512 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F73, 0x0062 };
    uint32_t const ces[9] = { 0x4512, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_266_499)
{
    // 16F74 0021;	
    // (𖽴) MIAO VOWEL SIGN AEE	[4513 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16F74, 0x0021 };
    uint32_t const ces[9] = { 0x4513, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

