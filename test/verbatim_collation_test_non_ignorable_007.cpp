// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_007_000)
{
    // 08D5 003F;	
    // (ࣕ) ARABIC SMALL HIGH SAD	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x08D5, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_001)
{
    // 08D6 003F;	
    // (ࣖ) ARABIC SMALL HIGH AIN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x08D6, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_002)
{
    // 08D7 003F;	
    // (ࣗ) ARABIC SMALL HIGH QAF	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x08D7, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_003)
{
    // 08D8 003F;	
    // (ࣘ) ARABIC SMALL HIGH NOON WITH KASRA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x08D8, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_004)
{
    // 08D9 003F;	
    // (ࣙ) ARABIC SMALL LOW NOON WITH KASRA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x08D9, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_005)
{
    // 08DA 003F;	
    // (ࣚ) ARABIC SMALL HIGH WORD ATH-THALATHA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x08DA, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_006)
{
    // 08DB 003F;	
    // (ࣛ) ARABIC SMALL HIGH WORD AS-SAJDA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x08DB, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_007)
{
    // 08DC 003F;	
    // (ࣜ) ARABIC SMALL HIGH WORD AN-NISF	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x08DC, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_008)
{
    // 08DD 003F;	
    // (ࣝ) ARABIC SMALL HIGH WORD SAKTA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x08DD, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_009)
{
    // 08DE 003F;	
    // (ࣞ) ARABIC SMALL HIGH WORD QIF	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x08DE, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_010)
{
    // 08DF 003F;	
    // (ࣟ) ARABIC SMALL HIGH WORD WAQFA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x08DF, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_011)
{
    // 08E0 003F;	
    // (࣠) ARABIC SMALL HIGH FOOTNOTE MARKER	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x08E0, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_012)
{
    // 08E1 003F;	
    // (࣡) ARABIC SMALL HIGH SIGN SAFHA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x08E1, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_013)
{
    // 08E2 003F;	
    // ('\u08E2') ARABIC DISPUTED END OF AYAH	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x08E2, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_014)
{
    // 08EA 003F;	
    // (࣪) ARABIC TONE ONE DOT ABOVE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x08EA, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_015)
{
    // 08EB 003F;	
    // (࣫) ARABIC TONE TWO DOTS ABOVE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x08EB, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_016)
{
    // 08EC 003F;	
    // (࣬) ARABIC TONE LOOP ABOVE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x08EC, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_017)
{
    // 08ED 003F;	
    // (࣭) ARABIC TONE ONE DOT BELOW	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x08ED, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_018)
{
    // 08EE 003F;	
    // (࣮) ARABIC TONE TWO DOTS BELOW	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x08EE, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_019)
{
    // 08EF 003F;	
    // (࣯) ARABIC TONE LOOP BELOW	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x08EF, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_020)
{
    // 08F3 003F;	
    // (ࣳ) ARABIC SMALL HIGH WAW	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x08F3, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_021)
{
    // 0951 003F;	
    // (॑) DEVANAGARI STRESS SIGN UDATTA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0951, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_022)
{
    // 0952 003F;	
    // (॒) DEVANAGARI STRESS SIGN ANUDATTA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0952, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_023)
{
    // 0F18 003F;	
    // (༘) TIBETAN ASTROLOGICAL SIGN -KHYUD PA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0F18, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_024)
{
    // 0F19 003F;	
    // (༙) TIBETAN ASTROLOGICAL SIGN SDONG TSHUGS	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0F19, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_025)
{
    // 0F35 003F;	
    // (༵) TIBETAN MARK NGAS BZUNG NYI ZLA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0F35, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_026)
{
    // 0F37 003F;	
    // (༷) TIBETAN MARK NGAS BZUNG SGOR RTAGS	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0F37, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_027)
{
    // 0F3E 003F;	
    // (༾) TIBETAN SIGN YAR TSHES	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0F3E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_028)
{
    // 0F3F 003F;	
    // (༿) TIBETAN SIGN MAR TSHES	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0F3F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_029)
{
    // 0F82 003F;	
    // (ྂ) TIBETAN SIGN NYI ZLA NAA DA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0F82, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_030)
{
    // 0F83 003F;	
    // (ྃ) TIBETAN SIGN SNA LDAN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0F83, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_031)
{
    // 0F86 003F;	
    // (྆) TIBETAN SIGN LCI RTAGS	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0F86, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_032)
{
    // 0F87 003F;	
    // (྇) TIBETAN SIGN YANG RTAGS	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0F87, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_033)
{
    // 0FC6 003F;	
    // (࿆) TIBETAN SYMBOL PADMA GDAN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0FC6, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_034)
{
    // 17B4 003F;	
    // (឴) KHMER VOWEL INHERENT AQ	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x17B4, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_035)
{
    // 17B5 003F;	
    // (឵) KHMER VOWEL INHERENT AA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x17B5, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_036)
{
    // 17D3 003F;	
    // (៓) KHMER SIGN BATHAMASAT	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x17D3, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_037)
{
    // 180A 003F;	
    // (᠊) MONGOLIAN NIRUGU	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x180A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_038)
{
    // 180B 003F;	
    // (᠋) MONGOLIAN FREE VARIATION SELECTOR ONE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x180B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_039)
{
    // 180C 003F;	
    // (᠌) MONGOLIAN FREE VARIATION SELECTOR TWO	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x180C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_040)
{
    // 180D 003F;	
    // (᠍) MONGOLIAN FREE VARIATION SELECTOR THREE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x180D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_041)
{
    // 180E 003F;	
    // ('\u180E') MONGOLIAN VOWEL SEPARATOR	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x180E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_042)
{
    // 1A7F 003F;	
    // (᩿) TAI THAM COMBINING CRYPTOGRAMMIC DOT	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1A7F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_043)
{
    // 1B6B 003F;	
    // (᭫) BALINESE MUSICAL SYMBOL COMBINING TEGEH	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1B6B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_044)
{
    // 1B6C 003F;	
    // (᭬) BALINESE MUSICAL SYMBOL COMBINING ENDEP	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1B6C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_045)
{
    // 1B6D 003F;	
    // (᭭) BALINESE MUSICAL SYMBOL COMBINING KEMPUL	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1B6D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_046)
{
    // 1B6E 003F;	
    // (᭮) BALINESE MUSICAL SYMBOL COMBINING KEMPLI	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1B6E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_047)
{
    // 1B6F 003F;	
    // (᭯) BALINESE MUSICAL SYMBOL COMBINING JEGOGAN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1B6F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_048)
{
    // 1B70 003F;	
    // (᭰) BALINESE MUSICAL SYMBOL COMBINING KEMPUL WITH JEGOGAN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1B70, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_049)
{
    // 1B71 003F;	
    // (᭱) BALINESE MUSICAL SYMBOL COMBINING KEMPLI WITH JEGOGAN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1B71, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_050)
{
    // 1B72 003F;	
    // (᭲) BALINESE MUSICAL SYMBOL COMBINING BENDE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1B72, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_051)
{
    // 1B73 003F;	
    // (᭳) BALINESE MUSICAL SYMBOL COMBINING GONG	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1B73, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_052)
{
    // 1CD0 003F;	
    // (᳐) VEDIC TONE KARSHANA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1CD0, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_053)
{
    // 1CD1 003F;	
    // (᳑) VEDIC TONE SHARA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1CD1, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_054)
{
    // 1CD2 003F;	
    // (᳒) VEDIC TONE PRENKHA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1CD2, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_055)
{
    // 1CD3 003F;	
    // (᳓) VEDIC SIGN NIHSHVASA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1CD3, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_056)
{
    // 1CD4 003F;	
    // (᳔) VEDIC SIGN YAJURVEDIC MIDLINE SVARITA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1CD4, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_057)
{
    // 1CD5 003F;	
    // (᳕) VEDIC TONE YAJURVEDIC AGGRAVATED INDEPENDENT SVARITA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1CD5, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_058)
{
    // 1CD6 003F;	
    // (᳖) VEDIC TONE YAJURVEDIC INDEPENDENT SVARITA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1CD6, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_059)
{
    // 1CD7 003F;	
    // (᳗) VEDIC TONE YAJURVEDIC KATHAKA INDEPENDENT SVARITA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1CD7, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_060)
{
    // 1CD8 003F;	
    // (᳘) VEDIC TONE CANDRA BELOW	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1CD8, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_061)
{
    // 1CD9 003F;	
    // (᳙) VEDIC TONE YAJURVEDIC KATHAKA INDEPENDENT SVARITA SCHROEDER	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1CD9, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_062)
{
    // 1CDA 003F;	
    // (᳚) VEDIC TONE DOUBLE SVARITA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1CDA, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_063)
{
    // 1CDB 003F;	
    // (᳛) VEDIC TONE TRIPLE SVARITA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1CDB, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_064)
{
    // 1CDC 003F;	
    // (᳜) VEDIC TONE KATHAKA ANUDATTA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1CDC, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_065)
{
    // 1CDD 003F;	
    // (᳝) VEDIC TONE DOT BELOW	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1CDD, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_066)
{
    // 1CDE 003F;	
    // (᳞) VEDIC TONE TWO DOTS BELOW	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1CDE, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_067)
{
    // 1CDF 003F;	
    // (᳟) VEDIC TONE THREE DOTS BELOW	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1CDF, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_068)
{
    // 1CE0 003F;	
    // (᳠) VEDIC TONE RIGVEDIC KASHMIRI INDEPENDENT SVARITA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1CE0, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_069)
{
    // 1CE1 003F;	
    // (᳡) VEDIC TONE ATHARVAVEDIC INDEPENDENT SVARITA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1CE1, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_070)
{
    // 1CE2 003F;	
    // (᳢) VEDIC SIGN VISARGA SVARITA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1CE2, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_071)
{
    // 1CE3 003F;	
    // (᳣) VEDIC SIGN VISARGA UDATTA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1CE3, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_072)
{
    // 1CE4 003F;	
    // (᳤) VEDIC SIGN REVERSED VISARGA UDATTA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1CE4, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_073)
{
    // 1CE5 003F;	
    // (᳥) VEDIC SIGN VISARGA ANUDATTA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1CE5, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_074)
{
    // 1CE6 003F;	
    // (᳦) VEDIC SIGN REVERSED VISARGA ANUDATTA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1CE6, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_075)
{
    // 1CE7 003F;	
    // (᳧) VEDIC SIGN VISARGA UDATTA WITH TAIL	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1CE7, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_076)
{
    // 1CE8 003F;	
    // (᳨) VEDIC SIGN VISARGA ANUDATTA WITH TAIL	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1CE8, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_077)
{
    // 1CF4 003F;	
    // (᳴) VEDIC TONE CANDRA ABOVE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1CF4, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_078)
{
    // 1CF7 003F;	
    // (᳷) VEDIC SIGN ATIKRAMA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1CF7, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_079)
{
    // 1CF8 003F;	
    // (᳸) VEDIC TONE RING ABOVE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1CF8, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_080)
{
    // 1CF9 003F;	
    // (᳹) VEDIC TONE DOUBLE RING ABOVE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1CF9, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_081)
{
    // 200B 003F;	
    // ('\u200B') ZERO WIDTH SPACE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x200B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_082)
{
    // 200C 003F;	
    // ('\u200C') ZERO WIDTH NON-JOINER	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x200C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_083)
{
    // 200D 003F;	
    // ('\u200D') ZERO WIDTH JOINER	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x200D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_084)
{
    // 200E 003F;	
    // ('\u200E') LEFT-TO-RIGHT MARK	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x200E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_085)
{
    // 200F 003F;	
    // ('\u200F') RIGHT-TO-LEFT MARK	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x200F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_086)
{
    // 202A 003F;	
    // ('\u202A') LEFT-TO-RIGHT EMBEDDING	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x202A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_087)
{
    // 202B 003F;	
    // ('\u202B') RIGHT-TO-LEFT EMBEDDING	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x202B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_088)
{
    // 202C 003F;	
    // ('\u202C') POP DIRECTIONAL FORMATTING	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x202C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_089)
{
    // 202D 003F;	
    // ('\u202D') LEFT-TO-RIGHT OVERRIDE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x202D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_090)
{
    // 202E 003F;	
    // ('\u202E') RIGHT-TO-LEFT OVERRIDE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x202E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_091)
{
    // 2060 003F;	
    // ('\u2060') WORD JOINER	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x2060, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_092)
{
    // 2061 003F;	
    // ('\u2061') FUNCTION APPLICATION	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x2061, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_093)
{
    // 2062 003F;	
    // ('\u2062') INVISIBLE TIMES	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x2062, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_094)
{
    // 2063 003F;	
    // ('\u2063') INVISIBLE SEPARATOR	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x2063, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_095)
{
    // 2064 003F;	
    // ('\u2064') INVISIBLE PLUS	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x2064, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_096)
{
    // 2066 003F;	
    // ('\u2066') LEFT-TO-RIGHT ISOLATE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x2066, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_097)
{
    // 2067 003F;	
    // ('\u2067') RIGHT-TO-LEFT ISOLATE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x2067, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_098)
{
    // 2068 003F;	
    // ('\u2068') FIRST STRONG ISOLATE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x2068, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_099)
{
    // 2069 003F;	
    // ('\u2069') POP DIRECTIONAL ISOLATE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x2069, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_100)
{
    // 206A 003F;	
    // ('\u206A') INHIBIT SYMMETRIC SWAPPING	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x206A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_101)
{
    // 206B 003F;	
    // ('\u206B') ACTIVATE SYMMETRIC SWAPPING	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x206B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_102)
{
    // 206C 003F;	
    // ('\u206C') INHIBIT ARABIC FORM SHAPING	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x206C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_103)
{
    // 206D 003F;	
    // ('\u206D') ACTIVATE ARABIC FORM SHAPING	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x206D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_104)
{
    // 206E 003F;	
    // ('\u206E') NATIONAL DIGIT SHAPES	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x206E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_105)
{
    // 206F 003F;	
    // ('\u206F') NOMINAL DIGIT SHAPES	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x206F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_106)
{
    // 2D7F 003F;	
    // (⵿) TIFINAGH CONSONANT JOINER	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x2D7F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_107)
{
    // A670 003F;	
    // (꙰) COMBINING CYRILLIC TEN MILLIONS SIGN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA670, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_108)
{
    // A671 003F;	
    // (꙱) COMBINING CYRILLIC HUNDRED MILLIONS SIGN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA671, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_109)
{
    // A672 003F;	
    // (꙲) COMBINING CYRILLIC THOUSAND MILLIONS SIGN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA672, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_110)
{
    // A8E0 003F;	
    // (꣠) COMBINING DEVANAGARI DIGIT ZERO	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8E0, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_111)
{
    // A8E1 003F;	
    // (꣡) COMBINING DEVANAGARI DIGIT ONE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8E1, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_112)
{
    // A8E2 003F;	
    // (꣢) COMBINING DEVANAGARI DIGIT TWO	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8E2, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_113)
{
    // A8E3 003F;	
    // (꣣) COMBINING DEVANAGARI DIGIT THREE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8E3, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_114)
{
    // A8E4 003F;	
    // (꣤) COMBINING DEVANAGARI DIGIT FOUR	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8E4, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_115)
{
    // A8E5 003F;	
    // (꣥) COMBINING DEVANAGARI DIGIT FIVE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8E5, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_116)
{
    // A8E6 003F;	
    // (꣦) COMBINING DEVANAGARI DIGIT SIX	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8E6, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_117)
{
    // A8E7 003F;	
    // (꣧) COMBINING DEVANAGARI DIGIT SEVEN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8E7, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_118)
{
    // A8E8 003F;	
    // (꣨) COMBINING DEVANAGARI DIGIT EIGHT	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8E8, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_119)
{
    // A8E9 003F;	
    // (꣩) COMBINING DEVANAGARI DIGIT NINE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8E9, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_120)
{
    // A8EA 003F;	
    // (꣪) COMBINING DEVANAGARI LETTER A	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8EA, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_121)
{
    // A8EB 003F;	
    // (꣫) COMBINING DEVANAGARI LETTER U	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8EB, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_122)
{
    // A8EC 003F;	
    // (꣬) COMBINING DEVANAGARI LETTER KA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8EC, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_123)
{
    // A8ED 003F;	
    // (꣭) COMBINING DEVANAGARI LETTER NA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8ED, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_124)
{
    // A8EE 003F;	
    // (꣮) COMBINING DEVANAGARI LETTER PA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8EE, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_125)
{
    // A8EF 003F;	
    // (꣯) COMBINING DEVANAGARI LETTER RA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8EF, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_126)
{
    // A8F0 003F;	
    // (꣰) COMBINING DEVANAGARI LETTER VI	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8F0, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_127)
{
    // A8F1 003F;	
    // (꣱) COMBINING DEVANAGARI SIGN AVAGRAHA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xA8F1, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_128)
{
    // FE00 003F;	
    // (︀) VARIATION SELECTOR-1	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE00, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_129)
{
    // FE01 003F;	
    // (︁) VARIATION SELECTOR-2	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE01, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_130)
{
    // FE02 003F;	
    // (︂) VARIATION SELECTOR-3	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE02, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_131)
{
    // FE03 003F;	
    // (︃) VARIATION SELECTOR-4	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE03, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_132)
{
    // FE04 003F;	
    // (︄) VARIATION SELECTOR-5	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE04, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_133)
{
    // FE05 003F;	
    // (︅) VARIATION SELECTOR-6	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE05, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_134)
{
    // FE06 003F;	
    // (︆) VARIATION SELECTOR-7	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE06, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_135)
{
    // FE07 003F;	
    // (︇) VARIATION SELECTOR-8	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE07, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_136)
{
    // FE08 003F;	
    // (︈) VARIATION SELECTOR-9	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE08, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_137)
{
    // FE09 003F;	
    // (︉) VARIATION SELECTOR-10	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE09, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_138)
{
    // FE0A 003F;	
    // (︊) VARIATION SELECTOR-11	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE0A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_139)
{
    // FE0B 003F;	
    // (︋) VARIATION SELECTOR-12	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE0B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_140)
{
    // FE0C 003F;	
    // (︌) VARIATION SELECTOR-13	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE0C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_141)
{
    // FE0D 003F;	
    // (︍) VARIATION SELECTOR-14	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE0D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_142)
{
    // FE0E 003F;	
    // (︎) VARIATION SELECTOR-15	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE0E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_143)
{
    // FE0F 003F;	
    // (️) VARIATION SELECTOR-16	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE0F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_144)
{
    // FE21 003F;	
    // (︡) COMBINING LIGATURE RIGHT HALF	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE21, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_145)
{
    // FE23 003F;	
    // (︣) COMBINING DOUBLE TILDE RIGHT HALF	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE23, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_146)
{
    // FE24 003F;	
    // (︤) COMBINING MACRON LEFT HALF	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE24, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_147)
{
    // FE25 003F;	
    // (︥) COMBINING MACRON RIGHT HALF	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE25, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_148)
{
    // FE26 003F;	
    // (︦) COMBINING CONJOINING MACRON	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE26, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_149)
{
    // FE28 003F;	
    // (︨) COMBINING LIGATURE RIGHT HALF BELOW	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE28, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_150)
{
    // FE2A 003F;	
    // (︪) COMBINING TILDE RIGHT HALF BELOW	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE2A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_151)
{
    // FE2B 003F;	
    // (︫) COMBINING MACRON LEFT HALF BELOW	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE2B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_152)
{
    // FE2C 003F;	
    // (︬) COMBINING MACRON RIGHT HALF BELOW	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE2C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_153)
{
    // FE2D 003F;	
    // (︭) COMBINING CONJOINING MACRON BELOW	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE2D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_154)
{
    // FE2F 003F;	
    // (︯) COMBINING CYRILLIC TITLO RIGHT HALF	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE2F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_155)
{
    // FE73 003F;	
    // (‎‎ﹳ‎‎) ARABIC TAIL FRAGMENT	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFE73, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_156)
{
    // FEFF 003F;	
    // ('\uFEFF') ZERO WIDTH NO-BREAK SPACE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFEFF, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_157)
{
    // FFF9 003F;	
    // ('\uFFF9') INTERLINEAR ANNOTATION ANCHOR	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFFF9, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_158)
{
    // FFFA 003F;	
    // ('\uFFFA') INTERLINEAR ANNOTATION SEPARATOR	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFFFA, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_159)
{
    // FFFB 003F;	
    // ('\uFFFB') INTERLINEAR ANNOTATION TERMINATOR	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xFFFB, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_160)
{
    // 102E0 003F;	
    // (𐋠) COPTIC EPACT THOUSANDS MARK	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x102E0, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_161)
{
    // 110BD 003F;	
    // ('\U000110BD') KAITHI NUMBER SIGN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x110BD, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_162)
{
    // 11366 003F;	
    // (𑍦) COMBINING GRANTHA DIGIT ZERO	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x11366, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_163)
{
    // 11367 003F;	
    // (𑍧) COMBINING GRANTHA DIGIT ONE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x11367, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_164)
{
    // 11368 003F;	
    // (𑍨) COMBINING GRANTHA DIGIT TWO	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x11368, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_165)
{
    // 11369 003F;	
    // (𑍩) COMBINING GRANTHA DIGIT THREE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x11369, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_166)
{
    // 1136A 003F;	
    // (𑍪) COMBINING GRANTHA DIGIT FOUR	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1136A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_167)
{
    // 1136B 003F;	
    // (𑍫) COMBINING GRANTHA DIGIT FIVE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1136B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_168)
{
    // 1136C 003F;	
    // (𑍬) COMBINING GRANTHA DIGIT SIX	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1136C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_169)
{
    // 11370 003F;	
    // (𑍰) COMBINING GRANTHA LETTER A	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x11370, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_170)
{
    // 11371 003F;	
    // (𑍱) COMBINING GRANTHA LETTER KA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x11371, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_171)
{
    // 11372 003F;	
    // (𑍲) COMBINING GRANTHA LETTER NA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x11372, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_172)
{
    // 11373 003F;	
    // (𑍳) COMBINING GRANTHA LETTER VI	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x11373, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_173)
{
    // 11374 003F;	
    // (𑍴) COMBINING GRANTHA LETTER PA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x11374, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_174)
{
    // 1BCA0 003F;	
    // ('\U0001BCA0') SHORTHAND FORMAT LETTER OVERLAP	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1BCA0, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_175)
{
    // 1BCA1 003F;	
    // ('\U0001BCA1') SHORTHAND FORMAT CONTINUING OVERLAP	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1BCA1, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_176)
{
    // 1BCA2 003F;	
    // ('\U0001BCA2') SHORTHAND FORMAT DOWN STEP	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1BCA2, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_177)
{
    // 1BCA3 003F;	
    // ('\U0001BCA3') SHORTHAND FORMAT UP STEP	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1BCA3, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_178)
{
    // 1D165 003F;	
    // (𝅥) MUSICAL SYMBOL COMBINING STEM	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D165, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_179)
{
    // 1D166 003F;	
    // (𝅦) MUSICAL SYMBOL COMBINING SPRECHGESANG STEM	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D166, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_180)
{
    // 1D167 003F;	
    // (𝅧) MUSICAL SYMBOL COMBINING TREMOLO-1	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D167, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_181)
{
    // 1D168 003F;	
    // (𝅨) MUSICAL SYMBOL COMBINING TREMOLO-2	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D168, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_182)
{
    // 1D169 003F;	
    // (𝅩) MUSICAL SYMBOL COMBINING TREMOLO-3	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D169, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_183)
{
    // 1D16D 003F;	
    // (𝅭) MUSICAL SYMBOL COMBINING AUGMENTATION DOT	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D16D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_184)
{
    // 1D16E 003F;	
    // (𝅮) MUSICAL SYMBOL COMBINING FLAG-1	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D16E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_185)
{
    // 1D16F 003F;	
    // (𝅯) MUSICAL SYMBOL COMBINING FLAG-2	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D16F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_186)
{
    // 1D170 003F;	
    // (𝅰) MUSICAL SYMBOL COMBINING FLAG-3	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D170, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_187)
{
    // 1D171 003F;	
    // (𝅱) MUSICAL SYMBOL COMBINING FLAG-4	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D171, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_188)
{
    // 1D172 003F;	
    // (𝅲) MUSICAL SYMBOL COMBINING FLAG-5	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D172, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_189)
{
    // 1D173 003F;	
    // ('\U0001D173') MUSICAL SYMBOL BEGIN BEAM	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D173, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_190)
{
    // 1D174 003F;	
    // ('\U0001D174') MUSICAL SYMBOL END BEAM	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D174, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_191)
{
    // 1D175 003F;	
    // ('\U0001D175') MUSICAL SYMBOL BEGIN TIE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D175, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_192)
{
    // 1D176 003F;	
    // ('\U0001D176') MUSICAL SYMBOL END TIE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D176, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_193)
{
    // 1D177 003F;	
    // ('\U0001D177') MUSICAL SYMBOL BEGIN SLUR	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D177, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_194)
{
    // 1D178 003F;	
    // ('\U0001D178') MUSICAL SYMBOL END SLUR	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D178, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_195)
{
    // 1D179 003F;	
    // ('\U0001D179') MUSICAL SYMBOL BEGIN PHRASE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D179, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_196)
{
    // 1D17A 003F;	
    // ('\U0001D17A') MUSICAL SYMBOL END PHRASE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D17A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_197)
{
    // 1D17B 003F;	
    // (𝅻) MUSICAL SYMBOL COMBINING ACCENT	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D17B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_198)
{
    // 1D17C 003F;	
    // (𝅼) MUSICAL SYMBOL COMBINING STACCATO	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D17C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_199)
{
    // 1D17D 003F;	
    // (𝅽) MUSICAL SYMBOL COMBINING TENUTO	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D17D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_200)
{
    // 1D17E 003F;	
    // (𝅾) MUSICAL SYMBOL COMBINING STACCATISSIMO	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D17E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_201)
{
    // 1D17F 003F;	
    // (𝅿) MUSICAL SYMBOL COMBINING MARCATO	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D17F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_202)
{
    // 1D180 003F;	
    // (𝆀) MUSICAL SYMBOL COMBINING MARCATO-STACCATO	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D180, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_203)
{
    // 1D181 003F;	
    // (𝆁) MUSICAL SYMBOL COMBINING ACCENT-STACCATO	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D181, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_204)
{
    // 1D182 003F;	
    // (𝆂) MUSICAL SYMBOL COMBINING LOURE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D182, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_205)
{
    // 1D185 003F;	
    // (𝆅) MUSICAL SYMBOL COMBINING DOIT	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D185, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_206)
{
    // 1D186 003F;	
    // (𝆆) MUSICAL SYMBOL COMBINING RIP	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D186, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_207)
{
    // 1D187 003F;	
    // (𝆇) MUSICAL SYMBOL COMBINING FLIP	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D187, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_208)
{
    // 1D188 003F;	
    // (𝆈) MUSICAL SYMBOL COMBINING SMEAR	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D188, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_209)
{
    // 1D189 003F;	
    // (𝆉) MUSICAL SYMBOL COMBINING BEND	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D189, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_210)
{
    // 1D18A 003F;	
    // (𝆊) MUSICAL SYMBOL COMBINING DOUBLE TONGUE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D18A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_211)
{
    // 1D18B 003F;	
    // (𝆋) MUSICAL SYMBOL COMBINING TRIPLE TONGUE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D18B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_212)
{
    // 1D1AA 003F;	
    // (𝆪) MUSICAL SYMBOL COMBINING DOWN BOW	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D1AA, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_213)
{
    // 1D1AB 003F;	
    // (𝆫) MUSICAL SYMBOL COMBINING UP BOW	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D1AB, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_214)
{
    // 1D1AC 003F;	
    // (𝆬) MUSICAL SYMBOL COMBINING HARMONIC	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D1AC, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_215)
{
    // 1D1AD 003F;	
    // (𝆭) MUSICAL SYMBOL COMBINING SNAP PIZZICATO	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D1AD, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_216)
{
    // 1D242 003F;	
    // (𝉂) COMBINING GREEK MUSICAL TRISEME	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D242, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_217)
{
    // 1D243 003F;	
    // (𝉃) COMBINING GREEK MUSICAL TETRASEME	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D243, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_218)
{
    // 1D244 003F;	
    // (𝉄) COMBINING GREEK MUSICAL PENTASEME	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1D244, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_219)
{
    // 1DA00 003F;	
    // (𝨀) SIGNWRITING HEAD RIM	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA00, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_220)
{
    // 1DA01 003F;	
    // (𝨁) SIGNWRITING HEAD MOVEMENT-WALLPLANE STRAIGHT	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA01, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_221)
{
    // 1DA02 003F;	
    // (𝨂) SIGNWRITING HEAD MOVEMENT-WALLPLANE TILT	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA02, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_222)
{
    // 1DA03 003F;	
    // (𝨃) SIGNWRITING HEAD MOVEMENT-FLOORPLANE STRAIGHT	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA03, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_223)
{
    // 1DA04 003F;	
    // (𝨄) SIGNWRITING HEAD MOVEMENT-WALLPLANE CURVE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA04, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_224)
{
    // 1DA05 003F;	
    // (𝨅) SIGNWRITING HEAD MOVEMENT-FLOORPLANE CURVE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA05, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_225)
{
    // 1DA06 003F;	
    // (𝨆) SIGNWRITING HEAD MOVEMENT CIRCLE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA06, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_226)
{
    // 1DA07 003F;	
    // (𝨇) SIGNWRITING FACE DIRECTION POSITION NOSE FORWARD TILTING	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA07, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_227)
{
    // 1DA08 003F;	
    // (𝨈) SIGNWRITING FACE DIRECTION POSITION NOSE UP OR DOWN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA08, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_228)
{
    // 1DA09 003F;	
    // (𝨉) SIGNWRITING FACE DIRECTION POSITION NOSE UP OR DOWN TILTING	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA09, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_229)
{
    // 1DA0A 003F;	
    // (𝨊) SIGNWRITING EYEBROWS STRAIGHT UP	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA0A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_230)
{
    // 1DA0B 003F;	
    // (𝨋) SIGNWRITING EYEBROWS STRAIGHT NEUTRAL	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA0B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_231)
{
    // 1DA0C 003F;	
    // (𝨌) SIGNWRITING EYEBROWS STRAIGHT DOWN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA0C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_232)
{
    // 1DA0D 003F;	
    // (𝨍) SIGNWRITING DREAMY EYEBROWS NEUTRAL DOWN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA0D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_233)
{
    // 1DA0E 003F;	
    // (𝨎) SIGNWRITING DREAMY EYEBROWS DOWN NEUTRAL	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA0E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_234)
{
    // 1DA0F 003F;	
    // (𝨏) SIGNWRITING DREAMY EYEBROWS UP NEUTRAL	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA0F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_235)
{
    // 1DA10 003F;	
    // (𝨐) SIGNWRITING DREAMY EYEBROWS NEUTRAL UP	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA10, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_236)
{
    // 1DA11 003F;	
    // (𝨑) SIGNWRITING FOREHEAD NEUTRAL	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA11, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_237)
{
    // 1DA12 003F;	
    // (𝨒) SIGNWRITING FOREHEAD CONTACT	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA12, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_238)
{
    // 1DA13 003F;	
    // (𝨓) SIGNWRITING FOREHEAD WRINKLED	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA13, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_239)
{
    // 1DA14 003F;	
    // (𝨔) SIGNWRITING EYES OPEN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA14, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_240)
{
    // 1DA15 003F;	
    // (𝨕) SIGNWRITING EYES SQUEEZED	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA15, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_241)
{
    // 1DA16 003F;	
    // (𝨖) SIGNWRITING EYES CLOSED	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA16, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_242)
{
    // 1DA17 003F;	
    // (𝨗) SIGNWRITING EYE BLINK SINGLE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA17, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_243)
{
    // 1DA18 003F;	
    // (𝨘) SIGNWRITING EYE BLINK MULTIPLE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA18, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_244)
{
    // 1DA19 003F;	
    // (𝨙) SIGNWRITING EYES HALF OPEN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA19, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_245)
{
    // 1DA1A 003F;	
    // (𝨚) SIGNWRITING EYES WIDE OPEN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA1A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_246)
{
    // 1DA1B 003F;	
    // (𝨛) SIGNWRITING EYES HALF CLOSED	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA1B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_247)
{
    // 1DA1C 003F;	
    // (𝨜) SIGNWRITING EYES WIDENING MOVEMENT	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA1C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_248)
{
    // 1DA1D 003F;	
    // (𝨝) SIGNWRITING EYE WINK	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA1D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_249)
{
    // 1DA1E 003F;	
    // (𝨞) SIGNWRITING EYELASHES UP	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA1E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_250)
{
    // 1DA1F 003F;	
    // (𝨟) SIGNWRITING EYELASHES DOWN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA1F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_251)
{
    // 1DA20 003F;	
    // (𝨠) SIGNWRITING EYELASHES FLUTTERING	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA20, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_252)
{
    // 1DA21 003F;	
    // (𝨡) SIGNWRITING EYEGAZE-WALLPLANE STRAIGHT	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA21, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_253)
{
    // 1DA22 003F;	
    // (𝨢) SIGNWRITING EYEGAZE-WALLPLANE STRAIGHT DOUBLE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA22, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_254)
{
    // 1DA23 003F;	
    // (𝨣) SIGNWRITING EYEGAZE-WALLPLANE STRAIGHT ALTERNATING	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA23, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_255)
{
    // 1DA24 003F;	
    // (𝨤) SIGNWRITING EYEGAZE-FLOORPLANE STRAIGHT	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA24, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_256)
{
    // 1DA25 003F;	
    // (𝨥) SIGNWRITING EYEGAZE-FLOORPLANE STRAIGHT DOUBLE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA25, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_257)
{
    // 1DA26 003F;	
    // (𝨦) SIGNWRITING EYEGAZE-FLOORPLANE STRAIGHT ALTERNATING	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA26, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_258)
{
    // 1DA27 003F;	
    // (𝨧) SIGNWRITING EYEGAZE-WALLPLANE CURVED	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA27, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_259)
{
    // 1DA28 003F;	
    // (𝨨) SIGNWRITING EYEGAZE-FLOORPLANE CURVED	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA28, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_260)
{
    // 1DA29 003F;	
    // (𝨩) SIGNWRITING EYEGAZE-WALLPLANE CIRCLING	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA29, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_261)
{
    // 1DA2A 003F;	
    // (𝨪) SIGNWRITING CHEEKS PUFFED	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA2A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_262)
{
    // 1DA2B 003F;	
    // (𝨫) SIGNWRITING CHEEKS NEUTRAL	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA2B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_263)
{
    // 1DA2C 003F;	
    // (𝨬) SIGNWRITING CHEEKS SUCKED	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA2C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_264)
{
    // 1DA2D 003F;	
    // (𝨭) SIGNWRITING TENSE CHEEKS HIGH	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA2D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_265)
{
    // 1DA2E 003F;	
    // (𝨮) SIGNWRITING TENSE CHEEKS MIDDLE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA2E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_266)
{
    // 1DA2F 003F;	
    // (𝨯) SIGNWRITING TENSE CHEEKS LOW	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA2F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_267)
{
    // 1DA30 003F;	
    // (𝨰) SIGNWRITING EARS	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA30, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_268)
{
    // 1DA31 003F;	
    // (𝨱) SIGNWRITING NOSE NEUTRAL	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA31, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_269)
{
    // 1DA32 003F;	
    // (𝨲) SIGNWRITING NOSE CONTACT	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA32, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_270)
{
    // 1DA33 003F;	
    // (𝨳) SIGNWRITING NOSE WRINKLES	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA33, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_271)
{
    // 1DA34 003F;	
    // (𝨴) SIGNWRITING NOSE WIGGLES	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA34, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_272)
{
    // 1DA35 003F;	
    // (𝨵) SIGNWRITING AIR BLOWING OUT	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA35, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_273)
{
    // 1DA36 003F;	
    // (𝨶) SIGNWRITING AIR SUCKING IN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA36, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_274)
{
    // 1DA3B 003F;	
    // (𝨻) SIGNWRITING MOUTH CLOSED NEUTRAL	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA3B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_275)
{
    // 1DA3C 003F;	
    // (𝨼) SIGNWRITING MOUTH CLOSED FORWARD	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA3C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_276)
{
    // 1DA3D 003F;	
    // (𝨽) SIGNWRITING MOUTH CLOSED CONTACT	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA3D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_277)
{
    // 1DA3E 003F;	
    // (𝨾) SIGNWRITING MOUTH SMILE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA3E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_278)
{
    // 1DA3F 003F;	
    // (𝨿) SIGNWRITING MOUTH SMILE WRINKLED	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA3F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_279)
{
    // 1DA40 003F;	
    // (𝩀) SIGNWRITING MOUTH SMILE OPEN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA40, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_280)
{
    // 1DA41 003F;	
    // (𝩁) SIGNWRITING MOUTH FROWN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA41, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_281)
{
    // 1DA42 003F;	
    // (𝩂) SIGNWRITING MOUTH FROWN WRINKLED	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA42, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_282)
{
    // 1DA43 003F;	
    // (𝩃) SIGNWRITING MOUTH FROWN OPEN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA43, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_283)
{
    // 1DA44 003F;	
    // (𝩄) SIGNWRITING MOUTH OPEN CIRCLE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA44, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_284)
{
    // 1DA45 003F;	
    // (𝩅) SIGNWRITING MOUTH OPEN FORWARD	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA45, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_285)
{
    // 1DA46 003F;	
    // (𝩆) SIGNWRITING MOUTH OPEN WRINKLED	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA46, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_286)
{
    // 1DA47 003F;	
    // (𝩇) SIGNWRITING MOUTH OPEN OVAL	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA47, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_287)
{
    // 1DA48 003F;	
    // (𝩈) SIGNWRITING MOUTH OPEN OVAL WRINKLED	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA48, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_288)
{
    // 1DA49 003F;	
    // (𝩉) SIGNWRITING MOUTH OPEN OVAL YAWN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA49, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_289)
{
    // 1DA4A 003F;	
    // (𝩊) SIGNWRITING MOUTH OPEN RECTANGLE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA4A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_290)
{
    // 1DA4B 003F;	
    // (𝩋) SIGNWRITING MOUTH OPEN RECTANGLE WRINKLED	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA4B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_291)
{
    // 1DA4C 003F;	
    // (𝩌) SIGNWRITING MOUTH OPEN RECTANGLE YAWN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA4C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_292)
{
    // 1DA4D 003F;	
    // (𝩍) SIGNWRITING MOUTH KISS	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA4D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_293)
{
    // 1DA4E 003F;	
    // (𝩎) SIGNWRITING MOUTH KISS FORWARD	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA4E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_294)
{
    // 1DA4F 003F;	
    // (𝩏) SIGNWRITING MOUTH KISS WRINKLED	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA4F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_295)
{
    // 1DA50 003F;	
    // (𝩐) SIGNWRITING MOUTH TENSE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA50, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_296)
{
    // 1DA51 003F;	
    // (𝩑) SIGNWRITING MOUTH TENSE FORWARD	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA51, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_297)
{
    // 1DA52 003F;	
    // (𝩒) SIGNWRITING MOUTH TENSE SUCKED	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA52, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_298)
{
    // 1DA53 003F;	
    // (𝩓) SIGNWRITING LIPS PRESSED TOGETHER	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA53, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_299)
{
    // 1DA54 003F;	
    // (𝩔) SIGNWRITING LIP LOWER OVER UPPER	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA54, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_300)
{
    // 1DA55 003F;	
    // (𝩕) SIGNWRITING LIP UPPER OVER LOWER	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA55, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_301)
{
    // 1DA56 003F;	
    // (𝩖) SIGNWRITING MOUTH CORNERS	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA56, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_302)
{
    // 1DA57 003F;	
    // (𝩗) SIGNWRITING MOUTH WRINKLES SINGLE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA57, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_303)
{
    // 1DA58 003F;	
    // (𝩘) SIGNWRITING MOUTH WRINKLES DOUBLE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA58, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_304)
{
    // 1DA59 003F;	
    // (𝩙) SIGNWRITING TONGUE STICKING OUT FAR	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA59, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_305)
{
    // 1DA5A 003F;	
    // (𝩚) SIGNWRITING TONGUE LICKING LIPS	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA5A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_306)
{
    // 1DA5B 003F;	
    // (𝩛) SIGNWRITING TONGUE TIP BETWEEN LIPS	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA5B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_307)
{
    // 1DA5C 003F;	
    // (𝩜) SIGNWRITING TONGUE TIP TOUCHING INSIDE MOUTH	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA5C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_308)
{
    // 1DA5D 003F;	
    // (𝩝) SIGNWRITING TONGUE INSIDE MOUTH RELAXED	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA5D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_309)
{
    // 1DA5E 003F;	
    // (𝩞) SIGNWRITING TONGUE MOVES AGAINST CHEEK	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA5E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_310)
{
    // 1DA5F 003F;	
    // (𝩟) SIGNWRITING TONGUE CENTRE STICKING OUT	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA5F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_311)
{
    // 1DA60 003F;	
    // (𝩠) SIGNWRITING TONGUE CENTRE INSIDE MOUTH	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA60, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_312)
{
    // 1DA61 003F;	
    // (𝩡) SIGNWRITING TEETH	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA61, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_313)
{
    // 1DA62 003F;	
    // (𝩢) SIGNWRITING TEETH MOVEMENT	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA62, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_314)
{
    // 1DA63 003F;	
    // (𝩣) SIGNWRITING TEETH ON TONGUE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA63, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_315)
{
    // 1DA64 003F;	
    // (𝩤) SIGNWRITING TEETH ON TONGUE MOVEMENT	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA64, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_316)
{
    // 1DA65 003F;	
    // (𝩥) SIGNWRITING TEETH ON LIPS	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA65, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_317)
{
    // 1DA66 003F;	
    // (𝩦) SIGNWRITING TEETH ON LIPS MOVEMENT	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA66, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_318)
{
    // 1DA67 003F;	
    // (𝩧) SIGNWRITING TEETH BITE LIPS	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA67, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_319)
{
    // 1DA68 003F;	
    // (𝩨) SIGNWRITING MOVEMENT-WALLPLANE JAW	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA68, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_320)
{
    // 1DA69 003F;	
    // (𝩩) SIGNWRITING MOVEMENT-FLOORPLANE JAW	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA69, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_321)
{
    // 1DA6A 003F;	
    // (𝩪) SIGNWRITING NECK	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA6A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_322)
{
    // 1DA6B 003F;	
    // (𝩫) SIGNWRITING HAIR	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA6B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_323)
{
    // 1DA6C 003F;	
    // (𝩬) SIGNWRITING EXCITEMENT	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA6C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_324)
{
    // 1DA75 003F;	
    // (𝩵) SIGNWRITING UPPER BODY TILTING FROM HIP JOINTS	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA75, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_325)
{
    // 1DA84 003F;	
    // (𝪄) SIGNWRITING LOCATION HEAD NECK	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA84, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_326)
{
    // 1DA9B 003F;	
    // (𝪛) SIGNWRITING FILL MODIFIER-2	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA9B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_327)
{
    // 1DA9C 003F;	
    // (𝪜) SIGNWRITING FILL MODIFIER-3	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA9C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_328)
{
    // 1DA9D 003F;	
    // (𝪝) SIGNWRITING FILL MODIFIER-4	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA9D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_329)
{
    // 1DA9E 003F;	
    // (𝪞) SIGNWRITING FILL MODIFIER-5	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA9E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_330)
{
    // 1DA9F 003F;	
    // (𝪟) SIGNWRITING FILL MODIFIER-6	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DA9F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_331)
{
    // 1DAA1 003F;	
    // (𝪡) SIGNWRITING ROTATION MODIFIER-2	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DAA1, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_332)
{
    // 1DAA2 003F;	
    // (𝪢) SIGNWRITING ROTATION MODIFIER-3	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DAA2, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_333)
{
    // 1DAA3 003F;	
    // (𝪣) SIGNWRITING ROTATION MODIFIER-4	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DAA3, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_334)
{
    // 1DAA4 003F;	
    // (𝪤) SIGNWRITING ROTATION MODIFIER-5	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DAA4, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_335)
{
    // 1DAA5 003F;	
    // (𝪥) SIGNWRITING ROTATION MODIFIER-6	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DAA5, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_336)
{
    // 1DAA6 003F;	
    // (𝪦) SIGNWRITING ROTATION MODIFIER-7	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DAA6, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_337)
{
    // 1DAA7 003F;	
    // (𝪧) SIGNWRITING ROTATION MODIFIER-8	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DAA7, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_338)
{
    // 1DAA8 003F;	
    // (𝪨) SIGNWRITING ROTATION MODIFIER-9	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DAA8, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_339)
{
    // 1DAA9 003F;	
    // (𝪩) SIGNWRITING ROTATION MODIFIER-10	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DAA9, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_340)
{
    // 1DAAA 003F;	
    // (𝪪) SIGNWRITING ROTATION MODIFIER-11	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DAAA, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_341)
{
    // 1DAAB 003F;	
    // (𝪫) SIGNWRITING ROTATION MODIFIER-12	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DAAB, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_342)
{
    // 1DAAC 003F;	
    // (𝪬) SIGNWRITING ROTATION MODIFIER-13	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DAAC, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_343)
{
    // 1DAAD 003F;	
    // (𝪭) SIGNWRITING ROTATION MODIFIER-14	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DAAD, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_344)
{
    // 1DAAE 003F;	
    // (𝪮) SIGNWRITING ROTATION MODIFIER-15	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DAAE, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_345)
{
    // 1DAAF 003F;	
    // (𝪯) SIGNWRITING ROTATION MODIFIER-16	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1DAAF, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_346)
{
    // 1E8D0 003F;	
    // (𞣐) MENDE KIKAKUI COMBINING NUMBER TEENS	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1E8D0, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_347)
{
    // 1E8D1 003F;	
    // (𞣑) MENDE KIKAKUI COMBINING NUMBER TENS	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1E8D1, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_348)
{
    // 1E8D2 003F;	
    // (𞣒) MENDE KIKAKUI COMBINING NUMBER HUNDREDS	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1E8D2, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_349)
{
    // 1E8D3 003F;	
    // (𞣓) MENDE KIKAKUI COMBINING NUMBER THOUSANDS	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1E8D3, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_350)
{
    // 1E8D4 003F;	
    // (𞣔) MENDE KIKAKUI COMBINING NUMBER TEN THOUSANDS	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1E8D4, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_351)
{
    // 1E8D5 003F;	
    // (𞣕) MENDE KIKAKUI COMBINING NUMBER HUNDRED THOUSANDS	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1E8D5, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_352)
{
    // 1E8D6 003F;	
    // (𞣖) MENDE KIKAKUI COMBINING NUMBER MILLIONS	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x1E8D6, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_353)
{
    // E0001 003F;	
    // ('\U000E0001') LANGUAGE TAG	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0001, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_354)
{
    // E0020 003F;	
    // ('\U000E0020') TAG SPACE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0020, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_355)
{
    // E0021 003F;	
    // ('\U000E0021') TAG EXCLAMATION MARK	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0021, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_356)
{
    // E0022 003F;	
    // ('\U000E0022') TAG QUOTATION MARK	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0022, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_357)
{
    // E0023 003F;	
    // ('\U000E0023') TAG NUMBER SIGN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0023, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_358)
{
    // E0024 003F;	
    // ('\U000E0024') TAG DOLLAR SIGN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0024, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_359)
{
    // E0025 003F;	
    // ('\U000E0025') TAG PERCENT SIGN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0025, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_360)
{
    // E0026 003F;	
    // ('\U000E0026') TAG AMPERSAND	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0026, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_361)
{
    // E0027 003F;	
    // ('\U000E0027') TAG APOSTROPHE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0027, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_362)
{
    // E0028 003F;	
    // ('\U000E0028') TAG LEFT PARENTHESIS	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0028, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_363)
{
    // E0029 003F;	
    // ('\U000E0029') TAG RIGHT PARENTHESIS	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0029, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_364)
{
    // E002A 003F;	
    // ('\U000E002A') TAG ASTERISK	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE002A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_365)
{
    // E002B 003F;	
    // ('\U000E002B') TAG PLUS SIGN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE002B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_366)
{
    // E002C 003F;	
    // ('\U000E002C') TAG COMMA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE002C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_367)
{
    // E002D 003F;	
    // ('\U000E002D') TAG HYPHEN-MINUS	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE002D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_368)
{
    // E002E 003F;	
    // ('\U000E002E') TAG FULL STOP	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE002E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_369)
{
    // E002F 003F;	
    // ('\U000E002F') TAG SOLIDUS	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE002F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_370)
{
    // E0030 003F;	
    // ('\U000E0030') TAG DIGIT ZERO	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0030, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_371)
{
    // E0031 003F;	
    // ('\U000E0031') TAG DIGIT ONE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0031, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_372)
{
    // E0032 003F;	
    // ('\U000E0032') TAG DIGIT TWO	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0032, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_373)
{
    // E0033 003F;	
    // ('\U000E0033') TAG DIGIT THREE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0033, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_374)
{
    // E0034 003F;	
    // ('\U000E0034') TAG DIGIT FOUR	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0034, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_375)
{
    // E0035 003F;	
    // ('\U000E0035') TAG DIGIT FIVE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0035, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_376)
{
    // E0036 003F;	
    // ('\U000E0036') TAG DIGIT SIX	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0036, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_377)
{
    // E0037 003F;	
    // ('\U000E0037') TAG DIGIT SEVEN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0037, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_378)
{
    // E0038 003F;	
    // ('\U000E0038') TAG DIGIT EIGHT	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0038, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_379)
{
    // E0039 003F;	
    // ('\U000E0039') TAG DIGIT NINE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0039, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_380)
{
    // E003A 003F;	
    // ('\U000E003A') TAG COLON	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE003A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_381)
{
    // E003B 003F;	
    // ('\U000E003B') TAG SEMICOLON	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE003B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_382)
{
    // E003C 003F;	
    // ('\U000E003C') TAG LESS-THAN SIGN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE003C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_383)
{
    // E003D 003F;	
    // ('\U000E003D') TAG EQUALS SIGN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE003D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_384)
{
    // E003E 003F;	
    // ('\U000E003E') TAG GREATER-THAN SIGN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE003E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_385)
{
    // E003F 003F;	
    // ('\U000E003F') TAG QUESTION MARK	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE003F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_386)
{
    // E0040 003F;	
    // ('\U000E0040') TAG COMMERCIAL AT	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0040, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_387)
{
    // E0041 003F;	
    // ('\U000E0041') TAG LATIN CAPITAL LETTER A	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0041, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_388)
{
    // E0042 003F;	
    // ('\U000E0042') TAG LATIN CAPITAL LETTER B	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0042, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_389)
{
    // E0043 003F;	
    // ('\U000E0043') TAG LATIN CAPITAL LETTER C	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0043, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_390)
{
    // E0044 003F;	
    // ('\U000E0044') TAG LATIN CAPITAL LETTER D	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0044, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_391)
{
    // E0045 003F;	
    // ('\U000E0045') TAG LATIN CAPITAL LETTER E	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0045, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_392)
{
    // E0046 003F;	
    // ('\U000E0046') TAG LATIN CAPITAL LETTER F	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0046, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_393)
{
    // E0047 003F;	
    // ('\U000E0047') TAG LATIN CAPITAL LETTER G	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0047, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_394)
{
    // E0048 003F;	
    // ('\U000E0048') TAG LATIN CAPITAL LETTER H	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0048, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_395)
{
    // E0049 003F;	
    // ('\U000E0049') TAG LATIN CAPITAL LETTER I	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0049, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_396)
{
    // E004A 003F;	
    // ('\U000E004A') TAG LATIN CAPITAL LETTER J	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE004A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_397)
{
    // E004B 003F;	
    // ('\U000E004B') TAG LATIN CAPITAL LETTER K	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE004B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_398)
{
    // E004C 003F;	
    // ('\U000E004C') TAG LATIN CAPITAL LETTER L	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE004C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_399)
{
    // E004D 003F;	
    // ('\U000E004D') TAG LATIN CAPITAL LETTER M	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE004D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_400)
{
    // E004E 003F;	
    // ('\U000E004E') TAG LATIN CAPITAL LETTER N	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE004E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_401)
{
    // E004F 003F;	
    // ('\U000E004F') TAG LATIN CAPITAL LETTER O	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE004F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_402)
{
    // E0050 003F;	
    // ('\U000E0050') TAG LATIN CAPITAL LETTER P	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0050, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_403)
{
    // E0051 003F;	
    // ('\U000E0051') TAG LATIN CAPITAL LETTER Q	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0051, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_404)
{
    // E0052 003F;	
    // ('\U000E0052') TAG LATIN CAPITAL LETTER R	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0052, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_405)
{
    // E0053 003F;	
    // ('\U000E0053') TAG LATIN CAPITAL LETTER S	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0053, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_406)
{
    // E0054 003F;	
    // ('\U000E0054') TAG LATIN CAPITAL LETTER T	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0054, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_407)
{
    // E0055 003F;	
    // ('\U000E0055') TAG LATIN CAPITAL LETTER U	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0055, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_408)
{
    // E0056 003F;	
    // ('\U000E0056') TAG LATIN CAPITAL LETTER V	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0056, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_409)
{
    // E0057 003F;	
    // ('\U000E0057') TAG LATIN CAPITAL LETTER W	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0057, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_410)
{
    // E0058 003F;	
    // ('\U000E0058') TAG LATIN CAPITAL LETTER X	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0058, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_411)
{
    // E0059 003F;	
    // ('\U000E0059') TAG LATIN CAPITAL LETTER Y	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0059, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_412)
{
    // E005A 003F;	
    // ('\U000E005A') TAG LATIN CAPITAL LETTER Z	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE005A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_413)
{
    // E005B 003F;	
    // ('\U000E005B') TAG LEFT SQUARE BRACKET	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE005B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_414)
{
    // E005C 003F;	
    // ('\U000E005C') TAG REVERSE SOLIDUS	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE005C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_415)
{
    // E005D 003F;	
    // ('\U000E005D') TAG RIGHT SQUARE BRACKET	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE005D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_416)
{
    // E005E 003F;	
    // ('\U000E005E') TAG CIRCUMFLEX ACCENT	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE005E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_417)
{
    // E005F 003F;	
    // ('\U000E005F') TAG LOW LINE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE005F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_418)
{
    // E0060 003F;	
    // ('\U000E0060') TAG GRAVE ACCENT	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0060, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_419)
{
    // E0061 003F;	
    // ('\U000E0061') TAG LATIN SMALL LETTER A	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0061, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_420)
{
    // E0062 003F;	
    // ('\U000E0062') TAG LATIN SMALL LETTER B	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0062, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_421)
{
    // E0063 003F;	
    // ('\U000E0063') TAG LATIN SMALL LETTER C	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0063, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_422)
{
    // E0064 003F;	
    // ('\U000E0064') TAG LATIN SMALL LETTER D	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0064, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_423)
{
    // E0065 003F;	
    // ('\U000E0065') TAG LATIN SMALL LETTER E	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0065, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_424)
{
    // E0066 003F;	
    // ('\U000E0066') TAG LATIN SMALL LETTER F	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0066, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_425)
{
    // E0067 003F;	
    // ('\U000E0067') TAG LATIN SMALL LETTER G	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0067, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_426)
{
    // E0068 003F;	
    // ('\U000E0068') TAG LATIN SMALL LETTER H	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0068, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_427)
{
    // E0069 003F;	
    // ('\U000E0069') TAG LATIN SMALL LETTER I	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0069, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_428)
{
    // E006A 003F;	
    // ('\U000E006A') TAG LATIN SMALL LETTER J	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE006A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_429)
{
    // E006B 003F;	
    // ('\U000E006B') TAG LATIN SMALL LETTER K	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE006B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_430)
{
    // E006C 003F;	
    // ('\U000E006C') TAG LATIN SMALL LETTER L	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE006C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_431)
{
    // E006D 003F;	
    // ('\U000E006D') TAG LATIN SMALL LETTER M	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE006D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_432)
{
    // E006E 003F;	
    // ('\U000E006E') TAG LATIN SMALL LETTER N	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE006E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_433)
{
    // E006F 003F;	
    // ('\U000E006F') TAG LATIN SMALL LETTER O	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE006F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_434)
{
    // E0070 003F;	
    // ('\U000E0070') TAG LATIN SMALL LETTER P	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0070, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_435)
{
    // E0071 003F;	
    // ('\U000E0071') TAG LATIN SMALL LETTER Q	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0071, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_436)
{
    // E0072 003F;	
    // ('\U000E0072') TAG LATIN SMALL LETTER R	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0072, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_437)
{
    // E0073 003F;	
    // ('\U000E0073') TAG LATIN SMALL LETTER S	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0073, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_438)
{
    // E0074 003F;	
    // ('\U000E0074') TAG LATIN SMALL LETTER T	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0074, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_439)
{
    // E0075 003F;	
    // ('\U000E0075') TAG LATIN SMALL LETTER U	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0075, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_440)
{
    // E0076 003F;	
    // ('\U000E0076') TAG LATIN SMALL LETTER V	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0076, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_441)
{
    // E0077 003F;	
    // ('\U000E0077') TAG LATIN SMALL LETTER W	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0077, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_442)
{
    // E0078 003F;	
    // ('\U000E0078') TAG LATIN SMALL LETTER X	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0078, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_443)
{
    // E0079 003F;	
    // ('\U000E0079') TAG LATIN SMALL LETTER Y	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0079, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_444)
{
    // E007A 003F;	
    // ('\U000E007A') TAG LATIN SMALL LETTER Z	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE007A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_445)
{
    // E007B 003F;	
    // ('\U000E007B') TAG LEFT CURLY BRACKET	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE007B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_446)
{
    // E007C 003F;	
    // ('\U000E007C') TAG VERTICAL LINE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE007C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_447)
{
    // E007D 003F;	
    // ('\U000E007D') TAG RIGHT CURLY BRACKET	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE007D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_448)
{
    // E007E 003F;	
    // ('\U000E007E') TAG TILDE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE007E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_449)
{
    // E007F 003F;	
    // ('\U000E007F') CANCEL TAG	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE007F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_450)
{
    // E0100 003F;	
    // (󠄀) VARIATION SELECTOR-17	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0100, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_451)
{
    // E0101 003F;	
    // (󠄁) VARIATION SELECTOR-18	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0101, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_452)
{
    // E0102 003F;	
    // (󠄂) VARIATION SELECTOR-19	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0102, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_453)
{
    // E0103 003F;	
    // (󠄃) VARIATION SELECTOR-20	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0103, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_454)
{
    // E0104 003F;	
    // (󠄄) VARIATION SELECTOR-21	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0104, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_455)
{
    // E0105 003F;	
    // (󠄅) VARIATION SELECTOR-22	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0105, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_456)
{
    // E0106 003F;	
    // (󠄆) VARIATION SELECTOR-23	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0106, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_457)
{
    // E0107 003F;	
    // (󠄇) VARIATION SELECTOR-24	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0107, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_458)
{
    // E0108 003F;	
    // (󠄈) VARIATION SELECTOR-25	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0108, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_459)
{
    // E0109 003F;	
    // (󠄉) VARIATION SELECTOR-26	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0109, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_460)
{
    // E010A 003F;	
    // (󠄊) VARIATION SELECTOR-27	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE010A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_461)
{
    // E010B 003F;	
    // (󠄋) VARIATION SELECTOR-28	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE010B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_462)
{
    // E010C 003F;	
    // (󠄌) VARIATION SELECTOR-29	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE010C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_463)
{
    // E010D 003F;	
    // (󠄍) VARIATION SELECTOR-30	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE010D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_464)
{
    // E010E 003F;	
    // (󠄎) VARIATION SELECTOR-31	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE010E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_465)
{
    // E010F 003F;	
    // (󠄏) VARIATION SELECTOR-32	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE010F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_466)
{
    // E0110 003F;	
    // (󠄐) VARIATION SELECTOR-33	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0110, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_467)
{
    // E0111 003F;	
    // (󠄑) VARIATION SELECTOR-34	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0111, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_468)
{
    // E0112 003F;	
    // (󠄒) VARIATION SELECTOR-35	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0112, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_469)
{
    // E0113 003F;	
    // (󠄓) VARIATION SELECTOR-36	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0113, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_470)
{
    // E0114 003F;	
    // (󠄔) VARIATION SELECTOR-37	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0114, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_471)
{
    // E0115 003F;	
    // (󠄕) VARIATION SELECTOR-38	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0115, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_472)
{
    // E0116 003F;	
    // (󠄖) VARIATION SELECTOR-39	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0116, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_473)
{
    // E0117 003F;	
    // (󠄗) VARIATION SELECTOR-40	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0117, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_474)
{
    // E0118 003F;	
    // (󠄘) VARIATION SELECTOR-41	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0118, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_475)
{
    // E0119 003F;	
    // (󠄙) VARIATION SELECTOR-42	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0119, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_476)
{
    // E011A 003F;	
    // (󠄚) VARIATION SELECTOR-43	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE011A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_477)
{
    // E011B 003F;	
    // (󠄛) VARIATION SELECTOR-44	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE011B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_478)
{
    // E011C 003F;	
    // (󠄜) VARIATION SELECTOR-45	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE011C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_479)
{
    // E011D 003F;	
    // (󠄝) VARIATION SELECTOR-46	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE011D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_480)
{
    // E011E 003F;	
    // (󠄞) VARIATION SELECTOR-47	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE011E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_481)
{
    // E011F 003F;	
    // (󠄟) VARIATION SELECTOR-48	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE011F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_482)
{
    // E0120 003F;	
    // (󠄠) VARIATION SELECTOR-49	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0120, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_483)
{
    // E0121 003F;	
    // (󠄡) VARIATION SELECTOR-50	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0121, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_484)
{
    // E0122 003F;	
    // (󠄢) VARIATION SELECTOR-51	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0122, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_485)
{
    // E0123 003F;	
    // (󠄣) VARIATION SELECTOR-52	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0123, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_486)
{
    // E0124 003F;	
    // (󠄤) VARIATION SELECTOR-53	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0124, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_487)
{
    // E0125 003F;	
    // (󠄥) VARIATION SELECTOR-54	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0125, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_488)
{
    // E0126 003F;	
    // (󠄦) VARIATION SELECTOR-55	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0126, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_489)
{
    // E0127 003F;	
    // (󠄧) VARIATION SELECTOR-56	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0127, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_490)
{
    // E0128 003F;	
    // (󠄨) VARIATION SELECTOR-57	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0128, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_491)
{
    // E0129 003F;	
    // (󠄩) VARIATION SELECTOR-58	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0129, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_492)
{
    // E012A 003F;	
    // (󠄪) VARIATION SELECTOR-59	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE012A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_493)
{
    // E012B 003F;	
    // (󠄫) VARIATION SELECTOR-60	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE012B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_494)
{
    // E012C 003F;	
    // (󠄬) VARIATION SELECTOR-61	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE012C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_495)
{
    // E012D 003F;	
    // (󠄭) VARIATION SELECTOR-62	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE012D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_496)
{
    // E012E 003F;	
    // (󠄮) VARIATION SELECTOR-63	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE012E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_497)
{
    // E012F 003F;	
    // (󠄯) VARIATION SELECTOR-64	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE012F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_498)
{
    // E0130 003F;	
    // (󠄰) VARIATION SELECTOR-65	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0130, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_007_499)
{
    // E0131 003F;	
    // (󠄱) VARIATION SELECTOR-66	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0131, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

