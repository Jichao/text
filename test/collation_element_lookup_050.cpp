// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_050_000)
{
    // 1EBA  ; [.1D10.0020.0008][.0000.003B.0002] 
    // LATIN CAPITAL LETTER E WITH HOOK ABOVE

    uint32_t const cps[1] = { 0x1eba };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x1b), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_001)
{
    // 1EBB  ; [.1D10.0020.0002][.0000.003B.0002] 
    // LATIN SMALL LETTER E WITH HOOK ABOVE

    uint32_t const cps[1] = { 0x1ebb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x1b), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_002)
{
    // 1EBC  ; [.1D10.0020.0008][.0000.002D.0002] 
    // LATIN CAPITAL LETTER E WITH TILDE

    uint32_t const cps[1] = { 0x1ebc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xd), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_003)
{
    // 1EBD  ; [.1D10.0020.0002][.0000.002D.0002] 
    // LATIN SMALL LETTER E WITH TILDE

    uint32_t const cps[1] = { 0x1ebd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xd), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_004)
{
    // 1EBE  ; [.1D10.0020.0008][.0000.0027.0002][.0000.0024.0002] 
    // LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND ACUTE

    uint32_t const cps[1] = { 0x1ebe };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_005)
{
    // 1EBF  ; [.1D10.0020.0002][.0000.0027.0002][.0000.0024.0002] 
    // LATIN SMALL LETTER E WITH CIRCUMFLEX AND ACUTE

    uint32_t const cps[1] = { 0x1ebf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_006)
{
    // 1EC0  ; [.1D10.0020.0008][.0000.0027.0002][.0000.0025.0002] 
    // LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND GRAVE

    uint32_t const cps[1] = { 0x1ec0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_007)
{
    // 1EC1  ; [.1D10.0020.0002][.0000.0027.0002][.0000.0025.0002] 
    // LATIN SMALL LETTER E WITH CIRCUMFLEX AND GRAVE

    uint32_t const cps[1] = { 0x1ec1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_008)
{
    // 1EC2  ; [.1D10.0020.0008][.0000.0027.0002][.0000.003B.0002] 
    // LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE

    uint32_t const cps[1] = { 0x1ec2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x1b), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_009)
{
    // 1EC3  ; [.1D10.0020.0002][.0000.0027.0002][.0000.003B.0002] 
    // LATIN SMALL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE

    uint32_t const cps[1] = { 0x1ec3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x1b), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_010)
{
    // 1EC4  ; [.1D10.0020.0008][.0000.0027.0002][.0000.002D.0002] 
    // LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND TILDE

    uint32_t const cps[1] = { 0x1ec4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xd), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_011)
{
    // 1EC5  ; [.1D10.0020.0002][.0000.0027.0002][.0000.002D.0002] 
    // LATIN SMALL LETTER E WITH CIRCUMFLEX AND TILDE

    uint32_t const cps[1] = { 0x1ec5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xd), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_012)
{
    // 1EC6  ; [.1D10.0020.0008][.0000.0042.0002][.0000.0027.0002] 
    // LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND DOT BELOW

    uint32_t const cps[1] = { 0x1ec6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x22), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_013)
{
    // 1EC7  ; [.1D10.0020.0002][.0000.0042.0002][.0000.0027.0002] 
    // LATIN SMALL LETTER E WITH CIRCUMFLEX AND DOT BELOW

    uint32_t const cps[1] = { 0x1ec7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x22), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_014)
{
    // 1EC8  ; [.1D98.0020.0008][.0000.003B.0002] 
    // LATIN CAPITAL LETTER I WITH HOOK ABOVE

    uint32_t const cps[1] = { 0x1ec8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x1b), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_015)
{
    // 1EC9  ; [.1D98.0020.0002][.0000.003B.0002] 
    // LATIN SMALL LETTER I WITH HOOK ABOVE

    uint32_t const cps[1] = { 0x1ec9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x1b), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_016)
{
    // 1ECA  ; [.1D98.0020.0008][.0000.0042.0002] 
    // LATIN CAPITAL LETTER I WITH DOT BELOW

    uint32_t const cps[1] = { 0x1eca };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x22), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_017)
{
    // 1ECB  ; [.1D98.0020.0002][.0000.0042.0002] 
    // LATIN SMALL LETTER I WITH DOT BELOW

    uint32_t const cps[1] = { 0x1ecb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x22), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_018)
{
    // 1ECC  ; [.1E43.0020.0008][.0000.0042.0002] 
    // LATIN CAPITAL LETTER O WITH DOT BELOW

    uint32_t const cps[1] = { 0x1ecc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x22), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_019)
{
    // 1ECD  ; [.1E43.0020.0002][.0000.0042.0002] 
    // LATIN SMALL LETTER O WITH DOT BELOW

    uint32_t const cps[1] = { 0x1ecd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x22), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_020)
{
    // 1ECE  ; [.1E43.0020.0008][.0000.003B.0002] 
    // LATIN CAPITAL LETTER O WITH HOOK ABOVE

    uint32_t const cps[1] = { 0x1ece };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x1b), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_021)
{
    // 1ECF  ; [.1E43.0020.0002][.0000.003B.0002] 
    // LATIN SMALL LETTER O WITH HOOK ABOVE

    uint32_t const cps[1] = { 0x1ecf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x1b), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_022)
{
    // 1ED0  ; [.1E43.0020.0008][.0000.0027.0002][.0000.0024.0002] 
    // LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND ACUTE

    uint32_t const cps[1] = { 0x1ed0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_023)
{
    // 1ED1  ; [.1E43.0020.0002][.0000.0027.0002][.0000.0024.0002] 
    // LATIN SMALL LETTER O WITH CIRCUMFLEX AND ACUTE

    uint32_t const cps[1] = { 0x1ed1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_024)
{
    // 1ED2  ; [.1E43.0020.0008][.0000.0027.0002][.0000.0025.0002] 
    // LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND GRAVE

    uint32_t const cps[1] = { 0x1ed2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_025)
{
    // 1ED3  ; [.1E43.0020.0002][.0000.0027.0002][.0000.0025.0002] 
    // LATIN SMALL LETTER O WITH CIRCUMFLEX AND GRAVE

    uint32_t const cps[1] = { 0x1ed3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_026)
{
    // 1ED4  ; [.1E43.0020.0008][.0000.0027.0002][.0000.003B.0002] 
    // LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE

    uint32_t const cps[1] = { 0x1ed4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x1b), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_027)
{
    // 1ED5  ; [.1E43.0020.0002][.0000.0027.0002][.0000.003B.0002] 
    // LATIN SMALL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE

    uint32_t const cps[1] = { 0x1ed5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x1b), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_028)
{
    // 1ED6  ; [.1E43.0020.0008][.0000.0027.0002][.0000.002D.0002] 
    // LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND TILDE

    uint32_t const cps[1] = { 0x1ed6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xd), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_029)
{
    // 1ED7  ; [.1E43.0020.0002][.0000.0027.0002][.0000.002D.0002] 
    // LATIN SMALL LETTER O WITH CIRCUMFLEX AND TILDE

    uint32_t const cps[1] = { 0x1ed7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xd), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_030)
{
    // 1ED8  ; [.1E43.0020.0008][.0000.0042.0002][.0000.0027.0002] 
    // LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND DOT BELOW

    uint32_t const cps[1] = { 0x1ed8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x22), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_031)
{
    // 1ED9  ; [.1E43.0020.0002][.0000.0042.0002][.0000.0027.0002] 
    // LATIN SMALL LETTER O WITH CIRCUMFLEX AND DOT BELOW

    uint32_t const cps[1] = { 0x1ed9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x22), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x7), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_032)
{
    // 1EDA  ; [.1E43.0020.0008][.0000.003F.0002][.0000.0024.0002] 
    // LATIN CAPITAL LETTER O WITH HORN AND ACUTE

    uint32_t const cps[1] = { 0x1eda };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x1f), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_033)
{
    // 1EDB  ; [.1E43.0020.0002][.0000.003F.0002][.0000.0024.0002] 
    // LATIN SMALL LETTER O WITH HORN AND ACUTE

    uint32_t const cps[1] = { 0x1edb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x1f), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_034)
{
    // 1EDC  ; [.1E43.0020.0008][.0000.003F.0002][.0000.0025.0002] 
    // LATIN CAPITAL LETTER O WITH HORN AND GRAVE

    uint32_t const cps[1] = { 0x1edc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x1f), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_035)
{
    // 1EDD  ; [.1E43.0020.0002][.0000.003F.0002][.0000.0025.0002] 
    // LATIN SMALL LETTER O WITH HORN AND GRAVE

    uint32_t const cps[1] = { 0x1edd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x1f), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_036)
{
    // 1EDE  ; [.1E43.0020.0008][.0000.003F.0002][.0000.003B.0002] 
    // LATIN CAPITAL LETTER O WITH HORN AND HOOK ABOVE

    uint32_t const cps[1] = { 0x1ede };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x1f), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x1b), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_037)
{
    // 1EDF  ; [.1E43.0020.0002][.0000.003F.0002][.0000.003B.0002] 
    // LATIN SMALL LETTER O WITH HORN AND HOOK ABOVE

    uint32_t const cps[1] = { 0x1edf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x1f), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x1b), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_038)
{
    // 1EE0  ; [.1E43.0020.0008][.0000.003F.0002][.0000.002D.0002] 
    // LATIN CAPITAL LETTER O WITH HORN AND TILDE

    uint32_t const cps[1] = { 0x1ee0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x1f), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xd), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_039)
{
    // 1EE1  ; [.1E43.0020.0002][.0000.003F.0002][.0000.002D.0002] 
    // LATIN SMALL LETTER O WITH HORN AND TILDE

    uint32_t const cps[1] = { 0x1ee1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x1f), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xd), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_040)
{
    // 1EE2  ; [.1E43.0020.0008][.0000.003F.0002][.0000.0042.0002] 
    // LATIN CAPITAL LETTER O WITH HORN AND DOT BELOW

    uint32_t const cps[1] = { 0x1ee2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x1f), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x22), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_041)
{
    // 1EE3  ; [.1E43.0020.0002][.0000.003F.0002][.0000.0042.0002] 
    // LATIN SMALL LETTER O WITH HORN AND DOT BELOW

    uint32_t const cps[1] = { 0x1ee3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x1f), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x22), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_042)
{
    // 1EE4  ; [.1F1B.0020.0008][.0000.0042.0002] 
    // LATIN CAPITAL LETTER U WITH DOT BELOW

    uint32_t const cps[1] = { 0x1ee4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x22), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_043)
{
    // 1EE5  ; [.1F1B.0020.0002][.0000.0042.0002] 
    // LATIN SMALL LETTER U WITH DOT BELOW

    uint32_t const cps[1] = { 0x1ee5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x22), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_044)
{
    // 1EE6  ; [.1F1B.0020.0008][.0000.003B.0002] 
    // LATIN CAPITAL LETTER U WITH HOOK ABOVE

    uint32_t const cps[1] = { 0x1ee6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x1b), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_045)
{
    // 1EE7  ; [.1F1B.0020.0002][.0000.003B.0002] 
    // LATIN SMALL LETTER U WITH HOOK ABOVE

    uint32_t const cps[1] = { 0x1ee7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x1b), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_046)
{
    // 1EE8  ; [.1F1B.0020.0008][.0000.003F.0002][.0000.0024.0002] 
    // LATIN CAPITAL LETTER U WITH HORN AND ACUTE

    uint32_t const cps[1] = { 0x1ee8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x1f), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_047)
{
    // 1EE9  ; [.1F1B.0020.0002][.0000.003F.0002][.0000.0024.0002] 
    // LATIN SMALL LETTER U WITH HORN AND ACUTE

    uint32_t const cps[1] = { 0x1ee9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x1f), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_048)
{
    // 1EEA  ; [.1F1B.0020.0008][.0000.003F.0002][.0000.0025.0002] 
    // LATIN CAPITAL LETTER U WITH HORN AND GRAVE

    uint32_t const cps[1] = { 0x1eea };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x1f), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_049)
{
    // 1EEB  ; [.1F1B.0020.0002][.0000.003F.0002][.0000.0025.0002] 
    // LATIN SMALL LETTER U WITH HORN AND GRAVE

    uint32_t const cps[1] = { 0x1eeb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x1f), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_050)
{
    // 1EEC  ; [.1F1B.0020.0008][.0000.003F.0002][.0000.003B.0002] 
    // LATIN CAPITAL LETTER U WITH HORN AND HOOK ABOVE

    uint32_t const cps[1] = { 0x1eec };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x1f), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x1b), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_051)
{
    // 1EED  ; [.1F1B.0020.0002][.0000.003F.0002][.0000.003B.0002] 
    // LATIN SMALL LETTER U WITH HORN AND HOOK ABOVE

    uint32_t const cps[1] = { 0x1eed };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x1f), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x1b), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_052)
{
    // 1EEE  ; [.1F1B.0020.0008][.0000.003F.0002][.0000.002D.0002] 
    // LATIN CAPITAL LETTER U WITH HORN AND TILDE

    uint32_t const cps[1] = { 0x1eee };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x1f), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xd), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_053)
{
    // 1EEF  ; [.1F1B.0020.0002][.0000.003F.0002][.0000.002D.0002] 
    // LATIN SMALL LETTER U WITH HORN AND TILDE

    uint32_t const cps[1] = { 0x1eef };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x1f), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xd), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_054)
{
    // 1EF0  ; [.1F1B.0020.0008][.0000.003F.0002][.0000.0042.0002] 
    // LATIN CAPITAL LETTER U WITH HORN AND DOT BELOW

    uint32_t const cps[1] = { 0x1ef0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x1f), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x22), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_055)
{
    // 1EF1  ; [.1F1B.0020.0002][.0000.003F.0002][.0000.0042.0002] 
    // LATIN SMALL LETTER U WITH HORN AND DOT BELOW

    uint32_t const cps[1] = { 0x1ef1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x1f), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x22), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_056)
{
    // 1EF2  ; [.1F71.0020.0008][.0000.0025.0002] 
    // LATIN CAPITAL LETTER Y WITH GRAVE

    uint32_t const cps[1] = { 0x1ef2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_057)
{
    // 1EF3  ; [.1F71.0020.0002][.0000.0025.0002] 
    // LATIN SMALL LETTER Y WITH GRAVE

    uint32_t const cps[1] = { 0x1ef3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_058)
{
    // 1EF4  ; [.1F71.0020.0008][.0000.0042.0002] 
    // LATIN CAPITAL LETTER Y WITH DOT BELOW

    uint32_t const cps[1] = { 0x1ef4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x22), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_059)
{
    // 1EF5  ; [.1F71.0020.0002][.0000.0042.0002] 
    // LATIN SMALL LETTER Y WITH DOT BELOW

    uint32_t const cps[1] = { 0x1ef5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x22), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_060)
{
    // 1EF6  ; [.1F71.0020.0008][.0000.003B.0002] 
    // LATIN CAPITAL LETTER Y WITH HOOK ABOVE

    uint32_t const cps[1] = { 0x1ef6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x1b), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_061)
{
    // 1EF7  ; [.1F71.0020.0002][.0000.003B.0002] 
    // LATIN SMALL LETTER Y WITH HOOK ABOVE

    uint32_t const cps[1] = { 0x1ef7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x1b), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_062)
{
    // 1EF8  ; [.1F71.0020.0008][.0000.002D.0002] 
    // LATIN CAPITAL LETTER Y WITH TILDE

    uint32_t const cps[1] = { 0x1ef8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0xd), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_063)
{
    // 1EF9  ; [.1F71.0020.0002][.0000.002D.0002] 
    // LATIN SMALL LETTER Y WITH TILDE

    uint32_t const cps[1] = { 0x1ef9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xd), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_064)
{
    // 1EFA  ; [.1DDD.0020.000A][.1DDD.0020.000A] 
    // LATIN CAPITAL LETTER MIDDLE-WELSH LL

    uint32_t const cps[1] = { 0x1efa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_065)
{
    // 1EFB  ; [.1DDD.0020.0004][.1DDD.0020.0004] 
    // LATIN SMALL LETTER MIDDLE-WELSH LL

    uint32_t const cps[1] = { 0x1efb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_066)
{
    // 1EFC  ; [.1F56.0020.0008] 
    // LATIN CAPITAL LETTER MIDDLE-WELSH V

    uint32_t const cps[1] = { 0x1efc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1f56), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_050_067)
{
    // 1EFD  ; [.1F56.0020.0002] 
    // LATIN SMALL LETTER MIDDLE-WELSH V

    uint32_t const cps[1] = { 0x1efd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1f56), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_050_068)
{
    // 1EFE  ; [.1F81.0020.0008] 
    // LATIN CAPITAL LETTER Y WITH LOOP

    uint32_t const cps[1] = { 0x1efe };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1f81), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_050_069)
{
    // 1EFF  ; [.1F81.0020.0002] 
    // LATIN SMALL LETTER Y WITH LOOP

    uint32_t const cps[1] = { 0x1eff };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1f81), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_050_070)
{
    // 1F00  ; [.201F.0020.0002][.0000.0022.0002] 
    // GREEK SMALL LETTER ALPHA WITH PSILI

    uint32_t const cps[1] = { 0x1f00 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_071)
{
    // 1F01  ; [.201F.0020.0002][.0000.0023.0002] 
    // GREEK SMALL LETTER ALPHA WITH DASIA

    uint32_t const cps[1] = { 0x1f01 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_072)
{
    // 1F02  ; [.201F.0020.0002][.0000.0022.0002][.0000.0025.0002] 
    // GREEK SMALL LETTER ALPHA WITH PSILI AND VARIA

    uint32_t const cps[1] = { 0x1f02 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_073)
{
    // 1F03  ; [.201F.0020.0002][.0000.0023.0002][.0000.0025.0002] 
    // GREEK SMALL LETTER ALPHA WITH DASIA AND VARIA

    uint32_t const cps[1] = { 0x1f03 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_074)
{
    // 1F04  ; [.201F.0020.0002][.0000.0022.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER ALPHA WITH PSILI AND OXIA

    uint32_t const cps[1] = { 0x1f04 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_075)
{
    // 1F05  ; [.201F.0020.0002][.0000.0023.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER ALPHA WITH DASIA AND OXIA

    uint32_t const cps[1] = { 0x1f05 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_076)
{
    // 1F06  ; [.201F.0020.0002][.0000.0022.0002][.0000.002A.0002] 
    // GREEK SMALL LETTER ALPHA WITH PSILI AND PERISPOMENI

    uint32_t const cps[1] = { 0x1f06 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_077)
{
    // 1F07  ; [.201F.0020.0002][.0000.0023.0002][.0000.002A.0002] 
    // GREEK SMALL LETTER ALPHA WITH DASIA AND PERISPOMENI

    uint32_t const cps[1] = { 0x1f07 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_078)
{
    // 1F08  ; [.201F.0020.0008][.0000.0022.0002] 
    // GREEK CAPITAL LETTER ALPHA WITH PSILI

    uint32_t const cps[1] = { 0x1f08 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_079)
{
    // 1F09  ; [.201F.0020.0008][.0000.0023.0002] 
    // GREEK CAPITAL LETTER ALPHA WITH DASIA

    uint32_t const cps[1] = { 0x1f09 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_080)
{
    // 1F0A  ; [.201F.0020.0008][.0000.0022.0002][.0000.0025.0002] 
    // GREEK CAPITAL LETTER ALPHA WITH PSILI AND VARIA

    uint32_t const cps[1] = { 0x1f0a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_081)
{
    // 1F0B  ; [.201F.0020.0008][.0000.0023.0002][.0000.0025.0002] 
    // GREEK CAPITAL LETTER ALPHA WITH DASIA AND VARIA

    uint32_t const cps[1] = { 0x1f0b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_082)
{
    // 1F0C  ; [.201F.0020.0008][.0000.0022.0002][.0000.0024.0002] 
    // GREEK CAPITAL LETTER ALPHA WITH PSILI AND OXIA

    uint32_t const cps[1] = { 0x1f0c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_083)
{
    // 1F0D  ; [.201F.0020.0008][.0000.0023.0002][.0000.0024.0002] 
    // GREEK CAPITAL LETTER ALPHA WITH DASIA AND OXIA

    uint32_t const cps[1] = { 0x1f0d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_084)
{
    // 1F0E  ; [.201F.0020.0008][.0000.0022.0002][.0000.002A.0002] 
    // GREEK CAPITAL LETTER ALPHA WITH PSILI AND PERISPOMENI

    uint32_t const cps[1] = { 0x1f0e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_085)
{
    // 1F0F  ; [.201F.0020.0008][.0000.0023.0002][.0000.002A.0002] 
    // GREEK CAPITAL LETTER ALPHA WITH DASIA AND PERISPOMENI

    uint32_t const cps[1] = { 0x1f0f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_086)
{
    // 1F10  ; [.2024.0020.0002][.0000.0022.0002] 
    // GREEK SMALL LETTER EPSILON WITH PSILI

    uint32_t const cps[1] = { 0x1f10 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2024), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_087)
{
    // 1F11  ; [.2024.0020.0002][.0000.0023.0002] 
    // GREEK SMALL LETTER EPSILON WITH DASIA

    uint32_t const cps[1] = { 0x1f11 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2024), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_088)
{
    // 1F12  ; [.2024.0020.0002][.0000.0022.0002][.0000.0025.0002] 
    // GREEK SMALL LETTER EPSILON WITH PSILI AND VARIA

    uint32_t const cps[1] = { 0x1f12 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x2024), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_089)
{
    // 1F13  ; [.2024.0020.0002][.0000.0023.0002][.0000.0025.0002] 
    // GREEK SMALL LETTER EPSILON WITH DASIA AND VARIA

    uint32_t const cps[1] = { 0x1f13 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x2024), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_090)
{
    // 1F14  ; [.2024.0020.0002][.0000.0022.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER EPSILON WITH PSILI AND OXIA

    uint32_t const cps[1] = { 0x1f14 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x2024), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_091)
{
    // 1F15  ; [.2024.0020.0002][.0000.0023.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER EPSILON WITH DASIA AND OXIA

    uint32_t const cps[1] = { 0x1f15 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x2024), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_092)
{
    // 1F18  ; [.2024.0020.0008][.0000.0022.0002] 
    // GREEK CAPITAL LETTER EPSILON WITH PSILI

    uint32_t const cps[1] = { 0x1f18 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2024), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_093)
{
    // 1F19  ; [.2024.0020.0008][.0000.0023.0002] 
    // GREEK CAPITAL LETTER EPSILON WITH DASIA

    uint32_t const cps[1] = { 0x1f19 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2024), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_094)
{
    // 1F1A  ; [.2024.0020.0008][.0000.0022.0002][.0000.0025.0002] 
    // GREEK CAPITAL LETTER EPSILON WITH PSILI AND VARIA

    uint32_t const cps[1] = { 0x1f1a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x2024), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_095)
{
    // 1F1B  ; [.2024.0020.0008][.0000.0023.0002][.0000.0025.0002] 
    // GREEK CAPITAL LETTER EPSILON WITH DASIA AND VARIA

    uint32_t const cps[1] = { 0x1f1b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x2024), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_096)
{
    // 1F1C  ; [.2024.0020.0008][.0000.0022.0002][.0000.0024.0002] 
    // GREEK CAPITAL LETTER EPSILON WITH PSILI AND OXIA

    uint32_t const cps[1] = { 0x1f1c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x2024), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_097)
{
    // 1F1D  ; [.2024.0020.0008][.0000.0023.0002][.0000.0024.0002] 
    // GREEK CAPITAL LETTER EPSILON WITH DASIA AND OXIA

    uint32_t const cps[1] = { 0x1f1d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x2024), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_098)
{
    // 1F20  ; [.202A.0020.0002][.0000.0022.0002] 
    // GREEK SMALL LETTER ETA WITH PSILI

    uint32_t const cps[1] = { 0x1f20 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_099)
{
    // 1F21  ; [.202A.0020.0002][.0000.0023.0002] 
    // GREEK SMALL LETTER ETA WITH DASIA

    uint32_t const cps[1] = { 0x1f21 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_100)
{
    // 1F22  ; [.202A.0020.0002][.0000.0022.0002][.0000.0025.0002] 
    // GREEK SMALL LETTER ETA WITH PSILI AND VARIA

    uint32_t const cps[1] = { 0x1f22 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_101)
{
    // 1F23  ; [.202A.0020.0002][.0000.0023.0002][.0000.0025.0002] 
    // GREEK SMALL LETTER ETA WITH DASIA AND VARIA

    uint32_t const cps[1] = { 0x1f23 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_102)
{
    // 1F24  ; [.202A.0020.0002][.0000.0022.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER ETA WITH PSILI AND OXIA

    uint32_t const cps[1] = { 0x1f24 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_103)
{
    // 1F25  ; [.202A.0020.0002][.0000.0023.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER ETA WITH DASIA AND OXIA

    uint32_t const cps[1] = { 0x1f25 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_104)
{
    // 1F26  ; [.202A.0020.0002][.0000.0022.0002][.0000.002A.0002] 
    // GREEK SMALL LETTER ETA WITH PSILI AND PERISPOMENI

    uint32_t const cps[1] = { 0x1f26 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_105)
{
    // 1F27  ; [.202A.0020.0002][.0000.0023.0002][.0000.002A.0002] 
    // GREEK SMALL LETTER ETA WITH DASIA AND PERISPOMENI

    uint32_t const cps[1] = { 0x1f27 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_106)
{
    // 1F28  ; [.202A.0020.0008][.0000.0022.0002] 
    // GREEK CAPITAL LETTER ETA WITH PSILI

    uint32_t const cps[1] = { 0x1f28 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_107)
{
    // 1F29  ; [.202A.0020.0008][.0000.0023.0002] 
    // GREEK CAPITAL LETTER ETA WITH DASIA

    uint32_t const cps[1] = { 0x1f29 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_108)
{
    // 1F2A  ; [.202A.0020.0008][.0000.0022.0002][.0000.0025.0002] 
    // GREEK CAPITAL LETTER ETA WITH PSILI AND VARIA

    uint32_t const cps[1] = { 0x1f2a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_109)
{
    // 1F2B  ; [.202A.0020.0008][.0000.0023.0002][.0000.0025.0002] 
    // GREEK CAPITAL LETTER ETA WITH DASIA AND VARIA

    uint32_t const cps[1] = { 0x1f2b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_110)
{
    // 1F2C  ; [.202A.0020.0008][.0000.0022.0002][.0000.0024.0002] 
    // GREEK CAPITAL LETTER ETA WITH PSILI AND OXIA

    uint32_t const cps[1] = { 0x1f2c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_111)
{
    // 1F2D  ; [.202A.0020.0008][.0000.0023.0002][.0000.0024.0002] 
    // GREEK CAPITAL LETTER ETA WITH DASIA AND OXIA

    uint32_t const cps[1] = { 0x1f2d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_112)
{
    // 1F2E  ; [.202A.0020.0008][.0000.0022.0002][.0000.002A.0002] 
    // GREEK CAPITAL LETTER ETA WITH PSILI AND PERISPOMENI

    uint32_t const cps[1] = { 0x1f2e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_113)
{
    // 1F2F  ; [.202A.0020.0008][.0000.0023.0002][.0000.002A.0002] 
    // GREEK CAPITAL LETTER ETA WITH DASIA AND PERISPOMENI

    uint32_t const cps[1] = { 0x1f2f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_114)
{
    // 1F30  ; [.202C.0020.0002][.0000.0022.0002] 
    // GREEK SMALL LETTER IOTA WITH PSILI

    uint32_t const cps[1] = { 0x1f30 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_115)
{
    // 1F31  ; [.202C.0020.0002][.0000.0023.0002] 
    // GREEK SMALL LETTER IOTA WITH DASIA

    uint32_t const cps[1] = { 0x1f31 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_116)
{
    // 1F32  ; [.202C.0020.0002][.0000.0022.0002][.0000.0025.0002] 
    // GREEK SMALL LETTER IOTA WITH PSILI AND VARIA

    uint32_t const cps[1] = { 0x1f32 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_117)
{
    // 1F33  ; [.202C.0020.0002][.0000.0023.0002][.0000.0025.0002] 
    // GREEK SMALL LETTER IOTA WITH DASIA AND VARIA

    uint32_t const cps[1] = { 0x1f33 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_118)
{
    // 1F34  ; [.202C.0020.0002][.0000.0022.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER IOTA WITH PSILI AND OXIA

    uint32_t const cps[1] = { 0x1f34 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_119)
{
    // 1F35  ; [.202C.0020.0002][.0000.0023.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER IOTA WITH DASIA AND OXIA

    uint32_t const cps[1] = { 0x1f35 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_120)
{
    // 1F36  ; [.202C.0020.0002][.0000.0022.0002][.0000.002A.0002] 
    // GREEK SMALL LETTER IOTA WITH PSILI AND PERISPOMENI

    uint32_t const cps[1] = { 0x1f36 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_121)
{
    // 1F37  ; [.202C.0020.0002][.0000.0023.0002][.0000.002A.0002] 
    // GREEK SMALL LETTER IOTA WITH DASIA AND PERISPOMENI

    uint32_t const cps[1] = { 0x1f37 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_122)
{
    // 1F38  ; [.202C.0020.0008][.0000.0022.0002] 
    // GREEK CAPITAL LETTER IOTA WITH PSILI

    uint32_t const cps[1] = { 0x1f38 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_123)
{
    // 1F39  ; [.202C.0020.0008][.0000.0023.0002] 
    // GREEK CAPITAL LETTER IOTA WITH DASIA

    uint32_t const cps[1] = { 0x1f39 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_124)
{
    // 1F3A  ; [.202C.0020.0008][.0000.0022.0002][.0000.0025.0002] 
    // GREEK CAPITAL LETTER IOTA WITH PSILI AND VARIA

    uint32_t const cps[1] = { 0x1f3a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_125)
{
    // 1F3B  ; [.202C.0020.0008][.0000.0023.0002][.0000.0025.0002] 
    // GREEK CAPITAL LETTER IOTA WITH DASIA AND VARIA

    uint32_t const cps[1] = { 0x1f3b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_126)
{
    // 1F3C  ; [.202C.0020.0008][.0000.0022.0002][.0000.0024.0002] 
    // GREEK CAPITAL LETTER IOTA WITH PSILI AND OXIA

    uint32_t const cps[1] = { 0x1f3c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_127)
{
    // 1F3D  ; [.202C.0020.0008][.0000.0023.0002][.0000.0024.0002] 
    // GREEK CAPITAL LETTER IOTA WITH DASIA AND OXIA

    uint32_t const cps[1] = { 0x1f3d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_128)
{
    // 1F3E  ; [.202C.0020.0008][.0000.0022.0002][.0000.002A.0002] 
    // GREEK CAPITAL LETTER IOTA WITH PSILI AND PERISPOMENI

    uint32_t const cps[1] = { 0x1f3e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_129)
{
    // 1F3F  ; [.202C.0020.0008][.0000.0023.0002][.0000.002A.0002] 
    // GREEK CAPITAL LETTER IOTA WITH DASIA AND PERISPOMENI

    uint32_t const cps[1] = { 0x1f3f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_130)
{
    // 1F40  ; [.2034.0020.0002][.0000.0022.0002] 
    // GREEK SMALL LETTER OMICRON WITH PSILI

    uint32_t const cps[1] = { 0x1f40 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2034), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_131)
{
    // 1F41  ; [.2034.0020.0002][.0000.0023.0002] 
    // GREEK SMALL LETTER OMICRON WITH DASIA

    uint32_t const cps[1] = { 0x1f41 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2034), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_132)
{
    // 1F42  ; [.2034.0020.0002][.0000.0022.0002][.0000.0025.0002] 
    // GREEK SMALL LETTER OMICRON WITH PSILI AND VARIA

    uint32_t const cps[1] = { 0x1f42 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x2034), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_133)
{
    // 1F43  ; [.2034.0020.0002][.0000.0023.0002][.0000.0025.0002] 
    // GREEK SMALL LETTER OMICRON WITH DASIA AND VARIA

    uint32_t const cps[1] = { 0x1f43 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x2034), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_134)
{
    // 1F44  ; [.2034.0020.0002][.0000.0022.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER OMICRON WITH PSILI AND OXIA

    uint32_t const cps[1] = { 0x1f44 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x2034), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_135)
{
    // 1F45  ; [.2034.0020.0002][.0000.0023.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER OMICRON WITH DASIA AND OXIA

    uint32_t const cps[1] = { 0x1f45 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x2034), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_136)
{
    // 1F48  ; [.2034.0020.0008][.0000.0022.0002] 
    // GREEK CAPITAL LETTER OMICRON WITH PSILI

    uint32_t const cps[1] = { 0x1f48 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2034), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_137)
{
    // 1F49  ; [.2034.0020.0008][.0000.0023.0002] 
    // GREEK CAPITAL LETTER OMICRON WITH DASIA

    uint32_t const cps[1] = { 0x1f49 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2034), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_138)
{
    // 1F4A  ; [.2034.0020.0008][.0000.0022.0002][.0000.0025.0002] 
    // GREEK CAPITAL LETTER OMICRON WITH PSILI AND VARIA

    uint32_t const cps[1] = { 0x1f4a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x2034), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_139)
{
    // 1F4B  ; [.2034.0020.0008][.0000.0023.0002][.0000.0025.0002] 
    // GREEK CAPITAL LETTER OMICRON WITH DASIA AND VARIA

    uint32_t const cps[1] = { 0x1f4b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x2034), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_140)
{
    // 1F4C  ; [.2034.0020.0008][.0000.0022.0002][.0000.0024.0002] 
    // GREEK CAPITAL LETTER OMICRON WITH PSILI AND OXIA

    uint32_t const cps[1] = { 0x1f4c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x2034), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_141)
{
    // 1F4D  ; [.2034.0020.0008][.0000.0023.0002][.0000.0024.0002] 
    // GREEK CAPITAL LETTER OMICRON WITH DASIA AND OXIA

    uint32_t const cps[1] = { 0x1f4d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x2034), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_142)
{
    // 1F50  ; [.2042.0020.0002][.0000.0022.0002] 
    // GREEK SMALL LETTER UPSILON WITH PSILI

    uint32_t const cps[1] = { 0x1f50 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_143)
{
    // 1F51  ; [.2042.0020.0002][.0000.0023.0002] 
    // GREEK SMALL LETTER UPSILON WITH DASIA

    uint32_t const cps[1] = { 0x1f51 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_050_144)
{
    // 1F52  ; [.2042.0020.0002][.0000.0022.0002][.0000.0025.0002] 
    // GREEK SMALL LETTER UPSILON WITH PSILI AND VARIA

    uint32_t const cps[1] = { 0x1f52 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_145)
{
    // 1F53  ; [.2042.0020.0002][.0000.0023.0002][.0000.0025.0002] 
    // GREEK SMALL LETTER UPSILON WITH DASIA AND VARIA

    uint32_t const cps[1] = { 0x1f53 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_146)
{
    // 1F54  ; [.2042.0020.0002][.0000.0022.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER UPSILON WITH PSILI AND OXIA

    uint32_t const cps[1] = { 0x1f54 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_147)
{
    // 1F55  ; [.2042.0020.0002][.0000.0023.0002][.0000.0024.0002] 
    // GREEK SMALL LETTER UPSILON WITH DASIA AND OXIA

    uint32_t const cps[1] = { 0x1f55 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_148)
{
    // 1F56  ; [.2042.0020.0002][.0000.0022.0002][.0000.002A.0002] 
    // GREEK SMALL LETTER UPSILON WITH PSILI AND PERISPOMENI

    uint32_t const cps[1] = { 0x1f56 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x2), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_050_149)
{
    // 1F57  ; [.2042.0020.0002][.0000.0023.0002][.0000.002A.0002] 
    // GREEK SMALL LETTER UPSILON WITH DASIA AND PERISPOMENI

    uint32_t const cps[1] = { 0x1f57 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

