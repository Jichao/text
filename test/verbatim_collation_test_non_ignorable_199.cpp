// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_199_000)
{
    // 11A57 0062;	
    // (𑩗) SOYOMBO VOWEL SIGN AI	[2F71 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A57, 0x0062 };
    uint32_t const ces[9] = { 0x2F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_001)
{
    // 11A58 0021;	
    // (𑩘) SOYOMBO VOWEL SIGN AU	[2F72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A58, 0x0021 };
    uint32_t const ces[9] = { 0x2F72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_002)
{
    // 11A58 003F;	
    // (𑩘) SOYOMBO VOWEL SIGN AU	[2F72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A58, 0x003F };
    uint32_t const ces[9] = { 0x2F72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_003)
{
    // 11A58 0061;	
    // (𑩘) SOYOMBO VOWEL SIGN AU	[2F72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A58, 0x0061 };
    uint32_t const ces[9] = { 0x2F72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_004)
{
    // 11A58 0041;	
    // (𑩘) SOYOMBO VOWEL SIGN AU	[2F72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A58, 0x0041 };
    uint32_t const ces[9] = { 0x2F72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_005)
{
    // 11A58 0062;	
    // (𑩘) SOYOMBO VOWEL SIGN AU	[2F72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A58, 0x0062 };
    uint32_t const ces[9] = { 0x2F72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_006)
{
    // 11A5B 0021;	
    // (𑩛) SOYOMBO VOWEL LENGTH MARK	[2F73 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A5B, 0x0021 };
    uint32_t const ces[9] = { 0x2F73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_007)
{
    // 11A5B 003F;	
    // (𑩛) SOYOMBO VOWEL LENGTH MARK	[2F73 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A5B, 0x003F };
    uint32_t const ces[9] = { 0x2F73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_008)
{
    // 11A5B 0061;	
    // (𑩛) SOYOMBO VOWEL LENGTH MARK	[2F73 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A5B, 0x0061 };
    uint32_t const ces[9] = { 0x2F73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_009)
{
    // 11A5B 0041;	
    // (𑩛) SOYOMBO VOWEL LENGTH MARK	[2F73 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A5B, 0x0041 };
    uint32_t const ces[9] = { 0x2F73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_010)
{
    // 11A5B 0062;	
    // (𑩛) SOYOMBO VOWEL LENGTH MARK	[2F73 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A5B, 0x0062 };
    uint32_t const ces[9] = { 0x2F73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_011)
{
    // 11A5C 0021;	
    // (𑩜) SOYOMBO LETTER KA	[2F74 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A5C, 0x0021 };
    uint32_t const ces[9] = { 0x2F74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_012)
{
    // 11A8A 0021;	
    // (𑪊) SOYOMBO FINAL CONSONANT SIGN G	[2F74 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A8A, 0x0021 };
    uint32_t const ces[9] = { 0x2F74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_013)
{
    // 11A5C 003F;	
    // (𑩜) SOYOMBO LETTER KA	[2F74 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A5C, 0x003F };
    uint32_t const ces[9] = { 0x2F74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_014)
{
    // 11A8A 003F;	
    // (𑪊) SOYOMBO FINAL CONSONANT SIGN G	[2F74 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A8A, 0x003F };
    uint32_t const ces[9] = { 0x2F74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_015)
{
    // 11A5C 0061;	
    // (𑩜) SOYOMBO LETTER KA	[2F74 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A5C, 0x0061 };
    uint32_t const ces[9] = { 0x2F74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_016)
{
    // 11A5C 0041;	
    // (𑩜) SOYOMBO LETTER KA	[2F74 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A5C, 0x0041 };
    uint32_t const ces[9] = { 0x2F74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_017)
{
    // 11A8A 0061;	
    // (𑪊) SOYOMBO FINAL CONSONANT SIGN G	[2F74 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A8A, 0x0061 };
    uint32_t const ces[9] = { 0x2F74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_018)
{
    // 11A8A 0041;	
    // (𑪊) SOYOMBO FINAL CONSONANT SIGN G	[2F74 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0x11A8A, 0x0041 };
    uint32_t const ces[9] = { 0x2F74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_019)
{
    // 11A5C 0062;	
    // (𑩜) SOYOMBO LETTER KA	[2F74 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A5C, 0x0062 };
    uint32_t const ces[9] = { 0x2F74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_020)
{
    // 11A8A 0062;	
    // (𑪊) SOYOMBO FINAL CONSONANT SIGN G	[2F74 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A8A, 0x0062 };
    uint32_t const ces[9] = { 0x2F74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_021)
{
    // 11A83 0021;	
    // (𑪃) SOYOMBO LETTER KSSA	[2F75 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A83, 0x0021 };
    uint32_t const ces[9] = { 0x2F75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_022)
{
    // 11A83 003F;	
    // (𑪃) SOYOMBO LETTER KSSA	[2F75 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A83, 0x003F };
    uint32_t const ces[9] = { 0x2F75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_023)
{
    // 11A83 0061;	
    // (𑪃) SOYOMBO LETTER KSSA	[2F75 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A83, 0x0061 };
    uint32_t const ces[9] = { 0x2F75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_024)
{
    // 11A83 0041;	
    // (𑪃) SOYOMBO LETTER KSSA	[2F75 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A83, 0x0041 };
    uint32_t const ces[9] = { 0x2F75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_025)
{
    // 11A83 0062;	
    // (𑪃) SOYOMBO LETTER KSSA	[2F75 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A83, 0x0062 };
    uint32_t const ces[9] = { 0x2F75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_026)
{
    // 11A5D 0021;	
    // (𑩝) SOYOMBO LETTER KHA	[2F76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A5D, 0x0021 };
    uint32_t const ces[9] = { 0x2F76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_027)
{
    // 11A8B 0021;	
    // (𑪋) SOYOMBO FINAL CONSONANT SIGN K	[2F76 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A8B, 0x0021 };
    uint32_t const ces[9] = { 0x2F76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_028)
{
    // 11A5D 003F;	
    // (𑩝) SOYOMBO LETTER KHA	[2F76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A5D, 0x003F };
    uint32_t const ces[9] = { 0x2F76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_029)
{
    // 11A8B 003F;	
    // (𑪋) SOYOMBO FINAL CONSONANT SIGN K	[2F76 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A8B, 0x003F };
    uint32_t const ces[9] = { 0x2F76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_030)
{
    // 11A5D 0061;	
    // (𑩝) SOYOMBO LETTER KHA	[2F76 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A5D, 0x0061 };
    uint32_t const ces[9] = { 0x2F76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_031)
{
    // 11A5D 0041;	
    // (𑩝) SOYOMBO LETTER KHA	[2F76 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A5D, 0x0041 };
    uint32_t const ces[9] = { 0x2F76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_032)
{
    // 11A8B 0061;	
    // (𑪋) SOYOMBO FINAL CONSONANT SIGN K	[2F76 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A8B, 0x0061 };
    uint32_t const ces[9] = { 0x2F76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_033)
{
    // 11A8B 0041;	
    // (𑪋) SOYOMBO FINAL CONSONANT SIGN K	[2F76 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0x11A8B, 0x0041 };
    uint32_t const ces[9] = { 0x2F76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_034)
{
    // 11A5D 0062;	
    // (𑩝) SOYOMBO LETTER KHA	[2F76 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A5D, 0x0062 };
    uint32_t const ces[9] = { 0x2F76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_035)
{
    // 11A8B 0062;	
    // (𑪋) SOYOMBO FINAL CONSONANT SIGN K	[2F76 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A8B, 0x0062 };
    uint32_t const ces[9] = { 0x2F76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_036)
{
    // 11A5E 0021;	
    // (𑩞) SOYOMBO LETTER GA	[2F77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A5E, 0x0021 };
    uint32_t const ces[9] = { 0x2F77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_037)
{
    // 11A5E 003F;	
    // (𑩞) SOYOMBO LETTER GA	[2F77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A5E, 0x003F };
    uint32_t const ces[9] = { 0x2F77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_038)
{
    // 11A5E 0061;	
    // (𑩞) SOYOMBO LETTER GA	[2F77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A5E, 0x0061 };
    uint32_t const ces[9] = { 0x2F77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_039)
{
    // 11A5E 0041;	
    // (𑩞) SOYOMBO LETTER GA	[2F77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A5E, 0x0041 };
    uint32_t const ces[9] = { 0x2F77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_040)
{
    // 11A5E 0062;	
    // (𑩞) SOYOMBO LETTER GA	[2F77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A5E, 0x0062 };
    uint32_t const ces[9] = { 0x2F77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_041)
{
    // 11A5F 0021;	
    // (𑩟) SOYOMBO LETTER GHA	[2F78 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A5F, 0x0021 };
    uint32_t const ces[9] = { 0x2F78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_042)
{
    // 11A5F 003F;	
    // (𑩟) SOYOMBO LETTER GHA	[2F78 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A5F, 0x003F };
    uint32_t const ces[9] = { 0x2F78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_043)
{
    // 11A5F 0061;	
    // (𑩟) SOYOMBO LETTER GHA	[2F78 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A5F, 0x0061 };
    uint32_t const ces[9] = { 0x2F78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_044)
{
    // 11A5F 0041;	
    // (𑩟) SOYOMBO LETTER GHA	[2F78 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A5F, 0x0041 };
    uint32_t const ces[9] = { 0x2F78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_045)
{
    // 11A5F 0062;	
    // (𑩟) SOYOMBO LETTER GHA	[2F78 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A5F, 0x0062 };
    uint32_t const ces[9] = { 0x2F78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_046)
{
    // 11A60 0021;	
    // (𑩠) SOYOMBO LETTER NGA	[2F79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A60, 0x0021 };
    uint32_t const ces[9] = { 0x2F79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_047)
{
    // 11A8C 0021;	
    // (𑪌) SOYOMBO FINAL CONSONANT SIGN NG	[2F79 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A8C, 0x0021 };
    uint32_t const ces[9] = { 0x2F79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_048)
{
    // 11A60 003F;	
    // (𑩠) SOYOMBO LETTER NGA	[2F79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A60, 0x003F };
    uint32_t const ces[9] = { 0x2F79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_049)
{
    // 11A8C 003F;	
    // (𑪌) SOYOMBO FINAL CONSONANT SIGN NG	[2F79 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A8C, 0x003F };
    uint32_t const ces[9] = { 0x2F79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_050)
{
    // 11A60 0061;	
    // (𑩠) SOYOMBO LETTER NGA	[2F79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A60, 0x0061 };
    uint32_t const ces[9] = { 0x2F79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_051)
{
    // 11A60 0041;	
    // (𑩠) SOYOMBO LETTER NGA	[2F79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A60, 0x0041 };
    uint32_t const ces[9] = { 0x2F79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_052)
{
    // 11A8C 0061;	
    // (𑪌) SOYOMBO FINAL CONSONANT SIGN NG	[2F79 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A8C, 0x0061 };
    uint32_t const ces[9] = { 0x2F79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_053)
{
    // 11A8C 0041;	
    // (𑪌) SOYOMBO FINAL CONSONANT SIGN NG	[2F79 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0x11A8C, 0x0041 };
    uint32_t const ces[9] = { 0x2F79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_054)
{
    // 11A60 0062;	
    // (𑩠) SOYOMBO LETTER NGA	[2F79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A60, 0x0062 };
    uint32_t const ces[9] = { 0x2F79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_055)
{
    // 11A8C 0062;	
    // (𑪌) SOYOMBO FINAL CONSONANT SIGN NG	[2F79 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A8C, 0x0062 };
    uint32_t const ces[9] = { 0x2F79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_056)
{
    // 11A61 0021;	
    // (𑩡) SOYOMBO LETTER CA	[2F7A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A61, 0x0021 };
    uint32_t const ces[9] = { 0x2F7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_057)
{
    // 11A61 003F;	
    // (𑩡) SOYOMBO LETTER CA	[2F7A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A61, 0x003F };
    uint32_t const ces[9] = { 0x2F7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_058)
{
    // 11A61 0061;	
    // (𑩡) SOYOMBO LETTER CA	[2F7A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A61, 0x0061 };
    uint32_t const ces[9] = { 0x2F7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_059)
{
    // 11A61 0041;	
    // (𑩡) SOYOMBO LETTER CA	[2F7A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A61, 0x0041 };
    uint32_t const ces[9] = { 0x2F7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_060)
{
    // 11A61 0062;	
    // (𑩡) SOYOMBO LETTER CA	[2F7A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A61, 0x0062 };
    uint32_t const ces[9] = { 0x2F7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_061)
{
    // 11A62 0021;	
    // (𑩢) SOYOMBO LETTER CHA	[2F7B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A62, 0x0021 };
    uint32_t const ces[9] = { 0x2F7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_062)
{
    // 11A62 003F;	
    // (𑩢) SOYOMBO LETTER CHA	[2F7B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A62, 0x003F };
    uint32_t const ces[9] = { 0x2F7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_063)
{
    // 11A62 0061;	
    // (𑩢) SOYOMBO LETTER CHA	[2F7B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A62, 0x0061 };
    uint32_t const ces[9] = { 0x2F7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_064)
{
    // 11A62 0041;	
    // (𑩢) SOYOMBO LETTER CHA	[2F7B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A62, 0x0041 };
    uint32_t const ces[9] = { 0x2F7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_065)
{
    // 11A62 0062;	
    // (𑩢) SOYOMBO LETTER CHA	[2F7B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A62, 0x0062 };
    uint32_t const ces[9] = { 0x2F7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_066)
{
    // 11A63 0021;	
    // (𑩣) SOYOMBO LETTER JA	[2F7C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A63, 0x0021 };
    uint32_t const ces[9] = { 0x2F7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_067)
{
    // 11A63 003F;	
    // (𑩣) SOYOMBO LETTER JA	[2F7C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A63, 0x003F };
    uint32_t const ces[9] = { 0x2F7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_068)
{
    // 11A63 0061;	
    // (𑩣) SOYOMBO LETTER JA	[2F7C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A63, 0x0061 };
    uint32_t const ces[9] = { 0x2F7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_069)
{
    // 11A63 0041;	
    // (𑩣) SOYOMBO LETTER JA	[2F7C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A63, 0x0041 };
    uint32_t const ces[9] = { 0x2F7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_070)
{
    // 11A63 0062;	
    // (𑩣) SOYOMBO LETTER JA	[2F7C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A63, 0x0062 };
    uint32_t const ces[9] = { 0x2F7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_071)
{
    // 11A64 0021;	
    // (𑩤) SOYOMBO LETTER JHA	[2F7D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A64, 0x0021 };
    uint32_t const ces[9] = { 0x2F7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_072)
{
    // 11A64 003F;	
    // (𑩤) SOYOMBO LETTER JHA	[2F7D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A64, 0x003F };
    uint32_t const ces[9] = { 0x2F7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_073)
{
    // 11A64 0061;	
    // (𑩤) SOYOMBO LETTER JHA	[2F7D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A64, 0x0061 };
    uint32_t const ces[9] = { 0x2F7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_074)
{
    // 11A64 0041;	
    // (𑩤) SOYOMBO LETTER JHA	[2F7D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A64, 0x0041 };
    uint32_t const ces[9] = { 0x2F7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_075)
{
    // 11A64 0062;	
    // (𑩤) SOYOMBO LETTER JHA	[2F7D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A64, 0x0062 };
    uint32_t const ces[9] = { 0x2F7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_076)
{
    // 11A65 0021;	
    // (𑩥) SOYOMBO LETTER NYA	[2F7E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A65, 0x0021 };
    uint32_t const ces[9] = { 0x2F7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_077)
{
    // 11A65 003F;	
    // (𑩥) SOYOMBO LETTER NYA	[2F7E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A65, 0x003F };
    uint32_t const ces[9] = { 0x2F7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_078)
{
    // 11A65 0061;	
    // (𑩥) SOYOMBO LETTER NYA	[2F7E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A65, 0x0061 };
    uint32_t const ces[9] = { 0x2F7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_079)
{
    // 11A65 0041;	
    // (𑩥) SOYOMBO LETTER NYA	[2F7E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A65, 0x0041 };
    uint32_t const ces[9] = { 0x2F7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_080)
{
    // 11A65 0062;	
    // (𑩥) SOYOMBO LETTER NYA	[2F7E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A65, 0x0062 };
    uint32_t const ces[9] = { 0x2F7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_081)
{
    // 11A66 0021;	
    // (𑩦) SOYOMBO LETTER TTA	[2F7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A66, 0x0021 };
    uint32_t const ces[9] = { 0x2F7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_082)
{
    // 11A66 003F;	
    // (𑩦) SOYOMBO LETTER TTA	[2F7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A66, 0x003F };
    uint32_t const ces[9] = { 0x2F7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_083)
{
    // 11A66 0061;	
    // (𑩦) SOYOMBO LETTER TTA	[2F7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A66, 0x0061 };
    uint32_t const ces[9] = { 0x2F7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_084)
{
    // 11A66 0041;	
    // (𑩦) SOYOMBO LETTER TTA	[2F7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A66, 0x0041 };
    uint32_t const ces[9] = { 0x2F7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_085)
{
    // 11A66 0062;	
    // (𑩦) SOYOMBO LETTER TTA	[2F7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A66, 0x0062 };
    uint32_t const ces[9] = { 0x2F7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_086)
{
    // 11A67 0021;	
    // (𑩧) SOYOMBO LETTER TTHA	[2F80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A67, 0x0021 };
    uint32_t const ces[9] = { 0x2F80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_087)
{
    // 11A67 003F;	
    // (𑩧) SOYOMBO LETTER TTHA	[2F80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A67, 0x003F };
    uint32_t const ces[9] = { 0x2F80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_088)
{
    // 11A67 0061;	
    // (𑩧) SOYOMBO LETTER TTHA	[2F80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A67, 0x0061 };
    uint32_t const ces[9] = { 0x2F80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_089)
{
    // 11A67 0041;	
    // (𑩧) SOYOMBO LETTER TTHA	[2F80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A67, 0x0041 };
    uint32_t const ces[9] = { 0x2F80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_090)
{
    // 11A67 0062;	
    // (𑩧) SOYOMBO LETTER TTHA	[2F80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A67, 0x0062 };
    uint32_t const ces[9] = { 0x2F80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_091)
{
    // 11A68 0021;	
    // (𑩨) SOYOMBO LETTER DDA	[2F81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A68, 0x0021 };
    uint32_t const ces[9] = { 0x2F81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_092)
{
    // 11A68 003F;	
    // (𑩨) SOYOMBO LETTER DDA	[2F81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A68, 0x003F };
    uint32_t const ces[9] = { 0x2F81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_093)
{
    // 11A68 0061;	
    // (𑩨) SOYOMBO LETTER DDA	[2F81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A68, 0x0061 };
    uint32_t const ces[9] = { 0x2F81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_094)
{
    // 11A68 0041;	
    // (𑩨) SOYOMBO LETTER DDA	[2F81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A68, 0x0041 };
    uint32_t const ces[9] = { 0x2F81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_095)
{
    // 11A68 0062;	
    // (𑩨) SOYOMBO LETTER DDA	[2F81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A68, 0x0062 };
    uint32_t const ces[9] = { 0x2F81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_096)
{
    // 11A69 0021;	
    // (𑩩) SOYOMBO LETTER DDHA	[2F82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A69, 0x0021 };
    uint32_t const ces[9] = { 0x2F82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_097)
{
    // 11A69 003F;	
    // (𑩩) SOYOMBO LETTER DDHA	[2F82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A69, 0x003F };
    uint32_t const ces[9] = { 0x2F82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_098)
{
    // 11A69 0061;	
    // (𑩩) SOYOMBO LETTER DDHA	[2F82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A69, 0x0061 };
    uint32_t const ces[9] = { 0x2F82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_099)
{
    // 11A69 0041;	
    // (𑩩) SOYOMBO LETTER DDHA	[2F82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A69, 0x0041 };
    uint32_t const ces[9] = { 0x2F82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_100)
{
    // 11A69 0062;	
    // (𑩩) SOYOMBO LETTER DDHA	[2F82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A69, 0x0062 };
    uint32_t const ces[9] = { 0x2F82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_101)
{
    // 11A6A 0021;	
    // (𑩪) SOYOMBO LETTER NNA	[2F83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A6A, 0x0021 };
    uint32_t const ces[9] = { 0x2F83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_102)
{
    // 11A6A 003F;	
    // (𑩪) SOYOMBO LETTER NNA	[2F83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A6A, 0x003F };
    uint32_t const ces[9] = { 0x2F83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_103)
{
    // 11A6A 0061;	
    // (𑩪) SOYOMBO LETTER NNA	[2F83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A6A, 0x0061 };
    uint32_t const ces[9] = { 0x2F83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_104)
{
    // 11A6A 0041;	
    // (𑩪) SOYOMBO LETTER NNA	[2F83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A6A, 0x0041 };
    uint32_t const ces[9] = { 0x2F83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_105)
{
    // 11A6A 0062;	
    // (𑩪) SOYOMBO LETTER NNA	[2F83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A6A, 0x0062 };
    uint32_t const ces[9] = { 0x2F83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_106)
{
    // 11A6B 0021;	
    // (𑩫) SOYOMBO LETTER TA	[2F84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A6B, 0x0021 };
    uint32_t const ces[9] = { 0x2F84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_107)
{
    // 11A8D 0021;	
    // (𑪍) SOYOMBO FINAL CONSONANT SIGN D	[2F84 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A8D, 0x0021 };
    uint32_t const ces[9] = { 0x2F84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_108)
{
    // 11A6B 003F;	
    // (𑩫) SOYOMBO LETTER TA	[2F84 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A6B, 0x003F };
    uint32_t const ces[9] = { 0x2F84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_109)
{
    // 11A8D 003F;	
    // (𑪍) SOYOMBO FINAL CONSONANT SIGN D	[2F84 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A8D, 0x003F };
    uint32_t const ces[9] = { 0x2F84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_110)
{
    // 11A6B 0061;	
    // (𑩫) SOYOMBO LETTER TA	[2F84 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A6B, 0x0061 };
    uint32_t const ces[9] = { 0x2F84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_111)
{
    // 11A6B 0041;	
    // (𑩫) SOYOMBO LETTER TA	[2F84 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A6B, 0x0041 };
    uint32_t const ces[9] = { 0x2F84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_112)
{
    // 11A8D 0061;	
    // (𑪍) SOYOMBO FINAL CONSONANT SIGN D	[2F84 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A8D, 0x0061 };
    uint32_t const ces[9] = { 0x2F84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_113)
{
    // 11A8D 0041;	
    // (𑪍) SOYOMBO FINAL CONSONANT SIGN D	[2F84 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0x11A8D, 0x0041 };
    uint32_t const ces[9] = { 0x2F84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_114)
{
    // 11A6B 0062;	
    // (𑩫) SOYOMBO LETTER TA	[2F84 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A6B, 0x0062 };
    uint32_t const ces[9] = { 0x2F84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_115)
{
    // 11A8D 0062;	
    // (𑪍) SOYOMBO FINAL CONSONANT SIGN D	[2F84 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A8D, 0x0062 };
    uint32_t const ces[9] = { 0x2F84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_116)
{
    // 11A6C 0021;	
    // (𑩬) SOYOMBO LETTER THA	[2F85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A6C, 0x0021 };
    uint32_t const ces[9] = { 0x2F85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_117)
{
    // 11A6C 003F;	
    // (𑩬) SOYOMBO LETTER THA	[2F85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A6C, 0x003F };
    uint32_t const ces[9] = { 0x2F85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_118)
{
    // 11A6C 0061;	
    // (𑩬) SOYOMBO LETTER THA	[2F85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A6C, 0x0061 };
    uint32_t const ces[9] = { 0x2F85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_119)
{
    // 11A6C 0041;	
    // (𑩬) SOYOMBO LETTER THA	[2F85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A6C, 0x0041 };
    uint32_t const ces[9] = { 0x2F85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_120)
{
    // 11A6C 0062;	
    // (𑩬) SOYOMBO LETTER THA	[2F85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A6C, 0x0062 };
    uint32_t const ces[9] = { 0x2F85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_121)
{
    // 11A6D 0021;	
    // (𑩭) SOYOMBO LETTER DA	[2F86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A6D, 0x0021 };
    uint32_t const ces[9] = { 0x2F86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_122)
{
    // 11A6D 003F;	
    // (𑩭) SOYOMBO LETTER DA	[2F86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A6D, 0x003F };
    uint32_t const ces[9] = { 0x2F86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_123)
{
    // 11A6D 0061;	
    // (𑩭) SOYOMBO LETTER DA	[2F86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A6D, 0x0061 };
    uint32_t const ces[9] = { 0x2F86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_124)
{
    // 11A6D 0041;	
    // (𑩭) SOYOMBO LETTER DA	[2F86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A6D, 0x0041 };
    uint32_t const ces[9] = { 0x2F86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_125)
{
    // 11A6D 0062;	
    // (𑩭) SOYOMBO LETTER DA	[2F86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A6D, 0x0062 };
    uint32_t const ces[9] = { 0x2F86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_126)
{
    // 11A6E 0021;	
    // (𑩮) SOYOMBO LETTER DHA	[2F87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A6E, 0x0021 };
    uint32_t const ces[9] = { 0x2F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_127)
{
    // 11A6E 003F;	
    // (𑩮) SOYOMBO LETTER DHA	[2F87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A6E, 0x003F };
    uint32_t const ces[9] = { 0x2F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_128)
{
    // 11A6E 0061;	
    // (𑩮) SOYOMBO LETTER DHA	[2F87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A6E, 0x0061 };
    uint32_t const ces[9] = { 0x2F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_129)
{
    // 11A6E 0041;	
    // (𑩮) SOYOMBO LETTER DHA	[2F87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A6E, 0x0041 };
    uint32_t const ces[9] = { 0x2F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_130)
{
    // 11A6E 0062;	
    // (𑩮) SOYOMBO LETTER DHA	[2F87 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A6E, 0x0062 };
    uint32_t const ces[9] = { 0x2F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_131)
{
    // 11A6F 0021;	
    // (𑩯) SOYOMBO LETTER NA	[2F88 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A6F, 0x0021 };
    uint32_t const ces[9] = { 0x2F88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_132)
{
    // 11A8E 0021;	
    // (𑪎) SOYOMBO FINAL CONSONANT SIGN N	[2F88 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A8E, 0x0021 };
    uint32_t const ces[9] = { 0x2F88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_133)
{
    // 11A6F 003F;	
    // (𑩯) SOYOMBO LETTER NA	[2F88 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A6F, 0x003F };
    uint32_t const ces[9] = { 0x2F88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_134)
{
    // 11A8E 003F;	
    // (𑪎) SOYOMBO FINAL CONSONANT SIGN N	[2F88 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A8E, 0x003F };
    uint32_t const ces[9] = { 0x2F88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_135)
{
    // 11A6F 0061;	
    // (𑩯) SOYOMBO LETTER NA	[2F88 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A6F, 0x0061 };
    uint32_t const ces[9] = { 0x2F88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_136)
{
    // 11A6F 0041;	
    // (𑩯) SOYOMBO LETTER NA	[2F88 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A6F, 0x0041 };
    uint32_t const ces[9] = { 0x2F88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_137)
{
    // 11A8E 0061;	
    // (𑪎) SOYOMBO FINAL CONSONANT SIGN N	[2F88 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A8E, 0x0061 };
    uint32_t const ces[9] = { 0x2F88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_138)
{
    // 11A8E 0041;	
    // (𑪎) SOYOMBO FINAL CONSONANT SIGN N	[2F88 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0x11A8E, 0x0041 };
    uint32_t const ces[9] = { 0x2F88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_139)
{
    // 11A6F 0062;	
    // (𑩯) SOYOMBO LETTER NA	[2F88 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A6F, 0x0062 };
    uint32_t const ces[9] = { 0x2F88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_140)
{
    // 11A8E 0062;	
    // (𑪎) SOYOMBO FINAL CONSONANT SIGN N	[2F88 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A8E, 0x0062 };
    uint32_t const ces[9] = { 0x2F88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_141)
{
    // 11A70 0021;	
    // (𑩰) SOYOMBO LETTER PA	[2F89 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A70, 0x0021 };
    uint32_t const ces[9] = { 0x2F89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_142)
{
    // 11A8F 0021;	
    // (𑪏) SOYOMBO FINAL CONSONANT SIGN B	[2F89 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A8F, 0x0021 };
    uint32_t const ces[9] = { 0x2F89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_143)
{
    // 11A70 003F;	
    // (𑩰) SOYOMBO LETTER PA	[2F89 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A70, 0x003F };
    uint32_t const ces[9] = { 0x2F89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_144)
{
    // 11A8F 003F;	
    // (𑪏) SOYOMBO FINAL CONSONANT SIGN B	[2F89 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A8F, 0x003F };
    uint32_t const ces[9] = { 0x2F89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_145)
{
    // 11A70 0061;	
    // (𑩰) SOYOMBO LETTER PA	[2F89 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A70, 0x0061 };
    uint32_t const ces[9] = { 0x2F89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_146)
{
    // 11A70 0041;	
    // (𑩰) SOYOMBO LETTER PA	[2F89 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A70, 0x0041 };
    uint32_t const ces[9] = { 0x2F89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_147)
{
    // 11A8F 0061;	
    // (𑪏) SOYOMBO FINAL CONSONANT SIGN B	[2F89 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A8F, 0x0061 };
    uint32_t const ces[9] = { 0x2F89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_148)
{
    // 11A8F 0041;	
    // (𑪏) SOYOMBO FINAL CONSONANT SIGN B	[2F89 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0x11A8F, 0x0041 };
    uint32_t const ces[9] = { 0x2F89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_149)
{
    // 11A70 0062;	
    // (𑩰) SOYOMBO LETTER PA	[2F89 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A70, 0x0062 };
    uint32_t const ces[9] = { 0x2F89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_150)
{
    // 11A8F 0062;	
    // (𑪏) SOYOMBO FINAL CONSONANT SIGN B	[2F89 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A8F, 0x0062 };
    uint32_t const ces[9] = { 0x2F89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_151)
{
    // 11A71 0021;	
    // (𑩱) SOYOMBO LETTER PHA	[2F8A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A71, 0x0021 };
    uint32_t const ces[9] = { 0x2F8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_152)
{
    // 11A71 003F;	
    // (𑩱) SOYOMBO LETTER PHA	[2F8A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A71, 0x003F };
    uint32_t const ces[9] = { 0x2F8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_153)
{
    // 11A71 0061;	
    // (𑩱) SOYOMBO LETTER PHA	[2F8A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A71, 0x0061 };
    uint32_t const ces[9] = { 0x2F8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_154)
{
    // 11A71 0041;	
    // (𑩱) SOYOMBO LETTER PHA	[2F8A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A71, 0x0041 };
    uint32_t const ces[9] = { 0x2F8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_155)
{
    // 11A71 0062;	
    // (𑩱) SOYOMBO LETTER PHA	[2F8A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A71, 0x0062 };
    uint32_t const ces[9] = { 0x2F8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_156)
{
    // 11A72 0021;	
    // (𑩲) SOYOMBO LETTER BA	[2F8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A72, 0x0021 };
    uint32_t const ces[9] = { 0x2F8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_157)
{
    // 11A72 003F;	
    // (𑩲) SOYOMBO LETTER BA	[2F8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A72, 0x003F };
    uint32_t const ces[9] = { 0x2F8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_158)
{
    // 11A72 0061;	
    // (𑩲) SOYOMBO LETTER BA	[2F8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A72, 0x0061 };
    uint32_t const ces[9] = { 0x2F8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_159)
{
    // 11A72 0041;	
    // (𑩲) SOYOMBO LETTER BA	[2F8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A72, 0x0041 };
    uint32_t const ces[9] = { 0x2F8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_160)
{
    // 11A72 0062;	
    // (𑩲) SOYOMBO LETTER BA	[2F8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A72, 0x0062 };
    uint32_t const ces[9] = { 0x2F8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_161)
{
    // 11A73 0021;	
    // (𑩳) SOYOMBO LETTER BHA	[2F8C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A73, 0x0021 };
    uint32_t const ces[9] = { 0x2F8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_162)
{
    // 11A73 003F;	
    // (𑩳) SOYOMBO LETTER BHA	[2F8C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A73, 0x003F };
    uint32_t const ces[9] = { 0x2F8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_163)
{
    // 11A73 0061;	
    // (𑩳) SOYOMBO LETTER BHA	[2F8C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A73, 0x0061 };
    uint32_t const ces[9] = { 0x2F8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_164)
{
    // 11A73 0041;	
    // (𑩳) SOYOMBO LETTER BHA	[2F8C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A73, 0x0041 };
    uint32_t const ces[9] = { 0x2F8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_165)
{
    // 11A73 0062;	
    // (𑩳) SOYOMBO LETTER BHA	[2F8C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A73, 0x0062 };
    uint32_t const ces[9] = { 0x2F8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_166)
{
    // 11A74 0021;	
    // (𑩴) SOYOMBO LETTER MA	[2F8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A74, 0x0021 };
    uint32_t const ces[9] = { 0x2F8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_167)
{
    // 11A90 0021;	
    // (𑪐) SOYOMBO FINAL CONSONANT SIGN M	[2F8D 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A90, 0x0021 };
    uint32_t const ces[9] = { 0x2F8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_168)
{
    // 11A74 003F;	
    // (𑩴) SOYOMBO LETTER MA	[2F8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A74, 0x003F };
    uint32_t const ces[9] = { 0x2F8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_169)
{
    // 11A90 003F;	
    // (𑪐) SOYOMBO FINAL CONSONANT SIGN M	[2F8D 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A90, 0x003F };
    uint32_t const ces[9] = { 0x2F8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_170)
{
    // 11A74 0061;	
    // (𑩴) SOYOMBO LETTER MA	[2F8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A74, 0x0061 };
    uint32_t const ces[9] = { 0x2F8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_171)
{
    // 11A74 0041;	
    // (𑩴) SOYOMBO LETTER MA	[2F8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A74, 0x0041 };
    uint32_t const ces[9] = { 0x2F8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_172)
{
    // 11A90 0061;	
    // (𑪐) SOYOMBO FINAL CONSONANT SIGN M	[2F8D 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A90, 0x0061 };
    uint32_t const ces[9] = { 0x2F8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_173)
{
    // 11A90 0041;	
    // (𑪐) SOYOMBO FINAL CONSONANT SIGN M	[2F8D 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0x11A90, 0x0041 };
    uint32_t const ces[9] = { 0x2F8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_174)
{
    // 11A74 0062;	
    // (𑩴) SOYOMBO LETTER MA	[2F8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A74, 0x0062 };
    uint32_t const ces[9] = { 0x2F8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_175)
{
    // 11A90 0062;	
    // (𑪐) SOYOMBO FINAL CONSONANT SIGN M	[2F8D 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A90, 0x0062 };
    uint32_t const ces[9] = { 0x2F8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_176)
{
    // 11A75 0021;	
    // (𑩵) SOYOMBO LETTER TSA	[2F8E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A75, 0x0021 };
    uint32_t const ces[9] = { 0x2F8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_177)
{
    // 11A75 003F;	
    // (𑩵) SOYOMBO LETTER TSA	[2F8E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A75, 0x003F };
    uint32_t const ces[9] = { 0x2F8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_178)
{
    // 11A75 0061;	
    // (𑩵) SOYOMBO LETTER TSA	[2F8E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A75, 0x0061 };
    uint32_t const ces[9] = { 0x2F8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_179)
{
    // 11A75 0041;	
    // (𑩵) SOYOMBO LETTER TSA	[2F8E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A75, 0x0041 };
    uint32_t const ces[9] = { 0x2F8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_180)
{
    // 11A75 0062;	
    // (𑩵) SOYOMBO LETTER TSA	[2F8E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A75, 0x0062 };
    uint32_t const ces[9] = { 0x2F8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_181)
{
    // 11A76 0021;	
    // (𑩶) SOYOMBO LETTER TSHA	[2F8F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A76, 0x0021 };
    uint32_t const ces[9] = { 0x2F8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_182)
{
    // 11A76 003F;	
    // (𑩶) SOYOMBO LETTER TSHA	[2F8F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A76, 0x003F };
    uint32_t const ces[9] = { 0x2F8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_183)
{
    // 11A76 0061;	
    // (𑩶) SOYOMBO LETTER TSHA	[2F8F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A76, 0x0061 };
    uint32_t const ces[9] = { 0x2F8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_184)
{
    // 11A76 0041;	
    // (𑩶) SOYOMBO LETTER TSHA	[2F8F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A76, 0x0041 };
    uint32_t const ces[9] = { 0x2F8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_185)
{
    // 11A76 0062;	
    // (𑩶) SOYOMBO LETTER TSHA	[2F8F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A76, 0x0062 };
    uint32_t const ces[9] = { 0x2F8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_186)
{
    // 11A77 0021;	
    // (𑩷) SOYOMBO LETTER DZA	[2F90 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A77, 0x0021 };
    uint32_t const ces[9] = { 0x2F90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_187)
{
    // 11A77 003F;	
    // (𑩷) SOYOMBO LETTER DZA	[2F90 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A77, 0x003F };
    uint32_t const ces[9] = { 0x2F90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_188)
{
    // 11A77 0061;	
    // (𑩷) SOYOMBO LETTER DZA	[2F90 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A77, 0x0061 };
    uint32_t const ces[9] = { 0x2F90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_189)
{
    // 11A77 0041;	
    // (𑩷) SOYOMBO LETTER DZA	[2F90 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A77, 0x0041 };
    uint32_t const ces[9] = { 0x2F90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_190)
{
    // 11A77 0062;	
    // (𑩷) SOYOMBO LETTER DZA	[2F90 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A77, 0x0062 };
    uint32_t const ces[9] = { 0x2F90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_191)
{
    // 11A78 0021;	
    // (𑩸) SOYOMBO LETTER ZHA	[2F91 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A78, 0x0021 };
    uint32_t const ces[9] = { 0x2F91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_192)
{
    // 11A78 003F;	
    // (𑩸) SOYOMBO LETTER ZHA	[2F91 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A78, 0x003F };
    uint32_t const ces[9] = { 0x2F91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_193)
{
    // 11A78 0061;	
    // (𑩸) SOYOMBO LETTER ZHA	[2F91 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A78, 0x0061 };
    uint32_t const ces[9] = { 0x2F91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_194)
{
    // 11A78 0041;	
    // (𑩸) SOYOMBO LETTER ZHA	[2F91 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A78, 0x0041 };
    uint32_t const ces[9] = { 0x2F91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_195)
{
    // 11A78 0062;	
    // (𑩸) SOYOMBO LETTER ZHA	[2F91 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A78, 0x0062 };
    uint32_t const ces[9] = { 0x2F91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_196)
{
    // 11A79 0021;	
    // (𑩹) SOYOMBO LETTER ZA	[2F92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A79, 0x0021 };
    uint32_t const ces[9] = { 0x2F92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_197)
{
    // 11A79 003F;	
    // (𑩹) SOYOMBO LETTER ZA	[2F92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A79, 0x003F };
    uint32_t const ces[9] = { 0x2F92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_198)
{
    // 11A79 0061;	
    // (𑩹) SOYOMBO LETTER ZA	[2F92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A79, 0x0061 };
    uint32_t const ces[9] = { 0x2F92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_199)
{
    // 11A79 0041;	
    // (𑩹) SOYOMBO LETTER ZA	[2F92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A79, 0x0041 };
    uint32_t const ces[9] = { 0x2F92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_200)
{
    // 11A79 0062;	
    // (𑩹) SOYOMBO LETTER ZA	[2F92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A79, 0x0062 };
    uint32_t const ces[9] = { 0x2F92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_201)
{
    // 11A7A 0021;	
    // (𑩺) SOYOMBO LETTER -A	[2F93 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A7A, 0x0021 };
    uint32_t const ces[9] = { 0x2F93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_202)
{
    // 11A95 0021;	
    // (𑪕) SOYOMBO FINAL CONSONANT SIGN -A	[2F93 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A95, 0x0021 };
    uint32_t const ces[9] = { 0x2F93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_203)
{
    // 11A7A 003F;	
    // (𑩺) SOYOMBO LETTER -A	[2F93 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A7A, 0x003F };
    uint32_t const ces[9] = { 0x2F93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_204)
{
    // 11A95 003F;	
    // (𑪕) SOYOMBO FINAL CONSONANT SIGN -A	[2F93 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A95, 0x003F };
    uint32_t const ces[9] = { 0x2F93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_205)
{
    // 11A7A 0061;	
    // (𑩺) SOYOMBO LETTER -A	[2F93 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A7A, 0x0061 };
    uint32_t const ces[9] = { 0x2F93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_206)
{
    // 11A7A 0041;	
    // (𑩺) SOYOMBO LETTER -A	[2F93 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A7A, 0x0041 };
    uint32_t const ces[9] = { 0x2F93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_207)
{
    // 11A95 0061;	
    // (𑪕) SOYOMBO FINAL CONSONANT SIGN -A	[2F93 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A95, 0x0061 };
    uint32_t const ces[9] = { 0x2F93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_208)
{
    // 11A95 0041;	
    // (𑪕) SOYOMBO FINAL CONSONANT SIGN -A	[2F93 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0x11A95, 0x0041 };
    uint32_t const ces[9] = { 0x2F93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_209)
{
    // 11A7A 0062;	
    // (𑩺) SOYOMBO LETTER -A	[2F93 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A7A, 0x0062 };
    uint32_t const ces[9] = { 0x2F93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_210)
{
    // 11A95 0062;	
    // (𑪕) SOYOMBO FINAL CONSONANT SIGN -A	[2F93 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A95, 0x0062 };
    uint32_t const ces[9] = { 0x2F93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_211)
{
    // 11A7B 0021;	
    // (𑩻) SOYOMBO LETTER YA	[2F94 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A7B, 0x0021 };
    uint32_t const ces[9] = { 0x2F94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_212)
{
    // 11A7B 003F;	
    // (𑩻) SOYOMBO LETTER YA	[2F94 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A7B, 0x003F };
    uint32_t const ces[9] = { 0x2F94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_213)
{
    // 11A7B 0061;	
    // (𑩻) SOYOMBO LETTER YA	[2F94 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A7B, 0x0061 };
    uint32_t const ces[9] = { 0x2F94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_214)
{
    // 11A7B 0041;	
    // (𑩻) SOYOMBO LETTER YA	[2F94 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A7B, 0x0041 };
    uint32_t const ces[9] = { 0x2F94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_215)
{
    // 11A7B 0062;	
    // (𑩻) SOYOMBO LETTER YA	[2F94 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A7B, 0x0062 };
    uint32_t const ces[9] = { 0x2F94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_216)
{
    // 11A7C 0021;	
    // (𑩼) SOYOMBO LETTER RA	[2F95 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A7C, 0x0021 };
    uint32_t const ces[9] = { 0x2F95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_217)
{
    // 11A86 0021;	
    // (𑪆) SOYOMBO CLUSTER-INITIAL LETTER RA	[2F95 0261 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0x11A86, 0x0021 };
    uint32_t const ces[9] = { 0x2F95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_218)
{
    // 11A91 0021;	
    // (𑪑) SOYOMBO FINAL CONSONANT SIGN R	[2F95 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A91, 0x0021 };
    uint32_t const ces[9] = { 0x2F95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_219)
{
    // 11A7C 003F;	
    // (𑩼) SOYOMBO LETTER RA	[2F95 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A7C, 0x003F };
    uint32_t const ces[9] = { 0x2F95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_220)
{
    // 11A86 003F;	
    // (𑪆) SOYOMBO CLUSTER-INITIAL LETTER RA	[2F95 0267 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0x11A86, 0x003F };
    uint32_t const ces[9] = { 0x2F95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_221)
{
    // 11A91 003F;	
    // (𑪑) SOYOMBO FINAL CONSONANT SIGN R	[2F95 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A91, 0x003F };
    uint32_t const ces[9] = { 0x2F95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_222)
{
    // 11A7C 0061;	
    // (𑩼) SOYOMBO LETTER RA	[2F95 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A7C, 0x0061 };
    uint32_t const ces[9] = { 0x2F95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_223)
{
    // 11A7C 0041;	
    // (𑩼) SOYOMBO LETTER RA	[2F95 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A7C, 0x0041 };
    uint32_t const ces[9] = { 0x2F95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_224)
{
    // 11A86 0061;	
    // (𑪆) SOYOMBO CLUSTER-INITIAL LETTER RA	[2F95 1CAD | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0x11A86, 0x0061 };
    uint32_t const ces[9] = { 0x2F95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_225)
{
    // 11A86 0041;	
    // (𑪆) SOYOMBO CLUSTER-INITIAL LETTER RA	[2F95 1CAD | 0020 0020 | 0017 0008 |]

    uint32_t cps[2] = { 0x11A86, 0x0041 };
    uint32_t const ces[9] = { 0x2F95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_226)
{
    // 11A91 0061;	
    // (𑪑) SOYOMBO FINAL CONSONANT SIGN R	[2F95 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A91, 0x0061 };
    uint32_t const ces[9] = { 0x2F95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_227)
{
    // 11A91 0041;	
    // (𑪑) SOYOMBO FINAL CONSONANT SIGN R	[2F95 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0x11A91, 0x0041 };
    uint32_t const ces[9] = { 0x2F95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_228)
{
    // 11A7C 0062;	
    // (𑩼) SOYOMBO LETTER RA	[2F95 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A7C, 0x0062 };
    uint32_t const ces[9] = { 0x2F95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_229)
{
    // 11A86 0062;	
    // (𑪆) SOYOMBO CLUSTER-INITIAL LETTER RA	[2F95 1CC6 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0x11A86, 0x0062 };
    uint32_t const ces[9] = { 0x2F95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_230)
{
    // 11A91 0062;	
    // (𑪑) SOYOMBO FINAL CONSONANT SIGN R	[2F95 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A91, 0x0062 };
    uint32_t const ces[9] = { 0x2F95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_231)
{
    // 11A7D 0021;	
    // (𑩽) SOYOMBO LETTER LA	[2F96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A7D, 0x0021 };
    uint32_t const ces[9] = { 0x2F96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_232)
{
    // 11A87 0021;	
    // (𑪇) SOYOMBO CLUSTER-INITIAL LETTER LA	[2F96 0261 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0x11A87, 0x0021 };
    uint32_t const ces[9] = { 0x2F96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_233)
{
    // 11A92 0021;	
    // (𑪒) SOYOMBO FINAL CONSONANT SIGN L	[2F96 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A92, 0x0021 };
    uint32_t const ces[9] = { 0x2F96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_234)
{
    // 11A7D 003F;	
    // (𑩽) SOYOMBO LETTER LA	[2F96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A7D, 0x003F };
    uint32_t const ces[9] = { 0x2F96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_235)
{
    // 11A87 003F;	
    // (𑪇) SOYOMBO CLUSTER-INITIAL LETTER LA	[2F96 0267 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0x11A87, 0x003F };
    uint32_t const ces[9] = { 0x2F96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_236)
{
    // 11A92 003F;	
    // (𑪒) SOYOMBO FINAL CONSONANT SIGN L	[2F96 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A92, 0x003F };
    uint32_t const ces[9] = { 0x2F96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_237)
{
    // 11A7D 0061;	
    // (𑩽) SOYOMBO LETTER LA	[2F96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A7D, 0x0061 };
    uint32_t const ces[9] = { 0x2F96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_238)
{
    // 11A7D 0041;	
    // (𑩽) SOYOMBO LETTER LA	[2F96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A7D, 0x0041 };
    uint32_t const ces[9] = { 0x2F96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_239)
{
    // 11A87 0061;	
    // (𑪇) SOYOMBO CLUSTER-INITIAL LETTER LA	[2F96 1CAD | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0x11A87, 0x0061 };
    uint32_t const ces[9] = { 0x2F96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_240)
{
    // 11A87 0041;	
    // (𑪇) SOYOMBO CLUSTER-INITIAL LETTER LA	[2F96 1CAD | 0020 0020 | 0017 0008 |]

    uint32_t cps[2] = { 0x11A87, 0x0041 };
    uint32_t const ces[9] = { 0x2F96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_241)
{
    // 11A92 0061;	
    // (𑪒) SOYOMBO FINAL CONSONANT SIGN L	[2F96 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A92, 0x0061 };
    uint32_t const ces[9] = { 0x2F96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_242)
{
    // 11A92 0041;	
    // (𑪒) SOYOMBO FINAL CONSONANT SIGN L	[2F96 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0x11A92, 0x0041 };
    uint32_t const ces[9] = { 0x2F96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_243)
{
    // 11A7D 0062;	
    // (𑩽) SOYOMBO LETTER LA	[2F96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A7D, 0x0062 };
    uint32_t const ces[9] = { 0x2F96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_244)
{
    // 11A87 0062;	
    // (𑪇) SOYOMBO CLUSTER-INITIAL LETTER LA	[2F96 1CC6 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0x11A87, 0x0062 };
    uint32_t const ces[9] = { 0x2F96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_245)
{
    // 11A92 0062;	
    // (𑪒) SOYOMBO FINAL CONSONANT SIGN L	[2F96 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A92, 0x0062 };
    uint32_t const ces[9] = { 0x2F96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_246)
{
    // 11A7E 0021;	
    // (𑩾) SOYOMBO LETTER VA	[2F97 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A7E, 0x0021 };
    uint32_t const ces[9] = { 0x2F97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_247)
{
    // 11A7E 003F;	
    // (𑩾) SOYOMBO LETTER VA	[2F97 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A7E, 0x003F };
    uint32_t const ces[9] = { 0x2F97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_248)
{
    // 11A7E 0061;	
    // (𑩾) SOYOMBO LETTER VA	[2F97 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A7E, 0x0061 };
    uint32_t const ces[9] = { 0x2F97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_249)
{
    // 11A7E 0041;	
    // (𑩾) SOYOMBO LETTER VA	[2F97 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A7E, 0x0041 };
    uint32_t const ces[9] = { 0x2F97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_250)
{
    // 11A7E 0062;	
    // (𑩾) SOYOMBO LETTER VA	[2F97 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A7E, 0x0062 };
    uint32_t const ces[9] = { 0x2F97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_251)
{
    // 11A7F 0021;	
    // (𑩿) SOYOMBO LETTER SHA	[2F98 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A7F, 0x0021 };
    uint32_t const ces[9] = { 0x2F98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_252)
{
    // 11A88 0021;	
    // (𑪈) SOYOMBO CLUSTER-INITIAL LETTER SHA	[2F98 0261 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0x11A88, 0x0021 };
    uint32_t const ces[9] = { 0x2F98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_253)
{
    // 11A93 0021;	
    // (𑪓) SOYOMBO FINAL CONSONANT SIGN SH	[2F98 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A93, 0x0021 };
    uint32_t const ces[9] = { 0x2F98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_254)
{
    // 11A7F 003F;	
    // (𑩿) SOYOMBO LETTER SHA	[2F98 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A7F, 0x003F };
    uint32_t const ces[9] = { 0x2F98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_255)
{
    // 11A88 003F;	
    // (𑪈) SOYOMBO CLUSTER-INITIAL LETTER SHA	[2F98 0267 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0x11A88, 0x003F };
    uint32_t const ces[9] = { 0x2F98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_256)
{
    // 11A93 003F;	
    // (𑪓) SOYOMBO FINAL CONSONANT SIGN SH	[2F98 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A93, 0x003F };
    uint32_t const ces[9] = { 0x2F98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_257)
{
    // 11A7F 0061;	
    // (𑩿) SOYOMBO LETTER SHA	[2F98 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A7F, 0x0061 };
    uint32_t const ces[9] = { 0x2F98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_258)
{
    // 11A7F 0041;	
    // (𑩿) SOYOMBO LETTER SHA	[2F98 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A7F, 0x0041 };
    uint32_t const ces[9] = { 0x2F98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_259)
{
    // 11A88 0061;	
    // (𑪈) SOYOMBO CLUSTER-INITIAL LETTER SHA	[2F98 1CAD | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0x11A88, 0x0061 };
    uint32_t const ces[9] = { 0x2F98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_260)
{
    // 11A88 0041;	
    // (𑪈) SOYOMBO CLUSTER-INITIAL LETTER SHA	[2F98 1CAD | 0020 0020 | 0017 0008 |]

    uint32_t cps[2] = { 0x11A88, 0x0041 };
    uint32_t const ces[9] = { 0x2F98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_261)
{
    // 11A93 0061;	
    // (𑪓) SOYOMBO FINAL CONSONANT SIGN SH	[2F98 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A93, 0x0061 };
    uint32_t const ces[9] = { 0x2F98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_262)
{
    // 11A93 0041;	
    // (𑪓) SOYOMBO FINAL CONSONANT SIGN SH	[2F98 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0x11A93, 0x0041 };
    uint32_t const ces[9] = { 0x2F98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_263)
{
    // 11A7F 0062;	
    // (𑩿) SOYOMBO LETTER SHA	[2F98 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A7F, 0x0062 };
    uint32_t const ces[9] = { 0x2F98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_264)
{
    // 11A88 0062;	
    // (𑪈) SOYOMBO CLUSTER-INITIAL LETTER SHA	[2F98 1CC6 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0x11A88, 0x0062 };
    uint32_t const ces[9] = { 0x2F98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_265)
{
    // 11A93 0062;	
    // (𑪓) SOYOMBO FINAL CONSONANT SIGN SH	[2F98 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A93, 0x0062 };
    uint32_t const ces[9] = { 0x2F98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_266)
{
    // 11A80 0021;	
    // (𑪀) SOYOMBO LETTER SSA	[2F99 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A80, 0x0021 };
    uint32_t const ces[9] = { 0x2F99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_267)
{
    // 11A80 003F;	
    // (𑪀) SOYOMBO LETTER SSA	[2F99 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A80, 0x003F };
    uint32_t const ces[9] = { 0x2F99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_268)
{
    // 11A80 0061;	
    // (𑪀) SOYOMBO LETTER SSA	[2F99 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A80, 0x0061 };
    uint32_t const ces[9] = { 0x2F99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_269)
{
    // 11A80 0041;	
    // (𑪀) SOYOMBO LETTER SSA	[2F99 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A80, 0x0041 };
    uint32_t const ces[9] = { 0x2F99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_270)
{
    // 11A80 0062;	
    // (𑪀) SOYOMBO LETTER SSA	[2F99 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A80, 0x0062 };
    uint32_t const ces[9] = { 0x2F99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_271)
{
    // 11A81 0021;	
    // (𑪁) SOYOMBO LETTER SA	[2F9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A81, 0x0021 };
    uint32_t const ces[9] = { 0x2F9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_272)
{
    // 11A89 0021;	
    // (𑪉) SOYOMBO CLUSTER-INITIAL LETTER SA	[2F9A 0261 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0x11A89, 0x0021 };
    uint32_t const ces[9] = { 0x2F9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_273)
{
    // 11A94 0021;	
    // (𑪔) SOYOMBO FINAL CONSONANT SIGN S	[2F9A 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A94, 0x0021 };
    uint32_t const ces[9] = { 0x2F9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_274)
{
    // 11A81 003F;	
    // (𑪁) SOYOMBO LETTER SA	[2F9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A81, 0x003F };
    uint32_t const ces[9] = { 0x2F9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_275)
{
    // 11A89 003F;	
    // (𑪉) SOYOMBO CLUSTER-INITIAL LETTER SA	[2F9A 0267 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0x11A89, 0x003F };
    uint32_t const ces[9] = { 0x2F9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_276)
{
    // 11A94 003F;	
    // (𑪔) SOYOMBO FINAL CONSONANT SIGN S	[2F9A 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A94, 0x003F };
    uint32_t const ces[9] = { 0x2F9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_277)
{
    // 11A81 0061;	
    // (𑪁) SOYOMBO LETTER SA	[2F9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A81, 0x0061 };
    uint32_t const ces[9] = { 0x2F9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_278)
{
    // 11A81 0041;	
    // (𑪁) SOYOMBO LETTER SA	[2F9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A81, 0x0041 };
    uint32_t const ces[9] = { 0x2F9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_279)
{
    // 11A89 0061;	
    // (𑪉) SOYOMBO CLUSTER-INITIAL LETTER SA	[2F9A 1CAD | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0x11A89, 0x0061 };
    uint32_t const ces[9] = { 0x2F9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_280)
{
    // 11A89 0041;	
    // (𑪉) SOYOMBO CLUSTER-INITIAL LETTER SA	[2F9A 1CAD | 0020 0020 | 0017 0008 |]

    uint32_t cps[2] = { 0x11A89, 0x0041 };
    uint32_t const ces[9] = { 0x2F9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_281)
{
    // 11A94 0061;	
    // (𑪔) SOYOMBO FINAL CONSONANT SIGN S	[2F9A 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A94, 0x0061 };
    uint32_t const ces[9] = { 0x2F9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_282)
{
    // 11A94 0041;	
    // (𑪔) SOYOMBO FINAL CONSONANT SIGN S	[2F9A 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0x11A94, 0x0041 };
    uint32_t const ces[9] = { 0x2F9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_283)
{
    // 11A81 0062;	
    // (𑪁) SOYOMBO LETTER SA	[2F9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A81, 0x0062 };
    uint32_t const ces[9] = { 0x2F9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_284)
{
    // 11A89 0062;	
    // (𑪉) SOYOMBO CLUSTER-INITIAL LETTER SA	[2F9A 1CC6 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0x11A89, 0x0062 };
    uint32_t const ces[9] = { 0x2F9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_285)
{
    // 11A94 0062;	
    // (𑪔) SOYOMBO FINAL CONSONANT SIGN S	[2F9A 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x11A94, 0x0062 };
    uint32_t const ces[9] = { 0x2F9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_286)
{
    // 11A82 0021;	
    // (𑪂) SOYOMBO LETTER HA	[2F9B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A82, 0x0021 };
    uint32_t const ces[9] = { 0x2F9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_287)
{
    // 11A82 003F;	
    // (𑪂) SOYOMBO LETTER HA	[2F9B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A82, 0x003F };
    uint32_t const ces[9] = { 0x2F9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_288)
{
    // 11A82 0061;	
    // (𑪂) SOYOMBO LETTER HA	[2F9B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A82, 0x0061 };
    uint32_t const ces[9] = { 0x2F9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_289)
{
    // 11A82 0041;	
    // (𑪂) SOYOMBO LETTER HA	[2F9B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A82, 0x0041 };
    uint32_t const ces[9] = { 0x2F9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_290)
{
    // 11A82 0062;	
    // (𑪂) SOYOMBO LETTER HA	[2F9B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A82, 0x0062 };
    uint32_t const ces[9] = { 0x2F9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_291)
{
    // 0334 11A99;	
    // (𑪙) SOYOMBO SUBJOINER	[2F9C | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x11A99 };
    uint32_t const ces[8] = { 0x2F9C, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_292)
{
    // 11A99 0334;	
    // (𑪙) SOYOMBO SUBJOINER	[2F9C | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A99, 0x0334 };
    uint32_t const ces[8] = { 0x2F9C, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_293)
{
    // 11A99 0021;	
    // (𑪙) SOYOMBO SUBJOINER	[2F9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A99, 0x0021 };
    uint32_t const ces[9] = { 0x2F9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_294)
{
    // 11A99 003F;	
    // (𑪙) SOYOMBO SUBJOINER	[2F9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A99, 0x003F };
    uint32_t const ces[9] = { 0x2F9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_295)
{
    // 11A99 0061;	
    // (𑪙) SOYOMBO SUBJOINER	[2F9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A99, 0x0061 };
    uint32_t const ces[9] = { 0x2F9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_296)
{
    // 11A99 0041;	
    // (𑪙) SOYOMBO SUBJOINER	[2F9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11A99, 0x0041 };
    uint32_t const ces[9] = { 0x2F9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_297)
{
    // 11A99 0062;	
    // (𑪙) SOYOMBO SUBJOINER	[2F9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A99, 0x0062 };
    uint32_t const ces[9] = { 0x2F9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_298)
{
    // 11C72 0021;	
    // (𑱲) MARCHEN LETTER KA	[2F9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C72, 0x0021 };
    uint32_t const ces[9] = { 0x2F9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_299)
{
    // 11C72 003F;	
    // (𑱲) MARCHEN LETTER KA	[2F9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C72, 0x003F };
    uint32_t const ces[9] = { 0x2F9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_300)
{
    // 11C72 0061;	
    // (𑱲) MARCHEN LETTER KA	[2F9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C72, 0x0061 };
    uint32_t const ces[9] = { 0x2F9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_301)
{
    // 11C72 0041;	
    // (𑱲) MARCHEN LETTER KA	[2F9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C72, 0x0041 };
    uint32_t const ces[9] = { 0x2F9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_302)
{
    // 11C72 0062;	
    // (𑱲) MARCHEN LETTER KA	[2F9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C72, 0x0062 };
    uint32_t const ces[9] = { 0x2F9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_303)
{
    // 11C92 0021;	
    // (𑲒) MARCHEN SUBJOINED LETTER KA	[2F9E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C92, 0x0021 };
    uint32_t const ces[9] = { 0x2F9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_304)
{
    // 11C92 003F;	
    // (𑲒) MARCHEN SUBJOINED LETTER KA	[2F9E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C92, 0x003F };
    uint32_t const ces[9] = { 0x2F9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_305)
{
    // 11C92 0061;	
    // (𑲒) MARCHEN SUBJOINED LETTER KA	[2F9E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C92, 0x0061 };
    uint32_t const ces[9] = { 0x2F9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_306)
{
    // 11C92 0041;	
    // (𑲒) MARCHEN SUBJOINED LETTER KA	[2F9E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C92, 0x0041 };
    uint32_t const ces[9] = { 0x2F9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_307)
{
    // 11C92 0062;	
    // (𑲒) MARCHEN SUBJOINED LETTER KA	[2F9E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C92, 0x0062 };
    uint32_t const ces[9] = { 0x2F9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_308)
{
    // 11C73 0021;	
    // (𑱳) MARCHEN LETTER KHA	[2F9F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C73, 0x0021 };
    uint32_t const ces[9] = { 0x2F9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_309)
{
    // 11C73 003F;	
    // (𑱳) MARCHEN LETTER KHA	[2F9F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C73, 0x003F };
    uint32_t const ces[9] = { 0x2F9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_310)
{
    // 11C73 0061;	
    // (𑱳) MARCHEN LETTER KHA	[2F9F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C73, 0x0061 };
    uint32_t const ces[9] = { 0x2F9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_311)
{
    // 11C73 0041;	
    // (𑱳) MARCHEN LETTER KHA	[2F9F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C73, 0x0041 };
    uint32_t const ces[9] = { 0x2F9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_312)
{
    // 11C73 0062;	
    // (𑱳) MARCHEN LETTER KHA	[2F9F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C73, 0x0062 };
    uint32_t const ces[9] = { 0x2F9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_313)
{
    // 11C93 0021;	
    // (𑲓) MARCHEN SUBJOINED LETTER KHA	[2FA0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C93, 0x0021 };
    uint32_t const ces[9] = { 0x2FA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_314)
{
    // 11C93 003F;	
    // (𑲓) MARCHEN SUBJOINED LETTER KHA	[2FA0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C93, 0x003F };
    uint32_t const ces[9] = { 0x2FA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_315)
{
    // 11C93 0061;	
    // (𑲓) MARCHEN SUBJOINED LETTER KHA	[2FA0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C93, 0x0061 };
    uint32_t const ces[9] = { 0x2FA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_316)
{
    // 11C93 0041;	
    // (𑲓) MARCHEN SUBJOINED LETTER KHA	[2FA0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C93, 0x0041 };
    uint32_t const ces[9] = { 0x2FA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_317)
{
    // 11C93 0062;	
    // (𑲓) MARCHEN SUBJOINED LETTER KHA	[2FA0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C93, 0x0062 };
    uint32_t const ces[9] = { 0x2FA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_318)
{
    // 11C74 0021;	
    // (𑱴) MARCHEN LETTER GA	[2FA1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C74, 0x0021 };
    uint32_t const ces[9] = { 0x2FA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_319)
{
    // 11C74 003F;	
    // (𑱴) MARCHEN LETTER GA	[2FA1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C74, 0x003F };
    uint32_t const ces[9] = { 0x2FA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_320)
{
    // 11C74 0061;	
    // (𑱴) MARCHEN LETTER GA	[2FA1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C74, 0x0061 };
    uint32_t const ces[9] = { 0x2FA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_321)
{
    // 11C74 0041;	
    // (𑱴) MARCHEN LETTER GA	[2FA1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C74, 0x0041 };
    uint32_t const ces[9] = { 0x2FA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_322)
{
    // 11C74 0062;	
    // (𑱴) MARCHEN LETTER GA	[2FA1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C74, 0x0062 };
    uint32_t const ces[9] = { 0x2FA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_323)
{
    // 11C94 0021;	
    // (𑲔) MARCHEN SUBJOINED LETTER GA	[2FA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C94, 0x0021 };
    uint32_t const ces[9] = { 0x2FA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_324)
{
    // 11C94 003F;	
    // (𑲔) MARCHEN SUBJOINED LETTER GA	[2FA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C94, 0x003F };
    uint32_t const ces[9] = { 0x2FA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_325)
{
    // 11C94 0061;	
    // (𑲔) MARCHEN SUBJOINED LETTER GA	[2FA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C94, 0x0061 };
    uint32_t const ces[9] = { 0x2FA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_326)
{
    // 11C94 0041;	
    // (𑲔) MARCHEN SUBJOINED LETTER GA	[2FA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C94, 0x0041 };
    uint32_t const ces[9] = { 0x2FA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_327)
{
    // 11C94 0062;	
    // (𑲔) MARCHEN SUBJOINED LETTER GA	[2FA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C94, 0x0062 };
    uint32_t const ces[9] = { 0x2FA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_328)
{
    // 11C75 0021;	
    // (𑱵) MARCHEN LETTER NGA	[2FA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C75, 0x0021 };
    uint32_t const ces[9] = { 0x2FA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_329)
{
    // 11C75 003F;	
    // (𑱵) MARCHEN LETTER NGA	[2FA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C75, 0x003F };
    uint32_t const ces[9] = { 0x2FA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_330)
{
    // 11C75 0061;	
    // (𑱵) MARCHEN LETTER NGA	[2FA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C75, 0x0061 };
    uint32_t const ces[9] = { 0x2FA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_331)
{
    // 11C75 0041;	
    // (𑱵) MARCHEN LETTER NGA	[2FA3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C75, 0x0041 };
    uint32_t const ces[9] = { 0x2FA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_332)
{
    // 11C75 0062;	
    // (𑱵) MARCHEN LETTER NGA	[2FA3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C75, 0x0062 };
    uint32_t const ces[9] = { 0x2FA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_333)
{
    // 11C95 0021;	
    // (𑲕) MARCHEN SUBJOINED LETTER NGA	[2FA4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C95, 0x0021 };
    uint32_t const ces[9] = { 0x2FA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_334)
{
    // 11C95 003F;	
    // (𑲕) MARCHEN SUBJOINED LETTER NGA	[2FA4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C95, 0x003F };
    uint32_t const ces[9] = { 0x2FA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_335)
{
    // 11C95 0061;	
    // (𑲕) MARCHEN SUBJOINED LETTER NGA	[2FA4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C95, 0x0061 };
    uint32_t const ces[9] = { 0x2FA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_336)
{
    // 11C95 0041;	
    // (𑲕) MARCHEN SUBJOINED LETTER NGA	[2FA4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C95, 0x0041 };
    uint32_t const ces[9] = { 0x2FA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_337)
{
    // 11C95 0062;	
    // (𑲕) MARCHEN SUBJOINED LETTER NGA	[2FA4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C95, 0x0062 };
    uint32_t const ces[9] = { 0x2FA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_338)
{
    // 11C76 0021;	
    // (𑱶) MARCHEN LETTER CA	[2FA5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C76, 0x0021 };
    uint32_t const ces[9] = { 0x2FA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_339)
{
    // 11C76 003F;	
    // (𑱶) MARCHEN LETTER CA	[2FA5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C76, 0x003F };
    uint32_t const ces[9] = { 0x2FA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_340)
{
    // 11C76 0061;	
    // (𑱶) MARCHEN LETTER CA	[2FA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C76, 0x0061 };
    uint32_t const ces[9] = { 0x2FA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_341)
{
    // 11C76 0041;	
    // (𑱶) MARCHEN LETTER CA	[2FA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C76, 0x0041 };
    uint32_t const ces[9] = { 0x2FA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_342)
{
    // 11C76 0062;	
    // (𑱶) MARCHEN LETTER CA	[2FA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C76, 0x0062 };
    uint32_t const ces[9] = { 0x2FA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_343)
{
    // 11C96 0021;	
    // (𑲖) MARCHEN SUBJOINED LETTER CA	[2FA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C96, 0x0021 };
    uint32_t const ces[9] = { 0x2FA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_344)
{
    // 11C96 003F;	
    // (𑲖) MARCHEN SUBJOINED LETTER CA	[2FA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C96, 0x003F };
    uint32_t const ces[9] = { 0x2FA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_345)
{
    // 11C96 0061;	
    // (𑲖) MARCHEN SUBJOINED LETTER CA	[2FA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C96, 0x0061 };
    uint32_t const ces[9] = { 0x2FA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_346)
{
    // 11C96 0041;	
    // (𑲖) MARCHEN SUBJOINED LETTER CA	[2FA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C96, 0x0041 };
    uint32_t const ces[9] = { 0x2FA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_347)
{
    // 11C96 0062;	
    // (𑲖) MARCHEN SUBJOINED LETTER CA	[2FA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C96, 0x0062 };
    uint32_t const ces[9] = { 0x2FA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_348)
{
    // 11C77 0021;	
    // (𑱷) MARCHEN LETTER CHA	[2FA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C77, 0x0021 };
    uint32_t const ces[9] = { 0x2FA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_349)
{
    // 11C77 003F;	
    // (𑱷) MARCHEN LETTER CHA	[2FA7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C77, 0x003F };
    uint32_t const ces[9] = { 0x2FA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_350)
{
    // 11C77 0061;	
    // (𑱷) MARCHEN LETTER CHA	[2FA7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C77, 0x0061 };
    uint32_t const ces[9] = { 0x2FA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_351)
{
    // 11C77 0041;	
    // (𑱷) MARCHEN LETTER CHA	[2FA7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C77, 0x0041 };
    uint32_t const ces[9] = { 0x2FA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_352)
{
    // 11C77 0062;	
    // (𑱷) MARCHEN LETTER CHA	[2FA7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C77, 0x0062 };
    uint32_t const ces[9] = { 0x2FA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_353)
{
    // 11C97 0021;	
    // (𑲗) MARCHEN SUBJOINED LETTER CHA	[2FA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C97, 0x0021 };
    uint32_t const ces[9] = { 0x2FA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_354)
{
    // 11C97 003F;	
    // (𑲗) MARCHEN SUBJOINED LETTER CHA	[2FA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C97, 0x003F };
    uint32_t const ces[9] = { 0x2FA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_355)
{
    // 11C97 0061;	
    // (𑲗) MARCHEN SUBJOINED LETTER CHA	[2FA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C97, 0x0061 };
    uint32_t const ces[9] = { 0x2FA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_356)
{
    // 11C97 0041;	
    // (𑲗) MARCHEN SUBJOINED LETTER CHA	[2FA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C97, 0x0041 };
    uint32_t const ces[9] = { 0x2FA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_357)
{
    // 11C97 0062;	
    // (𑲗) MARCHEN SUBJOINED LETTER CHA	[2FA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C97, 0x0062 };
    uint32_t const ces[9] = { 0x2FA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_358)
{
    // 11C78 0021;	
    // (𑱸) MARCHEN LETTER JA	[2FA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C78, 0x0021 };
    uint32_t const ces[9] = { 0x2FA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_359)
{
    // 11C78 003F;	
    // (𑱸) MARCHEN LETTER JA	[2FA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C78, 0x003F };
    uint32_t const ces[9] = { 0x2FA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_360)
{
    // 11C78 0061;	
    // (𑱸) MARCHEN LETTER JA	[2FA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C78, 0x0061 };
    uint32_t const ces[9] = { 0x2FA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_361)
{
    // 11C78 0041;	
    // (𑱸) MARCHEN LETTER JA	[2FA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C78, 0x0041 };
    uint32_t const ces[9] = { 0x2FA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_362)
{
    // 11C78 0062;	
    // (𑱸) MARCHEN LETTER JA	[2FA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C78, 0x0062 };
    uint32_t const ces[9] = { 0x2FA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_363)
{
    // 11C98 0021;	
    // (𑲘) MARCHEN SUBJOINED LETTER JA	[2FAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C98, 0x0021 };
    uint32_t const ces[9] = { 0x2FAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_364)
{
    // 11C98 003F;	
    // (𑲘) MARCHEN SUBJOINED LETTER JA	[2FAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C98, 0x003F };
    uint32_t const ces[9] = { 0x2FAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_365)
{
    // 11C98 0061;	
    // (𑲘) MARCHEN SUBJOINED LETTER JA	[2FAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C98, 0x0061 };
    uint32_t const ces[9] = { 0x2FAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_366)
{
    // 11C98 0041;	
    // (𑲘) MARCHEN SUBJOINED LETTER JA	[2FAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C98, 0x0041 };
    uint32_t const ces[9] = { 0x2FAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_367)
{
    // 11C98 0062;	
    // (𑲘) MARCHEN SUBJOINED LETTER JA	[2FAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C98, 0x0062 };
    uint32_t const ces[9] = { 0x2FAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_368)
{
    // 11C79 0021;	
    // (𑱹) MARCHEN LETTER NYA	[2FAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C79, 0x0021 };
    uint32_t const ces[9] = { 0x2FAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_369)
{
    // 11C79 003F;	
    // (𑱹) MARCHEN LETTER NYA	[2FAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C79, 0x003F };
    uint32_t const ces[9] = { 0x2FAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_370)
{
    // 11C79 0061;	
    // (𑱹) MARCHEN LETTER NYA	[2FAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C79, 0x0061 };
    uint32_t const ces[9] = { 0x2FAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_371)
{
    // 11C79 0041;	
    // (𑱹) MARCHEN LETTER NYA	[2FAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C79, 0x0041 };
    uint32_t const ces[9] = { 0x2FAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_372)
{
    // 11C79 0062;	
    // (𑱹) MARCHEN LETTER NYA	[2FAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C79, 0x0062 };
    uint32_t const ces[9] = { 0x2FAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_373)
{
    // 11C99 0021;	
    // (𑲙) MARCHEN SUBJOINED LETTER NYA	[2FAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C99, 0x0021 };
    uint32_t const ces[9] = { 0x2FAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_374)
{
    // 11C99 003F;	
    // (𑲙) MARCHEN SUBJOINED LETTER NYA	[2FAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C99, 0x003F };
    uint32_t const ces[9] = { 0x2FAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_375)
{
    // 11C99 0061;	
    // (𑲙) MARCHEN SUBJOINED LETTER NYA	[2FAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C99, 0x0061 };
    uint32_t const ces[9] = { 0x2FAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_376)
{
    // 11C99 0041;	
    // (𑲙) MARCHEN SUBJOINED LETTER NYA	[2FAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C99, 0x0041 };
    uint32_t const ces[9] = { 0x2FAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_377)
{
    // 11C99 0062;	
    // (𑲙) MARCHEN SUBJOINED LETTER NYA	[2FAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C99, 0x0062 };
    uint32_t const ces[9] = { 0x2FAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_378)
{
    // 11C7A 0021;	
    // (𑱺) MARCHEN LETTER TA	[2FAD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C7A, 0x0021 };
    uint32_t const ces[9] = { 0x2FAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_379)
{
    // 11C7A 003F;	
    // (𑱺) MARCHEN LETTER TA	[2FAD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C7A, 0x003F };
    uint32_t const ces[9] = { 0x2FAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_380)
{
    // 11C7A 0061;	
    // (𑱺) MARCHEN LETTER TA	[2FAD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C7A, 0x0061 };
    uint32_t const ces[9] = { 0x2FAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_381)
{
    // 11C7A 0041;	
    // (𑱺) MARCHEN LETTER TA	[2FAD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C7A, 0x0041 };
    uint32_t const ces[9] = { 0x2FAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_382)
{
    // 11C7A 0062;	
    // (𑱺) MARCHEN LETTER TA	[2FAD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C7A, 0x0062 };
    uint32_t const ces[9] = { 0x2FAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_383)
{
    // 11C9A 0021;	
    // (𑲚) MARCHEN SUBJOINED LETTER TA	[2FAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C9A, 0x0021 };
    uint32_t const ces[9] = { 0x2FAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_384)
{
    // 11C9A 003F;	
    // (𑲚) MARCHEN SUBJOINED LETTER TA	[2FAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C9A, 0x003F };
    uint32_t const ces[9] = { 0x2FAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_385)
{
    // 11C9A 0061;	
    // (𑲚) MARCHEN SUBJOINED LETTER TA	[2FAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C9A, 0x0061 };
    uint32_t const ces[9] = { 0x2FAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_386)
{
    // 11C9A 0041;	
    // (𑲚) MARCHEN SUBJOINED LETTER TA	[2FAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C9A, 0x0041 };
    uint32_t const ces[9] = { 0x2FAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_387)
{
    // 11C9A 0062;	
    // (𑲚) MARCHEN SUBJOINED LETTER TA	[2FAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C9A, 0x0062 };
    uint32_t const ces[9] = { 0x2FAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_388)
{
    // 11C7B 0021;	
    // (𑱻) MARCHEN LETTER THA	[2FAF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C7B, 0x0021 };
    uint32_t const ces[9] = { 0x2FAF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_389)
{
    // 11C7B 003F;	
    // (𑱻) MARCHEN LETTER THA	[2FAF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C7B, 0x003F };
    uint32_t const ces[9] = { 0x2FAF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_390)
{
    // 11C7B 0061;	
    // (𑱻) MARCHEN LETTER THA	[2FAF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C7B, 0x0061 };
    uint32_t const ces[9] = { 0x2FAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_391)
{
    // 11C7B 0041;	
    // (𑱻) MARCHEN LETTER THA	[2FAF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C7B, 0x0041 };
    uint32_t const ces[9] = { 0x2FAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_392)
{
    // 11C7B 0062;	
    // (𑱻) MARCHEN LETTER THA	[2FAF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C7B, 0x0062 };
    uint32_t const ces[9] = { 0x2FAF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_393)
{
    // 11C9B 0021;	
    // (𑲛) MARCHEN SUBJOINED LETTER THA	[2FB0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C9B, 0x0021 };
    uint32_t const ces[9] = { 0x2FB0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_394)
{
    // 11C9B 003F;	
    // (𑲛) MARCHEN SUBJOINED LETTER THA	[2FB0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C9B, 0x003F };
    uint32_t const ces[9] = { 0x2FB0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_395)
{
    // 11C9B 0061;	
    // (𑲛) MARCHEN SUBJOINED LETTER THA	[2FB0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C9B, 0x0061 };
    uint32_t const ces[9] = { 0x2FB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_396)
{
    // 11C9B 0041;	
    // (𑲛) MARCHEN SUBJOINED LETTER THA	[2FB0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C9B, 0x0041 };
    uint32_t const ces[9] = { 0x2FB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_397)
{
    // 11C9B 0062;	
    // (𑲛) MARCHEN SUBJOINED LETTER THA	[2FB0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C9B, 0x0062 };
    uint32_t const ces[9] = { 0x2FB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_398)
{
    // 11C7C 0021;	
    // (𑱼) MARCHEN LETTER DA	[2FB1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C7C, 0x0021 };
    uint32_t const ces[9] = { 0x2FB1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_399)
{
    // 11C7C 003F;	
    // (𑱼) MARCHEN LETTER DA	[2FB1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C7C, 0x003F };
    uint32_t const ces[9] = { 0x2FB1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_400)
{
    // 11C7C 0061;	
    // (𑱼) MARCHEN LETTER DA	[2FB1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C7C, 0x0061 };
    uint32_t const ces[9] = { 0x2FB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_401)
{
    // 11C7C 0041;	
    // (𑱼) MARCHEN LETTER DA	[2FB1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C7C, 0x0041 };
    uint32_t const ces[9] = { 0x2FB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_402)
{
    // 11C7C 0062;	
    // (𑱼) MARCHEN LETTER DA	[2FB1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C7C, 0x0062 };
    uint32_t const ces[9] = { 0x2FB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_403)
{
    // 11C9C 0021;	
    // (𑲜) MARCHEN SUBJOINED LETTER DA	[2FB2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C9C, 0x0021 };
    uint32_t const ces[9] = { 0x2FB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_404)
{
    // 11C9C 003F;	
    // (𑲜) MARCHEN SUBJOINED LETTER DA	[2FB2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C9C, 0x003F };
    uint32_t const ces[9] = { 0x2FB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_405)
{
    // 11C9C 0061;	
    // (𑲜) MARCHEN SUBJOINED LETTER DA	[2FB2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C9C, 0x0061 };
    uint32_t const ces[9] = { 0x2FB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_406)
{
    // 11C9C 0041;	
    // (𑲜) MARCHEN SUBJOINED LETTER DA	[2FB2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C9C, 0x0041 };
    uint32_t const ces[9] = { 0x2FB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_407)
{
    // 11C9C 0062;	
    // (𑲜) MARCHEN SUBJOINED LETTER DA	[2FB2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C9C, 0x0062 };
    uint32_t const ces[9] = { 0x2FB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_408)
{
    // 11C7D 0021;	
    // (𑱽) MARCHEN LETTER NA	[2FB3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C7D, 0x0021 };
    uint32_t const ces[9] = { 0x2FB3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_409)
{
    // 11C7D 003F;	
    // (𑱽) MARCHEN LETTER NA	[2FB3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C7D, 0x003F };
    uint32_t const ces[9] = { 0x2FB3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_410)
{
    // 11C7D 0061;	
    // (𑱽) MARCHEN LETTER NA	[2FB3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C7D, 0x0061 };
    uint32_t const ces[9] = { 0x2FB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_411)
{
    // 11C7D 0041;	
    // (𑱽) MARCHEN LETTER NA	[2FB3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C7D, 0x0041 };
    uint32_t const ces[9] = { 0x2FB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_412)
{
    // 11C7D 0062;	
    // (𑱽) MARCHEN LETTER NA	[2FB3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C7D, 0x0062 };
    uint32_t const ces[9] = { 0x2FB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_413)
{
    // 11C9D 0021;	
    // (𑲝) MARCHEN SUBJOINED LETTER NA	[2FB4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C9D, 0x0021 };
    uint32_t const ces[9] = { 0x2FB4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_414)
{
    // 11C9D 003F;	
    // (𑲝) MARCHEN SUBJOINED LETTER NA	[2FB4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C9D, 0x003F };
    uint32_t const ces[9] = { 0x2FB4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_415)
{
    // 11C9D 0061;	
    // (𑲝) MARCHEN SUBJOINED LETTER NA	[2FB4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C9D, 0x0061 };
    uint32_t const ces[9] = { 0x2FB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_416)
{
    // 11C9D 0041;	
    // (𑲝) MARCHEN SUBJOINED LETTER NA	[2FB4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C9D, 0x0041 };
    uint32_t const ces[9] = { 0x2FB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_417)
{
    // 11C9D 0062;	
    // (𑲝) MARCHEN SUBJOINED LETTER NA	[2FB4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C9D, 0x0062 };
    uint32_t const ces[9] = { 0x2FB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_418)
{
    // 11C7E 0021;	
    // (𑱾) MARCHEN LETTER PA	[2FB5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C7E, 0x0021 };
    uint32_t const ces[9] = { 0x2FB5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_419)
{
    // 11C7E 003F;	
    // (𑱾) MARCHEN LETTER PA	[2FB5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C7E, 0x003F };
    uint32_t const ces[9] = { 0x2FB5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_420)
{
    // 11C7E 0061;	
    // (𑱾) MARCHEN LETTER PA	[2FB5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C7E, 0x0061 };
    uint32_t const ces[9] = { 0x2FB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_421)
{
    // 11C7E 0041;	
    // (𑱾) MARCHEN LETTER PA	[2FB5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C7E, 0x0041 };
    uint32_t const ces[9] = { 0x2FB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_422)
{
    // 11C7E 0062;	
    // (𑱾) MARCHEN LETTER PA	[2FB5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C7E, 0x0062 };
    uint32_t const ces[9] = { 0x2FB5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_423)
{
    // 11C9E 0021;	
    // (𑲞) MARCHEN SUBJOINED LETTER PA	[2FB6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C9E, 0x0021 };
    uint32_t const ces[9] = { 0x2FB6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_424)
{
    // 11C9E 003F;	
    // (𑲞) MARCHEN SUBJOINED LETTER PA	[2FB6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C9E, 0x003F };
    uint32_t const ces[9] = { 0x2FB6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_425)
{
    // 11C9E 0061;	
    // (𑲞) MARCHEN SUBJOINED LETTER PA	[2FB6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C9E, 0x0061 };
    uint32_t const ces[9] = { 0x2FB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_426)
{
    // 11C9E 0041;	
    // (𑲞) MARCHEN SUBJOINED LETTER PA	[2FB6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C9E, 0x0041 };
    uint32_t const ces[9] = { 0x2FB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_427)
{
    // 11C9E 0062;	
    // (𑲞) MARCHEN SUBJOINED LETTER PA	[2FB6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C9E, 0x0062 };
    uint32_t const ces[9] = { 0x2FB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_428)
{
    // 11C7F 0021;	
    // (𑱿) MARCHEN LETTER PHA	[2FB7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C7F, 0x0021 };
    uint32_t const ces[9] = { 0x2FB7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_429)
{
    // 11C7F 003F;	
    // (𑱿) MARCHEN LETTER PHA	[2FB7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C7F, 0x003F };
    uint32_t const ces[9] = { 0x2FB7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_430)
{
    // 11C7F 0061;	
    // (𑱿) MARCHEN LETTER PHA	[2FB7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C7F, 0x0061 };
    uint32_t const ces[9] = { 0x2FB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_431)
{
    // 11C7F 0041;	
    // (𑱿) MARCHEN LETTER PHA	[2FB7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C7F, 0x0041 };
    uint32_t const ces[9] = { 0x2FB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_432)
{
    // 11C7F 0062;	
    // (𑱿) MARCHEN LETTER PHA	[2FB7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C7F, 0x0062 };
    uint32_t const ces[9] = { 0x2FB7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_433)
{
    // 11C9F 0021;	
    // (𑲟) MARCHEN SUBJOINED LETTER PHA	[2FB8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C9F, 0x0021 };
    uint32_t const ces[9] = { 0x2FB8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_434)
{
    // 11C9F 003F;	
    // (𑲟) MARCHEN SUBJOINED LETTER PHA	[2FB8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C9F, 0x003F };
    uint32_t const ces[9] = { 0x2FB8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_435)
{
    // 11C9F 0061;	
    // (𑲟) MARCHEN SUBJOINED LETTER PHA	[2FB8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C9F, 0x0061 };
    uint32_t const ces[9] = { 0x2FB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_436)
{
    // 11C9F 0041;	
    // (𑲟) MARCHEN SUBJOINED LETTER PHA	[2FB8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C9F, 0x0041 };
    uint32_t const ces[9] = { 0x2FB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_437)
{
    // 11C9F 0062;	
    // (𑲟) MARCHEN SUBJOINED LETTER PHA	[2FB8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C9F, 0x0062 };
    uint32_t const ces[9] = { 0x2FB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_438)
{
    // 11C80 0021;	
    // (𑲀) MARCHEN LETTER BA	[2FB9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C80, 0x0021 };
    uint32_t const ces[9] = { 0x2FB9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_439)
{
    // 11C80 003F;	
    // (𑲀) MARCHEN LETTER BA	[2FB9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C80, 0x003F };
    uint32_t const ces[9] = { 0x2FB9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_440)
{
    // 11C80 0061;	
    // (𑲀) MARCHEN LETTER BA	[2FB9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C80, 0x0061 };
    uint32_t const ces[9] = { 0x2FB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_441)
{
    // 11C80 0041;	
    // (𑲀) MARCHEN LETTER BA	[2FB9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C80, 0x0041 };
    uint32_t const ces[9] = { 0x2FB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_442)
{
    // 11C80 0062;	
    // (𑲀) MARCHEN LETTER BA	[2FB9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C80, 0x0062 };
    uint32_t const ces[9] = { 0x2FB9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_443)
{
    // 11CA0 0021;	
    // (𑲠) MARCHEN SUBJOINED LETTER BA	[2FBA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA0, 0x0021 };
    uint32_t const ces[9] = { 0x2FBA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_444)
{
    // 11CA0 003F;	
    // (𑲠) MARCHEN SUBJOINED LETTER BA	[2FBA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA0, 0x003F };
    uint32_t const ces[9] = { 0x2FBA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_445)
{
    // 11CA0 0061;	
    // (𑲠) MARCHEN SUBJOINED LETTER BA	[2FBA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA0, 0x0061 };
    uint32_t const ces[9] = { 0x2FBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_446)
{
    // 11CA0 0041;	
    // (𑲠) MARCHEN SUBJOINED LETTER BA	[2FBA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11CA0, 0x0041 };
    uint32_t const ces[9] = { 0x2FBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_447)
{
    // 11CA0 0062;	
    // (𑲠) MARCHEN SUBJOINED LETTER BA	[2FBA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA0, 0x0062 };
    uint32_t const ces[9] = { 0x2FBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_448)
{
    // 11C81 0021;	
    // (𑲁) MARCHEN LETTER MA	[2FBB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C81, 0x0021 };
    uint32_t const ces[9] = { 0x2FBB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_449)
{
    // 11C81 003F;	
    // (𑲁) MARCHEN LETTER MA	[2FBB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C81, 0x003F };
    uint32_t const ces[9] = { 0x2FBB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_450)
{
    // 11C81 0061;	
    // (𑲁) MARCHEN LETTER MA	[2FBB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C81, 0x0061 };
    uint32_t const ces[9] = { 0x2FBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_451)
{
    // 11C81 0041;	
    // (𑲁) MARCHEN LETTER MA	[2FBB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C81, 0x0041 };
    uint32_t const ces[9] = { 0x2FBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_452)
{
    // 11C81 0062;	
    // (𑲁) MARCHEN LETTER MA	[2FBB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C81, 0x0062 };
    uint32_t const ces[9] = { 0x2FBB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_453)
{
    // 11CA1 0021;	
    // (𑲡) MARCHEN SUBJOINED LETTER MA	[2FBC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA1, 0x0021 };
    uint32_t const ces[9] = { 0x2FBC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_454)
{
    // 11CA1 003F;	
    // (𑲡) MARCHEN SUBJOINED LETTER MA	[2FBC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA1, 0x003F };
    uint32_t const ces[9] = { 0x2FBC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_455)
{
    // 11CA1 0061;	
    // (𑲡) MARCHEN SUBJOINED LETTER MA	[2FBC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA1, 0x0061 };
    uint32_t const ces[9] = { 0x2FBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_456)
{
    // 11CA1 0041;	
    // (𑲡) MARCHEN SUBJOINED LETTER MA	[2FBC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11CA1, 0x0041 };
    uint32_t const ces[9] = { 0x2FBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_457)
{
    // 11CA1 0062;	
    // (𑲡) MARCHEN SUBJOINED LETTER MA	[2FBC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA1, 0x0062 };
    uint32_t const ces[9] = { 0x2FBC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_458)
{
    // 11C82 0021;	
    // (𑲂) MARCHEN LETTER TSA	[2FBD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C82, 0x0021 };
    uint32_t const ces[9] = { 0x2FBD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_459)
{
    // 11C82 003F;	
    // (𑲂) MARCHEN LETTER TSA	[2FBD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C82, 0x003F };
    uint32_t const ces[9] = { 0x2FBD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_460)
{
    // 11C82 0061;	
    // (𑲂) MARCHEN LETTER TSA	[2FBD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C82, 0x0061 };
    uint32_t const ces[9] = { 0x2FBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_461)
{
    // 11C82 0041;	
    // (𑲂) MARCHEN LETTER TSA	[2FBD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C82, 0x0041 };
    uint32_t const ces[9] = { 0x2FBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_462)
{
    // 11C82 0062;	
    // (𑲂) MARCHEN LETTER TSA	[2FBD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C82, 0x0062 };
    uint32_t const ces[9] = { 0x2FBD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_463)
{
    // 11CA2 0021;	
    // (𑲢) MARCHEN SUBJOINED LETTER TSA	[2FBE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA2, 0x0021 };
    uint32_t const ces[9] = { 0x2FBE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_464)
{
    // 11CA2 003F;	
    // (𑲢) MARCHEN SUBJOINED LETTER TSA	[2FBE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA2, 0x003F };
    uint32_t const ces[9] = { 0x2FBE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_465)
{
    // 11CA2 0061;	
    // (𑲢) MARCHEN SUBJOINED LETTER TSA	[2FBE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA2, 0x0061 };
    uint32_t const ces[9] = { 0x2FBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_466)
{
    // 11CA2 0041;	
    // (𑲢) MARCHEN SUBJOINED LETTER TSA	[2FBE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11CA2, 0x0041 };
    uint32_t const ces[9] = { 0x2FBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_467)
{
    // 11CA2 0062;	
    // (𑲢) MARCHEN SUBJOINED LETTER TSA	[2FBE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA2, 0x0062 };
    uint32_t const ces[9] = { 0x2FBE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_468)
{
    // 11C83 0021;	
    // (𑲃) MARCHEN LETTER TSHA	[2FBF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C83, 0x0021 };
    uint32_t const ces[9] = { 0x2FBF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_469)
{
    // 11C83 003F;	
    // (𑲃) MARCHEN LETTER TSHA	[2FBF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C83, 0x003F };
    uint32_t const ces[9] = { 0x2FBF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_470)
{
    // 11C83 0061;	
    // (𑲃) MARCHEN LETTER TSHA	[2FBF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C83, 0x0061 };
    uint32_t const ces[9] = { 0x2FBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_471)
{
    // 11C83 0041;	
    // (𑲃) MARCHEN LETTER TSHA	[2FBF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C83, 0x0041 };
    uint32_t const ces[9] = { 0x2FBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_472)
{
    // 11C83 0062;	
    // (𑲃) MARCHEN LETTER TSHA	[2FBF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C83, 0x0062 };
    uint32_t const ces[9] = { 0x2FBF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_473)
{
    // 11CA3 0021;	
    // (𑲣) MARCHEN SUBJOINED LETTER TSHA	[2FC0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA3, 0x0021 };
    uint32_t const ces[9] = { 0x2FC0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_474)
{
    // 11CA3 003F;	
    // (𑲣) MARCHEN SUBJOINED LETTER TSHA	[2FC0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA3, 0x003F };
    uint32_t const ces[9] = { 0x2FC0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_475)
{
    // 11CA3 0061;	
    // (𑲣) MARCHEN SUBJOINED LETTER TSHA	[2FC0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA3, 0x0061 };
    uint32_t const ces[9] = { 0x2FC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_476)
{
    // 11CA3 0041;	
    // (𑲣) MARCHEN SUBJOINED LETTER TSHA	[2FC0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11CA3, 0x0041 };
    uint32_t const ces[9] = { 0x2FC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_477)
{
    // 11CA3 0062;	
    // (𑲣) MARCHEN SUBJOINED LETTER TSHA	[2FC0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA3, 0x0062 };
    uint32_t const ces[9] = { 0x2FC0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_478)
{
    // 11C84 0021;	
    // (𑲄) MARCHEN LETTER DZA	[2FC1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C84, 0x0021 };
    uint32_t const ces[9] = { 0x2FC1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_479)
{
    // 11C84 003F;	
    // (𑲄) MARCHEN LETTER DZA	[2FC1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C84, 0x003F };
    uint32_t const ces[9] = { 0x2FC1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_480)
{
    // 11C84 0061;	
    // (𑲄) MARCHEN LETTER DZA	[2FC1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C84, 0x0061 };
    uint32_t const ces[9] = { 0x2FC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_481)
{
    // 11C84 0041;	
    // (𑲄) MARCHEN LETTER DZA	[2FC1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C84, 0x0041 };
    uint32_t const ces[9] = { 0x2FC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_482)
{
    // 11C84 0062;	
    // (𑲄) MARCHEN LETTER DZA	[2FC1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C84, 0x0062 };
    uint32_t const ces[9] = { 0x2FC1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_483)
{
    // 11CA4 0021;	
    // (𑲤) MARCHEN SUBJOINED LETTER DZA	[2FC2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA4, 0x0021 };
    uint32_t const ces[9] = { 0x2FC2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_484)
{
    // 11CA4 003F;	
    // (𑲤) MARCHEN SUBJOINED LETTER DZA	[2FC2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA4, 0x003F };
    uint32_t const ces[9] = { 0x2FC2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_485)
{
    // 11CA4 0061;	
    // (𑲤) MARCHEN SUBJOINED LETTER DZA	[2FC2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA4, 0x0061 };
    uint32_t const ces[9] = { 0x2FC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_486)
{
    // 11CA4 0041;	
    // (𑲤) MARCHEN SUBJOINED LETTER DZA	[2FC2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11CA4, 0x0041 };
    uint32_t const ces[9] = { 0x2FC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_487)
{
    // 11CA4 0062;	
    // (𑲤) MARCHEN SUBJOINED LETTER DZA	[2FC2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA4, 0x0062 };
    uint32_t const ces[9] = { 0x2FC2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_488)
{
    // 11C85 0021;	
    // (𑲅) MARCHEN LETTER WA	[2FC3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C85, 0x0021 };
    uint32_t const ces[9] = { 0x2FC3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_489)
{
    // 11C85 003F;	
    // (𑲅) MARCHEN LETTER WA	[2FC3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C85, 0x003F };
    uint32_t const ces[9] = { 0x2FC3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_490)
{
    // 11C85 0061;	
    // (𑲅) MARCHEN LETTER WA	[2FC3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C85, 0x0061 };
    uint32_t const ces[9] = { 0x2FC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_491)
{
    // 11C85 0041;	
    // (𑲅) MARCHEN LETTER WA	[2FC3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C85, 0x0041 };
    uint32_t const ces[9] = { 0x2FC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_492)
{
    // 11C85 0062;	
    // (𑲅) MARCHEN LETTER WA	[2FC3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C85, 0x0062 };
    uint32_t const ces[9] = { 0x2FC3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_493)
{
    // 11CA5 0021;	
    // (𑲥) MARCHEN SUBJOINED LETTER WA	[2FC4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA5, 0x0021 };
    uint32_t const ces[9] = { 0x2FC4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_494)
{
    // 11CA5 003F;	
    // (𑲥) MARCHEN SUBJOINED LETTER WA	[2FC4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA5, 0x003F };
    uint32_t const ces[9] = { 0x2FC4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_495)
{
    // 11CA5 0061;	
    // (𑲥) MARCHEN SUBJOINED LETTER WA	[2FC4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA5, 0x0061 };
    uint32_t const ces[9] = { 0x2FC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_496)
{
    // 11CA5 0041;	
    // (𑲥) MARCHEN SUBJOINED LETTER WA	[2FC4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11CA5, 0x0041 };
    uint32_t const ces[9] = { 0x2FC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_497)
{
    // 11CA5 0062;	
    // (𑲥) MARCHEN SUBJOINED LETTER WA	[2FC4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA5, 0x0062 };
    uint32_t const ces[9] = { 0x2FC4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_498)
{
    // 11C86 0021;	
    // (𑲆) MARCHEN LETTER ZHA	[2FC5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C86, 0x0021 };
    uint32_t const ces[9] = { 0x2FC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_199_499)
{
    // 11C86 003F;	
    // (𑲆) MARCHEN LETTER ZHA	[2FC5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C86, 0x003F };
    uint32_t const ces[9] = { 0x2FC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

