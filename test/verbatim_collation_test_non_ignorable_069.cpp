// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_069_000)
{
    // 1F81B 0041;	
    // (🠛) HEAVY DOWNWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1826 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F81B, 0x0041 };
    uint32_t const ces[9] = { 0x1826, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_001)
{
    // 1F81B 0062;	
    // (🠛) HEAVY DOWNWARDS ARROW WITH EQUILATERAL ARROWHEAD	[1826 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F81B, 0x0062 };
    uint32_t const ces[9] = { 0x1826, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_002)
{
    // 1F81C 0021;	
    // (🠜) HEAVY LEFTWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD	[1827 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F81C, 0x0021 };
    uint32_t const ces[9] = { 0x1827, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_003)
{
    // 1F81C 003F;	
    // (🠜) HEAVY LEFTWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD	[1827 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F81C, 0x003F };
    uint32_t const ces[9] = { 0x1827, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_004)
{
    // 1F81C 0061;	
    // (🠜) HEAVY LEFTWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD	[1827 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F81C, 0x0061 };
    uint32_t const ces[9] = { 0x1827, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_005)
{
    // 1F81C 0041;	
    // (🠜) HEAVY LEFTWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD	[1827 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F81C, 0x0041 };
    uint32_t const ces[9] = { 0x1827, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_006)
{
    // 1F81C 0062;	
    // (🠜) HEAVY LEFTWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD	[1827 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F81C, 0x0062 };
    uint32_t const ces[9] = { 0x1827, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_007)
{
    // 1F81D 0021;	
    // (🠝) HEAVY UPWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD	[1828 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F81D, 0x0021 };
    uint32_t const ces[9] = { 0x1828, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_008)
{
    // 1F81D 003F;	
    // (🠝) HEAVY UPWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD	[1828 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F81D, 0x003F };
    uint32_t const ces[9] = { 0x1828, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_009)
{
    // 1F81D 0061;	
    // (🠝) HEAVY UPWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD	[1828 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F81D, 0x0061 };
    uint32_t const ces[9] = { 0x1828, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_010)
{
    // 1F81D 0041;	
    // (🠝) HEAVY UPWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD	[1828 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F81D, 0x0041 };
    uint32_t const ces[9] = { 0x1828, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_011)
{
    // 1F81D 0062;	
    // (🠝) HEAVY UPWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD	[1828 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F81D, 0x0062 };
    uint32_t const ces[9] = { 0x1828, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_012)
{
    // 1F81E 0021;	
    // (🠞) HEAVY RIGHTWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD	[1829 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F81E, 0x0021 };
    uint32_t const ces[9] = { 0x1829, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_013)
{
    // 1F81E 003F;	
    // (🠞) HEAVY RIGHTWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD	[1829 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F81E, 0x003F };
    uint32_t const ces[9] = { 0x1829, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_014)
{
    // 1F81E 0061;	
    // (🠞) HEAVY RIGHTWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD	[1829 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F81E, 0x0061 };
    uint32_t const ces[9] = { 0x1829, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_015)
{
    // 1F81E 0041;	
    // (🠞) HEAVY RIGHTWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD	[1829 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F81E, 0x0041 };
    uint32_t const ces[9] = { 0x1829, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_016)
{
    // 1F81E 0062;	
    // (🠞) HEAVY RIGHTWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD	[1829 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F81E, 0x0062 };
    uint32_t const ces[9] = { 0x1829, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_017)
{
    // 1F81F 0021;	
    // (🠟) HEAVY DOWNWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD	[182A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F81F, 0x0021 };
    uint32_t const ces[9] = { 0x182A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_018)
{
    // 1F81F 003F;	
    // (🠟) HEAVY DOWNWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD	[182A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F81F, 0x003F };
    uint32_t const ces[9] = { 0x182A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_019)
{
    // 1F81F 0061;	
    // (🠟) HEAVY DOWNWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD	[182A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F81F, 0x0061 };
    uint32_t const ces[9] = { 0x182A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_020)
{
    // 1F81F 0041;	
    // (🠟) HEAVY DOWNWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD	[182A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F81F, 0x0041 };
    uint32_t const ces[9] = { 0x182A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_021)
{
    // 1F81F 0062;	
    // (🠟) HEAVY DOWNWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD	[182A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F81F, 0x0062 };
    uint32_t const ces[9] = { 0x182A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_022)
{
    // 1F820 0021;	
    // (🠠) LEFTWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT	[182B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F820, 0x0021 };
    uint32_t const ces[9] = { 0x182B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_023)
{
    // 1F820 003F;	
    // (🠠) LEFTWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT	[182B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F820, 0x003F };
    uint32_t const ces[9] = { 0x182B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_024)
{
    // 1F820 0061;	
    // (🠠) LEFTWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT	[182B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F820, 0x0061 };
    uint32_t const ces[9] = { 0x182B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_025)
{
    // 1F820 0041;	
    // (🠠) LEFTWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT	[182B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F820, 0x0041 };
    uint32_t const ces[9] = { 0x182B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_026)
{
    // 1F820 0062;	
    // (🠠) LEFTWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT	[182B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F820, 0x0062 };
    uint32_t const ces[9] = { 0x182B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_027)
{
    // 1F821 0021;	
    // (🠡) UPWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT	[182C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F821, 0x0021 };
    uint32_t const ces[9] = { 0x182C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_028)
{
    // 1F821 003F;	
    // (🠡) UPWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT	[182C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F821, 0x003F };
    uint32_t const ces[9] = { 0x182C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_029)
{
    // 1F821 0061;	
    // (🠡) UPWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT	[182C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F821, 0x0061 };
    uint32_t const ces[9] = { 0x182C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_030)
{
    // 1F821 0041;	
    // (🠡) UPWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT	[182C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F821, 0x0041 };
    uint32_t const ces[9] = { 0x182C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_031)
{
    // 1F821 0062;	
    // (🠡) UPWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT	[182C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F821, 0x0062 };
    uint32_t const ces[9] = { 0x182C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_032)
{
    // 1F822 0021;	
    // (🠢) RIGHTWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT	[182D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F822, 0x0021 };
    uint32_t const ces[9] = { 0x182D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_033)
{
    // 1F822 003F;	
    // (🠢) RIGHTWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT	[182D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F822, 0x003F };
    uint32_t const ces[9] = { 0x182D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_034)
{
    // 1F822 0061;	
    // (🠢) RIGHTWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT	[182D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F822, 0x0061 };
    uint32_t const ces[9] = { 0x182D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_035)
{
    // 1F822 0041;	
    // (🠢) RIGHTWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT	[182D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F822, 0x0041 };
    uint32_t const ces[9] = { 0x182D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_036)
{
    // 1F822 0062;	
    // (🠢) RIGHTWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT	[182D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F822, 0x0062 };
    uint32_t const ces[9] = { 0x182D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_037)
{
    // 1F823 0021;	
    // (🠣) DOWNWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT	[182E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F823, 0x0021 };
    uint32_t const ces[9] = { 0x182E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_038)
{
    // 1F823 003F;	
    // (🠣) DOWNWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT	[182E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F823, 0x003F };
    uint32_t const ces[9] = { 0x182E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_039)
{
    // 1F823 0061;	
    // (🠣) DOWNWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT	[182E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F823, 0x0061 };
    uint32_t const ces[9] = { 0x182E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_040)
{
    // 1F823 0041;	
    // (🠣) DOWNWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT	[182E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F823, 0x0041 };
    uint32_t const ces[9] = { 0x182E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_041)
{
    // 1F823 0062;	
    // (🠣) DOWNWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT	[182E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F823, 0x0062 };
    uint32_t const ces[9] = { 0x182E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_042)
{
    // 1F824 0021;	
    // (🠤) LEFTWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT	[182F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F824, 0x0021 };
    uint32_t const ces[9] = { 0x182F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_043)
{
    // 1F824 003F;	
    // (🠤) LEFTWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT	[182F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F824, 0x003F };
    uint32_t const ces[9] = { 0x182F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_044)
{
    // 1F824 0061;	
    // (🠤) LEFTWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT	[182F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F824, 0x0061 };
    uint32_t const ces[9] = { 0x182F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_045)
{
    // 1F824 0041;	
    // (🠤) LEFTWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT	[182F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F824, 0x0041 };
    uint32_t const ces[9] = { 0x182F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_046)
{
    // 1F824 0062;	
    // (🠤) LEFTWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT	[182F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F824, 0x0062 };
    uint32_t const ces[9] = { 0x182F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_047)
{
    // 1F825 0021;	
    // (🠥) UPWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT	[1830 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F825, 0x0021 };
    uint32_t const ces[9] = { 0x1830, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_048)
{
    // 1F825 003F;	
    // (🠥) UPWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT	[1830 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F825, 0x003F };
    uint32_t const ces[9] = { 0x1830, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_049)
{
    // 1F825 0061;	
    // (🠥) UPWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT	[1830 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F825, 0x0061 };
    uint32_t const ces[9] = { 0x1830, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_050)
{
    // 1F825 0041;	
    // (🠥) UPWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT	[1830 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F825, 0x0041 };
    uint32_t const ces[9] = { 0x1830, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_051)
{
    // 1F825 0062;	
    // (🠥) UPWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT	[1830 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F825, 0x0062 };
    uint32_t const ces[9] = { 0x1830, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_052)
{
    // 1F826 0021;	
    // (🠦) RIGHTWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT	[1831 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F826, 0x0021 };
    uint32_t const ces[9] = { 0x1831, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_053)
{
    // 1F826 003F;	
    // (🠦) RIGHTWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT	[1831 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F826, 0x003F };
    uint32_t const ces[9] = { 0x1831, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_054)
{
    // 1F826 0061;	
    // (🠦) RIGHTWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT	[1831 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F826, 0x0061 };
    uint32_t const ces[9] = { 0x1831, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_055)
{
    // 1F826 0041;	
    // (🠦) RIGHTWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT	[1831 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F826, 0x0041 };
    uint32_t const ces[9] = { 0x1831, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_056)
{
    // 1F826 0062;	
    // (🠦) RIGHTWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT	[1831 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F826, 0x0062 };
    uint32_t const ces[9] = { 0x1831, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_057)
{
    // 1F827 0021;	
    // (🠧) DOWNWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT	[1832 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F827, 0x0021 };
    uint32_t const ces[9] = { 0x1832, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_058)
{
    // 1F827 003F;	
    // (🠧) DOWNWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT	[1832 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F827, 0x003F };
    uint32_t const ces[9] = { 0x1832, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_059)
{
    // 1F827 0061;	
    // (🠧) DOWNWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT	[1832 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F827, 0x0061 };
    uint32_t const ces[9] = { 0x1832, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_060)
{
    // 1F827 0041;	
    // (🠧) DOWNWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT	[1832 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F827, 0x0041 };
    uint32_t const ces[9] = { 0x1832, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_061)
{
    // 1F827 0062;	
    // (🠧) DOWNWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT	[1832 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F827, 0x0062 };
    uint32_t const ces[9] = { 0x1832, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_062)
{
    // 1F828 0021;	
    // (🠨) LEFTWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT	[1833 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F828, 0x0021 };
    uint32_t const ces[9] = { 0x1833, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_063)
{
    // 1F828 003F;	
    // (🠨) LEFTWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT	[1833 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F828, 0x003F };
    uint32_t const ces[9] = { 0x1833, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_064)
{
    // 1F828 0061;	
    // (🠨) LEFTWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT	[1833 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F828, 0x0061 };
    uint32_t const ces[9] = { 0x1833, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_065)
{
    // 1F828 0041;	
    // (🠨) LEFTWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT	[1833 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F828, 0x0041 };
    uint32_t const ces[9] = { 0x1833, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_066)
{
    // 1F828 0062;	
    // (🠨) LEFTWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT	[1833 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F828, 0x0062 };
    uint32_t const ces[9] = { 0x1833, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_067)
{
    // 1F829 0021;	
    // (🠩) UPWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT	[1834 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F829, 0x0021 };
    uint32_t const ces[9] = { 0x1834, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_068)
{
    // 1F829 003F;	
    // (🠩) UPWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT	[1834 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F829, 0x003F };
    uint32_t const ces[9] = { 0x1834, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_069)
{
    // 1F829 0061;	
    // (🠩) UPWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT	[1834 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F829, 0x0061 };
    uint32_t const ces[9] = { 0x1834, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_070)
{
    // 1F829 0041;	
    // (🠩) UPWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT	[1834 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F829, 0x0041 };
    uint32_t const ces[9] = { 0x1834, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_071)
{
    // 1F829 0062;	
    // (🠩) UPWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT	[1834 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F829, 0x0062 };
    uint32_t const ces[9] = { 0x1834, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_072)
{
    // 1F82A 0021;	
    // (🠪) RIGHTWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT	[1835 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F82A, 0x0021 };
    uint32_t const ces[9] = { 0x1835, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_073)
{
    // 1F82A 003F;	
    // (🠪) RIGHTWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT	[1835 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F82A, 0x003F };
    uint32_t const ces[9] = { 0x1835, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_074)
{
    // 1F82A 0061;	
    // (🠪) RIGHTWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT	[1835 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F82A, 0x0061 };
    uint32_t const ces[9] = { 0x1835, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_075)
{
    // 1F82A 0041;	
    // (🠪) RIGHTWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT	[1835 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F82A, 0x0041 };
    uint32_t const ces[9] = { 0x1835, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_076)
{
    // 1F82A 0062;	
    // (🠪) RIGHTWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT	[1835 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F82A, 0x0062 };
    uint32_t const ces[9] = { 0x1835, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_077)
{
    // 1F82B 0021;	
    // (🠫) DOWNWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT	[1836 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F82B, 0x0021 };
    uint32_t const ces[9] = { 0x1836, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_078)
{
    // 1F82B 003F;	
    // (🠫) DOWNWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT	[1836 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F82B, 0x003F };
    uint32_t const ces[9] = { 0x1836, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_079)
{
    // 1F82B 0061;	
    // (🠫) DOWNWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT	[1836 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F82B, 0x0061 };
    uint32_t const ces[9] = { 0x1836, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_080)
{
    // 1F82B 0041;	
    // (🠫) DOWNWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT	[1836 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F82B, 0x0041 };
    uint32_t const ces[9] = { 0x1836, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_081)
{
    // 1F82B 0062;	
    // (🠫) DOWNWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT	[1836 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F82B, 0x0062 };
    uint32_t const ces[9] = { 0x1836, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_082)
{
    // 1F82C 0021;	
    // (🠬) LEFTWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT	[1837 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F82C, 0x0021 };
    uint32_t const ces[9] = { 0x1837, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_083)
{
    // 1F82C 003F;	
    // (🠬) LEFTWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT	[1837 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F82C, 0x003F };
    uint32_t const ces[9] = { 0x1837, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_084)
{
    // 1F82C 0061;	
    // (🠬) LEFTWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT	[1837 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F82C, 0x0061 };
    uint32_t const ces[9] = { 0x1837, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_085)
{
    // 1F82C 0041;	
    // (🠬) LEFTWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT	[1837 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F82C, 0x0041 };
    uint32_t const ces[9] = { 0x1837, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_086)
{
    // 1F82C 0062;	
    // (🠬) LEFTWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT	[1837 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F82C, 0x0062 };
    uint32_t const ces[9] = { 0x1837, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_087)
{
    // 1F82D 0021;	
    // (🠭) UPWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT	[1838 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F82D, 0x0021 };
    uint32_t const ces[9] = { 0x1838, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_088)
{
    // 1F82D 003F;	
    // (🠭) UPWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT	[1838 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F82D, 0x003F };
    uint32_t const ces[9] = { 0x1838, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_089)
{
    // 1F82D 0061;	
    // (🠭) UPWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT	[1838 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F82D, 0x0061 };
    uint32_t const ces[9] = { 0x1838, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_090)
{
    // 1F82D 0041;	
    // (🠭) UPWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT	[1838 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F82D, 0x0041 };
    uint32_t const ces[9] = { 0x1838, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_091)
{
    // 1F82D 0062;	
    // (🠭) UPWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT	[1838 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F82D, 0x0062 };
    uint32_t const ces[9] = { 0x1838, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_092)
{
    // 1F82E 0021;	
    // (🠮) RIGHTWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT	[1839 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F82E, 0x0021 };
    uint32_t const ces[9] = { 0x1839, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_093)
{
    // 1F82E 003F;	
    // (🠮) RIGHTWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT	[1839 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F82E, 0x003F };
    uint32_t const ces[9] = { 0x1839, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_094)
{
    // 1F82E 0061;	
    // (🠮) RIGHTWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT	[1839 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F82E, 0x0061 };
    uint32_t const ces[9] = { 0x1839, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_095)
{
    // 1F82E 0041;	
    // (🠮) RIGHTWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT	[1839 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F82E, 0x0041 };
    uint32_t const ces[9] = { 0x1839, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_096)
{
    // 1F82E 0062;	
    // (🠮) RIGHTWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT	[1839 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F82E, 0x0062 };
    uint32_t const ces[9] = { 0x1839, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_097)
{
    // 1F82F 0021;	
    // (🠯) DOWNWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT	[183A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F82F, 0x0021 };
    uint32_t const ces[9] = { 0x183A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_098)
{
    // 1F82F 003F;	
    // (🠯) DOWNWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT	[183A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F82F, 0x003F };
    uint32_t const ces[9] = { 0x183A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_099)
{
    // 1F82F 0061;	
    // (🠯) DOWNWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT	[183A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F82F, 0x0061 };
    uint32_t const ces[9] = { 0x183A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_100)
{
    // 1F82F 0041;	
    // (🠯) DOWNWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT	[183A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F82F, 0x0041 };
    uint32_t const ces[9] = { 0x183A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_101)
{
    // 1F82F 0062;	
    // (🠯) DOWNWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT	[183A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F82F, 0x0062 };
    uint32_t const ces[9] = { 0x183A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_102)
{
    // 1F830 0021;	
    // (🠰) LEFTWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT	[183B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F830, 0x0021 };
    uint32_t const ces[9] = { 0x183B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_103)
{
    // 1F830 003F;	
    // (🠰) LEFTWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT	[183B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F830, 0x003F };
    uint32_t const ces[9] = { 0x183B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_104)
{
    // 1F830 0061;	
    // (🠰) LEFTWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT	[183B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F830, 0x0061 };
    uint32_t const ces[9] = { 0x183B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_105)
{
    // 1F830 0041;	
    // (🠰) LEFTWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT	[183B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F830, 0x0041 };
    uint32_t const ces[9] = { 0x183B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_106)
{
    // 1F830 0062;	
    // (🠰) LEFTWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT	[183B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F830, 0x0062 };
    uint32_t const ces[9] = { 0x183B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_107)
{
    // 1F831 0021;	
    // (🠱) UPWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT	[183C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F831, 0x0021 };
    uint32_t const ces[9] = { 0x183C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_108)
{
    // 1F831 003F;	
    // (🠱) UPWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT	[183C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F831, 0x003F };
    uint32_t const ces[9] = { 0x183C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_109)
{
    // 1F831 0061;	
    // (🠱) UPWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT	[183C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F831, 0x0061 };
    uint32_t const ces[9] = { 0x183C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_110)
{
    // 1F831 0041;	
    // (🠱) UPWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT	[183C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F831, 0x0041 };
    uint32_t const ces[9] = { 0x183C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_111)
{
    // 1F831 0062;	
    // (🠱) UPWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT	[183C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F831, 0x0062 };
    uint32_t const ces[9] = { 0x183C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_112)
{
    // 1F832 0021;	
    // (🠲) RIGHTWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT	[183D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F832, 0x0021 };
    uint32_t const ces[9] = { 0x183D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_113)
{
    // 1F832 003F;	
    // (🠲) RIGHTWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT	[183D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F832, 0x003F };
    uint32_t const ces[9] = { 0x183D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_114)
{
    // 1F832 0061;	
    // (🠲) RIGHTWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT	[183D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F832, 0x0061 };
    uint32_t const ces[9] = { 0x183D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_115)
{
    // 1F832 0041;	
    // (🠲) RIGHTWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT	[183D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F832, 0x0041 };
    uint32_t const ces[9] = { 0x183D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_116)
{
    // 1F832 0062;	
    // (🠲) RIGHTWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT	[183D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F832, 0x0062 };
    uint32_t const ces[9] = { 0x183D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_117)
{
    // 1F833 0021;	
    // (🠳) DOWNWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT	[183E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F833, 0x0021 };
    uint32_t const ces[9] = { 0x183E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_118)
{
    // 1F833 003F;	
    // (🠳) DOWNWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT	[183E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F833, 0x003F };
    uint32_t const ces[9] = { 0x183E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_119)
{
    // 1F833 0061;	
    // (🠳) DOWNWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT	[183E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F833, 0x0061 };
    uint32_t const ces[9] = { 0x183E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_120)
{
    // 1F833 0041;	
    // (🠳) DOWNWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT	[183E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F833, 0x0041 };
    uint32_t const ces[9] = { 0x183E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_121)
{
    // 1F833 0062;	
    // (🠳) DOWNWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT	[183E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F833, 0x0062 };
    uint32_t const ces[9] = { 0x183E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_122)
{
    // 1F834 0021;	
    // (🠴) LEFTWARDS FINGER-POST ARROW	[183F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F834, 0x0021 };
    uint32_t const ces[9] = { 0x183F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_123)
{
    // 1F834 003F;	
    // (🠴) LEFTWARDS FINGER-POST ARROW	[183F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F834, 0x003F };
    uint32_t const ces[9] = { 0x183F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_124)
{
    // 1F834 0061;	
    // (🠴) LEFTWARDS FINGER-POST ARROW	[183F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F834, 0x0061 };
    uint32_t const ces[9] = { 0x183F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_125)
{
    // 1F834 0041;	
    // (🠴) LEFTWARDS FINGER-POST ARROW	[183F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F834, 0x0041 };
    uint32_t const ces[9] = { 0x183F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_126)
{
    // 1F834 0062;	
    // (🠴) LEFTWARDS FINGER-POST ARROW	[183F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F834, 0x0062 };
    uint32_t const ces[9] = { 0x183F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_127)
{
    // 1F835 0021;	
    // (🠵) UPWARDS FINGER-POST ARROW	[1840 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F835, 0x0021 };
    uint32_t const ces[9] = { 0x1840, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_128)
{
    // 1F835 003F;	
    // (🠵) UPWARDS FINGER-POST ARROW	[1840 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F835, 0x003F };
    uint32_t const ces[9] = { 0x1840, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_129)
{
    // 1F835 0061;	
    // (🠵) UPWARDS FINGER-POST ARROW	[1840 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F835, 0x0061 };
    uint32_t const ces[9] = { 0x1840, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_130)
{
    // 1F835 0041;	
    // (🠵) UPWARDS FINGER-POST ARROW	[1840 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F835, 0x0041 };
    uint32_t const ces[9] = { 0x1840, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_131)
{
    // 1F835 0062;	
    // (🠵) UPWARDS FINGER-POST ARROW	[1840 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F835, 0x0062 };
    uint32_t const ces[9] = { 0x1840, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_132)
{
    // 1F836 0021;	
    // (🠶) RIGHTWARDS FINGER-POST ARROW	[1841 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F836, 0x0021 };
    uint32_t const ces[9] = { 0x1841, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_133)
{
    // 1F836 003F;	
    // (🠶) RIGHTWARDS FINGER-POST ARROW	[1841 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F836, 0x003F };
    uint32_t const ces[9] = { 0x1841, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_134)
{
    // 1F836 0061;	
    // (🠶) RIGHTWARDS FINGER-POST ARROW	[1841 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F836, 0x0061 };
    uint32_t const ces[9] = { 0x1841, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_135)
{
    // 1F836 0041;	
    // (🠶) RIGHTWARDS FINGER-POST ARROW	[1841 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F836, 0x0041 };
    uint32_t const ces[9] = { 0x1841, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_136)
{
    // 1F836 0062;	
    // (🠶) RIGHTWARDS FINGER-POST ARROW	[1841 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F836, 0x0062 };
    uint32_t const ces[9] = { 0x1841, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_137)
{
    // 1F837 0021;	
    // (🠷) DOWNWARDS FINGER-POST ARROW	[1842 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F837, 0x0021 };
    uint32_t const ces[9] = { 0x1842, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_138)
{
    // 1F837 003F;	
    // (🠷) DOWNWARDS FINGER-POST ARROW	[1842 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F837, 0x003F };
    uint32_t const ces[9] = { 0x1842, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_139)
{
    // 1F837 0061;	
    // (🠷) DOWNWARDS FINGER-POST ARROW	[1842 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F837, 0x0061 };
    uint32_t const ces[9] = { 0x1842, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_140)
{
    // 1F837 0041;	
    // (🠷) DOWNWARDS FINGER-POST ARROW	[1842 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F837, 0x0041 };
    uint32_t const ces[9] = { 0x1842, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_141)
{
    // 1F837 0062;	
    // (🠷) DOWNWARDS FINGER-POST ARROW	[1842 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F837, 0x0062 };
    uint32_t const ces[9] = { 0x1842, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_142)
{
    // 1F838 0021;	
    // (🠸) LEFTWARDS SQUARED ARROW	[1843 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F838, 0x0021 };
    uint32_t const ces[9] = { 0x1843, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_143)
{
    // 1F838 003F;	
    // (🠸) LEFTWARDS SQUARED ARROW	[1843 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F838, 0x003F };
    uint32_t const ces[9] = { 0x1843, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_144)
{
    // 1F838 0061;	
    // (🠸) LEFTWARDS SQUARED ARROW	[1843 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F838, 0x0061 };
    uint32_t const ces[9] = { 0x1843, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_145)
{
    // 1F838 0041;	
    // (🠸) LEFTWARDS SQUARED ARROW	[1843 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F838, 0x0041 };
    uint32_t const ces[9] = { 0x1843, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_146)
{
    // 1F838 0062;	
    // (🠸) LEFTWARDS SQUARED ARROW	[1843 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F838, 0x0062 };
    uint32_t const ces[9] = { 0x1843, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_147)
{
    // 1F839 0021;	
    // (🠹) UPWARDS SQUARED ARROW	[1844 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F839, 0x0021 };
    uint32_t const ces[9] = { 0x1844, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_148)
{
    // 1F839 003F;	
    // (🠹) UPWARDS SQUARED ARROW	[1844 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F839, 0x003F };
    uint32_t const ces[9] = { 0x1844, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_149)
{
    // 1F839 0061;	
    // (🠹) UPWARDS SQUARED ARROW	[1844 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F839, 0x0061 };
    uint32_t const ces[9] = { 0x1844, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_150)
{
    // 1F839 0041;	
    // (🠹) UPWARDS SQUARED ARROW	[1844 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F839, 0x0041 };
    uint32_t const ces[9] = { 0x1844, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_151)
{
    // 1F839 0062;	
    // (🠹) UPWARDS SQUARED ARROW	[1844 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F839, 0x0062 };
    uint32_t const ces[9] = { 0x1844, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_152)
{
    // 1F83A 0021;	
    // (🠺) RIGHTWARDS SQUARED ARROW	[1845 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F83A, 0x0021 };
    uint32_t const ces[9] = { 0x1845, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_153)
{
    // 1F83A 003F;	
    // (🠺) RIGHTWARDS SQUARED ARROW	[1845 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F83A, 0x003F };
    uint32_t const ces[9] = { 0x1845, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_154)
{
    // 1F83A 0061;	
    // (🠺) RIGHTWARDS SQUARED ARROW	[1845 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F83A, 0x0061 };
    uint32_t const ces[9] = { 0x1845, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_155)
{
    // 1F83A 0041;	
    // (🠺) RIGHTWARDS SQUARED ARROW	[1845 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F83A, 0x0041 };
    uint32_t const ces[9] = { 0x1845, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_156)
{
    // 1F83A 0062;	
    // (🠺) RIGHTWARDS SQUARED ARROW	[1845 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F83A, 0x0062 };
    uint32_t const ces[9] = { 0x1845, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_157)
{
    // 1F83B 0021;	
    // (🠻) DOWNWARDS SQUARED ARROW	[1846 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F83B, 0x0021 };
    uint32_t const ces[9] = { 0x1846, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_158)
{
    // 1F83B 003F;	
    // (🠻) DOWNWARDS SQUARED ARROW	[1846 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F83B, 0x003F };
    uint32_t const ces[9] = { 0x1846, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_159)
{
    // 1F83B 0061;	
    // (🠻) DOWNWARDS SQUARED ARROW	[1846 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F83B, 0x0061 };
    uint32_t const ces[9] = { 0x1846, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_160)
{
    // 1F83B 0041;	
    // (🠻) DOWNWARDS SQUARED ARROW	[1846 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F83B, 0x0041 };
    uint32_t const ces[9] = { 0x1846, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_161)
{
    // 1F83B 0062;	
    // (🠻) DOWNWARDS SQUARED ARROW	[1846 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F83B, 0x0062 };
    uint32_t const ces[9] = { 0x1846, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_162)
{
    // 1F83C 0021;	
    // (🠼) LEFTWARDS COMPRESSED ARROW	[1847 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F83C, 0x0021 };
    uint32_t const ces[9] = { 0x1847, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_163)
{
    // 1F83C 003F;	
    // (🠼) LEFTWARDS COMPRESSED ARROW	[1847 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F83C, 0x003F };
    uint32_t const ces[9] = { 0x1847, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_164)
{
    // 1F83C 0061;	
    // (🠼) LEFTWARDS COMPRESSED ARROW	[1847 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F83C, 0x0061 };
    uint32_t const ces[9] = { 0x1847, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_165)
{
    // 1F83C 0041;	
    // (🠼) LEFTWARDS COMPRESSED ARROW	[1847 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F83C, 0x0041 };
    uint32_t const ces[9] = { 0x1847, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_166)
{
    // 1F83C 0062;	
    // (🠼) LEFTWARDS COMPRESSED ARROW	[1847 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F83C, 0x0062 };
    uint32_t const ces[9] = { 0x1847, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_167)
{
    // 1F83D 0021;	
    // (🠽) UPWARDS COMPRESSED ARROW	[1848 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F83D, 0x0021 };
    uint32_t const ces[9] = { 0x1848, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_168)
{
    // 1F83D 003F;	
    // (🠽) UPWARDS COMPRESSED ARROW	[1848 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F83D, 0x003F };
    uint32_t const ces[9] = { 0x1848, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_169)
{
    // 1F83D 0061;	
    // (🠽) UPWARDS COMPRESSED ARROW	[1848 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F83D, 0x0061 };
    uint32_t const ces[9] = { 0x1848, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_170)
{
    // 1F83D 0041;	
    // (🠽) UPWARDS COMPRESSED ARROW	[1848 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F83D, 0x0041 };
    uint32_t const ces[9] = { 0x1848, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_171)
{
    // 1F83D 0062;	
    // (🠽) UPWARDS COMPRESSED ARROW	[1848 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F83D, 0x0062 };
    uint32_t const ces[9] = { 0x1848, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_172)
{
    // 1F83E 0021;	
    // (🠾) RIGHTWARDS COMPRESSED ARROW	[1849 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F83E, 0x0021 };
    uint32_t const ces[9] = { 0x1849, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_173)
{
    // 1F83E 003F;	
    // (🠾) RIGHTWARDS COMPRESSED ARROW	[1849 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F83E, 0x003F };
    uint32_t const ces[9] = { 0x1849, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_174)
{
    // 1F83E 0061;	
    // (🠾) RIGHTWARDS COMPRESSED ARROW	[1849 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F83E, 0x0061 };
    uint32_t const ces[9] = { 0x1849, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_175)
{
    // 1F83E 0041;	
    // (🠾) RIGHTWARDS COMPRESSED ARROW	[1849 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F83E, 0x0041 };
    uint32_t const ces[9] = { 0x1849, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_176)
{
    // 1F83E 0062;	
    // (🠾) RIGHTWARDS COMPRESSED ARROW	[1849 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F83E, 0x0062 };
    uint32_t const ces[9] = { 0x1849, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_177)
{
    // 1F83F 0021;	
    // (🠿) DOWNWARDS COMPRESSED ARROW	[184A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F83F, 0x0021 };
    uint32_t const ces[9] = { 0x184A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_178)
{
    // 1F83F 003F;	
    // (🠿) DOWNWARDS COMPRESSED ARROW	[184A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F83F, 0x003F };
    uint32_t const ces[9] = { 0x184A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_179)
{
    // 1F83F 0061;	
    // (🠿) DOWNWARDS COMPRESSED ARROW	[184A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F83F, 0x0061 };
    uint32_t const ces[9] = { 0x184A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_180)
{
    // 1F83F 0041;	
    // (🠿) DOWNWARDS COMPRESSED ARROW	[184A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F83F, 0x0041 };
    uint32_t const ces[9] = { 0x184A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_181)
{
    // 1F83F 0062;	
    // (🠿) DOWNWARDS COMPRESSED ARROW	[184A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F83F, 0x0062 };
    uint32_t const ces[9] = { 0x184A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_182)
{
    // 1F840 0021;	
    // (🡀) LEFTWARDS HEAVY COMPRESSED ARROW	[184B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F840, 0x0021 };
    uint32_t const ces[9] = { 0x184B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_183)
{
    // 1F840 003F;	
    // (🡀) LEFTWARDS HEAVY COMPRESSED ARROW	[184B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F840, 0x003F };
    uint32_t const ces[9] = { 0x184B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_184)
{
    // 1F840 0061;	
    // (🡀) LEFTWARDS HEAVY COMPRESSED ARROW	[184B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F840, 0x0061 };
    uint32_t const ces[9] = { 0x184B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_185)
{
    // 1F840 0041;	
    // (🡀) LEFTWARDS HEAVY COMPRESSED ARROW	[184B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F840, 0x0041 };
    uint32_t const ces[9] = { 0x184B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_186)
{
    // 1F840 0062;	
    // (🡀) LEFTWARDS HEAVY COMPRESSED ARROW	[184B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F840, 0x0062 };
    uint32_t const ces[9] = { 0x184B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_187)
{
    // 1F841 0021;	
    // (🡁) UPWARDS HEAVY COMPRESSED ARROW	[184C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F841, 0x0021 };
    uint32_t const ces[9] = { 0x184C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_188)
{
    // 1F841 003F;	
    // (🡁) UPWARDS HEAVY COMPRESSED ARROW	[184C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F841, 0x003F };
    uint32_t const ces[9] = { 0x184C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_189)
{
    // 1F841 0061;	
    // (🡁) UPWARDS HEAVY COMPRESSED ARROW	[184C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F841, 0x0061 };
    uint32_t const ces[9] = { 0x184C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_190)
{
    // 1F841 0041;	
    // (🡁) UPWARDS HEAVY COMPRESSED ARROW	[184C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F841, 0x0041 };
    uint32_t const ces[9] = { 0x184C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_191)
{
    // 1F841 0062;	
    // (🡁) UPWARDS HEAVY COMPRESSED ARROW	[184C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F841, 0x0062 };
    uint32_t const ces[9] = { 0x184C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_192)
{
    // 1F842 0021;	
    // (🡂) RIGHTWARDS HEAVY COMPRESSED ARROW	[184D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F842, 0x0021 };
    uint32_t const ces[9] = { 0x184D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_193)
{
    // 1F842 003F;	
    // (🡂) RIGHTWARDS HEAVY COMPRESSED ARROW	[184D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F842, 0x003F };
    uint32_t const ces[9] = { 0x184D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_194)
{
    // 1F842 0061;	
    // (🡂) RIGHTWARDS HEAVY COMPRESSED ARROW	[184D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F842, 0x0061 };
    uint32_t const ces[9] = { 0x184D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_195)
{
    // 1F842 0041;	
    // (🡂) RIGHTWARDS HEAVY COMPRESSED ARROW	[184D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F842, 0x0041 };
    uint32_t const ces[9] = { 0x184D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_196)
{
    // 1F842 0062;	
    // (🡂) RIGHTWARDS HEAVY COMPRESSED ARROW	[184D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F842, 0x0062 };
    uint32_t const ces[9] = { 0x184D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_197)
{
    // 1F843 0021;	
    // (🡃) DOWNWARDS HEAVY COMPRESSED ARROW	[184E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F843, 0x0021 };
    uint32_t const ces[9] = { 0x184E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_198)
{
    // 1F843 003F;	
    // (🡃) DOWNWARDS HEAVY COMPRESSED ARROW	[184E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F843, 0x003F };
    uint32_t const ces[9] = { 0x184E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_199)
{
    // 1F843 0061;	
    // (🡃) DOWNWARDS HEAVY COMPRESSED ARROW	[184E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F843, 0x0061 };
    uint32_t const ces[9] = { 0x184E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_200)
{
    // 1F843 0041;	
    // (🡃) DOWNWARDS HEAVY COMPRESSED ARROW	[184E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F843, 0x0041 };
    uint32_t const ces[9] = { 0x184E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_201)
{
    // 1F843 0062;	
    // (🡃) DOWNWARDS HEAVY COMPRESSED ARROW	[184E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F843, 0x0062 };
    uint32_t const ces[9] = { 0x184E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_202)
{
    // 1F844 0021;	
    // (🡄) LEFTWARDS HEAVY ARROW	[184F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F844, 0x0021 };
    uint32_t const ces[9] = { 0x184F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_203)
{
    // 1F844 003F;	
    // (🡄) LEFTWARDS HEAVY ARROW	[184F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F844, 0x003F };
    uint32_t const ces[9] = { 0x184F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_204)
{
    // 1F844 0061;	
    // (🡄) LEFTWARDS HEAVY ARROW	[184F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F844, 0x0061 };
    uint32_t const ces[9] = { 0x184F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_205)
{
    // 1F844 0041;	
    // (🡄) LEFTWARDS HEAVY ARROW	[184F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F844, 0x0041 };
    uint32_t const ces[9] = { 0x184F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_206)
{
    // 1F844 0062;	
    // (🡄) LEFTWARDS HEAVY ARROW	[184F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F844, 0x0062 };
    uint32_t const ces[9] = { 0x184F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_207)
{
    // 1F845 0021;	
    // (🡅) UPWARDS HEAVY ARROW	[1850 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F845, 0x0021 };
    uint32_t const ces[9] = { 0x1850, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_208)
{
    // 1F845 003F;	
    // (🡅) UPWARDS HEAVY ARROW	[1850 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F845, 0x003F };
    uint32_t const ces[9] = { 0x1850, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_209)
{
    // 1F845 0061;	
    // (🡅) UPWARDS HEAVY ARROW	[1850 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F845, 0x0061 };
    uint32_t const ces[9] = { 0x1850, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_210)
{
    // 1F845 0041;	
    // (🡅) UPWARDS HEAVY ARROW	[1850 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F845, 0x0041 };
    uint32_t const ces[9] = { 0x1850, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_211)
{
    // 1F845 0062;	
    // (🡅) UPWARDS HEAVY ARROW	[1850 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F845, 0x0062 };
    uint32_t const ces[9] = { 0x1850, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_212)
{
    // 1F846 0021;	
    // (🡆) RIGHTWARDS HEAVY ARROW	[1851 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F846, 0x0021 };
    uint32_t const ces[9] = { 0x1851, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_213)
{
    // 1F846 003F;	
    // (🡆) RIGHTWARDS HEAVY ARROW	[1851 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F846, 0x003F };
    uint32_t const ces[9] = { 0x1851, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_214)
{
    // 1F846 0061;	
    // (🡆) RIGHTWARDS HEAVY ARROW	[1851 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F846, 0x0061 };
    uint32_t const ces[9] = { 0x1851, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_215)
{
    // 1F846 0041;	
    // (🡆) RIGHTWARDS HEAVY ARROW	[1851 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F846, 0x0041 };
    uint32_t const ces[9] = { 0x1851, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_216)
{
    // 1F846 0062;	
    // (🡆) RIGHTWARDS HEAVY ARROW	[1851 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F846, 0x0062 };
    uint32_t const ces[9] = { 0x1851, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_217)
{
    // 1F847 0021;	
    // (🡇) DOWNWARDS HEAVY ARROW	[1852 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F847, 0x0021 };
    uint32_t const ces[9] = { 0x1852, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_218)
{
    // 1F847 003F;	
    // (🡇) DOWNWARDS HEAVY ARROW	[1852 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F847, 0x003F };
    uint32_t const ces[9] = { 0x1852, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_219)
{
    // 1F847 0061;	
    // (🡇) DOWNWARDS HEAVY ARROW	[1852 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F847, 0x0061 };
    uint32_t const ces[9] = { 0x1852, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_220)
{
    // 1F847 0041;	
    // (🡇) DOWNWARDS HEAVY ARROW	[1852 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F847, 0x0041 };
    uint32_t const ces[9] = { 0x1852, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_221)
{
    // 1F847 0062;	
    // (🡇) DOWNWARDS HEAVY ARROW	[1852 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F847, 0x0062 };
    uint32_t const ces[9] = { 0x1852, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_222)
{
    // 1F850 0021;	
    // (🡐) LEFTWARDS SANS-SERIF ARROW	[1853 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F850, 0x0021 };
    uint32_t const ces[9] = { 0x1853, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_223)
{
    // 1F850 003F;	
    // (🡐) LEFTWARDS SANS-SERIF ARROW	[1853 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F850, 0x003F };
    uint32_t const ces[9] = { 0x1853, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_224)
{
    // 1F850 0061;	
    // (🡐) LEFTWARDS SANS-SERIF ARROW	[1853 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F850, 0x0061 };
    uint32_t const ces[9] = { 0x1853, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_225)
{
    // 1F850 0041;	
    // (🡐) LEFTWARDS SANS-SERIF ARROW	[1853 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F850, 0x0041 };
    uint32_t const ces[9] = { 0x1853, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_226)
{
    // 1F850 0062;	
    // (🡐) LEFTWARDS SANS-SERIF ARROW	[1853 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F850, 0x0062 };
    uint32_t const ces[9] = { 0x1853, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_227)
{
    // 1F851 0021;	
    // (🡑) UPWARDS SANS-SERIF ARROW	[1854 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F851, 0x0021 };
    uint32_t const ces[9] = { 0x1854, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_228)
{
    // 1F851 003F;	
    // (🡑) UPWARDS SANS-SERIF ARROW	[1854 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F851, 0x003F };
    uint32_t const ces[9] = { 0x1854, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_229)
{
    // 1F851 0061;	
    // (🡑) UPWARDS SANS-SERIF ARROW	[1854 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F851, 0x0061 };
    uint32_t const ces[9] = { 0x1854, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_230)
{
    // 1F851 0041;	
    // (🡑) UPWARDS SANS-SERIF ARROW	[1854 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F851, 0x0041 };
    uint32_t const ces[9] = { 0x1854, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_231)
{
    // 1F851 0062;	
    // (🡑) UPWARDS SANS-SERIF ARROW	[1854 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F851, 0x0062 };
    uint32_t const ces[9] = { 0x1854, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_232)
{
    // 1F852 0021;	
    // (🡒) RIGHTWARDS SANS-SERIF ARROW	[1855 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F852, 0x0021 };
    uint32_t const ces[9] = { 0x1855, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_233)
{
    // 1F852 003F;	
    // (🡒) RIGHTWARDS SANS-SERIF ARROW	[1855 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F852, 0x003F };
    uint32_t const ces[9] = { 0x1855, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_234)
{
    // 1F852 0061;	
    // (🡒) RIGHTWARDS SANS-SERIF ARROW	[1855 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F852, 0x0061 };
    uint32_t const ces[9] = { 0x1855, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_235)
{
    // 1F852 0041;	
    // (🡒) RIGHTWARDS SANS-SERIF ARROW	[1855 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F852, 0x0041 };
    uint32_t const ces[9] = { 0x1855, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_236)
{
    // 1F852 0062;	
    // (🡒) RIGHTWARDS SANS-SERIF ARROW	[1855 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F852, 0x0062 };
    uint32_t const ces[9] = { 0x1855, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_237)
{
    // 1F853 0021;	
    // (🡓) DOWNWARDS SANS-SERIF ARROW	[1856 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F853, 0x0021 };
    uint32_t const ces[9] = { 0x1856, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_238)
{
    // 1F853 003F;	
    // (🡓) DOWNWARDS SANS-SERIF ARROW	[1856 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F853, 0x003F };
    uint32_t const ces[9] = { 0x1856, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_239)
{
    // 1F853 0061;	
    // (🡓) DOWNWARDS SANS-SERIF ARROW	[1856 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F853, 0x0061 };
    uint32_t const ces[9] = { 0x1856, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_240)
{
    // 1F853 0041;	
    // (🡓) DOWNWARDS SANS-SERIF ARROW	[1856 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F853, 0x0041 };
    uint32_t const ces[9] = { 0x1856, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_241)
{
    // 1F853 0062;	
    // (🡓) DOWNWARDS SANS-SERIF ARROW	[1856 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F853, 0x0062 };
    uint32_t const ces[9] = { 0x1856, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_242)
{
    // 1F854 0021;	
    // (🡔) NORTH WEST SANS-SERIF ARROW	[1857 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F854, 0x0021 };
    uint32_t const ces[9] = { 0x1857, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_243)
{
    // 1F854 003F;	
    // (🡔) NORTH WEST SANS-SERIF ARROW	[1857 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F854, 0x003F };
    uint32_t const ces[9] = { 0x1857, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_244)
{
    // 1F854 0061;	
    // (🡔) NORTH WEST SANS-SERIF ARROW	[1857 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F854, 0x0061 };
    uint32_t const ces[9] = { 0x1857, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_245)
{
    // 1F854 0041;	
    // (🡔) NORTH WEST SANS-SERIF ARROW	[1857 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F854, 0x0041 };
    uint32_t const ces[9] = { 0x1857, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_246)
{
    // 1F854 0062;	
    // (🡔) NORTH WEST SANS-SERIF ARROW	[1857 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F854, 0x0062 };
    uint32_t const ces[9] = { 0x1857, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_247)
{
    // 1F855 0021;	
    // (🡕) NORTH EAST SANS-SERIF ARROW	[1858 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F855, 0x0021 };
    uint32_t const ces[9] = { 0x1858, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_248)
{
    // 1F855 003F;	
    // (🡕) NORTH EAST SANS-SERIF ARROW	[1858 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F855, 0x003F };
    uint32_t const ces[9] = { 0x1858, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_249)
{
    // 1F855 0061;	
    // (🡕) NORTH EAST SANS-SERIF ARROW	[1858 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F855, 0x0061 };
    uint32_t const ces[9] = { 0x1858, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_250)
{
    // 1F855 0041;	
    // (🡕) NORTH EAST SANS-SERIF ARROW	[1858 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F855, 0x0041 };
    uint32_t const ces[9] = { 0x1858, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_251)
{
    // 1F855 0062;	
    // (🡕) NORTH EAST SANS-SERIF ARROW	[1858 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F855, 0x0062 };
    uint32_t const ces[9] = { 0x1858, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_252)
{
    // 1F856 0021;	
    // (🡖) SOUTH EAST SANS-SERIF ARROW	[1859 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F856, 0x0021 };
    uint32_t const ces[9] = { 0x1859, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_253)
{
    // 1F856 003F;	
    // (🡖) SOUTH EAST SANS-SERIF ARROW	[1859 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F856, 0x003F };
    uint32_t const ces[9] = { 0x1859, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_254)
{
    // 1F856 0061;	
    // (🡖) SOUTH EAST SANS-SERIF ARROW	[1859 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F856, 0x0061 };
    uint32_t const ces[9] = { 0x1859, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_255)
{
    // 1F856 0041;	
    // (🡖) SOUTH EAST SANS-SERIF ARROW	[1859 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F856, 0x0041 };
    uint32_t const ces[9] = { 0x1859, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_256)
{
    // 1F856 0062;	
    // (🡖) SOUTH EAST SANS-SERIF ARROW	[1859 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F856, 0x0062 };
    uint32_t const ces[9] = { 0x1859, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_257)
{
    // 1F857 0021;	
    // (🡗) SOUTH WEST SANS-SERIF ARROW	[185A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F857, 0x0021 };
    uint32_t const ces[9] = { 0x185A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_258)
{
    // 1F857 003F;	
    // (🡗) SOUTH WEST SANS-SERIF ARROW	[185A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F857, 0x003F };
    uint32_t const ces[9] = { 0x185A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_259)
{
    // 1F857 0061;	
    // (🡗) SOUTH WEST SANS-SERIF ARROW	[185A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F857, 0x0061 };
    uint32_t const ces[9] = { 0x185A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_260)
{
    // 1F857 0041;	
    // (🡗) SOUTH WEST SANS-SERIF ARROW	[185A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F857, 0x0041 };
    uint32_t const ces[9] = { 0x185A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_261)
{
    // 1F857 0062;	
    // (🡗) SOUTH WEST SANS-SERIF ARROW	[185A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F857, 0x0062 };
    uint32_t const ces[9] = { 0x185A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_262)
{
    // 1F858 0021;	
    // (🡘) LEFT RIGHT SANS-SERIF ARROW	[185B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F858, 0x0021 };
    uint32_t const ces[9] = { 0x185B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_263)
{
    // 1F858 003F;	
    // (🡘) LEFT RIGHT SANS-SERIF ARROW	[185B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F858, 0x003F };
    uint32_t const ces[9] = { 0x185B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_264)
{
    // 1F858 0061;	
    // (🡘) LEFT RIGHT SANS-SERIF ARROW	[185B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F858, 0x0061 };
    uint32_t const ces[9] = { 0x185B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_265)
{
    // 1F858 0041;	
    // (🡘) LEFT RIGHT SANS-SERIF ARROW	[185B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F858, 0x0041 };
    uint32_t const ces[9] = { 0x185B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_266)
{
    // 1F858 0062;	
    // (🡘) LEFT RIGHT SANS-SERIF ARROW	[185B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F858, 0x0062 };
    uint32_t const ces[9] = { 0x185B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_267)
{
    // 1F859 0021;	
    // (🡙) UP DOWN SANS-SERIF ARROW	[185C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F859, 0x0021 };
    uint32_t const ces[9] = { 0x185C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_268)
{
    // 1F859 003F;	
    // (🡙) UP DOWN SANS-SERIF ARROW	[185C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F859, 0x003F };
    uint32_t const ces[9] = { 0x185C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_269)
{
    // 1F859 0061;	
    // (🡙) UP DOWN SANS-SERIF ARROW	[185C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F859, 0x0061 };
    uint32_t const ces[9] = { 0x185C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_270)
{
    // 1F859 0041;	
    // (🡙) UP DOWN SANS-SERIF ARROW	[185C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F859, 0x0041 };
    uint32_t const ces[9] = { 0x185C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_271)
{
    // 1F859 0062;	
    // (🡙) UP DOWN SANS-SERIF ARROW	[185C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F859, 0x0062 };
    uint32_t const ces[9] = { 0x185C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_272)
{
    // 1F860 0021;	
    // (🡠) WIDE-HEADED LEFTWARDS LIGHT BARB ARROW	[185D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F860, 0x0021 };
    uint32_t const ces[9] = { 0x185D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_273)
{
    // 1F860 003F;	
    // (🡠) WIDE-HEADED LEFTWARDS LIGHT BARB ARROW	[185D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F860, 0x003F };
    uint32_t const ces[9] = { 0x185D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_274)
{
    // 1F860 0061;	
    // (🡠) WIDE-HEADED LEFTWARDS LIGHT BARB ARROW	[185D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F860, 0x0061 };
    uint32_t const ces[9] = { 0x185D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_275)
{
    // 1F860 0041;	
    // (🡠) WIDE-HEADED LEFTWARDS LIGHT BARB ARROW	[185D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F860, 0x0041 };
    uint32_t const ces[9] = { 0x185D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_276)
{
    // 1F860 0062;	
    // (🡠) WIDE-HEADED LEFTWARDS LIGHT BARB ARROW	[185D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F860, 0x0062 };
    uint32_t const ces[9] = { 0x185D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_277)
{
    // 1F861 0021;	
    // (🡡) WIDE-HEADED UPWARDS LIGHT BARB ARROW	[185E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F861, 0x0021 };
    uint32_t const ces[9] = { 0x185E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_278)
{
    // 1F861 003F;	
    // (🡡) WIDE-HEADED UPWARDS LIGHT BARB ARROW	[185E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F861, 0x003F };
    uint32_t const ces[9] = { 0x185E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_279)
{
    // 1F861 0061;	
    // (🡡) WIDE-HEADED UPWARDS LIGHT BARB ARROW	[185E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F861, 0x0061 };
    uint32_t const ces[9] = { 0x185E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_280)
{
    // 1F861 0041;	
    // (🡡) WIDE-HEADED UPWARDS LIGHT BARB ARROW	[185E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F861, 0x0041 };
    uint32_t const ces[9] = { 0x185E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_281)
{
    // 1F861 0062;	
    // (🡡) WIDE-HEADED UPWARDS LIGHT BARB ARROW	[185E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F861, 0x0062 };
    uint32_t const ces[9] = { 0x185E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_282)
{
    // 1F862 0021;	
    // (🡢) WIDE-HEADED RIGHTWARDS LIGHT BARB ARROW	[185F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F862, 0x0021 };
    uint32_t const ces[9] = { 0x185F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_283)
{
    // 1F862 003F;	
    // (🡢) WIDE-HEADED RIGHTWARDS LIGHT BARB ARROW	[185F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F862, 0x003F };
    uint32_t const ces[9] = { 0x185F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_284)
{
    // 1F862 0061;	
    // (🡢) WIDE-HEADED RIGHTWARDS LIGHT BARB ARROW	[185F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F862, 0x0061 };
    uint32_t const ces[9] = { 0x185F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_285)
{
    // 1F862 0041;	
    // (🡢) WIDE-HEADED RIGHTWARDS LIGHT BARB ARROW	[185F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F862, 0x0041 };
    uint32_t const ces[9] = { 0x185F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_286)
{
    // 1F862 0062;	
    // (🡢) WIDE-HEADED RIGHTWARDS LIGHT BARB ARROW	[185F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F862, 0x0062 };
    uint32_t const ces[9] = { 0x185F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_287)
{
    // 1F863 0021;	
    // (🡣) WIDE-HEADED DOWNWARDS LIGHT BARB ARROW	[1860 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F863, 0x0021 };
    uint32_t const ces[9] = { 0x1860, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_288)
{
    // 1F863 003F;	
    // (🡣) WIDE-HEADED DOWNWARDS LIGHT BARB ARROW	[1860 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F863, 0x003F };
    uint32_t const ces[9] = { 0x1860, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_289)
{
    // 1F863 0061;	
    // (🡣) WIDE-HEADED DOWNWARDS LIGHT BARB ARROW	[1860 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F863, 0x0061 };
    uint32_t const ces[9] = { 0x1860, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_290)
{
    // 1F863 0041;	
    // (🡣) WIDE-HEADED DOWNWARDS LIGHT BARB ARROW	[1860 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F863, 0x0041 };
    uint32_t const ces[9] = { 0x1860, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_291)
{
    // 1F863 0062;	
    // (🡣) WIDE-HEADED DOWNWARDS LIGHT BARB ARROW	[1860 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F863, 0x0062 };
    uint32_t const ces[9] = { 0x1860, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_292)
{
    // 1F864 0021;	
    // (🡤) WIDE-HEADED NORTH WEST LIGHT BARB ARROW	[1861 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F864, 0x0021 };
    uint32_t const ces[9] = { 0x1861, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_293)
{
    // 1F864 003F;	
    // (🡤) WIDE-HEADED NORTH WEST LIGHT BARB ARROW	[1861 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F864, 0x003F };
    uint32_t const ces[9] = { 0x1861, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_294)
{
    // 1F864 0061;	
    // (🡤) WIDE-HEADED NORTH WEST LIGHT BARB ARROW	[1861 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F864, 0x0061 };
    uint32_t const ces[9] = { 0x1861, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_295)
{
    // 1F864 0041;	
    // (🡤) WIDE-HEADED NORTH WEST LIGHT BARB ARROW	[1861 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F864, 0x0041 };
    uint32_t const ces[9] = { 0x1861, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_296)
{
    // 1F864 0062;	
    // (🡤) WIDE-HEADED NORTH WEST LIGHT BARB ARROW	[1861 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F864, 0x0062 };
    uint32_t const ces[9] = { 0x1861, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_297)
{
    // 1F865 0021;	
    // (🡥) WIDE-HEADED NORTH EAST LIGHT BARB ARROW	[1862 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F865, 0x0021 };
    uint32_t const ces[9] = { 0x1862, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_298)
{
    // 1F865 003F;	
    // (🡥) WIDE-HEADED NORTH EAST LIGHT BARB ARROW	[1862 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F865, 0x003F };
    uint32_t const ces[9] = { 0x1862, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_299)
{
    // 1F865 0061;	
    // (🡥) WIDE-HEADED NORTH EAST LIGHT BARB ARROW	[1862 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F865, 0x0061 };
    uint32_t const ces[9] = { 0x1862, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_300)
{
    // 1F865 0041;	
    // (🡥) WIDE-HEADED NORTH EAST LIGHT BARB ARROW	[1862 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F865, 0x0041 };
    uint32_t const ces[9] = { 0x1862, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_301)
{
    // 1F865 0062;	
    // (🡥) WIDE-HEADED NORTH EAST LIGHT BARB ARROW	[1862 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F865, 0x0062 };
    uint32_t const ces[9] = { 0x1862, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_302)
{
    // 1F866 0021;	
    // (🡦) WIDE-HEADED SOUTH EAST LIGHT BARB ARROW	[1863 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F866, 0x0021 };
    uint32_t const ces[9] = { 0x1863, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_303)
{
    // 1F866 003F;	
    // (🡦) WIDE-HEADED SOUTH EAST LIGHT BARB ARROW	[1863 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F866, 0x003F };
    uint32_t const ces[9] = { 0x1863, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_304)
{
    // 1F866 0061;	
    // (🡦) WIDE-HEADED SOUTH EAST LIGHT BARB ARROW	[1863 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F866, 0x0061 };
    uint32_t const ces[9] = { 0x1863, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_305)
{
    // 1F866 0041;	
    // (🡦) WIDE-HEADED SOUTH EAST LIGHT BARB ARROW	[1863 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F866, 0x0041 };
    uint32_t const ces[9] = { 0x1863, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_306)
{
    // 1F866 0062;	
    // (🡦) WIDE-HEADED SOUTH EAST LIGHT BARB ARROW	[1863 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F866, 0x0062 };
    uint32_t const ces[9] = { 0x1863, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_307)
{
    // 1F867 0021;	
    // (🡧) WIDE-HEADED SOUTH WEST LIGHT BARB ARROW	[1864 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F867, 0x0021 };
    uint32_t const ces[9] = { 0x1864, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_308)
{
    // 1F867 003F;	
    // (🡧) WIDE-HEADED SOUTH WEST LIGHT BARB ARROW	[1864 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F867, 0x003F };
    uint32_t const ces[9] = { 0x1864, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_309)
{
    // 1F867 0061;	
    // (🡧) WIDE-HEADED SOUTH WEST LIGHT BARB ARROW	[1864 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F867, 0x0061 };
    uint32_t const ces[9] = { 0x1864, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_310)
{
    // 1F867 0041;	
    // (🡧) WIDE-HEADED SOUTH WEST LIGHT BARB ARROW	[1864 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F867, 0x0041 };
    uint32_t const ces[9] = { 0x1864, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_311)
{
    // 1F867 0062;	
    // (🡧) WIDE-HEADED SOUTH WEST LIGHT BARB ARROW	[1864 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F867, 0x0062 };
    uint32_t const ces[9] = { 0x1864, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_312)
{
    // 1F868 0021;	
    // (🡨) WIDE-HEADED LEFTWARDS BARB ARROW	[1865 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F868, 0x0021 };
    uint32_t const ces[9] = { 0x1865, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_313)
{
    // 1F868 003F;	
    // (🡨) WIDE-HEADED LEFTWARDS BARB ARROW	[1865 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F868, 0x003F };
    uint32_t const ces[9] = { 0x1865, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_314)
{
    // 1F868 0061;	
    // (🡨) WIDE-HEADED LEFTWARDS BARB ARROW	[1865 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F868, 0x0061 };
    uint32_t const ces[9] = { 0x1865, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_315)
{
    // 1F868 0041;	
    // (🡨) WIDE-HEADED LEFTWARDS BARB ARROW	[1865 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F868, 0x0041 };
    uint32_t const ces[9] = { 0x1865, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_316)
{
    // 1F868 0062;	
    // (🡨) WIDE-HEADED LEFTWARDS BARB ARROW	[1865 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F868, 0x0062 };
    uint32_t const ces[9] = { 0x1865, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_317)
{
    // 1F869 0021;	
    // (🡩) WIDE-HEADED UPWARDS BARB ARROW	[1866 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F869, 0x0021 };
    uint32_t const ces[9] = { 0x1866, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_318)
{
    // 1F869 003F;	
    // (🡩) WIDE-HEADED UPWARDS BARB ARROW	[1866 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F869, 0x003F };
    uint32_t const ces[9] = { 0x1866, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_319)
{
    // 1F869 0061;	
    // (🡩) WIDE-HEADED UPWARDS BARB ARROW	[1866 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F869, 0x0061 };
    uint32_t const ces[9] = { 0x1866, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_320)
{
    // 1F869 0041;	
    // (🡩) WIDE-HEADED UPWARDS BARB ARROW	[1866 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F869, 0x0041 };
    uint32_t const ces[9] = { 0x1866, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_321)
{
    // 1F869 0062;	
    // (🡩) WIDE-HEADED UPWARDS BARB ARROW	[1866 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F869, 0x0062 };
    uint32_t const ces[9] = { 0x1866, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_322)
{
    // 1F86A 0021;	
    // (🡪) WIDE-HEADED RIGHTWARDS BARB ARROW	[1867 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F86A, 0x0021 };
    uint32_t const ces[9] = { 0x1867, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_323)
{
    // 1F86A 003F;	
    // (🡪) WIDE-HEADED RIGHTWARDS BARB ARROW	[1867 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F86A, 0x003F };
    uint32_t const ces[9] = { 0x1867, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_324)
{
    // 1F86A 0061;	
    // (🡪) WIDE-HEADED RIGHTWARDS BARB ARROW	[1867 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F86A, 0x0061 };
    uint32_t const ces[9] = { 0x1867, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_325)
{
    // 1F86A 0041;	
    // (🡪) WIDE-HEADED RIGHTWARDS BARB ARROW	[1867 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F86A, 0x0041 };
    uint32_t const ces[9] = { 0x1867, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_326)
{
    // 1F86A 0062;	
    // (🡪) WIDE-HEADED RIGHTWARDS BARB ARROW	[1867 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F86A, 0x0062 };
    uint32_t const ces[9] = { 0x1867, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_327)
{
    // 1F86B 0021;	
    // (🡫) WIDE-HEADED DOWNWARDS BARB ARROW	[1868 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F86B, 0x0021 };
    uint32_t const ces[9] = { 0x1868, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_328)
{
    // 1F86B 003F;	
    // (🡫) WIDE-HEADED DOWNWARDS BARB ARROW	[1868 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F86B, 0x003F };
    uint32_t const ces[9] = { 0x1868, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_329)
{
    // 1F86B 0061;	
    // (🡫) WIDE-HEADED DOWNWARDS BARB ARROW	[1868 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F86B, 0x0061 };
    uint32_t const ces[9] = { 0x1868, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_330)
{
    // 1F86B 0041;	
    // (🡫) WIDE-HEADED DOWNWARDS BARB ARROW	[1868 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F86B, 0x0041 };
    uint32_t const ces[9] = { 0x1868, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_331)
{
    // 1F86B 0062;	
    // (🡫) WIDE-HEADED DOWNWARDS BARB ARROW	[1868 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F86B, 0x0062 };
    uint32_t const ces[9] = { 0x1868, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_332)
{
    // 1F86C 0021;	
    // (🡬) WIDE-HEADED NORTH WEST BARB ARROW	[1869 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F86C, 0x0021 };
    uint32_t const ces[9] = { 0x1869, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_333)
{
    // 1F86C 003F;	
    // (🡬) WIDE-HEADED NORTH WEST BARB ARROW	[1869 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F86C, 0x003F };
    uint32_t const ces[9] = { 0x1869, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_334)
{
    // 1F86C 0061;	
    // (🡬) WIDE-HEADED NORTH WEST BARB ARROW	[1869 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F86C, 0x0061 };
    uint32_t const ces[9] = { 0x1869, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_335)
{
    // 1F86C 0041;	
    // (🡬) WIDE-HEADED NORTH WEST BARB ARROW	[1869 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F86C, 0x0041 };
    uint32_t const ces[9] = { 0x1869, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_336)
{
    // 1F86C 0062;	
    // (🡬) WIDE-HEADED NORTH WEST BARB ARROW	[1869 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F86C, 0x0062 };
    uint32_t const ces[9] = { 0x1869, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_337)
{
    // 1F86D 0021;	
    // (🡭) WIDE-HEADED NORTH EAST BARB ARROW	[186A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F86D, 0x0021 };
    uint32_t const ces[9] = { 0x186A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_338)
{
    // 1F86D 003F;	
    // (🡭) WIDE-HEADED NORTH EAST BARB ARROW	[186A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F86D, 0x003F };
    uint32_t const ces[9] = { 0x186A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_339)
{
    // 1F86D 0061;	
    // (🡭) WIDE-HEADED NORTH EAST BARB ARROW	[186A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F86D, 0x0061 };
    uint32_t const ces[9] = { 0x186A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_340)
{
    // 1F86D 0041;	
    // (🡭) WIDE-HEADED NORTH EAST BARB ARROW	[186A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F86D, 0x0041 };
    uint32_t const ces[9] = { 0x186A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_341)
{
    // 1F86D 0062;	
    // (🡭) WIDE-HEADED NORTH EAST BARB ARROW	[186A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F86D, 0x0062 };
    uint32_t const ces[9] = { 0x186A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_342)
{
    // 1F86E 0021;	
    // (🡮) WIDE-HEADED SOUTH EAST BARB ARROW	[186B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F86E, 0x0021 };
    uint32_t const ces[9] = { 0x186B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_343)
{
    // 1F86E 003F;	
    // (🡮) WIDE-HEADED SOUTH EAST BARB ARROW	[186B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F86E, 0x003F };
    uint32_t const ces[9] = { 0x186B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_344)
{
    // 1F86E 0061;	
    // (🡮) WIDE-HEADED SOUTH EAST BARB ARROW	[186B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F86E, 0x0061 };
    uint32_t const ces[9] = { 0x186B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_345)
{
    // 1F86E 0041;	
    // (🡮) WIDE-HEADED SOUTH EAST BARB ARROW	[186B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F86E, 0x0041 };
    uint32_t const ces[9] = { 0x186B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_346)
{
    // 1F86E 0062;	
    // (🡮) WIDE-HEADED SOUTH EAST BARB ARROW	[186B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F86E, 0x0062 };
    uint32_t const ces[9] = { 0x186B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_347)
{
    // 1F86F 0021;	
    // (🡯) WIDE-HEADED SOUTH WEST BARB ARROW	[186C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F86F, 0x0021 };
    uint32_t const ces[9] = { 0x186C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_348)
{
    // 1F86F 003F;	
    // (🡯) WIDE-HEADED SOUTH WEST BARB ARROW	[186C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F86F, 0x003F };
    uint32_t const ces[9] = { 0x186C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_349)
{
    // 1F86F 0061;	
    // (🡯) WIDE-HEADED SOUTH WEST BARB ARROW	[186C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F86F, 0x0061 };
    uint32_t const ces[9] = { 0x186C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_350)
{
    // 1F86F 0041;	
    // (🡯) WIDE-HEADED SOUTH WEST BARB ARROW	[186C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F86F, 0x0041 };
    uint32_t const ces[9] = { 0x186C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_351)
{
    // 1F86F 0062;	
    // (🡯) WIDE-HEADED SOUTH WEST BARB ARROW	[186C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F86F, 0x0062 };
    uint32_t const ces[9] = { 0x186C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_352)
{
    // 1F870 0021;	
    // (🡰) WIDE-HEADED LEFTWARDS MEDIUM BARB ARROW	[186D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F870, 0x0021 };
    uint32_t const ces[9] = { 0x186D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_353)
{
    // 1F870 003F;	
    // (🡰) WIDE-HEADED LEFTWARDS MEDIUM BARB ARROW	[186D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F870, 0x003F };
    uint32_t const ces[9] = { 0x186D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_354)
{
    // 1F870 0061;	
    // (🡰) WIDE-HEADED LEFTWARDS MEDIUM BARB ARROW	[186D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F870, 0x0061 };
    uint32_t const ces[9] = { 0x186D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_355)
{
    // 1F870 0041;	
    // (🡰) WIDE-HEADED LEFTWARDS MEDIUM BARB ARROW	[186D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F870, 0x0041 };
    uint32_t const ces[9] = { 0x186D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_356)
{
    // 1F870 0062;	
    // (🡰) WIDE-HEADED LEFTWARDS MEDIUM BARB ARROW	[186D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F870, 0x0062 };
    uint32_t const ces[9] = { 0x186D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_357)
{
    // 1F871 0021;	
    // (🡱) WIDE-HEADED UPWARDS MEDIUM BARB ARROW	[186E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F871, 0x0021 };
    uint32_t const ces[9] = { 0x186E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_358)
{
    // 1F871 003F;	
    // (🡱) WIDE-HEADED UPWARDS MEDIUM BARB ARROW	[186E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F871, 0x003F };
    uint32_t const ces[9] = { 0x186E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_359)
{
    // 1F871 0061;	
    // (🡱) WIDE-HEADED UPWARDS MEDIUM BARB ARROW	[186E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F871, 0x0061 };
    uint32_t const ces[9] = { 0x186E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_360)
{
    // 1F871 0041;	
    // (🡱) WIDE-HEADED UPWARDS MEDIUM BARB ARROW	[186E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F871, 0x0041 };
    uint32_t const ces[9] = { 0x186E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_361)
{
    // 1F871 0062;	
    // (🡱) WIDE-HEADED UPWARDS MEDIUM BARB ARROW	[186E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F871, 0x0062 };
    uint32_t const ces[9] = { 0x186E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_362)
{
    // 1F872 0021;	
    // (🡲) WIDE-HEADED RIGHTWARDS MEDIUM BARB ARROW	[186F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F872, 0x0021 };
    uint32_t const ces[9] = { 0x186F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_363)
{
    // 1F872 003F;	
    // (🡲) WIDE-HEADED RIGHTWARDS MEDIUM BARB ARROW	[186F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F872, 0x003F };
    uint32_t const ces[9] = { 0x186F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_364)
{
    // 1F872 0061;	
    // (🡲) WIDE-HEADED RIGHTWARDS MEDIUM BARB ARROW	[186F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F872, 0x0061 };
    uint32_t const ces[9] = { 0x186F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_365)
{
    // 1F872 0041;	
    // (🡲) WIDE-HEADED RIGHTWARDS MEDIUM BARB ARROW	[186F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F872, 0x0041 };
    uint32_t const ces[9] = { 0x186F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_366)
{
    // 1F872 0062;	
    // (🡲) WIDE-HEADED RIGHTWARDS MEDIUM BARB ARROW	[186F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F872, 0x0062 };
    uint32_t const ces[9] = { 0x186F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_367)
{
    // 1F873 0021;	
    // (🡳) WIDE-HEADED DOWNWARDS MEDIUM BARB ARROW	[1870 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F873, 0x0021 };
    uint32_t const ces[9] = { 0x1870, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_368)
{
    // 1F873 003F;	
    // (🡳) WIDE-HEADED DOWNWARDS MEDIUM BARB ARROW	[1870 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F873, 0x003F };
    uint32_t const ces[9] = { 0x1870, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_369)
{
    // 1F873 0061;	
    // (🡳) WIDE-HEADED DOWNWARDS MEDIUM BARB ARROW	[1870 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F873, 0x0061 };
    uint32_t const ces[9] = { 0x1870, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_370)
{
    // 1F873 0041;	
    // (🡳) WIDE-HEADED DOWNWARDS MEDIUM BARB ARROW	[1870 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F873, 0x0041 };
    uint32_t const ces[9] = { 0x1870, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_371)
{
    // 1F873 0062;	
    // (🡳) WIDE-HEADED DOWNWARDS MEDIUM BARB ARROW	[1870 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F873, 0x0062 };
    uint32_t const ces[9] = { 0x1870, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_372)
{
    // 1F874 0021;	
    // (🡴) WIDE-HEADED NORTH WEST MEDIUM BARB ARROW	[1871 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F874, 0x0021 };
    uint32_t const ces[9] = { 0x1871, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_373)
{
    // 1F874 003F;	
    // (🡴) WIDE-HEADED NORTH WEST MEDIUM BARB ARROW	[1871 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F874, 0x003F };
    uint32_t const ces[9] = { 0x1871, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_374)
{
    // 1F874 0061;	
    // (🡴) WIDE-HEADED NORTH WEST MEDIUM BARB ARROW	[1871 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F874, 0x0061 };
    uint32_t const ces[9] = { 0x1871, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_375)
{
    // 1F874 0041;	
    // (🡴) WIDE-HEADED NORTH WEST MEDIUM BARB ARROW	[1871 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F874, 0x0041 };
    uint32_t const ces[9] = { 0x1871, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_376)
{
    // 1F874 0062;	
    // (🡴) WIDE-HEADED NORTH WEST MEDIUM BARB ARROW	[1871 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F874, 0x0062 };
    uint32_t const ces[9] = { 0x1871, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_377)
{
    // 1F875 0021;	
    // (🡵) WIDE-HEADED NORTH EAST MEDIUM BARB ARROW	[1872 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F875, 0x0021 };
    uint32_t const ces[9] = { 0x1872, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_378)
{
    // 1F875 003F;	
    // (🡵) WIDE-HEADED NORTH EAST MEDIUM BARB ARROW	[1872 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F875, 0x003F };
    uint32_t const ces[9] = { 0x1872, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_379)
{
    // 1F875 0061;	
    // (🡵) WIDE-HEADED NORTH EAST MEDIUM BARB ARROW	[1872 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F875, 0x0061 };
    uint32_t const ces[9] = { 0x1872, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_380)
{
    // 1F875 0041;	
    // (🡵) WIDE-HEADED NORTH EAST MEDIUM BARB ARROW	[1872 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F875, 0x0041 };
    uint32_t const ces[9] = { 0x1872, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_381)
{
    // 1F875 0062;	
    // (🡵) WIDE-HEADED NORTH EAST MEDIUM BARB ARROW	[1872 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F875, 0x0062 };
    uint32_t const ces[9] = { 0x1872, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_382)
{
    // 1F876 0021;	
    // (🡶) WIDE-HEADED SOUTH EAST MEDIUM BARB ARROW	[1873 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F876, 0x0021 };
    uint32_t const ces[9] = { 0x1873, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_383)
{
    // 1F876 003F;	
    // (🡶) WIDE-HEADED SOUTH EAST MEDIUM BARB ARROW	[1873 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F876, 0x003F };
    uint32_t const ces[9] = { 0x1873, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_384)
{
    // 1F876 0061;	
    // (🡶) WIDE-HEADED SOUTH EAST MEDIUM BARB ARROW	[1873 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F876, 0x0061 };
    uint32_t const ces[9] = { 0x1873, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_385)
{
    // 1F876 0041;	
    // (🡶) WIDE-HEADED SOUTH EAST MEDIUM BARB ARROW	[1873 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F876, 0x0041 };
    uint32_t const ces[9] = { 0x1873, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_386)
{
    // 1F876 0062;	
    // (🡶) WIDE-HEADED SOUTH EAST MEDIUM BARB ARROW	[1873 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F876, 0x0062 };
    uint32_t const ces[9] = { 0x1873, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_387)
{
    // 1F877 0021;	
    // (🡷) WIDE-HEADED SOUTH WEST MEDIUM BARB ARROW	[1874 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F877, 0x0021 };
    uint32_t const ces[9] = { 0x1874, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_388)
{
    // 1F877 003F;	
    // (🡷) WIDE-HEADED SOUTH WEST MEDIUM BARB ARROW	[1874 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F877, 0x003F };
    uint32_t const ces[9] = { 0x1874, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_389)
{
    // 1F877 0061;	
    // (🡷) WIDE-HEADED SOUTH WEST MEDIUM BARB ARROW	[1874 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F877, 0x0061 };
    uint32_t const ces[9] = { 0x1874, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_390)
{
    // 1F877 0041;	
    // (🡷) WIDE-HEADED SOUTH WEST MEDIUM BARB ARROW	[1874 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F877, 0x0041 };
    uint32_t const ces[9] = { 0x1874, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_391)
{
    // 1F877 0062;	
    // (🡷) WIDE-HEADED SOUTH WEST MEDIUM BARB ARROW	[1874 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F877, 0x0062 };
    uint32_t const ces[9] = { 0x1874, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_392)
{
    // 1F878 0021;	
    // (🡸) WIDE-HEADED LEFTWARDS HEAVY BARB ARROW	[1875 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F878, 0x0021 };
    uint32_t const ces[9] = { 0x1875, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_393)
{
    // 1F878 003F;	
    // (🡸) WIDE-HEADED LEFTWARDS HEAVY BARB ARROW	[1875 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F878, 0x003F };
    uint32_t const ces[9] = { 0x1875, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_394)
{
    // 1F878 0061;	
    // (🡸) WIDE-HEADED LEFTWARDS HEAVY BARB ARROW	[1875 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F878, 0x0061 };
    uint32_t const ces[9] = { 0x1875, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_395)
{
    // 1F878 0041;	
    // (🡸) WIDE-HEADED LEFTWARDS HEAVY BARB ARROW	[1875 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F878, 0x0041 };
    uint32_t const ces[9] = { 0x1875, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_396)
{
    // 1F878 0062;	
    // (🡸) WIDE-HEADED LEFTWARDS HEAVY BARB ARROW	[1875 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F878, 0x0062 };
    uint32_t const ces[9] = { 0x1875, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_397)
{
    // 1F879 0021;	
    // (🡹) WIDE-HEADED UPWARDS HEAVY BARB ARROW	[1876 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F879, 0x0021 };
    uint32_t const ces[9] = { 0x1876, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_398)
{
    // 1F879 003F;	
    // (🡹) WIDE-HEADED UPWARDS HEAVY BARB ARROW	[1876 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F879, 0x003F };
    uint32_t const ces[9] = { 0x1876, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_399)
{
    // 1F879 0061;	
    // (🡹) WIDE-HEADED UPWARDS HEAVY BARB ARROW	[1876 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F879, 0x0061 };
    uint32_t const ces[9] = { 0x1876, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_400)
{
    // 1F879 0041;	
    // (🡹) WIDE-HEADED UPWARDS HEAVY BARB ARROW	[1876 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F879, 0x0041 };
    uint32_t const ces[9] = { 0x1876, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_401)
{
    // 1F879 0062;	
    // (🡹) WIDE-HEADED UPWARDS HEAVY BARB ARROW	[1876 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F879, 0x0062 };
    uint32_t const ces[9] = { 0x1876, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_402)
{
    // 1F87A 0021;	
    // (🡺) WIDE-HEADED RIGHTWARDS HEAVY BARB ARROW	[1877 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F87A, 0x0021 };
    uint32_t const ces[9] = { 0x1877, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_403)
{
    // 1F87A 003F;	
    // (🡺) WIDE-HEADED RIGHTWARDS HEAVY BARB ARROW	[1877 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F87A, 0x003F };
    uint32_t const ces[9] = { 0x1877, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_404)
{
    // 1F87A 0061;	
    // (🡺) WIDE-HEADED RIGHTWARDS HEAVY BARB ARROW	[1877 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F87A, 0x0061 };
    uint32_t const ces[9] = { 0x1877, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_405)
{
    // 1F87A 0041;	
    // (🡺) WIDE-HEADED RIGHTWARDS HEAVY BARB ARROW	[1877 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F87A, 0x0041 };
    uint32_t const ces[9] = { 0x1877, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_406)
{
    // 1F87A 0062;	
    // (🡺) WIDE-HEADED RIGHTWARDS HEAVY BARB ARROW	[1877 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F87A, 0x0062 };
    uint32_t const ces[9] = { 0x1877, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_407)
{
    // 1F87B 0021;	
    // (🡻) WIDE-HEADED DOWNWARDS HEAVY BARB ARROW	[1878 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F87B, 0x0021 };
    uint32_t const ces[9] = { 0x1878, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_408)
{
    // 1F87B 003F;	
    // (🡻) WIDE-HEADED DOWNWARDS HEAVY BARB ARROW	[1878 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F87B, 0x003F };
    uint32_t const ces[9] = { 0x1878, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_409)
{
    // 1F87B 0061;	
    // (🡻) WIDE-HEADED DOWNWARDS HEAVY BARB ARROW	[1878 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F87B, 0x0061 };
    uint32_t const ces[9] = { 0x1878, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_410)
{
    // 1F87B 0041;	
    // (🡻) WIDE-HEADED DOWNWARDS HEAVY BARB ARROW	[1878 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F87B, 0x0041 };
    uint32_t const ces[9] = { 0x1878, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_411)
{
    // 1F87B 0062;	
    // (🡻) WIDE-HEADED DOWNWARDS HEAVY BARB ARROW	[1878 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F87B, 0x0062 };
    uint32_t const ces[9] = { 0x1878, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_412)
{
    // 1F87C 0021;	
    // (🡼) WIDE-HEADED NORTH WEST HEAVY BARB ARROW	[1879 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F87C, 0x0021 };
    uint32_t const ces[9] = { 0x1879, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_413)
{
    // 1F87C 003F;	
    // (🡼) WIDE-HEADED NORTH WEST HEAVY BARB ARROW	[1879 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F87C, 0x003F };
    uint32_t const ces[9] = { 0x1879, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_414)
{
    // 1F87C 0061;	
    // (🡼) WIDE-HEADED NORTH WEST HEAVY BARB ARROW	[1879 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F87C, 0x0061 };
    uint32_t const ces[9] = { 0x1879, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_415)
{
    // 1F87C 0041;	
    // (🡼) WIDE-HEADED NORTH WEST HEAVY BARB ARROW	[1879 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F87C, 0x0041 };
    uint32_t const ces[9] = { 0x1879, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_416)
{
    // 1F87C 0062;	
    // (🡼) WIDE-HEADED NORTH WEST HEAVY BARB ARROW	[1879 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F87C, 0x0062 };
    uint32_t const ces[9] = { 0x1879, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_417)
{
    // 1F87D 0021;	
    // (🡽) WIDE-HEADED NORTH EAST HEAVY BARB ARROW	[187A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F87D, 0x0021 };
    uint32_t const ces[9] = { 0x187A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_418)
{
    // 1F87D 003F;	
    // (🡽) WIDE-HEADED NORTH EAST HEAVY BARB ARROW	[187A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F87D, 0x003F };
    uint32_t const ces[9] = { 0x187A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_419)
{
    // 1F87D 0061;	
    // (🡽) WIDE-HEADED NORTH EAST HEAVY BARB ARROW	[187A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F87D, 0x0061 };
    uint32_t const ces[9] = { 0x187A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_420)
{
    // 1F87D 0041;	
    // (🡽) WIDE-HEADED NORTH EAST HEAVY BARB ARROW	[187A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F87D, 0x0041 };
    uint32_t const ces[9] = { 0x187A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_421)
{
    // 1F87D 0062;	
    // (🡽) WIDE-HEADED NORTH EAST HEAVY BARB ARROW	[187A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F87D, 0x0062 };
    uint32_t const ces[9] = { 0x187A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_422)
{
    // 1F87E 0021;	
    // (🡾) WIDE-HEADED SOUTH EAST HEAVY BARB ARROW	[187B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F87E, 0x0021 };
    uint32_t const ces[9] = { 0x187B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_423)
{
    // 1F87E 003F;	
    // (🡾) WIDE-HEADED SOUTH EAST HEAVY BARB ARROW	[187B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F87E, 0x003F };
    uint32_t const ces[9] = { 0x187B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_424)
{
    // 1F87E 0061;	
    // (🡾) WIDE-HEADED SOUTH EAST HEAVY BARB ARROW	[187B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F87E, 0x0061 };
    uint32_t const ces[9] = { 0x187B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_425)
{
    // 1F87E 0041;	
    // (🡾) WIDE-HEADED SOUTH EAST HEAVY BARB ARROW	[187B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F87E, 0x0041 };
    uint32_t const ces[9] = { 0x187B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_426)
{
    // 1F87E 0062;	
    // (🡾) WIDE-HEADED SOUTH EAST HEAVY BARB ARROW	[187B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F87E, 0x0062 };
    uint32_t const ces[9] = { 0x187B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_427)
{
    // 1F87F 0021;	
    // (🡿) WIDE-HEADED SOUTH WEST HEAVY BARB ARROW	[187C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F87F, 0x0021 };
    uint32_t const ces[9] = { 0x187C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_428)
{
    // 1F87F 003F;	
    // (🡿) WIDE-HEADED SOUTH WEST HEAVY BARB ARROW	[187C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F87F, 0x003F };
    uint32_t const ces[9] = { 0x187C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_429)
{
    // 1F87F 0061;	
    // (🡿) WIDE-HEADED SOUTH WEST HEAVY BARB ARROW	[187C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F87F, 0x0061 };
    uint32_t const ces[9] = { 0x187C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_430)
{
    // 1F87F 0041;	
    // (🡿) WIDE-HEADED SOUTH WEST HEAVY BARB ARROW	[187C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F87F, 0x0041 };
    uint32_t const ces[9] = { 0x187C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_431)
{
    // 1F87F 0062;	
    // (🡿) WIDE-HEADED SOUTH WEST HEAVY BARB ARROW	[187C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F87F, 0x0062 };
    uint32_t const ces[9] = { 0x187C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_432)
{
    // 1F880 0021;	
    // (🢀) WIDE-HEADED LEFTWARDS VERY HEAVY BARB ARROW	[187D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F880, 0x0021 };
    uint32_t const ces[9] = { 0x187D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_433)
{
    // 1F880 003F;	
    // (🢀) WIDE-HEADED LEFTWARDS VERY HEAVY BARB ARROW	[187D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F880, 0x003F };
    uint32_t const ces[9] = { 0x187D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_434)
{
    // 1F880 0061;	
    // (🢀) WIDE-HEADED LEFTWARDS VERY HEAVY BARB ARROW	[187D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F880, 0x0061 };
    uint32_t const ces[9] = { 0x187D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_435)
{
    // 1F880 0041;	
    // (🢀) WIDE-HEADED LEFTWARDS VERY HEAVY BARB ARROW	[187D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F880, 0x0041 };
    uint32_t const ces[9] = { 0x187D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_436)
{
    // 1F880 0062;	
    // (🢀) WIDE-HEADED LEFTWARDS VERY HEAVY BARB ARROW	[187D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F880, 0x0062 };
    uint32_t const ces[9] = { 0x187D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_437)
{
    // 1F881 0021;	
    // (🢁) WIDE-HEADED UPWARDS VERY HEAVY BARB ARROW	[187E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F881, 0x0021 };
    uint32_t const ces[9] = { 0x187E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_438)
{
    // 1F881 003F;	
    // (🢁) WIDE-HEADED UPWARDS VERY HEAVY BARB ARROW	[187E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F881, 0x003F };
    uint32_t const ces[9] = { 0x187E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_439)
{
    // 1F881 0061;	
    // (🢁) WIDE-HEADED UPWARDS VERY HEAVY BARB ARROW	[187E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F881, 0x0061 };
    uint32_t const ces[9] = { 0x187E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_440)
{
    // 1F881 0041;	
    // (🢁) WIDE-HEADED UPWARDS VERY HEAVY BARB ARROW	[187E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F881, 0x0041 };
    uint32_t const ces[9] = { 0x187E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_441)
{
    // 1F881 0062;	
    // (🢁) WIDE-HEADED UPWARDS VERY HEAVY BARB ARROW	[187E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F881, 0x0062 };
    uint32_t const ces[9] = { 0x187E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_442)
{
    // 1F882 0021;	
    // (🢂) WIDE-HEADED RIGHTWARDS VERY HEAVY BARB ARROW	[187F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F882, 0x0021 };
    uint32_t const ces[9] = { 0x187F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_443)
{
    // 1F882 003F;	
    // (🢂) WIDE-HEADED RIGHTWARDS VERY HEAVY BARB ARROW	[187F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F882, 0x003F };
    uint32_t const ces[9] = { 0x187F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_444)
{
    // 1F882 0061;	
    // (🢂) WIDE-HEADED RIGHTWARDS VERY HEAVY BARB ARROW	[187F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F882, 0x0061 };
    uint32_t const ces[9] = { 0x187F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_445)
{
    // 1F882 0041;	
    // (🢂) WIDE-HEADED RIGHTWARDS VERY HEAVY BARB ARROW	[187F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F882, 0x0041 };
    uint32_t const ces[9] = { 0x187F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_446)
{
    // 1F882 0062;	
    // (🢂) WIDE-HEADED RIGHTWARDS VERY HEAVY BARB ARROW	[187F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F882, 0x0062 };
    uint32_t const ces[9] = { 0x187F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_447)
{
    // 1F883 0021;	
    // (🢃) WIDE-HEADED DOWNWARDS VERY HEAVY BARB ARROW	[1880 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F883, 0x0021 };
    uint32_t const ces[9] = { 0x1880, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_448)
{
    // 1F883 003F;	
    // (🢃) WIDE-HEADED DOWNWARDS VERY HEAVY BARB ARROW	[1880 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F883, 0x003F };
    uint32_t const ces[9] = { 0x1880, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_449)
{
    // 1F883 0061;	
    // (🢃) WIDE-HEADED DOWNWARDS VERY HEAVY BARB ARROW	[1880 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F883, 0x0061 };
    uint32_t const ces[9] = { 0x1880, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_450)
{
    // 1F883 0041;	
    // (🢃) WIDE-HEADED DOWNWARDS VERY HEAVY BARB ARROW	[1880 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F883, 0x0041 };
    uint32_t const ces[9] = { 0x1880, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_451)
{
    // 1F883 0062;	
    // (🢃) WIDE-HEADED DOWNWARDS VERY HEAVY BARB ARROW	[1880 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F883, 0x0062 };
    uint32_t const ces[9] = { 0x1880, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_452)
{
    // 1F884 0021;	
    // (🢄) WIDE-HEADED NORTH WEST VERY HEAVY BARB ARROW	[1881 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F884, 0x0021 };
    uint32_t const ces[9] = { 0x1881, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_453)
{
    // 1F884 003F;	
    // (🢄) WIDE-HEADED NORTH WEST VERY HEAVY BARB ARROW	[1881 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F884, 0x003F };
    uint32_t const ces[9] = { 0x1881, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_454)
{
    // 1F884 0061;	
    // (🢄) WIDE-HEADED NORTH WEST VERY HEAVY BARB ARROW	[1881 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F884, 0x0061 };
    uint32_t const ces[9] = { 0x1881, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_455)
{
    // 1F884 0041;	
    // (🢄) WIDE-HEADED NORTH WEST VERY HEAVY BARB ARROW	[1881 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F884, 0x0041 };
    uint32_t const ces[9] = { 0x1881, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_456)
{
    // 1F884 0062;	
    // (🢄) WIDE-HEADED NORTH WEST VERY HEAVY BARB ARROW	[1881 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F884, 0x0062 };
    uint32_t const ces[9] = { 0x1881, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_457)
{
    // 1F885 0021;	
    // (🢅) WIDE-HEADED NORTH EAST VERY HEAVY BARB ARROW	[1882 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F885, 0x0021 };
    uint32_t const ces[9] = { 0x1882, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_458)
{
    // 1F885 003F;	
    // (🢅) WIDE-HEADED NORTH EAST VERY HEAVY BARB ARROW	[1882 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F885, 0x003F };
    uint32_t const ces[9] = { 0x1882, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_459)
{
    // 1F885 0061;	
    // (🢅) WIDE-HEADED NORTH EAST VERY HEAVY BARB ARROW	[1882 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F885, 0x0061 };
    uint32_t const ces[9] = { 0x1882, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_460)
{
    // 1F885 0041;	
    // (🢅) WIDE-HEADED NORTH EAST VERY HEAVY BARB ARROW	[1882 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F885, 0x0041 };
    uint32_t const ces[9] = { 0x1882, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_461)
{
    // 1F885 0062;	
    // (🢅) WIDE-HEADED NORTH EAST VERY HEAVY BARB ARROW	[1882 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F885, 0x0062 };
    uint32_t const ces[9] = { 0x1882, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_462)
{
    // 1F886 0021;	
    // (🢆) WIDE-HEADED SOUTH EAST VERY HEAVY BARB ARROW	[1883 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F886, 0x0021 };
    uint32_t const ces[9] = { 0x1883, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_463)
{
    // 1F886 003F;	
    // (🢆) WIDE-HEADED SOUTH EAST VERY HEAVY BARB ARROW	[1883 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F886, 0x003F };
    uint32_t const ces[9] = { 0x1883, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_464)
{
    // 1F886 0061;	
    // (🢆) WIDE-HEADED SOUTH EAST VERY HEAVY BARB ARROW	[1883 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F886, 0x0061 };
    uint32_t const ces[9] = { 0x1883, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_465)
{
    // 1F886 0041;	
    // (🢆) WIDE-HEADED SOUTH EAST VERY HEAVY BARB ARROW	[1883 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F886, 0x0041 };
    uint32_t const ces[9] = { 0x1883, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_466)
{
    // 1F886 0062;	
    // (🢆) WIDE-HEADED SOUTH EAST VERY HEAVY BARB ARROW	[1883 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F886, 0x0062 };
    uint32_t const ces[9] = { 0x1883, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_467)
{
    // 1F887 0021;	
    // (🢇) WIDE-HEADED SOUTH WEST VERY HEAVY BARB ARROW	[1884 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F887, 0x0021 };
    uint32_t const ces[9] = { 0x1884, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_468)
{
    // 1F887 003F;	
    // (🢇) WIDE-HEADED SOUTH WEST VERY HEAVY BARB ARROW	[1884 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F887, 0x003F };
    uint32_t const ces[9] = { 0x1884, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_469)
{
    // 1F887 0061;	
    // (🢇) WIDE-HEADED SOUTH WEST VERY HEAVY BARB ARROW	[1884 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F887, 0x0061 };
    uint32_t const ces[9] = { 0x1884, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_470)
{
    // 1F887 0041;	
    // (🢇) WIDE-HEADED SOUTH WEST VERY HEAVY BARB ARROW	[1884 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F887, 0x0041 };
    uint32_t const ces[9] = { 0x1884, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_471)
{
    // 1F887 0062;	
    // (🢇) WIDE-HEADED SOUTH WEST VERY HEAVY BARB ARROW	[1884 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F887, 0x0062 };
    uint32_t const ces[9] = { 0x1884, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_472)
{
    // 1F890 0021;	
    // (🢐) LEFTWARDS TRIANGLE ARROWHEAD	[1885 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F890, 0x0021 };
    uint32_t const ces[9] = { 0x1885, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_473)
{
    // 1F890 003F;	
    // (🢐) LEFTWARDS TRIANGLE ARROWHEAD	[1885 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F890, 0x003F };
    uint32_t const ces[9] = { 0x1885, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_474)
{
    // 1F890 0061;	
    // (🢐) LEFTWARDS TRIANGLE ARROWHEAD	[1885 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F890, 0x0061 };
    uint32_t const ces[9] = { 0x1885, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_475)
{
    // 1F890 0041;	
    // (🢐) LEFTWARDS TRIANGLE ARROWHEAD	[1885 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F890, 0x0041 };
    uint32_t const ces[9] = { 0x1885, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_476)
{
    // 1F890 0062;	
    // (🢐) LEFTWARDS TRIANGLE ARROWHEAD	[1885 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F890, 0x0062 };
    uint32_t const ces[9] = { 0x1885, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_477)
{
    // 1F891 0021;	
    // (🢑) UPWARDS TRIANGLE ARROWHEAD	[1886 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F891, 0x0021 };
    uint32_t const ces[9] = { 0x1886, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_478)
{
    // 1F891 003F;	
    // (🢑) UPWARDS TRIANGLE ARROWHEAD	[1886 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F891, 0x003F };
    uint32_t const ces[9] = { 0x1886, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_479)
{
    // 1F891 0061;	
    // (🢑) UPWARDS TRIANGLE ARROWHEAD	[1886 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F891, 0x0061 };
    uint32_t const ces[9] = { 0x1886, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_480)
{
    // 1F891 0041;	
    // (🢑) UPWARDS TRIANGLE ARROWHEAD	[1886 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F891, 0x0041 };
    uint32_t const ces[9] = { 0x1886, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_481)
{
    // 1F891 0062;	
    // (🢑) UPWARDS TRIANGLE ARROWHEAD	[1886 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F891, 0x0062 };
    uint32_t const ces[9] = { 0x1886, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_482)
{
    // 1F892 0021;	
    // (🢒) RIGHTWARDS TRIANGLE ARROWHEAD	[1887 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F892, 0x0021 };
    uint32_t const ces[9] = { 0x1887, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_483)
{
    // 1F892 003F;	
    // (🢒) RIGHTWARDS TRIANGLE ARROWHEAD	[1887 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F892, 0x003F };
    uint32_t const ces[9] = { 0x1887, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_484)
{
    // 1F892 0061;	
    // (🢒) RIGHTWARDS TRIANGLE ARROWHEAD	[1887 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F892, 0x0061 };
    uint32_t const ces[9] = { 0x1887, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_485)
{
    // 1F892 0041;	
    // (🢒) RIGHTWARDS TRIANGLE ARROWHEAD	[1887 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F892, 0x0041 };
    uint32_t const ces[9] = { 0x1887, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_486)
{
    // 1F892 0062;	
    // (🢒) RIGHTWARDS TRIANGLE ARROWHEAD	[1887 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F892, 0x0062 };
    uint32_t const ces[9] = { 0x1887, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_487)
{
    // 1F893 0021;	
    // (🢓) DOWNWARDS TRIANGLE ARROWHEAD	[1888 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F893, 0x0021 };
    uint32_t const ces[9] = { 0x1888, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_488)
{
    // 1F893 003F;	
    // (🢓) DOWNWARDS TRIANGLE ARROWHEAD	[1888 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F893, 0x003F };
    uint32_t const ces[9] = { 0x1888, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_489)
{
    // 1F893 0061;	
    // (🢓) DOWNWARDS TRIANGLE ARROWHEAD	[1888 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F893, 0x0061 };
    uint32_t const ces[9] = { 0x1888, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_490)
{
    // 1F893 0041;	
    // (🢓) DOWNWARDS TRIANGLE ARROWHEAD	[1888 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F893, 0x0041 };
    uint32_t const ces[9] = { 0x1888, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_491)
{
    // 1F893 0062;	
    // (🢓) DOWNWARDS TRIANGLE ARROWHEAD	[1888 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F893, 0x0062 };
    uint32_t const ces[9] = { 0x1888, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_492)
{
    // 1F894 0021;	
    // (🢔) LEFTWARDS WHITE ARROW WITHIN TRIANGLE ARROWHEAD	[1889 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F894, 0x0021 };
    uint32_t const ces[9] = { 0x1889, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_493)
{
    // 1F894 003F;	
    // (🢔) LEFTWARDS WHITE ARROW WITHIN TRIANGLE ARROWHEAD	[1889 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F894, 0x003F };
    uint32_t const ces[9] = { 0x1889, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_494)
{
    // 1F894 0061;	
    // (🢔) LEFTWARDS WHITE ARROW WITHIN TRIANGLE ARROWHEAD	[1889 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F894, 0x0061 };
    uint32_t const ces[9] = { 0x1889, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_495)
{
    // 1F894 0041;	
    // (🢔) LEFTWARDS WHITE ARROW WITHIN TRIANGLE ARROWHEAD	[1889 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F894, 0x0041 };
    uint32_t const ces[9] = { 0x1889, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_496)
{
    // 1F894 0062;	
    // (🢔) LEFTWARDS WHITE ARROW WITHIN TRIANGLE ARROWHEAD	[1889 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F894, 0x0062 };
    uint32_t const ces[9] = { 0x1889, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_497)
{
    // 1F895 0021;	
    // (🢕) UPWARDS WHITE ARROW WITHIN TRIANGLE ARROWHEAD	[188A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F895, 0x0021 };
    uint32_t const ces[9] = { 0x188A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_498)
{
    // 1F895 003F;	
    // (🢕) UPWARDS WHITE ARROW WITHIN TRIANGLE ARROWHEAD	[188A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F895, 0x003F };
    uint32_t const ces[9] = { 0x188A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_069_499)
{
    // 1F895 0061;	
    // (🢕) UPWARDS WHITE ARROW WITHIN TRIANGLE ARROWHEAD	[188A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F895, 0x0061 };
    uint32_t const ces[9] = { 0x188A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

