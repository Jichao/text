// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_357_000)
{
    // 3FB4 003F;	
    // (㾴) CJK UNIFIED IDEOGRAPH-3FB4	[FB80 BFB4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFB4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_001)
{
    // 3FB4 0061;	
    // (㾴) CJK UNIFIED IDEOGRAPH-3FB4	[FB80 BFB4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_002)
{
    // 3FB4 0041;	
    // (㾴) CJK UNIFIED IDEOGRAPH-3FB4	[FB80 BFB4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FB4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_003)
{
    // 3FB4 0062;	
    // (㾴) CJK UNIFIED IDEOGRAPH-3FB4	[FB80 BFB4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_004)
{
    // 3FB5 0021;	
    // (㾵) CJK UNIFIED IDEOGRAPH-3FB5	[FB80 BFB5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_005)
{
    // 3FB5 003F;	
    // (㾵) CJK UNIFIED IDEOGRAPH-3FB5	[FB80 BFB5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFB5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_006)
{
    // 3FB5 0061;	
    // (㾵) CJK UNIFIED IDEOGRAPH-3FB5	[FB80 BFB5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_007)
{
    // 3FB5 0041;	
    // (㾵) CJK UNIFIED IDEOGRAPH-3FB5	[FB80 BFB5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FB5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_008)
{
    // 3FB5 0062;	
    // (㾵) CJK UNIFIED IDEOGRAPH-3FB5	[FB80 BFB5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_009)
{
    // 3FB6 0021;	
    // (㾶) CJK UNIFIED IDEOGRAPH-3FB6	[FB80 BFB6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_010)
{
    // 3FB6 003F;	
    // (㾶) CJK UNIFIED IDEOGRAPH-3FB6	[FB80 BFB6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFB6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_011)
{
    // 3FB6 0061;	
    // (㾶) CJK UNIFIED IDEOGRAPH-3FB6	[FB80 BFB6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_012)
{
    // 3FB6 0041;	
    // (㾶) CJK UNIFIED IDEOGRAPH-3FB6	[FB80 BFB6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FB6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_013)
{
    // 3FB6 0062;	
    // (㾶) CJK UNIFIED IDEOGRAPH-3FB6	[FB80 BFB6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_014)
{
    // 3FB7 0021;	
    // (㾷) CJK UNIFIED IDEOGRAPH-3FB7	[FB80 BFB7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_015)
{
    // 3FB7 003F;	
    // (㾷) CJK UNIFIED IDEOGRAPH-3FB7	[FB80 BFB7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFB7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_016)
{
    // 3FB7 0061;	
    // (㾷) CJK UNIFIED IDEOGRAPH-3FB7	[FB80 BFB7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_017)
{
    // 3FB7 0041;	
    // (㾷) CJK UNIFIED IDEOGRAPH-3FB7	[FB80 BFB7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FB7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_018)
{
    // 3FB7 0062;	
    // (㾷) CJK UNIFIED IDEOGRAPH-3FB7	[FB80 BFB7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_019)
{
    // 3FB8 0021;	
    // (㾸) CJK UNIFIED IDEOGRAPH-3FB8	[FB80 BFB8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_020)
{
    // 3FB8 003F;	
    // (㾸) CJK UNIFIED IDEOGRAPH-3FB8	[FB80 BFB8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFB8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_021)
{
    // 3FB8 0061;	
    // (㾸) CJK UNIFIED IDEOGRAPH-3FB8	[FB80 BFB8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_022)
{
    // 3FB8 0041;	
    // (㾸) CJK UNIFIED IDEOGRAPH-3FB8	[FB80 BFB8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FB8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_023)
{
    // 3FB8 0062;	
    // (㾸) CJK UNIFIED IDEOGRAPH-3FB8	[FB80 BFB8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_024)
{
    // 3FB9 0021;	
    // (㾹) CJK UNIFIED IDEOGRAPH-3FB9	[FB80 BFB9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_025)
{
    // 3FB9 003F;	
    // (㾹) CJK UNIFIED IDEOGRAPH-3FB9	[FB80 BFB9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFB9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_026)
{
    // 3FB9 0061;	
    // (㾹) CJK UNIFIED IDEOGRAPH-3FB9	[FB80 BFB9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_027)
{
    // 3FB9 0041;	
    // (㾹) CJK UNIFIED IDEOGRAPH-3FB9	[FB80 BFB9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FB9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_028)
{
    // 3FB9 0062;	
    // (㾹) CJK UNIFIED IDEOGRAPH-3FB9	[FB80 BFB9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_029)
{
    // 3FBA 0021;	
    // (㾺) CJK UNIFIED IDEOGRAPH-3FBA	[FB80 BFBA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FBA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFBA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_030)
{
    // 3FBA 003F;	
    // (㾺) CJK UNIFIED IDEOGRAPH-3FBA	[FB80 BFBA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FBA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFBA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_031)
{
    // 3FBA 0061;	
    // (㾺) CJK UNIFIED IDEOGRAPH-3FBA	[FB80 BFBA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FBA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_032)
{
    // 3FBA 0041;	
    // (㾺) CJK UNIFIED IDEOGRAPH-3FBA	[FB80 BFBA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FBA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_033)
{
    // 3FBA 0062;	
    // (㾺) CJK UNIFIED IDEOGRAPH-3FBA	[FB80 BFBA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FBA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_034)
{
    // 3FBB 0021;	
    // (㾻) CJK UNIFIED IDEOGRAPH-3FBB	[FB80 BFBB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FBB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFBB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_035)
{
    // 3FBB 003F;	
    // (㾻) CJK UNIFIED IDEOGRAPH-3FBB	[FB80 BFBB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FBB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFBB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_036)
{
    // 3FBB 0061;	
    // (㾻) CJK UNIFIED IDEOGRAPH-3FBB	[FB80 BFBB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FBB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_037)
{
    // 3FBB 0041;	
    // (㾻) CJK UNIFIED IDEOGRAPH-3FBB	[FB80 BFBB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FBB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_038)
{
    // 3FBB 0062;	
    // (㾻) CJK UNIFIED IDEOGRAPH-3FBB	[FB80 BFBB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FBB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFBB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_039)
{
    // 3FBC 0021;	
    // (㾼) CJK UNIFIED IDEOGRAPH-3FBC	[FB80 BFBC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FBC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFBC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_040)
{
    // 3FBC 003F;	
    // (㾼) CJK UNIFIED IDEOGRAPH-3FBC	[FB80 BFBC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FBC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFBC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_041)
{
    // 3FBC 0061;	
    // (㾼) CJK UNIFIED IDEOGRAPH-3FBC	[FB80 BFBC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FBC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_042)
{
    // 3FBC 0041;	
    // (㾼) CJK UNIFIED IDEOGRAPH-3FBC	[FB80 BFBC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FBC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_043)
{
    // 3FBC 0062;	
    // (㾼) CJK UNIFIED IDEOGRAPH-3FBC	[FB80 BFBC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FBC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFBC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_044)
{
    // 3FBD 0021;	
    // (㾽) CJK UNIFIED IDEOGRAPH-3FBD	[FB80 BFBD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FBD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFBD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_045)
{
    // 3FBD 003F;	
    // (㾽) CJK UNIFIED IDEOGRAPH-3FBD	[FB80 BFBD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FBD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFBD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_046)
{
    // 3FBD 0061;	
    // (㾽) CJK UNIFIED IDEOGRAPH-3FBD	[FB80 BFBD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FBD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_047)
{
    // 3FBD 0041;	
    // (㾽) CJK UNIFIED IDEOGRAPH-3FBD	[FB80 BFBD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FBD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_048)
{
    // 3FBD 0062;	
    // (㾽) CJK UNIFIED IDEOGRAPH-3FBD	[FB80 BFBD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FBD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFBD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_049)
{
    // 3FBE 0021;	
    // (㾾) CJK UNIFIED IDEOGRAPH-3FBE	[FB80 BFBE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FBE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFBE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_050)
{
    // 3FBE 003F;	
    // (㾾) CJK UNIFIED IDEOGRAPH-3FBE	[FB80 BFBE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FBE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFBE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_051)
{
    // 3FBE 0061;	
    // (㾾) CJK UNIFIED IDEOGRAPH-3FBE	[FB80 BFBE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FBE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_052)
{
    // 3FBE 0041;	
    // (㾾) CJK UNIFIED IDEOGRAPH-3FBE	[FB80 BFBE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FBE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_053)
{
    // 3FBE 0062;	
    // (㾾) CJK UNIFIED IDEOGRAPH-3FBE	[FB80 BFBE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FBE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFBE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_054)
{
    // 3FBF 0021;	
    // (㾿) CJK UNIFIED IDEOGRAPH-3FBF	[FB80 BFBF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FBF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFBF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_055)
{
    // 3FBF 003F;	
    // (㾿) CJK UNIFIED IDEOGRAPH-3FBF	[FB80 BFBF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FBF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFBF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_056)
{
    // 3FBF 0061;	
    // (㾿) CJK UNIFIED IDEOGRAPH-3FBF	[FB80 BFBF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FBF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_057)
{
    // 3FBF 0041;	
    // (㾿) CJK UNIFIED IDEOGRAPH-3FBF	[FB80 BFBF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FBF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_058)
{
    // 3FBF 0062;	
    // (㾿) CJK UNIFIED IDEOGRAPH-3FBF	[FB80 BFBF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FBF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFBF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_059)
{
    // 3FC0 0021;	
    // (㿀) CJK UNIFIED IDEOGRAPH-3FC0	[FB80 BFC0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_060)
{
    // 3FC0 003F;	
    // (㿀) CJK UNIFIED IDEOGRAPH-3FC0	[FB80 BFC0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFC0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_061)
{
    // 3FC0 0061;	
    // (㿀) CJK UNIFIED IDEOGRAPH-3FC0	[FB80 BFC0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_062)
{
    // 3FC0 0041;	
    // (㿀) CJK UNIFIED IDEOGRAPH-3FC0	[FB80 BFC0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FC0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_063)
{
    // 3FC0 0062;	
    // (㿀) CJK UNIFIED IDEOGRAPH-3FC0	[FB80 BFC0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_064)
{
    // 3FC1 0021;	
    // (㿁) CJK UNIFIED IDEOGRAPH-3FC1	[FB80 BFC1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_065)
{
    // 3FC1 003F;	
    // (㿁) CJK UNIFIED IDEOGRAPH-3FC1	[FB80 BFC1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFC1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_066)
{
    // 3FC1 0061;	
    // (㿁) CJK UNIFIED IDEOGRAPH-3FC1	[FB80 BFC1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_067)
{
    // 3FC1 0041;	
    // (㿁) CJK UNIFIED IDEOGRAPH-3FC1	[FB80 BFC1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FC1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_068)
{
    // 3FC1 0062;	
    // (㿁) CJK UNIFIED IDEOGRAPH-3FC1	[FB80 BFC1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_069)
{
    // 3FC2 0021;	
    // (㿂) CJK UNIFIED IDEOGRAPH-3FC2	[FB80 BFC2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_070)
{
    // 3FC2 003F;	
    // (㿂) CJK UNIFIED IDEOGRAPH-3FC2	[FB80 BFC2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFC2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_071)
{
    // 3FC2 0061;	
    // (㿂) CJK UNIFIED IDEOGRAPH-3FC2	[FB80 BFC2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_072)
{
    // 3FC2 0041;	
    // (㿂) CJK UNIFIED IDEOGRAPH-3FC2	[FB80 BFC2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FC2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_073)
{
    // 3FC2 0062;	
    // (㿂) CJK UNIFIED IDEOGRAPH-3FC2	[FB80 BFC2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_074)
{
    // 3FC3 0021;	
    // (㿃) CJK UNIFIED IDEOGRAPH-3FC3	[FB80 BFC3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_075)
{
    // 3FC3 003F;	
    // (㿃) CJK UNIFIED IDEOGRAPH-3FC3	[FB80 BFC3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFC3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_076)
{
    // 3FC3 0061;	
    // (㿃) CJK UNIFIED IDEOGRAPH-3FC3	[FB80 BFC3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_077)
{
    // 3FC3 0041;	
    // (㿃) CJK UNIFIED IDEOGRAPH-3FC3	[FB80 BFC3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FC3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_078)
{
    // 3FC3 0062;	
    // (㿃) CJK UNIFIED IDEOGRAPH-3FC3	[FB80 BFC3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_079)
{
    // 3FC4 0021;	
    // (㿄) CJK UNIFIED IDEOGRAPH-3FC4	[FB80 BFC4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_080)
{
    // 3FC4 003F;	
    // (㿄) CJK UNIFIED IDEOGRAPH-3FC4	[FB80 BFC4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFC4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_081)
{
    // 3FC4 0061;	
    // (㿄) CJK UNIFIED IDEOGRAPH-3FC4	[FB80 BFC4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_082)
{
    // 3FC4 0041;	
    // (㿄) CJK UNIFIED IDEOGRAPH-3FC4	[FB80 BFC4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FC4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_083)
{
    // 3FC4 0062;	
    // (㿄) CJK UNIFIED IDEOGRAPH-3FC4	[FB80 BFC4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_084)
{
    // 3FC5 0021;	
    // (㿅) CJK UNIFIED IDEOGRAPH-3FC5	[FB80 BFC5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_085)
{
    // 3FC5 003F;	
    // (㿅) CJK UNIFIED IDEOGRAPH-3FC5	[FB80 BFC5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_086)
{
    // 3FC5 0061;	
    // (㿅) CJK UNIFIED IDEOGRAPH-3FC5	[FB80 BFC5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_087)
{
    // 3FC5 0041;	
    // (㿅) CJK UNIFIED IDEOGRAPH-3FC5	[FB80 BFC5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FC5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_088)
{
    // 3FC5 0062;	
    // (㿅) CJK UNIFIED IDEOGRAPH-3FC5	[FB80 BFC5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_089)
{
    // 3FC6 0021;	
    // (㿆) CJK UNIFIED IDEOGRAPH-3FC6	[FB80 BFC6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_090)
{
    // 3FC6 003F;	
    // (㿆) CJK UNIFIED IDEOGRAPH-3FC6	[FB80 BFC6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_091)
{
    // 3FC6 0061;	
    // (㿆) CJK UNIFIED IDEOGRAPH-3FC6	[FB80 BFC6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_092)
{
    // 3FC6 0041;	
    // (㿆) CJK UNIFIED IDEOGRAPH-3FC6	[FB80 BFC6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FC6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_093)
{
    // 3FC6 0062;	
    // (㿆) CJK UNIFIED IDEOGRAPH-3FC6	[FB80 BFC6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_094)
{
    // 3FC7 0021;	
    // (㿇) CJK UNIFIED IDEOGRAPH-3FC7	[FB80 BFC7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_095)
{
    // 3FC7 003F;	
    // (㿇) CJK UNIFIED IDEOGRAPH-3FC7	[FB80 BFC7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFC7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_096)
{
    // 3FC7 0061;	
    // (㿇) CJK UNIFIED IDEOGRAPH-3FC7	[FB80 BFC7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_097)
{
    // 3FC7 0041;	
    // (㿇) CJK UNIFIED IDEOGRAPH-3FC7	[FB80 BFC7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FC7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_098)
{
    // 3FC7 0062;	
    // (㿇) CJK UNIFIED IDEOGRAPH-3FC7	[FB80 BFC7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_099)
{
    // 3FC8 0021;	
    // (㿈) CJK UNIFIED IDEOGRAPH-3FC8	[FB80 BFC8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_100)
{
    // 3FC8 003F;	
    // (㿈) CJK UNIFIED IDEOGRAPH-3FC8	[FB80 BFC8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFC8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_101)
{
    // 3FC8 0061;	
    // (㿈) CJK UNIFIED IDEOGRAPH-3FC8	[FB80 BFC8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_102)
{
    // 3FC8 0041;	
    // (㿈) CJK UNIFIED IDEOGRAPH-3FC8	[FB80 BFC8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FC8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_103)
{
    // 3FC8 0062;	
    // (㿈) CJK UNIFIED IDEOGRAPH-3FC8	[FB80 BFC8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_104)
{
    // 3FC9 0021;	
    // (㿉) CJK UNIFIED IDEOGRAPH-3FC9	[FB80 BFC9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_105)
{
    // 3FC9 003F;	
    // (㿉) CJK UNIFIED IDEOGRAPH-3FC9	[FB80 BFC9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_106)
{
    // 3FC9 0061;	
    // (㿉) CJK UNIFIED IDEOGRAPH-3FC9	[FB80 BFC9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_107)
{
    // 3FC9 0041;	
    // (㿉) CJK UNIFIED IDEOGRAPH-3FC9	[FB80 BFC9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FC9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_108)
{
    // 3FC9 0062;	
    // (㿉) CJK UNIFIED IDEOGRAPH-3FC9	[FB80 BFC9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FC9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_109)
{
    // 3FCA 0021;	
    // (㿊) CJK UNIFIED IDEOGRAPH-3FCA	[FB80 BFCA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FCA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFCA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_110)
{
    // 3FCA 003F;	
    // (㿊) CJK UNIFIED IDEOGRAPH-3FCA	[FB80 BFCA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FCA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFCA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_111)
{
    // 3FCA 0061;	
    // (㿊) CJK UNIFIED IDEOGRAPH-3FCA	[FB80 BFCA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FCA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_112)
{
    // 3FCA 0041;	
    // (㿊) CJK UNIFIED IDEOGRAPH-3FCA	[FB80 BFCA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FCA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_113)
{
    // 3FCA 0062;	
    // (㿊) CJK UNIFIED IDEOGRAPH-3FCA	[FB80 BFCA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FCA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFCA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_114)
{
    // 3FCB 0021;	
    // (㿋) CJK UNIFIED IDEOGRAPH-3FCB	[FB80 BFCB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FCB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFCB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_115)
{
    // 3FCB 003F;	
    // (㿋) CJK UNIFIED IDEOGRAPH-3FCB	[FB80 BFCB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FCB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFCB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_116)
{
    // 3FCB 0061;	
    // (㿋) CJK UNIFIED IDEOGRAPH-3FCB	[FB80 BFCB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FCB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_117)
{
    // 3FCB 0041;	
    // (㿋) CJK UNIFIED IDEOGRAPH-3FCB	[FB80 BFCB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FCB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_118)
{
    // 3FCB 0062;	
    // (㿋) CJK UNIFIED IDEOGRAPH-3FCB	[FB80 BFCB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FCB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFCB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_119)
{
    // 3FCC 0021;	
    // (㿌) CJK UNIFIED IDEOGRAPH-3FCC	[FB80 BFCC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FCC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFCC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_120)
{
    // 3FCC 003F;	
    // (㿌) CJK UNIFIED IDEOGRAPH-3FCC	[FB80 BFCC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FCC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFCC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_121)
{
    // 3FCC 0061;	
    // (㿌) CJK UNIFIED IDEOGRAPH-3FCC	[FB80 BFCC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FCC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_122)
{
    // 3FCC 0041;	
    // (㿌) CJK UNIFIED IDEOGRAPH-3FCC	[FB80 BFCC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FCC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_123)
{
    // 3FCC 0062;	
    // (㿌) CJK UNIFIED IDEOGRAPH-3FCC	[FB80 BFCC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FCC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFCC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_124)
{
    // 3FCD 0021;	
    // (㿍) CJK UNIFIED IDEOGRAPH-3FCD	[FB80 BFCD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FCD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFCD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_125)
{
    // 3FCD 003F;	
    // (㿍) CJK UNIFIED IDEOGRAPH-3FCD	[FB80 BFCD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FCD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFCD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_126)
{
    // 3FCD 0061;	
    // (㿍) CJK UNIFIED IDEOGRAPH-3FCD	[FB80 BFCD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FCD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_127)
{
    // 3FCD 0041;	
    // (㿍) CJK UNIFIED IDEOGRAPH-3FCD	[FB80 BFCD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FCD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_128)
{
    // 3FCD 0062;	
    // (㿍) CJK UNIFIED IDEOGRAPH-3FCD	[FB80 BFCD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FCD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFCD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_129)
{
    // 3FCE 0021;	
    // (㿎) CJK UNIFIED IDEOGRAPH-3FCE	[FB80 BFCE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FCE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFCE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_130)
{
    // 3FCE 003F;	
    // (㿎) CJK UNIFIED IDEOGRAPH-3FCE	[FB80 BFCE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FCE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFCE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_131)
{
    // 3FCE 0061;	
    // (㿎) CJK UNIFIED IDEOGRAPH-3FCE	[FB80 BFCE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FCE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_132)
{
    // 3FCE 0041;	
    // (㿎) CJK UNIFIED IDEOGRAPH-3FCE	[FB80 BFCE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FCE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_133)
{
    // 3FCE 0062;	
    // (㿎) CJK UNIFIED IDEOGRAPH-3FCE	[FB80 BFCE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FCE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFCE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_134)
{
    // 3FCF 0021;	
    // (㿏) CJK UNIFIED IDEOGRAPH-3FCF	[FB80 BFCF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FCF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFCF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_135)
{
    // 3FCF 003F;	
    // (㿏) CJK UNIFIED IDEOGRAPH-3FCF	[FB80 BFCF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FCF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFCF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_136)
{
    // 3FCF 0061;	
    // (㿏) CJK UNIFIED IDEOGRAPH-3FCF	[FB80 BFCF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FCF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_137)
{
    // 3FCF 0041;	
    // (㿏) CJK UNIFIED IDEOGRAPH-3FCF	[FB80 BFCF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FCF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_138)
{
    // 3FCF 0062;	
    // (㿏) CJK UNIFIED IDEOGRAPH-3FCF	[FB80 BFCF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FCF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFCF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_139)
{
    // 3FD0 0021;	
    // (㿐) CJK UNIFIED IDEOGRAPH-3FD0	[FB80 BFD0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_140)
{
    // 3FD0 003F;	
    // (㿐) CJK UNIFIED IDEOGRAPH-3FD0	[FB80 BFD0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFD0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_141)
{
    // 3FD0 0061;	
    // (㿐) CJK UNIFIED IDEOGRAPH-3FD0	[FB80 BFD0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_142)
{
    // 3FD0 0041;	
    // (㿐) CJK UNIFIED IDEOGRAPH-3FD0	[FB80 BFD0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FD0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_143)
{
    // 3FD0 0062;	
    // (㿐) CJK UNIFIED IDEOGRAPH-3FD0	[FB80 BFD0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_144)
{
    // 3FD1 0021;	
    // (㿑) CJK UNIFIED IDEOGRAPH-3FD1	[FB80 BFD1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_145)
{
    // 3FD1 003F;	
    // (㿑) CJK UNIFIED IDEOGRAPH-3FD1	[FB80 BFD1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFD1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_146)
{
    // 3FD1 0061;	
    // (㿑) CJK UNIFIED IDEOGRAPH-3FD1	[FB80 BFD1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_147)
{
    // 3FD1 0041;	
    // (㿑) CJK UNIFIED IDEOGRAPH-3FD1	[FB80 BFD1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FD1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_148)
{
    // 3FD1 0062;	
    // (㿑) CJK UNIFIED IDEOGRAPH-3FD1	[FB80 BFD1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_149)
{
    // 3FD2 0021;	
    // (㿒) CJK UNIFIED IDEOGRAPH-3FD2	[FB80 BFD2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_150)
{
    // 3FD2 003F;	
    // (㿒) CJK UNIFIED IDEOGRAPH-3FD2	[FB80 BFD2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFD2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_151)
{
    // 3FD2 0061;	
    // (㿒) CJK UNIFIED IDEOGRAPH-3FD2	[FB80 BFD2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_152)
{
    // 3FD2 0041;	
    // (㿒) CJK UNIFIED IDEOGRAPH-3FD2	[FB80 BFD2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FD2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_153)
{
    // 3FD2 0062;	
    // (㿒) CJK UNIFIED IDEOGRAPH-3FD2	[FB80 BFD2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_154)
{
    // 3FD3 0021;	
    // (㿓) CJK UNIFIED IDEOGRAPH-3FD3	[FB80 BFD3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_155)
{
    // 3FD3 003F;	
    // (㿓) CJK UNIFIED IDEOGRAPH-3FD3	[FB80 BFD3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFD3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_156)
{
    // 3FD3 0061;	
    // (㿓) CJK UNIFIED IDEOGRAPH-3FD3	[FB80 BFD3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_157)
{
    // 3FD3 0041;	
    // (㿓) CJK UNIFIED IDEOGRAPH-3FD3	[FB80 BFD3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FD3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_158)
{
    // 3FD3 0062;	
    // (㿓) CJK UNIFIED IDEOGRAPH-3FD3	[FB80 BFD3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_159)
{
    // 3FD4 0021;	
    // (㿔) CJK UNIFIED IDEOGRAPH-3FD4	[FB80 BFD4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_160)
{
    // 3FD4 003F;	
    // (㿔) CJK UNIFIED IDEOGRAPH-3FD4	[FB80 BFD4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFD4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_161)
{
    // 3FD4 0061;	
    // (㿔) CJK UNIFIED IDEOGRAPH-3FD4	[FB80 BFD4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_162)
{
    // 3FD4 0041;	
    // (㿔) CJK UNIFIED IDEOGRAPH-3FD4	[FB80 BFD4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FD4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_163)
{
    // 3FD4 0062;	
    // (㿔) CJK UNIFIED IDEOGRAPH-3FD4	[FB80 BFD4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_164)
{
    // 3FD5 0021;	
    // (㿕) CJK UNIFIED IDEOGRAPH-3FD5	[FB80 BFD5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_165)
{
    // 3FD5 003F;	
    // (㿕) CJK UNIFIED IDEOGRAPH-3FD5	[FB80 BFD5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFD5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_166)
{
    // 3FD5 0061;	
    // (㿕) CJK UNIFIED IDEOGRAPH-3FD5	[FB80 BFD5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_167)
{
    // 3FD5 0041;	
    // (㿕) CJK UNIFIED IDEOGRAPH-3FD5	[FB80 BFD5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FD5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_168)
{
    // 3FD5 0062;	
    // (㿕) CJK UNIFIED IDEOGRAPH-3FD5	[FB80 BFD5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_169)
{
    // 3FD6 0021;	
    // (㿖) CJK UNIFIED IDEOGRAPH-3FD6	[FB80 BFD6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_170)
{
    // 3FD6 003F;	
    // (㿖) CJK UNIFIED IDEOGRAPH-3FD6	[FB80 BFD6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFD6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_171)
{
    // 3FD6 0061;	
    // (㿖) CJK UNIFIED IDEOGRAPH-3FD6	[FB80 BFD6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_172)
{
    // 3FD6 0041;	
    // (㿖) CJK UNIFIED IDEOGRAPH-3FD6	[FB80 BFD6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FD6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_173)
{
    // 3FD6 0062;	
    // (㿖) CJK UNIFIED IDEOGRAPH-3FD6	[FB80 BFD6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_174)
{
    // 3FD7 0021;	
    // (㿗) CJK UNIFIED IDEOGRAPH-3FD7	[FB80 BFD7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_175)
{
    // 3FD7 003F;	
    // (㿗) CJK UNIFIED IDEOGRAPH-3FD7	[FB80 BFD7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFD7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_176)
{
    // 3FD7 0061;	
    // (㿗) CJK UNIFIED IDEOGRAPH-3FD7	[FB80 BFD7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_177)
{
    // 3FD7 0041;	
    // (㿗) CJK UNIFIED IDEOGRAPH-3FD7	[FB80 BFD7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FD7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_178)
{
    // 3FD7 0062;	
    // (㿗) CJK UNIFIED IDEOGRAPH-3FD7	[FB80 BFD7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_179)
{
    // 3FD8 0021;	
    // (㿘) CJK UNIFIED IDEOGRAPH-3FD8	[FB80 BFD8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_180)
{
    // 3FD8 003F;	
    // (㿘) CJK UNIFIED IDEOGRAPH-3FD8	[FB80 BFD8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFD8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_181)
{
    // 3FD8 0061;	
    // (㿘) CJK UNIFIED IDEOGRAPH-3FD8	[FB80 BFD8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_182)
{
    // 3FD8 0041;	
    // (㿘) CJK UNIFIED IDEOGRAPH-3FD8	[FB80 BFD8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FD8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_183)
{
    // 3FD8 0062;	
    // (㿘) CJK UNIFIED IDEOGRAPH-3FD8	[FB80 BFD8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_184)
{
    // 3FD9 0021;	
    // (㿙) CJK UNIFIED IDEOGRAPH-3FD9	[FB80 BFD9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_185)
{
    // 3FD9 003F;	
    // (㿙) CJK UNIFIED IDEOGRAPH-3FD9	[FB80 BFD9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFD9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_186)
{
    // 3FD9 0061;	
    // (㿙) CJK UNIFIED IDEOGRAPH-3FD9	[FB80 BFD9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_187)
{
    // 3FD9 0041;	
    // (㿙) CJK UNIFIED IDEOGRAPH-3FD9	[FB80 BFD9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FD9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_188)
{
    // 3FD9 0062;	
    // (㿙) CJK UNIFIED IDEOGRAPH-3FD9	[FB80 BFD9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FD9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFD9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_189)
{
    // 3FDA 0021;	
    // (㿚) CJK UNIFIED IDEOGRAPH-3FDA	[FB80 BFDA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FDA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFDA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_190)
{
    // 3FDA 003F;	
    // (㿚) CJK UNIFIED IDEOGRAPH-3FDA	[FB80 BFDA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FDA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFDA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_191)
{
    // 3FDA 0061;	
    // (㿚) CJK UNIFIED IDEOGRAPH-3FDA	[FB80 BFDA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FDA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_192)
{
    // 3FDA 0041;	
    // (㿚) CJK UNIFIED IDEOGRAPH-3FDA	[FB80 BFDA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FDA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_193)
{
    // 3FDA 0062;	
    // (㿚) CJK UNIFIED IDEOGRAPH-3FDA	[FB80 BFDA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FDA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFDA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_194)
{
    // 3FDB 0021;	
    // (㿛) CJK UNIFIED IDEOGRAPH-3FDB	[FB80 BFDB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FDB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFDB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_195)
{
    // 3FDB 003F;	
    // (㿛) CJK UNIFIED IDEOGRAPH-3FDB	[FB80 BFDB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FDB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFDB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_196)
{
    // 3FDB 0061;	
    // (㿛) CJK UNIFIED IDEOGRAPH-3FDB	[FB80 BFDB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FDB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_197)
{
    // 3FDB 0041;	
    // (㿛) CJK UNIFIED IDEOGRAPH-3FDB	[FB80 BFDB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FDB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_198)
{
    // 3FDB 0062;	
    // (㿛) CJK UNIFIED IDEOGRAPH-3FDB	[FB80 BFDB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FDB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFDB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_199)
{
    // 3FDC 0021;	
    // (㿜) CJK UNIFIED IDEOGRAPH-3FDC	[FB80 BFDC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FDC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFDC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_200)
{
    // 3FDC 003F;	
    // (㿜) CJK UNIFIED IDEOGRAPH-3FDC	[FB80 BFDC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FDC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFDC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_201)
{
    // 3FDC 0061;	
    // (㿜) CJK UNIFIED IDEOGRAPH-3FDC	[FB80 BFDC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FDC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_202)
{
    // 3FDC 0041;	
    // (㿜) CJK UNIFIED IDEOGRAPH-3FDC	[FB80 BFDC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FDC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_203)
{
    // 3FDC 0062;	
    // (㿜) CJK UNIFIED IDEOGRAPH-3FDC	[FB80 BFDC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FDC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFDC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_204)
{
    // 3FDD 0021;	
    // (㿝) CJK UNIFIED IDEOGRAPH-3FDD	[FB80 BFDD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FDD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFDD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_205)
{
    // 3FDD 003F;	
    // (㿝) CJK UNIFIED IDEOGRAPH-3FDD	[FB80 BFDD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FDD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFDD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_206)
{
    // 3FDD 0061;	
    // (㿝) CJK UNIFIED IDEOGRAPH-3FDD	[FB80 BFDD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FDD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_207)
{
    // 3FDD 0041;	
    // (㿝) CJK UNIFIED IDEOGRAPH-3FDD	[FB80 BFDD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FDD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_208)
{
    // 3FDD 0062;	
    // (㿝) CJK UNIFIED IDEOGRAPH-3FDD	[FB80 BFDD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FDD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_209)
{
    // 3FDE 0021;	
    // (㿞) CJK UNIFIED IDEOGRAPH-3FDE	[FB80 BFDE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FDE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFDE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_210)
{
    // 3FDE 003F;	
    // (㿞) CJK UNIFIED IDEOGRAPH-3FDE	[FB80 BFDE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FDE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFDE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_211)
{
    // 3FDE 0061;	
    // (㿞) CJK UNIFIED IDEOGRAPH-3FDE	[FB80 BFDE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FDE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_212)
{
    // 3FDE 0041;	
    // (㿞) CJK UNIFIED IDEOGRAPH-3FDE	[FB80 BFDE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FDE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_213)
{
    // 3FDE 0062;	
    // (㿞) CJK UNIFIED IDEOGRAPH-3FDE	[FB80 BFDE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FDE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFDE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_214)
{
    // 3FDF 0021;	
    // (㿟) CJK UNIFIED IDEOGRAPH-3FDF	[FB80 BFDF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FDF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFDF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_215)
{
    // 3FDF 003F;	
    // (㿟) CJK UNIFIED IDEOGRAPH-3FDF	[FB80 BFDF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FDF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFDF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_216)
{
    // 3FDF 0061;	
    // (㿟) CJK UNIFIED IDEOGRAPH-3FDF	[FB80 BFDF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FDF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_217)
{
    // 3FDF 0041;	
    // (㿟) CJK UNIFIED IDEOGRAPH-3FDF	[FB80 BFDF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FDF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_218)
{
    // 3FDF 0062;	
    // (㿟) CJK UNIFIED IDEOGRAPH-3FDF	[FB80 BFDF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FDF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFDF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_219)
{
    // 3FE0 0021;	
    // (㿠) CJK UNIFIED IDEOGRAPH-3FE0	[FB80 BFE0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_220)
{
    // 3FE0 003F;	
    // (㿠) CJK UNIFIED IDEOGRAPH-3FE0	[FB80 BFE0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFE0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_221)
{
    // 3FE0 0061;	
    // (㿠) CJK UNIFIED IDEOGRAPH-3FE0	[FB80 BFE0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_222)
{
    // 3FE0 0041;	
    // (㿠) CJK UNIFIED IDEOGRAPH-3FE0	[FB80 BFE0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FE0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_223)
{
    // 3FE0 0062;	
    // (㿠) CJK UNIFIED IDEOGRAPH-3FE0	[FB80 BFE0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_224)
{
    // 3FE1 0021;	
    // (㿡) CJK UNIFIED IDEOGRAPH-3FE1	[FB80 BFE1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_225)
{
    // 3FE1 003F;	
    // (㿡) CJK UNIFIED IDEOGRAPH-3FE1	[FB80 BFE1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFE1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_226)
{
    // 3FE1 0061;	
    // (㿡) CJK UNIFIED IDEOGRAPH-3FE1	[FB80 BFE1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_227)
{
    // 3FE1 0041;	
    // (㿡) CJK UNIFIED IDEOGRAPH-3FE1	[FB80 BFE1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FE1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_228)
{
    // 3FE1 0062;	
    // (㿡) CJK UNIFIED IDEOGRAPH-3FE1	[FB80 BFE1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_229)
{
    // 3FE2 0021;	
    // (㿢) CJK UNIFIED IDEOGRAPH-3FE2	[FB80 BFE2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_230)
{
    // 3FE2 003F;	
    // (㿢) CJK UNIFIED IDEOGRAPH-3FE2	[FB80 BFE2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFE2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_231)
{
    // 3FE2 0061;	
    // (㿢) CJK UNIFIED IDEOGRAPH-3FE2	[FB80 BFE2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_232)
{
    // 3FE2 0041;	
    // (㿢) CJK UNIFIED IDEOGRAPH-3FE2	[FB80 BFE2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FE2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_233)
{
    // 3FE2 0062;	
    // (㿢) CJK UNIFIED IDEOGRAPH-3FE2	[FB80 BFE2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_234)
{
    // 3FE3 0021;	
    // (㿣) CJK UNIFIED IDEOGRAPH-3FE3	[FB80 BFE3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_235)
{
    // 3FE3 003F;	
    // (㿣) CJK UNIFIED IDEOGRAPH-3FE3	[FB80 BFE3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFE3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_236)
{
    // 3FE3 0061;	
    // (㿣) CJK UNIFIED IDEOGRAPH-3FE3	[FB80 BFE3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_237)
{
    // 3FE3 0041;	
    // (㿣) CJK UNIFIED IDEOGRAPH-3FE3	[FB80 BFE3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FE3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_238)
{
    // 3FE3 0062;	
    // (㿣) CJK UNIFIED IDEOGRAPH-3FE3	[FB80 BFE3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_239)
{
    // 3FE4 0021;	
    // (㿤) CJK UNIFIED IDEOGRAPH-3FE4	[FB80 BFE4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_240)
{
    // 3FE4 003F;	
    // (㿤) CJK UNIFIED IDEOGRAPH-3FE4	[FB80 BFE4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFE4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_241)
{
    // 3FE4 0061;	
    // (㿤) CJK UNIFIED IDEOGRAPH-3FE4	[FB80 BFE4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_242)
{
    // 3FE4 0041;	
    // (㿤) CJK UNIFIED IDEOGRAPH-3FE4	[FB80 BFE4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FE4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_243)
{
    // 3FE4 0062;	
    // (㿤) CJK UNIFIED IDEOGRAPH-3FE4	[FB80 BFE4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_244)
{
    // 3FE5 0021;	
    // (㿥) CJK UNIFIED IDEOGRAPH-3FE5	[FB80 BFE5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_245)
{
    // 3FE5 003F;	
    // (㿥) CJK UNIFIED IDEOGRAPH-3FE5	[FB80 BFE5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFE5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_246)
{
    // 3FE5 0061;	
    // (㿥) CJK UNIFIED IDEOGRAPH-3FE5	[FB80 BFE5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_247)
{
    // 3FE5 0041;	
    // (㿥) CJK UNIFIED IDEOGRAPH-3FE5	[FB80 BFE5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FE5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_248)
{
    // 3FE5 0062;	
    // (㿥) CJK UNIFIED IDEOGRAPH-3FE5	[FB80 BFE5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_249)
{
    // 3FE6 0021;	
    // (㿦) CJK UNIFIED IDEOGRAPH-3FE6	[FB80 BFE6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_250)
{
    // 3FE6 003F;	
    // (㿦) CJK UNIFIED IDEOGRAPH-3FE6	[FB80 BFE6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFE6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_251)
{
    // 3FE6 0061;	
    // (㿦) CJK UNIFIED IDEOGRAPH-3FE6	[FB80 BFE6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_252)
{
    // 3FE6 0041;	
    // (㿦) CJK UNIFIED IDEOGRAPH-3FE6	[FB80 BFE6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FE6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_253)
{
    // 3FE6 0062;	
    // (㿦) CJK UNIFIED IDEOGRAPH-3FE6	[FB80 BFE6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_254)
{
    // 3FE7 0021;	
    // (㿧) CJK UNIFIED IDEOGRAPH-3FE7	[FB80 BFE7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_255)
{
    // 3FE7 003F;	
    // (㿧) CJK UNIFIED IDEOGRAPH-3FE7	[FB80 BFE7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_256)
{
    // 3FE7 0061;	
    // (㿧) CJK UNIFIED IDEOGRAPH-3FE7	[FB80 BFE7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_257)
{
    // 3FE7 0041;	
    // (㿧) CJK UNIFIED IDEOGRAPH-3FE7	[FB80 BFE7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FE7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_258)
{
    // 3FE7 0062;	
    // (㿧) CJK UNIFIED IDEOGRAPH-3FE7	[FB80 BFE7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_259)
{
    // 3FE8 0021;	
    // (㿨) CJK UNIFIED IDEOGRAPH-3FE8	[FB80 BFE8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_260)
{
    // 3FE8 003F;	
    // (㿨) CJK UNIFIED IDEOGRAPH-3FE8	[FB80 BFE8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFE8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_261)
{
    // 3FE8 0061;	
    // (㿨) CJK UNIFIED IDEOGRAPH-3FE8	[FB80 BFE8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_262)
{
    // 3FE8 0041;	
    // (㿨) CJK UNIFIED IDEOGRAPH-3FE8	[FB80 BFE8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FE8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_263)
{
    // 3FE8 0062;	
    // (㿨) CJK UNIFIED IDEOGRAPH-3FE8	[FB80 BFE8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_264)
{
    // 3FE9 0021;	
    // (㿩) CJK UNIFIED IDEOGRAPH-3FE9	[FB80 BFE9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_265)
{
    // 3FE9 003F;	
    // (㿩) CJK UNIFIED IDEOGRAPH-3FE9	[FB80 BFE9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFE9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_266)
{
    // 3FE9 0061;	
    // (㿩) CJK UNIFIED IDEOGRAPH-3FE9	[FB80 BFE9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_267)
{
    // 3FE9 0041;	
    // (㿩) CJK UNIFIED IDEOGRAPH-3FE9	[FB80 BFE9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FE9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_268)
{
    // 3FE9 0062;	
    // (㿩) CJK UNIFIED IDEOGRAPH-3FE9	[FB80 BFE9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FE9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFE9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_269)
{
    // 3FEA 0021;	
    // (㿪) CJK UNIFIED IDEOGRAPH-3FEA	[FB80 BFEA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FEA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_270)
{
    // 3FEA 003F;	
    // (㿪) CJK UNIFIED IDEOGRAPH-3FEA	[FB80 BFEA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FEA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_271)
{
    // 3FEA 0061;	
    // (㿪) CJK UNIFIED IDEOGRAPH-3FEA	[FB80 BFEA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FEA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_272)
{
    // 3FEA 0041;	
    // (㿪) CJK UNIFIED IDEOGRAPH-3FEA	[FB80 BFEA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FEA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_273)
{
    // 3FEA 0062;	
    // (㿪) CJK UNIFIED IDEOGRAPH-3FEA	[FB80 BFEA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FEA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_274)
{
    // 3FEB 0021;	
    // (㿫) CJK UNIFIED IDEOGRAPH-3FEB	[FB80 BFEB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FEB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFEB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_275)
{
    // 3FEB 003F;	
    // (㿫) CJK UNIFIED IDEOGRAPH-3FEB	[FB80 BFEB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FEB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFEB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_276)
{
    // 3FEB 0061;	
    // (㿫) CJK UNIFIED IDEOGRAPH-3FEB	[FB80 BFEB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FEB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_277)
{
    // 3FEB 0041;	
    // (㿫) CJK UNIFIED IDEOGRAPH-3FEB	[FB80 BFEB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FEB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_278)
{
    // 3FEB 0062;	
    // (㿫) CJK UNIFIED IDEOGRAPH-3FEB	[FB80 BFEB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FEB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_279)
{
    // 3FEC 0021;	
    // (㿬) CJK UNIFIED IDEOGRAPH-3FEC	[FB80 BFEC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FEC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFEC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_280)
{
    // 3FEC 003F;	
    // (㿬) CJK UNIFIED IDEOGRAPH-3FEC	[FB80 BFEC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FEC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFEC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_281)
{
    // 3FEC 0061;	
    // (㿬) CJK UNIFIED IDEOGRAPH-3FEC	[FB80 BFEC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FEC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_282)
{
    // 3FEC 0041;	
    // (㿬) CJK UNIFIED IDEOGRAPH-3FEC	[FB80 BFEC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FEC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_283)
{
    // 3FEC 0062;	
    // (㿬) CJK UNIFIED IDEOGRAPH-3FEC	[FB80 BFEC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FEC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFEC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_284)
{
    // 3FED 0021;	
    // (㿭) CJK UNIFIED IDEOGRAPH-3FED	[FB80 BFED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FED, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_285)
{
    // 3FED 003F;	
    // (㿭) CJK UNIFIED IDEOGRAPH-3FED	[FB80 BFED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FED, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_286)
{
    // 3FED 0061;	
    // (㿭) CJK UNIFIED IDEOGRAPH-3FED	[FB80 BFED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FED, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_287)
{
    // 3FED 0041;	
    // (㿭) CJK UNIFIED IDEOGRAPH-3FED	[FB80 BFED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FED, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_288)
{
    // 3FED 0062;	
    // (㿭) CJK UNIFIED IDEOGRAPH-3FED	[FB80 BFED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FED, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_289)
{
    // 3FEE 0021;	
    // (㿮) CJK UNIFIED IDEOGRAPH-3FEE	[FB80 BFEE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FEE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFEE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_290)
{
    // 3FEE 003F;	
    // (㿮) CJK UNIFIED IDEOGRAPH-3FEE	[FB80 BFEE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FEE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFEE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_291)
{
    // 3FEE 0061;	
    // (㿮) CJK UNIFIED IDEOGRAPH-3FEE	[FB80 BFEE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FEE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_292)
{
    // 3FEE 0041;	
    // (㿮) CJK UNIFIED IDEOGRAPH-3FEE	[FB80 BFEE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FEE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_293)
{
    // 3FEE 0062;	
    // (㿮) CJK UNIFIED IDEOGRAPH-3FEE	[FB80 BFEE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FEE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFEE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_294)
{
    // 3FEF 0021;	
    // (㿯) CJK UNIFIED IDEOGRAPH-3FEF	[FB80 BFEF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FEF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFEF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_295)
{
    // 3FEF 003F;	
    // (㿯) CJK UNIFIED IDEOGRAPH-3FEF	[FB80 BFEF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FEF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFEF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_296)
{
    // 3FEF 0061;	
    // (㿯) CJK UNIFIED IDEOGRAPH-3FEF	[FB80 BFEF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FEF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_297)
{
    // 3FEF 0041;	
    // (㿯) CJK UNIFIED IDEOGRAPH-3FEF	[FB80 BFEF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FEF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_298)
{
    // 3FEF 0062;	
    // (㿯) CJK UNIFIED IDEOGRAPH-3FEF	[FB80 BFEF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FEF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFEF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_299)
{
    // 3FF0 0021;	
    // (㿰) CJK UNIFIED IDEOGRAPH-3FF0	[FB80 BFF0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_300)
{
    // 3FF0 003F;	
    // (㿰) CJK UNIFIED IDEOGRAPH-3FF0	[FB80 BFF0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFF0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_301)
{
    // 3FF0 0061;	
    // (㿰) CJK UNIFIED IDEOGRAPH-3FF0	[FB80 BFF0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_302)
{
    // 3FF0 0041;	
    // (㿰) CJK UNIFIED IDEOGRAPH-3FF0	[FB80 BFF0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FF0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_303)
{
    // 3FF0 0062;	
    // (㿰) CJK UNIFIED IDEOGRAPH-3FF0	[FB80 BFF0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_304)
{
    // 3FF1 0021;	
    // (㿱) CJK UNIFIED IDEOGRAPH-3FF1	[FB80 BFF1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_305)
{
    // 3FF1 003F;	
    // (㿱) CJK UNIFIED IDEOGRAPH-3FF1	[FB80 BFF1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFF1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_306)
{
    // 3FF1 0061;	
    // (㿱) CJK UNIFIED IDEOGRAPH-3FF1	[FB80 BFF1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_307)
{
    // 3FF1 0041;	
    // (㿱) CJK UNIFIED IDEOGRAPH-3FF1	[FB80 BFF1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FF1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_308)
{
    // 3FF1 0062;	
    // (㿱) CJK UNIFIED IDEOGRAPH-3FF1	[FB80 BFF1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_309)
{
    // 3FF2 0021;	
    // (㿲) CJK UNIFIED IDEOGRAPH-3FF2	[FB80 BFF2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_310)
{
    // 3FF2 003F;	
    // (㿲) CJK UNIFIED IDEOGRAPH-3FF2	[FB80 BFF2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFF2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_311)
{
    // 3FF2 0061;	
    // (㿲) CJK UNIFIED IDEOGRAPH-3FF2	[FB80 BFF2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_312)
{
    // 3FF2 0041;	
    // (㿲) CJK UNIFIED IDEOGRAPH-3FF2	[FB80 BFF2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FF2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_313)
{
    // 3FF2 0062;	
    // (㿲) CJK UNIFIED IDEOGRAPH-3FF2	[FB80 BFF2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_314)
{
    // 3FF3 0021;	
    // (㿳) CJK UNIFIED IDEOGRAPH-3FF3	[FB80 BFF3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_315)
{
    // 3FF3 003F;	
    // (㿳) CJK UNIFIED IDEOGRAPH-3FF3	[FB80 BFF3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFF3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_316)
{
    // 3FF3 0061;	
    // (㿳) CJK UNIFIED IDEOGRAPH-3FF3	[FB80 BFF3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_317)
{
    // 3FF3 0041;	
    // (㿳) CJK UNIFIED IDEOGRAPH-3FF3	[FB80 BFF3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FF3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_318)
{
    // 3FF3 0062;	
    // (㿳) CJK UNIFIED IDEOGRAPH-3FF3	[FB80 BFF3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_319)
{
    // 3FF4 0021;	
    // (㿴) CJK UNIFIED IDEOGRAPH-3FF4	[FB80 BFF4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_320)
{
    // 3FF4 003F;	
    // (㿴) CJK UNIFIED IDEOGRAPH-3FF4	[FB80 BFF4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFF4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_321)
{
    // 3FF4 0061;	
    // (㿴) CJK UNIFIED IDEOGRAPH-3FF4	[FB80 BFF4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_322)
{
    // 3FF4 0041;	
    // (㿴) CJK UNIFIED IDEOGRAPH-3FF4	[FB80 BFF4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FF4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_323)
{
    // 3FF4 0062;	
    // (㿴) CJK UNIFIED IDEOGRAPH-3FF4	[FB80 BFF4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_324)
{
    // 3FF5 0021;	
    // (㿵) CJK UNIFIED IDEOGRAPH-3FF5	[FB80 BFF5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_325)
{
    // 3FF5 003F;	
    // (㿵) CJK UNIFIED IDEOGRAPH-3FF5	[FB80 BFF5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_326)
{
    // 3FF5 0061;	
    // (㿵) CJK UNIFIED IDEOGRAPH-3FF5	[FB80 BFF5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_327)
{
    // 3FF5 0041;	
    // (㿵) CJK UNIFIED IDEOGRAPH-3FF5	[FB80 BFF5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FF5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_328)
{
    // 3FF5 0062;	
    // (㿵) CJK UNIFIED IDEOGRAPH-3FF5	[FB80 BFF5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_329)
{
    // 3FF6 0021;	
    // (㿶) CJK UNIFIED IDEOGRAPH-3FF6	[FB80 BFF6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_330)
{
    // 3FF6 003F;	
    // (㿶) CJK UNIFIED IDEOGRAPH-3FF6	[FB80 BFF6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFF6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_331)
{
    // 3FF6 0061;	
    // (㿶) CJK UNIFIED IDEOGRAPH-3FF6	[FB80 BFF6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_332)
{
    // 3FF6 0041;	
    // (㿶) CJK UNIFIED IDEOGRAPH-3FF6	[FB80 BFF6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FF6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_333)
{
    // 3FF6 0062;	
    // (㿶) CJK UNIFIED IDEOGRAPH-3FF6	[FB80 BFF6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_334)
{
    // 3FF7 0021;	
    // (㿷) CJK UNIFIED IDEOGRAPH-3FF7	[FB80 BFF7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_335)
{
    // 3FF7 003F;	
    // (㿷) CJK UNIFIED IDEOGRAPH-3FF7	[FB80 BFF7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFF7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_336)
{
    // 3FF7 0061;	
    // (㿷) CJK UNIFIED IDEOGRAPH-3FF7	[FB80 BFF7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_337)
{
    // 3FF7 0041;	
    // (㿷) CJK UNIFIED IDEOGRAPH-3FF7	[FB80 BFF7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FF7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_338)
{
    // 3FF7 0062;	
    // (㿷) CJK UNIFIED IDEOGRAPH-3FF7	[FB80 BFF7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_339)
{
    // 3FF8 0021;	
    // (㿸) CJK UNIFIED IDEOGRAPH-3FF8	[FB80 BFF8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_340)
{
    // 3FF8 003F;	
    // (㿸) CJK UNIFIED IDEOGRAPH-3FF8	[FB80 BFF8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFF8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_341)
{
    // 3FF8 0061;	
    // (㿸) CJK UNIFIED IDEOGRAPH-3FF8	[FB80 BFF8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_342)
{
    // 3FF8 0041;	
    // (㿸) CJK UNIFIED IDEOGRAPH-3FF8	[FB80 BFF8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FF8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_343)
{
    // 3FF8 0062;	
    // (㿸) CJK UNIFIED IDEOGRAPH-3FF8	[FB80 BFF8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_344)
{
    // 3FF9 0021;	
    // (㿹) CJK UNIFIED IDEOGRAPH-3FF9	[FB80 BFF9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_345)
{
    // 3FF9 003F;	
    // (㿹) CJK UNIFIED IDEOGRAPH-3FF9	[FB80 BFF9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFF9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_346)
{
    // 3FF9 0061;	
    // (㿹) CJK UNIFIED IDEOGRAPH-3FF9	[FB80 BFF9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_347)
{
    // 3FF9 0041;	
    // (㿹) CJK UNIFIED IDEOGRAPH-3FF9	[FB80 BFF9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FF9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_348)
{
    // 3FF9 0062;	
    // (㿹) CJK UNIFIED IDEOGRAPH-3FF9	[FB80 BFF9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FF9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_349)
{
    // 3FFA 0021;	
    // (㿺) CJK UNIFIED IDEOGRAPH-3FFA	[FB80 BFFA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFFA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_350)
{
    // 3FFA 003F;	
    // (㿺) CJK UNIFIED IDEOGRAPH-3FFA	[FB80 BFFA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFFA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_351)
{
    // 3FFA 0061;	
    // (㿺) CJK UNIFIED IDEOGRAPH-3FFA	[FB80 BFFA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_352)
{
    // 3FFA 0041;	
    // (㿺) CJK UNIFIED IDEOGRAPH-3FFA	[FB80 BFFA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FFA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_353)
{
    // 3FFA 0062;	
    // (㿺) CJK UNIFIED IDEOGRAPH-3FFA	[FB80 BFFA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFFA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_354)
{
    // 3FFB 0021;	
    // (㿻) CJK UNIFIED IDEOGRAPH-3FFB	[FB80 BFFB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFFB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_355)
{
    // 3FFB 003F;	
    // (㿻) CJK UNIFIED IDEOGRAPH-3FFB	[FB80 BFFB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFFB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_356)
{
    // 3FFB 0061;	
    // (㿻) CJK UNIFIED IDEOGRAPH-3FFB	[FB80 BFFB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_357)
{
    // 3FFB 0041;	
    // (㿻) CJK UNIFIED IDEOGRAPH-3FFB	[FB80 BFFB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FFB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_358)
{
    // 3FFB 0062;	
    // (㿻) CJK UNIFIED IDEOGRAPH-3FFB	[FB80 BFFB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFFB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_359)
{
    // 3FFC 0021;	
    // (㿼) CJK UNIFIED IDEOGRAPH-3FFC	[FB80 BFFC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFFC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_360)
{
    // 2F93E 0021;	
    // (㿼) CJK COMPATIBILITY IDEOGRAPH-2F93E	[FB80 BFFC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F93E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFFC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_361)
{
    // 3FFC 003F;	
    // (㿼) CJK UNIFIED IDEOGRAPH-3FFC	[FB80 BFFC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFFC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_362)
{
    // 2F93E 003F;	
    // (㿼) CJK COMPATIBILITY IDEOGRAPH-2F93E	[FB80 BFFC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F93E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFFC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_363)
{
    // 3FFC 0061;	
    // (㿼) CJK UNIFIED IDEOGRAPH-3FFC	[FB80 BFFC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_364)
{
    // 2F93E 0061;	
    // (㿼) CJK COMPATIBILITY IDEOGRAPH-2F93E	[FB80 BFFC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F93E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_365)
{
    // 3FFC 0041;	
    // (㿼) CJK UNIFIED IDEOGRAPH-3FFC	[FB80 BFFC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FFC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_366)
{
    // 2F93E 0041;	
    // (㿼) CJK COMPATIBILITY IDEOGRAPH-2F93E	[FB80 BFFC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F93E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_367)
{
    // 3FFC 0062;	
    // (㿼) CJK UNIFIED IDEOGRAPH-3FFC	[FB80 BFFC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFFC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_368)
{
    // 2F93E 0062;	
    // (㿼) CJK COMPATIBILITY IDEOGRAPH-2F93E	[FB80 BFFC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F93E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFFC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_369)
{
    // 3FFD 0021;	
    // (㿽) CJK UNIFIED IDEOGRAPH-3FFD	[FB80 BFFD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFFD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_370)
{
    // 3FFD 003F;	
    // (㿽) CJK UNIFIED IDEOGRAPH-3FFD	[FB80 BFFD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFFD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_371)
{
    // 3FFD 0061;	
    // (㿽) CJK UNIFIED IDEOGRAPH-3FFD	[FB80 BFFD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_372)
{
    // 3FFD 0041;	
    // (㿽) CJK UNIFIED IDEOGRAPH-3FFD	[FB80 BFFD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FFD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_373)
{
    // 3FFD 0062;	
    // (㿽) CJK UNIFIED IDEOGRAPH-3FFD	[FB80 BFFD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFFD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_374)
{
    // 3FFE 0021;	
    // (㿾) CJK UNIFIED IDEOGRAPH-3FFE	[FB80 BFFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_375)
{
    // 3FFE 003F;	
    // (㿾) CJK UNIFIED IDEOGRAPH-3FFE	[FB80 BFFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_376)
{
    // 3FFE 0061;	
    // (㿾) CJK UNIFIED IDEOGRAPH-3FFE	[FB80 BFFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_377)
{
    // 3FFE 0041;	
    // (㿾) CJK UNIFIED IDEOGRAPH-3FFE	[FB80 BFFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FFE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_378)
{
    // 3FFE 0062;	
    // (㿾) CJK UNIFIED IDEOGRAPH-3FFE	[FB80 BFFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_379)
{
    // 3FFF 0021;	
    // (㿿) CJK UNIFIED IDEOGRAPH-3FFF	[FB80 BFFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_380)
{
    // 3FFF 003F;	
    // (㿿) CJK UNIFIED IDEOGRAPH-3FFF	[FB80 BFFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_381)
{
    // 3FFF 0061;	
    // (㿿) CJK UNIFIED IDEOGRAPH-3FFF	[FB80 BFFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_382)
{
    // 3FFF 0041;	
    // (㿿) CJK UNIFIED IDEOGRAPH-3FFF	[FB80 BFFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FFF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_383)
{
    // 3FFF 0062;	
    // (㿿) CJK UNIFIED IDEOGRAPH-3FFF	[FB80 BFFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_384)
{
    // 4000 0021;	
    // (䀀) CJK UNIFIED IDEOGRAPH-4000	[FB80 C000 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4000, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC000, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_385)
{
    // 4000 003F;	
    // (䀀) CJK UNIFIED IDEOGRAPH-4000	[FB80 C000 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4000, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC000, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_386)
{
    // 4000 0061;	
    // (䀀) CJK UNIFIED IDEOGRAPH-4000	[FB80 C000 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4000, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC000, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_387)
{
    // 4000 0041;	
    // (䀀) CJK UNIFIED IDEOGRAPH-4000	[FB80 C000 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4000, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC000, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_388)
{
    // 4000 0062;	
    // (䀀) CJK UNIFIED IDEOGRAPH-4000	[FB80 C000 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4000, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC000, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_389)
{
    // 4001 0021;	
    // (䀁) CJK UNIFIED IDEOGRAPH-4001	[FB80 C001 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4001, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC001, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_390)
{
    // 4001 003F;	
    // (䀁) CJK UNIFIED IDEOGRAPH-4001	[FB80 C001 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4001, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC001, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_391)
{
    // 4001 0061;	
    // (䀁) CJK UNIFIED IDEOGRAPH-4001	[FB80 C001 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4001, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC001, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_392)
{
    // 4001 0041;	
    // (䀁) CJK UNIFIED IDEOGRAPH-4001	[FB80 C001 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4001, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC001, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_393)
{
    // 4001 0062;	
    // (䀁) CJK UNIFIED IDEOGRAPH-4001	[FB80 C001 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4001, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC001, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_394)
{
    // 4002 0021;	
    // (䀂) CJK UNIFIED IDEOGRAPH-4002	[FB80 C002 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4002, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC002, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_395)
{
    // 4002 003F;	
    // (䀂) CJK UNIFIED IDEOGRAPH-4002	[FB80 C002 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4002, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC002, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_396)
{
    // 4002 0061;	
    // (䀂) CJK UNIFIED IDEOGRAPH-4002	[FB80 C002 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4002, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC002, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_397)
{
    // 4002 0041;	
    // (䀂) CJK UNIFIED IDEOGRAPH-4002	[FB80 C002 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4002, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC002, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_398)
{
    // 4002 0062;	
    // (䀂) CJK UNIFIED IDEOGRAPH-4002	[FB80 C002 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4002, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC002, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_399)
{
    // 4003 0021;	
    // (䀃) CJK UNIFIED IDEOGRAPH-4003	[FB80 C003 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4003, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC003, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_400)
{
    // 4003 003F;	
    // (䀃) CJK UNIFIED IDEOGRAPH-4003	[FB80 C003 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4003, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC003, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_401)
{
    // 4003 0061;	
    // (䀃) CJK UNIFIED IDEOGRAPH-4003	[FB80 C003 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4003, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC003, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_402)
{
    // 4003 0041;	
    // (䀃) CJK UNIFIED IDEOGRAPH-4003	[FB80 C003 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4003, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC003, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_403)
{
    // 4003 0062;	
    // (䀃) CJK UNIFIED IDEOGRAPH-4003	[FB80 C003 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4003, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC003, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_404)
{
    // 4004 0021;	
    // (䀄) CJK UNIFIED IDEOGRAPH-4004	[FB80 C004 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4004, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC004, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_405)
{
    // 4004 003F;	
    // (䀄) CJK UNIFIED IDEOGRAPH-4004	[FB80 C004 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4004, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC004, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_406)
{
    // 4004 0061;	
    // (䀄) CJK UNIFIED IDEOGRAPH-4004	[FB80 C004 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4004, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC004, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_407)
{
    // 4004 0041;	
    // (䀄) CJK UNIFIED IDEOGRAPH-4004	[FB80 C004 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4004, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC004, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_408)
{
    // 4004 0062;	
    // (䀄) CJK UNIFIED IDEOGRAPH-4004	[FB80 C004 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4004, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC004, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_409)
{
    // 4005 0021;	
    // (䀅) CJK UNIFIED IDEOGRAPH-4005	[FB80 C005 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4005, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC005, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_410)
{
    // 4005 003F;	
    // (䀅) CJK UNIFIED IDEOGRAPH-4005	[FB80 C005 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4005, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC005, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_411)
{
    // 4005 0061;	
    // (䀅) CJK UNIFIED IDEOGRAPH-4005	[FB80 C005 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4005, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC005, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_412)
{
    // 4005 0041;	
    // (䀅) CJK UNIFIED IDEOGRAPH-4005	[FB80 C005 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4005, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC005, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_413)
{
    // 4005 0062;	
    // (䀅) CJK UNIFIED IDEOGRAPH-4005	[FB80 C005 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4005, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC005, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_414)
{
    // 4006 0021;	
    // (䀆) CJK UNIFIED IDEOGRAPH-4006	[FB80 C006 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4006, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC006, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_415)
{
    // 4006 003F;	
    // (䀆) CJK UNIFIED IDEOGRAPH-4006	[FB80 C006 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4006, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC006, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_416)
{
    // 4006 0061;	
    // (䀆) CJK UNIFIED IDEOGRAPH-4006	[FB80 C006 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4006, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC006, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_417)
{
    // 4006 0041;	
    // (䀆) CJK UNIFIED IDEOGRAPH-4006	[FB80 C006 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4006, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC006, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_418)
{
    // 4006 0062;	
    // (䀆) CJK UNIFIED IDEOGRAPH-4006	[FB80 C006 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4006, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC006, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_419)
{
    // 4007 0021;	
    // (䀇) CJK UNIFIED IDEOGRAPH-4007	[FB80 C007 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4007, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC007, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_420)
{
    // 4007 003F;	
    // (䀇) CJK UNIFIED IDEOGRAPH-4007	[FB80 C007 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4007, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC007, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_421)
{
    // 4007 0061;	
    // (䀇) CJK UNIFIED IDEOGRAPH-4007	[FB80 C007 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4007, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC007, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_422)
{
    // 4007 0041;	
    // (䀇) CJK UNIFIED IDEOGRAPH-4007	[FB80 C007 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4007, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC007, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_423)
{
    // 4007 0062;	
    // (䀇) CJK UNIFIED IDEOGRAPH-4007	[FB80 C007 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4007, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC007, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_424)
{
    // 4008 0021;	
    // (䀈) CJK UNIFIED IDEOGRAPH-4008	[FB80 C008 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4008, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC008, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_425)
{
    // 2F93F 0021;	
    // (䀈) CJK COMPATIBILITY IDEOGRAPH-2F93F	[FB80 C008 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F93F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC008, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_426)
{
    // 4008 003F;	
    // (䀈) CJK UNIFIED IDEOGRAPH-4008	[FB80 C008 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4008, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC008, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_427)
{
    // 2F93F 003F;	
    // (䀈) CJK COMPATIBILITY IDEOGRAPH-2F93F	[FB80 C008 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F93F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC008, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_428)
{
    // 4008 0061;	
    // (䀈) CJK UNIFIED IDEOGRAPH-4008	[FB80 C008 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4008, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC008, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_429)
{
    // 2F93F 0061;	
    // (䀈) CJK COMPATIBILITY IDEOGRAPH-2F93F	[FB80 C008 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F93F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC008, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_430)
{
    // 4008 0041;	
    // (䀈) CJK UNIFIED IDEOGRAPH-4008	[FB80 C008 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4008, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC008, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_431)
{
    // 2F93F 0041;	
    // (䀈) CJK COMPATIBILITY IDEOGRAPH-2F93F	[FB80 C008 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F93F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC008, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_432)
{
    // 4008 0062;	
    // (䀈) CJK UNIFIED IDEOGRAPH-4008	[FB80 C008 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4008, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC008, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_433)
{
    // 2F93F 0062;	
    // (䀈) CJK COMPATIBILITY IDEOGRAPH-2F93F	[FB80 C008 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F93F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC008, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_434)
{
    // 4009 0021;	
    // (䀉) CJK UNIFIED IDEOGRAPH-4009	[FB80 C009 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4009, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC009, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_435)
{
    // 4009 003F;	
    // (䀉) CJK UNIFIED IDEOGRAPH-4009	[FB80 C009 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4009, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC009, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_436)
{
    // 4009 0061;	
    // (䀉) CJK UNIFIED IDEOGRAPH-4009	[FB80 C009 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4009, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC009, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_437)
{
    // 4009 0041;	
    // (䀉) CJK UNIFIED IDEOGRAPH-4009	[FB80 C009 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4009, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC009, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_438)
{
    // 4009 0062;	
    // (䀉) CJK UNIFIED IDEOGRAPH-4009	[FB80 C009 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4009, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC009, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_439)
{
    // 400A 0021;	
    // (䀊) CJK UNIFIED IDEOGRAPH-400A	[FB80 C00A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x400A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC00A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_440)
{
    // 400A 003F;	
    // (䀊) CJK UNIFIED IDEOGRAPH-400A	[FB80 C00A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x400A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC00A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_441)
{
    // 400A 0061;	
    // (䀊) CJK UNIFIED IDEOGRAPH-400A	[FB80 C00A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x400A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC00A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_442)
{
    // 400A 0041;	
    // (䀊) CJK UNIFIED IDEOGRAPH-400A	[FB80 C00A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x400A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC00A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_443)
{
    // 400A 0062;	
    // (䀊) CJK UNIFIED IDEOGRAPH-400A	[FB80 C00A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x400A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC00A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_444)
{
    // 400B 0021;	
    // (䀋) CJK UNIFIED IDEOGRAPH-400B	[FB80 C00B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x400B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC00B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_445)
{
    // 400B 003F;	
    // (䀋) CJK UNIFIED IDEOGRAPH-400B	[FB80 C00B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x400B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC00B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_446)
{
    // 400B 0061;	
    // (䀋) CJK UNIFIED IDEOGRAPH-400B	[FB80 C00B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x400B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC00B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_447)
{
    // 400B 0041;	
    // (䀋) CJK UNIFIED IDEOGRAPH-400B	[FB80 C00B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x400B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC00B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_448)
{
    // 400B 0062;	
    // (䀋) CJK UNIFIED IDEOGRAPH-400B	[FB80 C00B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x400B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC00B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_449)
{
    // 400C 0021;	
    // (䀌) CJK UNIFIED IDEOGRAPH-400C	[FB80 C00C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x400C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC00C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_450)
{
    // 400C 003F;	
    // (䀌) CJK UNIFIED IDEOGRAPH-400C	[FB80 C00C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x400C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC00C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_451)
{
    // 400C 0061;	
    // (䀌) CJK UNIFIED IDEOGRAPH-400C	[FB80 C00C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x400C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC00C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_452)
{
    // 400C 0041;	
    // (䀌) CJK UNIFIED IDEOGRAPH-400C	[FB80 C00C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x400C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC00C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_453)
{
    // 400C 0062;	
    // (䀌) CJK UNIFIED IDEOGRAPH-400C	[FB80 C00C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x400C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC00C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_454)
{
    // 400D 0021;	
    // (䀍) CJK UNIFIED IDEOGRAPH-400D	[FB80 C00D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x400D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC00D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_455)
{
    // 400D 003F;	
    // (䀍) CJK UNIFIED IDEOGRAPH-400D	[FB80 C00D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x400D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC00D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_456)
{
    // 400D 0061;	
    // (䀍) CJK UNIFIED IDEOGRAPH-400D	[FB80 C00D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x400D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC00D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_457)
{
    // 400D 0041;	
    // (䀍) CJK UNIFIED IDEOGRAPH-400D	[FB80 C00D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x400D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC00D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_458)
{
    // 400D 0062;	
    // (䀍) CJK UNIFIED IDEOGRAPH-400D	[FB80 C00D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x400D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC00D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_459)
{
    // 400E 0021;	
    // (䀎) CJK UNIFIED IDEOGRAPH-400E	[FB80 C00E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x400E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC00E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_460)
{
    // 400E 003F;	
    // (䀎) CJK UNIFIED IDEOGRAPH-400E	[FB80 C00E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x400E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC00E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_461)
{
    // 400E 0061;	
    // (䀎) CJK UNIFIED IDEOGRAPH-400E	[FB80 C00E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x400E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC00E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_462)
{
    // 400E 0041;	
    // (䀎) CJK UNIFIED IDEOGRAPH-400E	[FB80 C00E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x400E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC00E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_463)
{
    // 400E 0062;	
    // (䀎) CJK UNIFIED IDEOGRAPH-400E	[FB80 C00E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x400E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC00E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_464)
{
    // 400F 0021;	
    // (䀏) CJK UNIFIED IDEOGRAPH-400F	[FB80 C00F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x400F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC00F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_465)
{
    // 400F 003F;	
    // (䀏) CJK UNIFIED IDEOGRAPH-400F	[FB80 C00F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x400F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC00F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_466)
{
    // 400F 0061;	
    // (䀏) CJK UNIFIED IDEOGRAPH-400F	[FB80 C00F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x400F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC00F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_467)
{
    // 400F 0041;	
    // (䀏) CJK UNIFIED IDEOGRAPH-400F	[FB80 C00F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x400F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC00F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_468)
{
    // 400F 0062;	
    // (䀏) CJK UNIFIED IDEOGRAPH-400F	[FB80 C00F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x400F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC00F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_469)
{
    // 4010 0021;	
    // (䀐) CJK UNIFIED IDEOGRAPH-4010	[FB80 C010 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4010, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC010, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_470)
{
    // 4010 003F;	
    // (䀐) CJK UNIFIED IDEOGRAPH-4010	[FB80 C010 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4010, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC010, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_471)
{
    // 4010 0061;	
    // (䀐) CJK UNIFIED IDEOGRAPH-4010	[FB80 C010 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4010, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC010, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_472)
{
    // 4010 0041;	
    // (䀐) CJK UNIFIED IDEOGRAPH-4010	[FB80 C010 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4010, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC010, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_473)
{
    // 4010 0062;	
    // (䀐) CJK UNIFIED IDEOGRAPH-4010	[FB80 C010 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4010, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC010, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_474)
{
    // 4011 0021;	
    // (䀑) CJK UNIFIED IDEOGRAPH-4011	[FB80 C011 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4011, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC011, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_475)
{
    // 4011 003F;	
    // (䀑) CJK UNIFIED IDEOGRAPH-4011	[FB80 C011 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4011, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC011, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_476)
{
    // 4011 0061;	
    // (䀑) CJK UNIFIED IDEOGRAPH-4011	[FB80 C011 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4011, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC011, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_477)
{
    // 4011 0041;	
    // (䀑) CJK UNIFIED IDEOGRAPH-4011	[FB80 C011 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4011, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC011, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_478)
{
    // 4011 0062;	
    // (䀑) CJK UNIFIED IDEOGRAPH-4011	[FB80 C011 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4011, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC011, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_479)
{
    // 4012 0021;	
    // (䀒) CJK UNIFIED IDEOGRAPH-4012	[FB80 C012 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4012, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC012, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_480)
{
    // 4012 003F;	
    // (䀒) CJK UNIFIED IDEOGRAPH-4012	[FB80 C012 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4012, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC012, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_481)
{
    // 4012 0061;	
    // (䀒) CJK UNIFIED IDEOGRAPH-4012	[FB80 C012 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4012, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC012, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_482)
{
    // 4012 0041;	
    // (䀒) CJK UNIFIED IDEOGRAPH-4012	[FB80 C012 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4012, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC012, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_483)
{
    // 4012 0062;	
    // (䀒) CJK UNIFIED IDEOGRAPH-4012	[FB80 C012 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4012, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC012, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_484)
{
    // 4013 0021;	
    // (䀓) CJK UNIFIED IDEOGRAPH-4013	[FB80 C013 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4013, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC013, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_485)
{
    // 4013 003F;	
    // (䀓) CJK UNIFIED IDEOGRAPH-4013	[FB80 C013 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4013, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC013, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_486)
{
    // 4013 0061;	
    // (䀓) CJK UNIFIED IDEOGRAPH-4013	[FB80 C013 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4013, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC013, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_487)
{
    // 4013 0041;	
    // (䀓) CJK UNIFIED IDEOGRAPH-4013	[FB80 C013 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4013, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC013, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_488)
{
    // 4013 0062;	
    // (䀓) CJK UNIFIED IDEOGRAPH-4013	[FB80 C013 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4013, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC013, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_489)
{
    // 4014 0021;	
    // (䀔) CJK UNIFIED IDEOGRAPH-4014	[FB80 C014 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4014, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC014, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_490)
{
    // 4014 003F;	
    // (䀔) CJK UNIFIED IDEOGRAPH-4014	[FB80 C014 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4014, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC014, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_491)
{
    // 4014 0061;	
    // (䀔) CJK UNIFIED IDEOGRAPH-4014	[FB80 C014 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4014, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC014, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_492)
{
    // 4014 0041;	
    // (䀔) CJK UNIFIED IDEOGRAPH-4014	[FB80 C014 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4014, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC014, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_493)
{
    // 4014 0062;	
    // (䀔) CJK UNIFIED IDEOGRAPH-4014	[FB80 C014 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4014, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC014, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_494)
{
    // 4015 0021;	
    // (䀕) CJK UNIFIED IDEOGRAPH-4015	[FB80 C015 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4015, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC015, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_495)
{
    // 4015 003F;	
    // (䀕) CJK UNIFIED IDEOGRAPH-4015	[FB80 C015 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4015, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC015, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_496)
{
    // 4015 0061;	
    // (䀕) CJK UNIFIED IDEOGRAPH-4015	[FB80 C015 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4015, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC015, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_497)
{
    // 4015 0041;	
    // (䀕) CJK UNIFIED IDEOGRAPH-4015	[FB80 C015 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4015, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC015, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_498)
{
    // 4015 0062;	
    // (䀕) CJK UNIFIED IDEOGRAPH-4015	[FB80 C015 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4015, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC015, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_357_499)
{
    // 4016 0021;	
    // (䀖) CJK UNIFIED IDEOGRAPH-4016	[FB80 C016 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4016, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC016, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

