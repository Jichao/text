// Warning! This file is autogenerated.
#include <boost/text/bidirectional.hpp>

#include "bidi_tests.hpp"

#include <gtest/gtest.h>

#include <algorithm>


std::vector<int> expected_levels;

TEST(bidi, bidi_262_000)
{

    expected_levels = { 1, 3, 1, -1 };

    {
        // RLI CS FSI LRE; 4 ('RTL') (line 262001)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x2068, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS FSI LRO; 4 ('RTL') (line 262002)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x2068, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS FSI RLE; 4 ('RTL') (line 262003)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x2068, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS FSI RLO; 4 ('RTL') (line 262004)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x2068, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS FSI PDF; 4 ('RTL') (line 262005)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x2068, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS FSI BN; 4 ('RTL') (line 262006)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x2068, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS PDI LRE; 4 ('RTL') (line 262007)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x2069, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS PDI LRO; 4 ('RTL') (line 262008)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x2069, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS PDI RLE; 4 ('RTL') (line 262009)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x2069, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS PDI RLO; 4 ('RTL') (line 262010)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x2069, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS PDI PDF; 4 ('RTL') (line 262011)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x2069, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS PDI BN; 4 ('RTL') (line 262012)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x2069, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM S LRE; 4 ('RTL') (line 262013)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0009, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM S LRO; 4 ('RTL') (line 262014)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0009, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM S RLE; 4 ('RTL') (line 262015)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0009, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM S RLO; 4 ('RTL') (line 262016)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0009, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM S PDF; 4 ('RTL') (line 262017)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0009, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM S BN; 4 ('RTL') (line 262018)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0009, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM WS LRE; 4 ('RTL') (line 262019)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0020, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM WS LRO; 4 ('RTL') (line 262020)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0020, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM WS RLE; 4 ('RTL') (line 262021)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0020, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM WS RLO; 4 ('RTL') (line 262022)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0020, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM WS PDF; 4 ('RTL') (line 262023)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0020, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM WS BN; 4 ('RTL') (line 262024)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0020, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM LRI LRE; 4 ('RTL') (line 262025)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x2066, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_001)
{

    expected_levels = { 1, 3, 1, -1 };

    {
        // RLI NSM LRI LRO; 4 ('RTL') (line 262026)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x2066, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM LRI RLE; 4 ('RTL') (line 262027)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x2066, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM LRI RLO; 4 ('RTL') (line 262028)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x2066, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM LRI PDF; 4 ('RTL') (line 262029)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x2066, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM LRI BN; 4 ('RTL') (line 262030)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x2066, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM RLI LRE; 4 ('RTL') (line 262031)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x2067, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM RLI LRO; 4 ('RTL') (line 262032)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x2067, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM RLI RLE; 4 ('RTL') (line 262033)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x2067, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM RLI RLO; 4 ('RTL') (line 262034)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x2067, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM RLI PDF; 4 ('RTL') (line 262035)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x2067, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM RLI BN; 4 ('RTL') (line 262036)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x2067, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM FSI LRE; 4 ('RTL') (line 262037)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x2068, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM FSI LRO; 4 ('RTL') (line 262038)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x2068, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM FSI RLE; 4 ('RTL') (line 262039)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x2068, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM FSI RLO; 4 ('RTL') (line 262040)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x2068, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM FSI PDF; 4 ('RTL') (line 262041)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x2068, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM FSI BN; 4 ('RTL') (line 262042)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x2068, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM PDI LRE; 4 ('RTL') (line 262043)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x2069, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM PDI LRO; 4 ('RTL') (line 262044)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x2069, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM PDI RLE; 4 ('RTL') (line 262045)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x2069, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM PDI RLO; 4 ('RTL') (line 262046)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x2069, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM PDI PDF; 4 ('RTL') (line 262047)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x2069, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM PDI BN; 4 ('RTL') (line 262048)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x2069, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON S LRE; 4 ('RTL') (line 262049)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0009, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON S LRO; 4 ('RTL') (line 262050)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0009, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_002)
{

    expected_levels = { 1, 3, 1, -1 };

    {
        // RLI ON S RLE; 4 ('RTL') (line 262051)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0009, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON S RLO; 4 ('RTL') (line 262052)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0009, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON S PDF; 4 ('RTL') (line 262053)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0009, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON S BN; 4 ('RTL') (line 262054)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0009, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON WS LRE; 4 ('RTL') (line 262055)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0020, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON WS LRO; 4 ('RTL') (line 262056)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0020, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON WS RLE; 4 ('RTL') (line 262057)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0020, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON WS RLO; 4 ('RTL') (line 262058)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0020, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON WS PDF; 4 ('RTL') (line 262059)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0020, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON WS BN; 4 ('RTL') (line 262060)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0020, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON LRI LRE; 4 ('RTL') (line 262061)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x2066, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON LRI LRO; 4 ('RTL') (line 262062)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x2066, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON LRI RLE; 4 ('RTL') (line 262063)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x2066, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON LRI RLO; 4 ('RTL') (line 262064)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x2066, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON LRI PDF; 4 ('RTL') (line 262065)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x2066, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON LRI BN; 4 ('RTL') (line 262066)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x2066, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON RLI LRE; 4 ('RTL') (line 262067)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x2067, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON RLI LRO; 4 ('RTL') (line 262068)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x2067, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON RLI RLE; 4 ('RTL') (line 262069)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x2067, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON RLI RLO; 4 ('RTL') (line 262070)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x2067, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON RLI PDF; 4 ('RTL') (line 262071)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x2067, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON RLI BN; 4 ('RTL') (line 262072)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x2067, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON FSI LRE; 4 ('RTL') (line 262073)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x2068, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON FSI LRO; 4 ('RTL') (line 262074)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x2068, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON FSI RLE; 4 ('RTL') (line 262075)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x2068, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_003)
{

    expected_levels = { 1, 3, 1, -1 };

    {
        // RLI ON FSI RLO; 4 ('RTL') (line 262076)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x2068, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON FSI PDF; 4 ('RTL') (line 262077)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x2068, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON FSI BN; 4 ('RTL') (line 262078)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x2068, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON PDI LRE; 4 ('RTL') (line 262079)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x2069, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON PDI LRO; 4 ('RTL') (line 262080)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x2069, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON PDI RLE; 4 ('RTL') (line 262081)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x2069, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON PDI RLO; 4 ('RTL') (line 262082)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x2069, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON PDI PDF; 4 ('RTL') (line 262083)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x2069, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON PDI BN; 4 ('RTL') (line 262084)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x2069, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R S LRE; 4 ('RTL') (line 262085)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0009, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R S LRO; 4 ('RTL') (line 262086)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0009, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R S RLE; 4 ('RTL') (line 262087)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0009, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R S RLO; 4 ('RTL') (line 262088)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0009, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R S PDF; 4 ('RTL') (line 262089)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0009, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R S BN; 4 ('RTL') (line 262090)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0009, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R WS LRE; 4 ('RTL') (line 262091)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0020, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R WS LRO; 4 ('RTL') (line 262092)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0020, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R WS RLE; 4 ('RTL') (line 262093)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0020, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R WS RLO; 4 ('RTL') (line 262094)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0020, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R WS PDF; 4 ('RTL') (line 262095)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0020, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R WS BN; 4 ('RTL') (line 262096)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0020, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R LRI LRE; 4 ('RTL') (line 262097)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x2066, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R LRI LRO; 4 ('RTL') (line 262098)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x2066, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R LRI RLE; 4 ('RTL') (line 262099)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x2066, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R LRI RLO; 4 ('RTL') (line 262100)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x2066, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_004)
{

    expected_levels = { 1, 3, 1, -1 };

    {
        // FSI R LRI PDF; 4 ('RTL') (line 262101)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x2066, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R LRI BN; 4 ('RTL') (line 262102)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x2066, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R RLI LRE; 4 ('RTL') (line 262103)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x2067, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R RLI LRO; 4 ('RTL') (line 262104)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x2067, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R RLI RLE; 4 ('RTL') (line 262105)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x2067, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R RLI RLO; 4 ('RTL') (line 262106)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x2067, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R RLI PDF; 4 ('RTL') (line 262107)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x2067, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R RLI BN; 4 ('RTL') (line 262108)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x2067, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R FSI LRE; 4 ('RTL') (line 262109)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x2068, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R FSI LRO; 4 ('RTL') (line 262110)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x2068, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R FSI RLE; 4 ('RTL') (line 262111)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x2068, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R FSI RLO; 4 ('RTL') (line 262112)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x2068, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R FSI PDF; 4 ('RTL') (line 262113)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x2068, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R FSI BN; 4 ('RTL') (line 262114)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x2068, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R PDI LRE; 4 ('RTL') (line 262115)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x2069, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R PDI LRO; 4 ('RTL') (line 262116)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x2069, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R PDI RLE; 4 ('RTL') (line 262117)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x2069, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R PDI RLO; 4 ('RTL') (line 262118)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x2069, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R PDI PDF; 4 ('RTL') (line 262119)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x2069, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R PDI BN; 4 ('RTL') (line 262120)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x2069, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL S LRE; 4 ('RTL') (line 262121)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0009, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL S LRO; 4 ('RTL') (line 262122)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0009, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL S RLE; 4 ('RTL') (line 262123)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0009, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL S RLO; 4 ('RTL') (line 262124)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0009, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL S PDF; 4 ('RTL') (line 262125)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0009, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_005)
{

    expected_levels = { 1, 3, 1, -1 };

    {
        // FSI AL S BN; 4 ('RTL') (line 262126)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0009, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL WS LRE; 4 ('RTL') (line 262127)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0020, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL WS LRO; 4 ('RTL') (line 262128)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0020, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL WS RLE; 4 ('RTL') (line 262129)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0020, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL WS RLO; 4 ('RTL') (line 262130)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0020, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL WS PDF; 4 ('RTL') (line 262131)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0020, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL WS BN; 4 ('RTL') (line 262132)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0020, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL LRI LRE; 4 ('RTL') (line 262133)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x2066, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL LRI LRO; 4 ('RTL') (line 262134)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x2066, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL LRI RLE; 4 ('RTL') (line 262135)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x2066, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL LRI RLO; 4 ('RTL') (line 262136)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x2066, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL LRI PDF; 4 ('RTL') (line 262137)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x2066, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL LRI BN; 4 ('RTL') (line 262138)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x2066, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL RLI LRE; 4 ('RTL') (line 262139)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x2067, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL RLI LRO; 4 ('RTL') (line 262140)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x2067, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL RLI RLE; 4 ('RTL') (line 262141)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x2067, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL RLI RLO; 4 ('RTL') (line 262142)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x2067, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL RLI PDF; 4 ('RTL') (line 262143)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x2067, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL RLI BN; 4 ('RTL') (line 262144)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x2067, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL FSI LRE; 4 ('RTL') (line 262145)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x2068, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL FSI LRO; 4 ('RTL') (line 262146)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x2068, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL FSI RLE; 4 ('RTL') (line 262147)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x2068, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL FSI RLO; 4 ('RTL') (line 262148)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x2068, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL FSI PDF; 4 ('RTL') (line 262149)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x2068, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL FSI BN; 4 ('RTL') (line 262150)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x2068, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_006)
{

    expected_levels = { 1, 3, 1, -1 };

    {
        // FSI AL PDI LRE; 4 ('RTL') (line 262151)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x2069, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL PDI LRO; 4 ('RTL') (line 262152)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x2069, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL PDI RLE; 4 ('RTL') (line 262153)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x2069, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL PDI RLO; 4 ('RTL') (line 262154)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x2069, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL PDI PDF; 4 ('RTL') (line 262155)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x2069, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL PDI BN; 4 ('RTL') (line 262156)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x2069, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 3, 2, -1 };

    {
        // LRI R L LRE; 4 ('RTL') (line 262162)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R L LRO; 4 ('RTL') (line 262163)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R L RLE; 4 ('RTL') (line 262164)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R L RLO; 4 ('RTL') (line 262165)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R L PDF; 4 ('RTL') (line 262166)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R L BN; 4 ('RTL') (line 262167)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R ES LRE; 4 ('RTL') (line 262168)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R ES LRO; 4 ('RTL') (line 262169)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R ES RLE; 4 ('RTL') (line 262170)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R ES RLO; 4 ('RTL') (line 262171)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R ES PDF; 4 ('RTL') (line 262172)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R ES BN; 4 ('RTL') (line 262173)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R ET LRE; 4 ('RTL') (line 262174)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R ET LRO; 4 ('RTL') (line 262175)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R ET RLE; 4 ('RTL') (line 262176)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R ET RLO; 4 ('RTL') (line 262177)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R ET PDF; 4 ('RTL') (line 262178)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R ET BN; 4 ('RTL') (line 262179)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R CS LRE; 4 ('RTL') (line 262180)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_007)
{

    expected_levels = { 1, 3, 2, -1 };

    {
        // LRI R CS LRO; 4 ('RTL') (line 262181)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R CS RLE; 4 ('RTL') (line 262182)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R CS RLO; 4 ('RTL') (line 262183)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R CS PDF; 4 ('RTL') (line 262184)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R CS BN; 4 ('RTL') (line 262185)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R ON LRE; 4 ('RTL') (line 262186)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R ON LRO; 4 ('RTL') (line 262187)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R ON RLE; 4 ('RTL') (line 262188)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R ON RLO; 4 ('RTL') (line 262189)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R ON PDF; 4 ('RTL') (line 262190)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R ON BN; 4 ('RTL') (line 262191)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL L LRE; 4 ('RTL') (line 262192)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL L LRO; 4 ('RTL') (line 262193)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL L RLE; 4 ('RTL') (line 262194)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL L RLO; 4 ('RTL') (line 262195)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL L PDF; 4 ('RTL') (line 262196)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL L BN; 4 ('RTL') (line 262197)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL ES LRE; 4 ('RTL') (line 262198)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL ES LRO; 4 ('RTL') (line 262199)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL ES RLE; 4 ('RTL') (line 262200)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL ES RLO; 4 ('RTL') (line 262201)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL ES PDF; 4 ('RTL') (line 262202)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL ES BN; 4 ('RTL') (line 262203)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL ET LRE; 4 ('RTL') (line 262204)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL ET LRO; 4 ('RTL') (line 262205)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_008)
{

    expected_levels = { 1, 3, 2, -1 };

    {
        // LRI AL ET RLE; 4 ('RTL') (line 262206)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL ET RLO; 4 ('RTL') (line 262207)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL ET PDF; 4 ('RTL') (line 262208)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL ET BN; 4 ('RTL') (line 262209)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL CS LRE; 4 ('RTL') (line 262210)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL CS LRO; 4 ('RTL') (line 262211)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL CS RLE; 4 ('RTL') (line 262212)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL CS RLO; 4 ('RTL') (line 262213)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL CS PDF; 4 ('RTL') (line 262214)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL CS BN; 4 ('RTL') (line 262215)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL ON LRE; 4 ('RTL') (line 262216)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL ON LRO; 4 ('RTL') (line 262217)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL ON RLE; 4 ('RTL') (line 262218)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL ON RLO; 4 ('RTL') (line 262219)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL ON PDF; 4 ('RTL') (line 262220)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL ON BN; 4 ('RTL') (line 262221)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 3, 3, -1 };

    {
        // LRI R R LRE; 4 ('RTL') (line 262227)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R R LRO; 4 ('RTL') (line 262228)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R R RLE; 4 ('RTL') (line 262229)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R R RLO; 4 ('RTL') (line 262230)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R R PDF; 4 ('RTL') (line 262231)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R R BN; 4 ('RTL') (line 262232)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R AL LRE; 4 ('RTL') (line 262233)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R AL LRO; 4 ('RTL') (line 262234)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R AL RLE; 4 ('RTL') (line 262235)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_009)
{

    expected_levels = { 1, 3, 3, -1 };

    {
        // LRI R AL RLO; 4 ('RTL') (line 262236)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R AL PDF; 4 ('RTL') (line 262237)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R AL BN; 4 ('RTL') (line 262238)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R NSM LRE; 4 ('RTL') (line 262239)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R NSM LRO; 4 ('RTL') (line 262240)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R NSM RLE; 4 ('RTL') (line 262241)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R NSM RLO; 4 ('RTL') (line 262242)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R NSM PDF; 4 ('RTL') (line 262243)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R NSM BN; 4 ('RTL') (line 262244)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL R LRE; 4 ('RTL') (line 262245)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL R LRO; 4 ('RTL') (line 262246)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL R RLE; 4 ('RTL') (line 262247)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL R RLO; 4 ('RTL') (line 262248)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL R PDF; 4 ('RTL') (line 262249)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL R BN; 4 ('RTL') (line 262250)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL AL LRE; 4 ('RTL') (line 262251)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL AL LRO; 4 ('RTL') (line 262252)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL AL RLE; 4 ('RTL') (line 262253)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL AL RLO; 4 ('RTL') (line 262254)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL AL PDF; 4 ('RTL') (line 262255)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL AL BN; 4 ('RTL') (line 262256)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL NSM LRE; 4 ('RTL') (line 262257)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL NSM LRO; 4 ('RTL') (line 262258)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL NSM RLE; 4 ('RTL') (line 262259)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL NSM RLO; 4 ('RTL') (line 262260)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_010)
{

    expected_levels = { 1, 3, 3, -1 };

    {
        // LRI AL NSM PDF; 4 ('RTL') (line 262261)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL NSM BN; 4 ('RTL') (line 262262)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R R LRE; 4 ('RTL') (line 262263)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R R LRO; 4 ('RTL') (line 262264)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R R RLE; 4 ('RTL') (line 262265)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R R RLO; 4 ('RTL') (line 262266)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R R PDF; 4 ('RTL') (line 262267)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R R BN; 4 ('RTL') (line 262268)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R AL LRE; 4 ('RTL') (line 262269)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R AL LRO; 4 ('RTL') (line 262270)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R AL RLE; 4 ('RTL') (line 262271)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R AL RLO; 4 ('RTL') (line 262272)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R AL PDF; 4 ('RTL') (line 262273)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R AL BN; 4 ('RTL') (line 262274)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R ES LRE; 4 ('RTL') (line 262275)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R ES LRO; 4 ('RTL') (line 262276)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R ES RLE; 4 ('RTL') (line 262277)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R ES RLO; 4 ('RTL') (line 262278)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R ES PDF; 4 ('RTL') (line 262279)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R ES BN; 4 ('RTL') (line 262280)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R ET LRE; 4 ('RTL') (line 262281)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R ET LRO; 4 ('RTL') (line 262282)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R ET RLE; 4 ('RTL') (line 262283)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R ET RLO; 4 ('RTL') (line 262284)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R ET PDF; 4 ('RTL') (line 262285)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_011)
{

    expected_levels = { 1, 3, 3, -1 };

    {
        // RLI R ET BN; 4 ('RTL') (line 262286)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R CS LRE; 4 ('RTL') (line 262287)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R CS LRO; 4 ('RTL') (line 262288)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R CS RLE; 4 ('RTL') (line 262289)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R CS RLO; 4 ('RTL') (line 262290)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R CS PDF; 4 ('RTL') (line 262291)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R CS BN; 4 ('RTL') (line 262292)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R NSM LRE; 4 ('RTL') (line 262293)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R NSM LRO; 4 ('RTL') (line 262294)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R NSM RLE; 4 ('RTL') (line 262295)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R NSM RLO; 4 ('RTL') (line 262296)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R NSM PDF; 4 ('RTL') (line 262297)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R NSM BN; 4 ('RTL') (line 262298)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R ON LRE; 4 ('RTL') (line 262299)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R ON LRO; 4 ('RTL') (line 262300)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R ON RLE; 4 ('RTL') (line 262301)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R ON RLO; 4 ('RTL') (line 262302)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R ON PDF; 4 ('RTL') (line 262303)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R ON BN; 4 ('RTL') (line 262304)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL R LRE; 4 ('RTL') (line 262305)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL R LRO; 4 ('RTL') (line 262306)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL R RLE; 4 ('RTL') (line 262307)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL R RLO; 4 ('RTL') (line 262308)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL R PDF; 4 ('RTL') (line 262309)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL R BN; 4 ('RTL') (line 262310)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_012)
{

    expected_levels = { 1, 3, 3, -1 };

    {
        // RLI AL AL LRE; 4 ('RTL') (line 262311)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL AL LRO; 4 ('RTL') (line 262312)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL AL RLE; 4 ('RTL') (line 262313)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL AL RLO; 4 ('RTL') (line 262314)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL AL PDF; 4 ('RTL') (line 262315)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL AL BN; 4 ('RTL') (line 262316)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL ES LRE; 4 ('RTL') (line 262317)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL ES LRO; 4 ('RTL') (line 262318)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL ES RLE; 4 ('RTL') (line 262319)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL ES RLO; 4 ('RTL') (line 262320)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL ES PDF; 4 ('RTL') (line 262321)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL ES BN; 4 ('RTL') (line 262322)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL ET LRE; 4 ('RTL') (line 262323)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL ET LRO; 4 ('RTL') (line 262324)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL ET RLE; 4 ('RTL') (line 262325)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL ET RLO; 4 ('RTL') (line 262326)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL ET PDF; 4 ('RTL') (line 262327)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL ET BN; 4 ('RTL') (line 262328)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL CS LRE; 4 ('RTL') (line 262329)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL CS LRO; 4 ('RTL') (line 262330)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL CS RLE; 4 ('RTL') (line 262331)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL CS RLO; 4 ('RTL') (line 262332)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL CS PDF; 4 ('RTL') (line 262333)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL CS BN; 4 ('RTL') (line 262334)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL NSM LRE; 4 ('RTL') (line 262335)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_013)
{

    expected_levels = { 1, 3, 3, -1 };

    {
        // RLI AL NSM LRO; 4 ('RTL') (line 262336)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL NSM RLE; 4 ('RTL') (line 262337)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL NSM RLO; 4 ('RTL') (line 262338)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL NSM PDF; 4 ('RTL') (line 262339)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL NSM BN; 4 ('RTL') (line 262340)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL ON LRE; 4 ('RTL') (line 262341)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL ON LRO; 4 ('RTL') (line 262342)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL ON RLE; 4 ('RTL') (line 262343)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL ON RLO; 4 ('RTL') (line 262344)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL ON PDF; 4 ('RTL') (line 262345)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL ON BN; 4 ('RTL') (line 262346)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES R LRE; 4 ('RTL') (line 262347)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES R LRO; 4 ('RTL') (line 262348)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES R RLE; 4 ('RTL') (line 262349)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES R RLO; 4 ('RTL') (line 262350)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES R PDF; 4 ('RTL') (line 262351)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES R BN; 4 ('RTL') (line 262352)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES AL LRE; 4 ('RTL') (line 262353)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES AL LRO; 4 ('RTL') (line 262354)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES AL RLE; 4 ('RTL') (line 262355)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES AL RLO; 4 ('RTL') (line 262356)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES AL PDF; 4 ('RTL') (line 262357)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES AL BN; 4 ('RTL') (line 262358)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES ES LRE; 4 ('RTL') (line 262359)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES ES LRO; 4 ('RTL') (line 262360)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_014)
{

    expected_levels = { 1, 3, 3, -1 };

    {
        // RLI ES ES RLE; 4 ('RTL') (line 262361)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES ES RLO; 4 ('RTL') (line 262362)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES ES PDF; 4 ('RTL') (line 262363)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES ES BN; 4 ('RTL') (line 262364)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES ET LRE; 4 ('RTL') (line 262365)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES ET LRO; 4 ('RTL') (line 262366)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES ET RLE; 4 ('RTL') (line 262367)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES ET RLO; 4 ('RTL') (line 262368)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES ET PDF; 4 ('RTL') (line 262369)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES ET BN; 4 ('RTL') (line 262370)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES CS LRE; 4 ('RTL') (line 262371)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES CS LRO; 4 ('RTL') (line 262372)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES CS RLE; 4 ('RTL') (line 262373)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES CS RLO; 4 ('RTL') (line 262374)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES CS PDF; 4 ('RTL') (line 262375)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES CS BN; 4 ('RTL') (line 262376)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES NSM LRE; 4 ('RTL') (line 262377)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES NSM LRO; 4 ('RTL') (line 262378)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES NSM RLE; 4 ('RTL') (line 262379)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES NSM RLO; 4 ('RTL') (line 262380)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES NSM PDF; 4 ('RTL') (line 262381)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES NSM BN; 4 ('RTL') (line 262382)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES ON LRE; 4 ('RTL') (line 262383)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES ON LRO; 4 ('RTL') (line 262384)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES ON RLE; 4 ('RTL') (line 262385)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_015)
{

    expected_levels = { 1, 3, 3, -1 };

    {
        // RLI ES ON RLO; 4 ('RTL') (line 262386)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES ON PDF; 4 ('RTL') (line 262387)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES ON BN; 4 ('RTL') (line 262388)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET R LRE; 4 ('RTL') (line 262389)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET R LRO; 4 ('RTL') (line 262390)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET R RLE; 4 ('RTL') (line 262391)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET R RLO; 4 ('RTL') (line 262392)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET R PDF; 4 ('RTL') (line 262393)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET R BN; 4 ('RTL') (line 262394)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET AL LRE; 4 ('RTL') (line 262395)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET AL LRO; 4 ('RTL') (line 262396)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET AL RLE; 4 ('RTL') (line 262397)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET AL RLO; 4 ('RTL') (line 262398)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET AL PDF; 4 ('RTL') (line 262399)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET AL BN; 4 ('RTL') (line 262400)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET ES LRE; 4 ('RTL') (line 262401)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET ES LRO; 4 ('RTL') (line 262402)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET ES RLE; 4 ('RTL') (line 262403)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET ES RLO; 4 ('RTL') (line 262404)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET ES PDF; 4 ('RTL') (line 262405)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET ES BN; 4 ('RTL') (line 262406)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET ET LRE; 4 ('RTL') (line 262407)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET ET LRO; 4 ('RTL') (line 262408)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET ET RLE; 4 ('RTL') (line 262409)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET ET RLO; 4 ('RTL') (line 262410)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_016)
{

    expected_levels = { 1, 3, 3, -1 };

    {
        // RLI ET ET PDF; 4 ('RTL') (line 262411)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET ET BN; 4 ('RTL') (line 262412)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET CS LRE; 4 ('RTL') (line 262413)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET CS LRO; 4 ('RTL') (line 262414)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET CS RLE; 4 ('RTL') (line 262415)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET CS RLO; 4 ('RTL') (line 262416)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET CS PDF; 4 ('RTL') (line 262417)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET CS BN; 4 ('RTL') (line 262418)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET NSM LRE; 4 ('RTL') (line 262419)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET NSM LRO; 4 ('RTL') (line 262420)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET NSM RLE; 4 ('RTL') (line 262421)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET NSM RLO; 4 ('RTL') (line 262422)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET NSM PDF; 4 ('RTL') (line 262423)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET NSM BN; 4 ('RTL') (line 262424)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET ON LRE; 4 ('RTL') (line 262425)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET ON LRO; 4 ('RTL') (line 262426)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET ON RLE; 4 ('RTL') (line 262427)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET ON RLO; 4 ('RTL') (line 262428)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET ON PDF; 4 ('RTL') (line 262429)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET ON BN; 4 ('RTL') (line 262430)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS R LRE; 4 ('RTL') (line 262431)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS R LRO; 4 ('RTL') (line 262432)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS R RLE; 4 ('RTL') (line 262433)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS R RLO; 4 ('RTL') (line 262434)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS R PDF; 4 ('RTL') (line 262435)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_017)
{

    expected_levels = { 1, 3, 3, -1 };

    {
        // RLI CS R BN; 4 ('RTL') (line 262436)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS AL LRE; 4 ('RTL') (line 262437)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS AL LRO; 4 ('RTL') (line 262438)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS AL RLE; 4 ('RTL') (line 262439)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS AL RLO; 4 ('RTL') (line 262440)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS AL PDF; 4 ('RTL') (line 262441)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS AL BN; 4 ('RTL') (line 262442)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS ES LRE; 4 ('RTL') (line 262443)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS ES LRO; 4 ('RTL') (line 262444)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS ES RLE; 4 ('RTL') (line 262445)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS ES RLO; 4 ('RTL') (line 262446)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS ES PDF; 4 ('RTL') (line 262447)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS ES BN; 4 ('RTL') (line 262448)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS ET LRE; 4 ('RTL') (line 262449)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS ET LRO; 4 ('RTL') (line 262450)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS ET RLE; 4 ('RTL') (line 262451)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS ET RLO; 4 ('RTL') (line 262452)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS ET PDF; 4 ('RTL') (line 262453)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS ET BN; 4 ('RTL') (line 262454)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS CS LRE; 4 ('RTL') (line 262455)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS CS LRO; 4 ('RTL') (line 262456)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS CS RLE; 4 ('RTL') (line 262457)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS CS RLO; 4 ('RTL') (line 262458)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS CS PDF; 4 ('RTL') (line 262459)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS CS BN; 4 ('RTL') (line 262460)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_018)
{

    expected_levels = { 1, 3, 3, -1 };

    {
        // RLI CS NSM LRE; 4 ('RTL') (line 262461)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS NSM LRO; 4 ('RTL') (line 262462)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS NSM RLE; 4 ('RTL') (line 262463)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS NSM RLO; 4 ('RTL') (line 262464)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS NSM PDF; 4 ('RTL') (line 262465)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS NSM BN; 4 ('RTL') (line 262466)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS ON LRE; 4 ('RTL') (line 262467)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS ON LRO; 4 ('RTL') (line 262468)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS ON RLE; 4 ('RTL') (line 262469)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS ON RLO; 4 ('RTL') (line 262470)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS ON PDF; 4 ('RTL') (line 262471)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS ON BN; 4 ('RTL') (line 262472)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM R LRE; 4 ('RTL') (line 262473)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM R LRO; 4 ('RTL') (line 262474)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM R RLE; 4 ('RTL') (line 262475)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM R RLO; 4 ('RTL') (line 262476)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM R PDF; 4 ('RTL') (line 262477)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM R BN; 4 ('RTL') (line 262478)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM AL LRE; 4 ('RTL') (line 262479)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM AL LRO; 4 ('RTL') (line 262480)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM AL RLE; 4 ('RTL') (line 262481)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM AL RLO; 4 ('RTL') (line 262482)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM AL PDF; 4 ('RTL') (line 262483)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM AL BN; 4 ('RTL') (line 262484)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM ES LRE; 4 ('RTL') (line 262485)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_019)
{

    expected_levels = { 1, 3, 3, -1 };

    {
        // RLI NSM ES LRO; 4 ('RTL') (line 262486)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM ES RLE; 4 ('RTL') (line 262487)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM ES RLO; 4 ('RTL') (line 262488)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM ES PDF; 4 ('RTL') (line 262489)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM ES BN; 4 ('RTL') (line 262490)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM ET LRE; 4 ('RTL') (line 262491)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM ET LRO; 4 ('RTL') (line 262492)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM ET RLE; 4 ('RTL') (line 262493)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM ET RLO; 4 ('RTL') (line 262494)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM ET PDF; 4 ('RTL') (line 262495)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM ET BN; 4 ('RTL') (line 262496)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM CS LRE; 4 ('RTL') (line 262497)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM CS LRO; 4 ('RTL') (line 262498)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM CS RLE; 4 ('RTL') (line 262499)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM CS RLO; 4 ('RTL') (line 262500)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM CS PDF; 4 ('RTL') (line 262501)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM CS BN; 4 ('RTL') (line 262502)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM NSM LRE; 4 ('RTL') (line 262503)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM NSM LRO; 4 ('RTL') (line 262504)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM NSM RLE; 4 ('RTL') (line 262505)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM NSM RLO; 4 ('RTL') (line 262506)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM NSM PDF; 4 ('RTL') (line 262507)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM NSM BN; 4 ('RTL') (line 262508)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM ON LRE; 4 ('RTL') (line 262509)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM ON LRO; 4 ('RTL') (line 262510)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_020)
{

    expected_levels = { 1, 3, 3, -1 };

    {
        // RLI NSM ON RLE; 4 ('RTL') (line 262511)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM ON RLO; 4 ('RTL') (line 262512)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM ON PDF; 4 ('RTL') (line 262513)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM ON BN; 4 ('RTL') (line 262514)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS R LRE; 4 ('RTL') (line 262515)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS R LRO; 4 ('RTL') (line 262516)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS R RLE; 4 ('RTL') (line 262517)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS R RLO; 4 ('RTL') (line 262518)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS R PDF; 4 ('RTL') (line 262519)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS R BN; 4 ('RTL') (line 262520)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS AL LRE; 4 ('RTL') (line 262521)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS AL LRO; 4 ('RTL') (line 262522)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS AL RLE; 4 ('RTL') (line 262523)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS AL RLO; 4 ('RTL') (line 262524)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS AL PDF; 4 ('RTL') (line 262525)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS AL BN; 4 ('RTL') (line 262526)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS ES LRE; 4 ('RTL') (line 262527)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS ES LRO; 4 ('RTL') (line 262528)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS ES RLE; 4 ('RTL') (line 262529)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS ES RLO; 4 ('RTL') (line 262530)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS ES PDF; 4 ('RTL') (line 262531)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS ES BN; 4 ('RTL') (line 262532)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS ET LRE; 4 ('RTL') (line 262533)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS ET LRO; 4 ('RTL') (line 262534)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS ET RLE; 4 ('RTL') (line 262535)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_021)
{

    expected_levels = { 1, 3, 3, -1 };

    {
        // RLI WS ET RLO; 4 ('RTL') (line 262536)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS ET PDF; 4 ('RTL') (line 262537)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS ET BN; 4 ('RTL') (line 262538)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS CS LRE; 4 ('RTL') (line 262539)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS CS LRO; 4 ('RTL') (line 262540)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS CS RLE; 4 ('RTL') (line 262541)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS CS RLO; 4 ('RTL') (line 262542)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS CS PDF; 4 ('RTL') (line 262543)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS CS BN; 4 ('RTL') (line 262544)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS NSM LRE; 4 ('RTL') (line 262545)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS NSM LRO; 4 ('RTL') (line 262546)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS NSM RLE; 4 ('RTL') (line 262547)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS NSM RLO; 4 ('RTL') (line 262548)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS NSM PDF; 4 ('RTL') (line 262549)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS NSM BN; 4 ('RTL') (line 262550)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS ON LRE; 4 ('RTL') (line 262551)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS ON LRO; 4 ('RTL') (line 262552)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS ON RLE; 4 ('RTL') (line 262553)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS ON RLO; 4 ('RTL') (line 262554)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS ON PDF; 4 ('RTL') (line 262555)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS ON BN; 4 ('RTL') (line 262556)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON R LRE; 4 ('RTL') (line 262557)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON R LRO; 4 ('RTL') (line 262558)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON R RLE; 4 ('RTL') (line 262559)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON R RLO; 4 ('RTL') (line 262560)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_022)
{

    expected_levels = { 1, 3, 3, -1 };

    {
        // RLI ON R PDF; 4 ('RTL') (line 262561)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON R BN; 4 ('RTL') (line 262562)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON AL LRE; 4 ('RTL') (line 262563)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON AL LRO; 4 ('RTL') (line 262564)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON AL RLE; 4 ('RTL') (line 262565)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON AL RLO; 4 ('RTL') (line 262566)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON AL PDF; 4 ('RTL') (line 262567)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON AL BN; 4 ('RTL') (line 262568)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON ES LRE; 4 ('RTL') (line 262569)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON ES LRO; 4 ('RTL') (line 262570)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON ES RLE; 4 ('RTL') (line 262571)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON ES RLO; 4 ('RTL') (line 262572)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON ES PDF; 4 ('RTL') (line 262573)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON ES BN; 4 ('RTL') (line 262574)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON ET LRE; 4 ('RTL') (line 262575)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON ET LRO; 4 ('RTL') (line 262576)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON ET RLE; 4 ('RTL') (line 262577)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON ET RLO; 4 ('RTL') (line 262578)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON ET PDF; 4 ('RTL') (line 262579)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON ET BN; 4 ('RTL') (line 262580)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON CS LRE; 4 ('RTL') (line 262581)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON CS LRO; 4 ('RTL') (line 262582)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON CS RLE; 4 ('RTL') (line 262583)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON CS RLO; 4 ('RTL') (line 262584)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON CS PDF; 4 ('RTL') (line 262585)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_023)
{

    expected_levels = { 1, 3, 3, -1 };

    {
        // RLI ON CS BN; 4 ('RTL') (line 262586)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON NSM LRE; 4 ('RTL') (line 262587)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON NSM LRO; 4 ('RTL') (line 262588)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON NSM RLE; 4 ('RTL') (line 262589)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON NSM RLO; 4 ('RTL') (line 262590)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON NSM PDF; 4 ('RTL') (line 262591)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON NSM BN; 4 ('RTL') (line 262592)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON ON LRE; 4 ('RTL') (line 262593)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON ON LRO; 4 ('RTL') (line 262594)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON ON RLE; 4 ('RTL') (line 262595)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON ON RLO; 4 ('RTL') (line 262596)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON ON PDF; 4 ('RTL') (line 262597)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON ON BN; 4 ('RTL') (line 262598)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R R LRE; 4 ('RTL') (line 262599)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R R LRO; 4 ('RTL') (line 262600)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R R RLE; 4 ('RTL') (line 262601)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R R RLO; 4 ('RTL') (line 262602)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R R PDF; 4 ('RTL') (line 262603)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R R BN; 4 ('RTL') (line 262604)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R AL LRE; 4 ('RTL') (line 262605)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R AL LRO; 4 ('RTL') (line 262606)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R AL RLE; 4 ('RTL') (line 262607)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R AL RLO; 4 ('RTL') (line 262608)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R AL PDF; 4 ('RTL') (line 262609)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R AL BN; 4 ('RTL') (line 262610)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_024)
{

    expected_levels = { 1, 3, 3, -1 };

    {
        // FSI R ES LRE; 4 ('RTL') (line 262611)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R ES LRO; 4 ('RTL') (line 262612)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R ES RLE; 4 ('RTL') (line 262613)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R ES RLO; 4 ('RTL') (line 262614)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R ES PDF; 4 ('RTL') (line 262615)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R ES BN; 4 ('RTL') (line 262616)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R ET LRE; 4 ('RTL') (line 262617)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R ET LRO; 4 ('RTL') (line 262618)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R ET RLE; 4 ('RTL') (line 262619)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R ET RLO; 4 ('RTL') (line 262620)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R ET PDF; 4 ('RTL') (line 262621)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R ET BN; 4 ('RTL') (line 262622)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R CS LRE; 4 ('RTL') (line 262623)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R CS LRO; 4 ('RTL') (line 262624)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R CS RLE; 4 ('RTL') (line 262625)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R CS RLO; 4 ('RTL') (line 262626)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R CS PDF; 4 ('RTL') (line 262627)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R CS BN; 4 ('RTL') (line 262628)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R NSM LRE; 4 ('RTL') (line 262629)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R NSM LRO; 4 ('RTL') (line 262630)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R NSM RLE; 4 ('RTL') (line 262631)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R NSM RLO; 4 ('RTL') (line 262632)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R NSM PDF; 4 ('RTL') (line 262633)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R NSM BN; 4 ('RTL') (line 262634)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R ON LRE; 4 ('RTL') (line 262635)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_025)
{

    expected_levels = { 1, 3, 3, -1 };

    {
        // FSI R ON LRO; 4 ('RTL') (line 262636)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R ON RLE; 4 ('RTL') (line 262637)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R ON RLO; 4 ('RTL') (line 262638)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R ON PDF; 4 ('RTL') (line 262639)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI R ON BN; 4 ('RTL') (line 262640)
        std::vector<uint32_t> const cps = { 0x2068, 0x05BE, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL R LRE; 4 ('RTL') (line 262641)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL R LRO; 4 ('RTL') (line 262642)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL R RLE; 4 ('RTL') (line 262643)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL R RLO; 4 ('RTL') (line 262644)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL R PDF; 4 ('RTL') (line 262645)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL R BN; 4 ('RTL') (line 262646)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL AL LRE; 4 ('RTL') (line 262647)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL AL LRO; 4 ('RTL') (line 262648)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL AL RLE; 4 ('RTL') (line 262649)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL AL RLO; 4 ('RTL') (line 262650)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL AL PDF; 4 ('RTL') (line 262651)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL AL BN; 4 ('RTL') (line 262652)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL ES LRE; 4 ('RTL') (line 262653)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL ES LRO; 4 ('RTL') (line 262654)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL ES RLE; 4 ('RTL') (line 262655)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL ES RLO; 4 ('RTL') (line 262656)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL ES PDF; 4 ('RTL') (line 262657)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL ES BN; 4 ('RTL') (line 262658)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL ET LRE; 4 ('RTL') (line 262659)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL ET LRO; 4 ('RTL') (line 262660)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_026)
{

    expected_levels = { 1, 3, 3, -1 };

    {
        // FSI AL ET RLE; 4 ('RTL') (line 262661)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL ET RLO; 4 ('RTL') (line 262662)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL ET PDF; 4 ('RTL') (line 262663)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL ET BN; 4 ('RTL') (line 262664)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL CS LRE; 4 ('RTL') (line 262665)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL CS LRO; 4 ('RTL') (line 262666)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL CS RLE; 4 ('RTL') (line 262667)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL CS RLO; 4 ('RTL') (line 262668)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL CS PDF; 4 ('RTL') (line 262669)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL CS BN; 4 ('RTL') (line 262670)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL NSM LRE; 4 ('RTL') (line 262671)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL NSM LRO; 4 ('RTL') (line 262672)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL NSM RLE; 4 ('RTL') (line 262673)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL NSM RLO; 4 ('RTL') (line 262674)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL NSM PDF; 4 ('RTL') (line 262675)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL NSM BN; 4 ('RTL') (line 262676)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL ON LRE; 4 ('RTL') (line 262677)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL ON LRO; 4 ('RTL') (line 262678)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL ON RLE; 4 ('RTL') (line 262679)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL ON RLO; 4 ('RTL') (line 262680)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL ON PDF; 4 ('RTL') (line 262681)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI AL ON BN; 4 ('RTL') (line 262682)
        std::vector<uint32_t> const cps = { 0x2068, 0x0608, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ES R LRE; 4 ('RTL') (line 262683)
        std::vector<uint32_t> const cps = { 0x2068, 0x002B, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ES R LRO; 4 ('RTL') (line 262684)
        std::vector<uint32_t> const cps = { 0x2068, 0x002B, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ES R RLE; 4 ('RTL') (line 262685)
        std::vector<uint32_t> const cps = { 0x2068, 0x002B, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_027)
{

    expected_levels = { 1, 3, 3, -1 };

    {
        // FSI ES R RLO; 4 ('RTL') (line 262686)
        std::vector<uint32_t> const cps = { 0x2068, 0x002B, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ES R PDF; 4 ('RTL') (line 262687)
        std::vector<uint32_t> const cps = { 0x2068, 0x002B, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ES R BN; 4 ('RTL') (line 262688)
        std::vector<uint32_t> const cps = { 0x2068, 0x002B, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ES AL LRE; 4 ('RTL') (line 262689)
        std::vector<uint32_t> const cps = { 0x2068, 0x002B, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ES AL LRO; 4 ('RTL') (line 262690)
        std::vector<uint32_t> const cps = { 0x2068, 0x002B, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ES AL RLE; 4 ('RTL') (line 262691)
        std::vector<uint32_t> const cps = { 0x2068, 0x002B, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ES AL RLO; 4 ('RTL') (line 262692)
        std::vector<uint32_t> const cps = { 0x2068, 0x002B, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ES AL PDF; 4 ('RTL') (line 262693)
        std::vector<uint32_t> const cps = { 0x2068, 0x002B, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ES AL BN; 4 ('RTL') (line 262694)
        std::vector<uint32_t> const cps = { 0x2068, 0x002B, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ET R LRE; 4 ('RTL') (line 262695)
        std::vector<uint32_t> const cps = { 0x2068, 0x0023, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ET R LRO; 4 ('RTL') (line 262696)
        std::vector<uint32_t> const cps = { 0x2068, 0x0023, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ET R RLE; 4 ('RTL') (line 262697)
        std::vector<uint32_t> const cps = { 0x2068, 0x0023, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ET R RLO; 4 ('RTL') (line 262698)
        std::vector<uint32_t> const cps = { 0x2068, 0x0023, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ET R PDF; 4 ('RTL') (line 262699)
        std::vector<uint32_t> const cps = { 0x2068, 0x0023, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ET R BN; 4 ('RTL') (line 262700)
        std::vector<uint32_t> const cps = { 0x2068, 0x0023, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ET AL LRE; 4 ('RTL') (line 262701)
        std::vector<uint32_t> const cps = { 0x2068, 0x0023, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ET AL LRO; 4 ('RTL') (line 262702)
        std::vector<uint32_t> const cps = { 0x2068, 0x0023, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ET AL RLE; 4 ('RTL') (line 262703)
        std::vector<uint32_t> const cps = { 0x2068, 0x0023, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ET AL RLO; 4 ('RTL') (line 262704)
        std::vector<uint32_t> const cps = { 0x2068, 0x0023, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ET AL PDF; 4 ('RTL') (line 262705)
        std::vector<uint32_t> const cps = { 0x2068, 0x0023, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ET AL BN; 4 ('RTL') (line 262706)
        std::vector<uint32_t> const cps = { 0x2068, 0x0023, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI CS R LRE; 4 ('RTL') (line 262707)
        std::vector<uint32_t> const cps = { 0x2068, 0x002C, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI CS R LRO; 4 ('RTL') (line 262708)
        std::vector<uint32_t> const cps = { 0x2068, 0x002C, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI CS R RLE; 4 ('RTL') (line 262709)
        std::vector<uint32_t> const cps = { 0x2068, 0x002C, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI CS R RLO; 4 ('RTL') (line 262710)
        std::vector<uint32_t> const cps = { 0x2068, 0x002C, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_028)
{

    expected_levels = { 1, 3, 3, -1 };

    {
        // FSI CS R PDF; 4 ('RTL') (line 262711)
        std::vector<uint32_t> const cps = { 0x2068, 0x002C, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI CS R BN; 4 ('RTL') (line 262712)
        std::vector<uint32_t> const cps = { 0x2068, 0x002C, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI CS AL LRE; 4 ('RTL') (line 262713)
        std::vector<uint32_t> const cps = { 0x2068, 0x002C, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI CS AL LRO; 4 ('RTL') (line 262714)
        std::vector<uint32_t> const cps = { 0x2068, 0x002C, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI CS AL RLE; 4 ('RTL') (line 262715)
        std::vector<uint32_t> const cps = { 0x2068, 0x002C, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI CS AL RLO; 4 ('RTL') (line 262716)
        std::vector<uint32_t> const cps = { 0x2068, 0x002C, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI CS AL PDF; 4 ('RTL') (line 262717)
        std::vector<uint32_t> const cps = { 0x2068, 0x002C, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI CS AL BN; 4 ('RTL') (line 262718)
        std::vector<uint32_t> const cps = { 0x2068, 0x002C, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI NSM R LRE; 4 ('RTL') (line 262719)
        std::vector<uint32_t> const cps = { 0x2068, 0x0300, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI NSM R LRO; 4 ('RTL') (line 262720)
        std::vector<uint32_t> const cps = { 0x2068, 0x0300, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI NSM R RLE; 4 ('RTL') (line 262721)
        std::vector<uint32_t> const cps = { 0x2068, 0x0300, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI NSM R RLO; 4 ('RTL') (line 262722)
        std::vector<uint32_t> const cps = { 0x2068, 0x0300, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI NSM R PDF; 4 ('RTL') (line 262723)
        std::vector<uint32_t> const cps = { 0x2068, 0x0300, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI NSM R BN; 4 ('RTL') (line 262724)
        std::vector<uint32_t> const cps = { 0x2068, 0x0300, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI NSM AL LRE; 4 ('RTL') (line 262725)
        std::vector<uint32_t> const cps = { 0x2068, 0x0300, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI NSM AL LRO; 4 ('RTL') (line 262726)
        std::vector<uint32_t> const cps = { 0x2068, 0x0300, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI NSM AL RLE; 4 ('RTL') (line 262727)
        std::vector<uint32_t> const cps = { 0x2068, 0x0300, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI NSM AL RLO; 4 ('RTL') (line 262728)
        std::vector<uint32_t> const cps = { 0x2068, 0x0300, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI NSM AL PDF; 4 ('RTL') (line 262729)
        std::vector<uint32_t> const cps = { 0x2068, 0x0300, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI NSM AL BN; 4 ('RTL') (line 262730)
        std::vector<uint32_t> const cps = { 0x2068, 0x0300, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI WS R LRE; 4 ('RTL') (line 262731)
        std::vector<uint32_t> const cps = { 0x2068, 0x0020, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI WS R LRO; 4 ('RTL') (line 262732)
        std::vector<uint32_t> const cps = { 0x2068, 0x0020, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI WS R RLE; 4 ('RTL') (line 262733)
        std::vector<uint32_t> const cps = { 0x2068, 0x0020, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI WS R RLO; 4 ('RTL') (line 262734)
        std::vector<uint32_t> const cps = { 0x2068, 0x0020, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI WS R PDF; 4 ('RTL') (line 262735)
        std::vector<uint32_t> const cps = { 0x2068, 0x0020, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_029)
{

    expected_levels = { 1, 3, 3, -1 };

    {
        // FSI WS R BN; 4 ('RTL') (line 262736)
        std::vector<uint32_t> const cps = { 0x2068, 0x0020, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI WS AL LRE; 4 ('RTL') (line 262737)
        std::vector<uint32_t> const cps = { 0x2068, 0x0020, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI WS AL LRO; 4 ('RTL') (line 262738)
        std::vector<uint32_t> const cps = { 0x2068, 0x0020, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI WS AL RLE; 4 ('RTL') (line 262739)
        std::vector<uint32_t> const cps = { 0x2068, 0x0020, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI WS AL RLO; 4 ('RTL') (line 262740)
        std::vector<uint32_t> const cps = { 0x2068, 0x0020, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI WS AL PDF; 4 ('RTL') (line 262741)
        std::vector<uint32_t> const cps = { 0x2068, 0x0020, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI WS AL BN; 4 ('RTL') (line 262742)
        std::vector<uint32_t> const cps = { 0x2068, 0x0020, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ON R LRE; 4 ('RTL') (line 262743)
        std::vector<uint32_t> const cps = { 0x2068, 0x0021, 0x05BE, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ON R LRO; 4 ('RTL') (line 262744)
        std::vector<uint32_t> const cps = { 0x2068, 0x0021, 0x05BE, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ON R RLE; 4 ('RTL') (line 262745)
        std::vector<uint32_t> const cps = { 0x2068, 0x0021, 0x05BE, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ON R RLO; 4 ('RTL') (line 262746)
        std::vector<uint32_t> const cps = { 0x2068, 0x0021, 0x05BE, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ON R PDF; 4 ('RTL') (line 262747)
        std::vector<uint32_t> const cps = { 0x2068, 0x0021, 0x05BE, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ON R BN; 4 ('RTL') (line 262748)
        std::vector<uint32_t> const cps = { 0x2068, 0x0021, 0x05BE, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ON AL LRE; 4 ('RTL') (line 262749)
        std::vector<uint32_t> const cps = { 0x2068, 0x0021, 0x0608, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ON AL LRO; 4 ('RTL') (line 262750)
        std::vector<uint32_t> const cps = { 0x2068, 0x0021, 0x0608, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ON AL RLE; 4 ('RTL') (line 262751)
        std::vector<uint32_t> const cps = { 0x2068, 0x0021, 0x0608, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ON AL RLO; 4 ('RTL') (line 262752)
        std::vector<uint32_t> const cps = { 0x2068, 0x0021, 0x0608, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ON AL PDF; 4 ('RTL') (line 262753)
        std::vector<uint32_t> const cps = { 0x2068, 0x0021, 0x0608, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // FSI ON AL BN; 4 ('RTL') (line 262754)
        std::vector<uint32_t> const cps = { 0x2068, 0x0021, 0x0608, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    expected_levels = { 1, 3, 4, -1 };

    {
        // LRI R EN LRE; 4 ('RTL') (line 262760)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R EN LRO; 4 ('RTL') (line 262761)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R EN RLE; 4 ('RTL') (line 262762)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R EN RLO; 4 ('RTL') (line 262763)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R EN PDF; 4 ('RTL') (line 262764)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R EN BN; 4 ('RTL') (line 262765)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_030)
{

    expected_levels = { 1, 3, 4, -1 };

    {
        // LRI R AN LRE; 4 ('RTL') (line 262766)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0660, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R AN LRO; 4 ('RTL') (line 262767)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0660, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R AN RLE; 4 ('RTL') (line 262768)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0660, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R AN RLO; 4 ('RTL') (line 262769)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0660, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R AN PDF; 4 ('RTL') (line 262770)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0660, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI R AN BN; 4 ('RTL') (line 262771)
        std::vector<uint32_t> const cps = { 0x2066, 0x05BE, 0x0660, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL EN LRE; 4 ('RTL') (line 262772)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL EN LRO; 4 ('RTL') (line 262773)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL EN RLE; 4 ('RTL') (line 262774)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL EN RLO; 4 ('RTL') (line 262775)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL EN PDF; 4 ('RTL') (line 262776)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL EN BN; 4 ('RTL') (line 262777)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL AN LRE; 4 ('RTL') (line 262778)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0660, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL AN LRO; 4 ('RTL') (line 262779)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0660, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL AN RLE; 4 ('RTL') (line 262780)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0660, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL AN RLO; 4 ('RTL') (line 262781)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0660, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL AN PDF; 4 ('RTL') (line 262782)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0660, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // LRI AL AN BN; 4 ('RTL') (line 262783)
        std::vector<uint32_t> const cps = { 0x2066, 0x0608, 0x0660, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R L LRE; 4 ('RTL') (line 262784)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R L LRO; 4 ('RTL') (line 262785)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R L RLE; 4 ('RTL') (line 262786)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R L RLO; 4 ('RTL') (line 262787)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R L PDF; 4 ('RTL') (line 262788)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R L BN; 4 ('RTL') (line 262789)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R EN LRE; 4 ('RTL') (line 262790)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_031)
{

    expected_levels = { 1, 3, 4, -1 };

    {
        // RLI R EN LRO; 4 ('RTL') (line 262791)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R EN RLE; 4 ('RTL') (line 262792)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R EN RLO; 4 ('RTL') (line 262793)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R EN PDF; 4 ('RTL') (line 262794)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R EN BN; 4 ('RTL') (line 262795)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R AN LRE; 4 ('RTL') (line 262796)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0660, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R AN LRO; 4 ('RTL') (line 262797)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0660, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R AN RLE; 4 ('RTL') (line 262798)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0660, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R AN RLO; 4 ('RTL') (line 262799)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0660, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R AN PDF; 4 ('RTL') (line 262800)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0660, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI R AN BN; 4 ('RTL') (line 262801)
        std::vector<uint32_t> const cps = { 0x2067, 0x05BE, 0x0660, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL L LRE; 4 ('RTL') (line 262802)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL L LRO; 4 ('RTL') (line 262803)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL L RLE; 4 ('RTL') (line 262804)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL L RLO; 4 ('RTL') (line 262805)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL L PDF; 4 ('RTL') (line 262806)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL L BN; 4 ('RTL') (line 262807)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL EN LRE; 4 ('RTL') (line 262808)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL EN LRO; 4 ('RTL') (line 262809)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL EN RLE; 4 ('RTL') (line 262810)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL EN RLO; 4 ('RTL') (line 262811)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL EN PDF; 4 ('RTL') (line 262812)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL EN BN; 4 ('RTL') (line 262813)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL AN LRE; 4 ('RTL') (line 262814)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0660, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL AN LRO; 4 ('RTL') (line 262815)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0660, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_032)
{

    expected_levels = { 1, 3, 4, -1 };

    {
        // RLI AL AN RLE; 4 ('RTL') (line 262816)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0660, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL AN RLO; 4 ('RTL') (line 262817)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0660, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL AN PDF; 4 ('RTL') (line 262818)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0660, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI AL AN BN; 4 ('RTL') (line 262819)
        std::vector<uint32_t> const cps = { 0x2067, 0x0608, 0x0660, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES L LRE; 4 ('RTL') (line 262820)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES L LRO; 4 ('RTL') (line 262821)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES L RLE; 4 ('RTL') (line 262822)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES L RLO; 4 ('RTL') (line 262823)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES L PDF; 4 ('RTL') (line 262824)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES L BN; 4 ('RTL') (line 262825)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES EN LRE; 4 ('RTL') (line 262826)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES EN LRO; 4 ('RTL') (line 262827)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES EN RLE; 4 ('RTL') (line 262828)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES EN RLO; 4 ('RTL') (line 262829)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES EN PDF; 4 ('RTL') (line 262830)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES EN BN; 4 ('RTL') (line 262831)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES AN LRE; 4 ('RTL') (line 262832)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0660, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES AN LRO; 4 ('RTL') (line 262833)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0660, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES AN RLE; 4 ('RTL') (line 262834)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0660, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES AN RLO; 4 ('RTL') (line 262835)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0660, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES AN PDF; 4 ('RTL') (line 262836)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0660, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ES AN BN; 4 ('RTL') (line 262837)
        std::vector<uint32_t> const cps = { 0x2067, 0x002B, 0x0660, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET L LRE; 4 ('RTL') (line 262838)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET L LRO; 4 ('RTL') (line 262839)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET L RLE; 4 ('RTL') (line 262840)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_033)
{

    expected_levels = { 1, 3, 4, -1 };

    {
        // RLI ET L RLO; 4 ('RTL') (line 262841)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET L PDF; 4 ('RTL') (line 262842)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET L BN; 4 ('RTL') (line 262843)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET AN LRE; 4 ('RTL') (line 262844)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0660, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET AN LRO; 4 ('RTL') (line 262845)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0660, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET AN RLE; 4 ('RTL') (line 262846)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0660, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET AN RLO; 4 ('RTL') (line 262847)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0660, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET AN PDF; 4 ('RTL') (line 262848)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0660, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ET AN BN; 4 ('RTL') (line 262849)
        std::vector<uint32_t> const cps = { 0x2067, 0x0023, 0x0660, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS L LRE; 4 ('RTL') (line 262850)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS L LRO; 4 ('RTL') (line 262851)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS L RLE; 4 ('RTL') (line 262852)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS L RLO; 4 ('RTL') (line 262853)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS L PDF; 4 ('RTL') (line 262854)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS L BN; 4 ('RTL') (line 262855)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS EN LRE; 4 ('RTL') (line 262856)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS EN LRO; 4 ('RTL') (line 262857)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS EN RLE; 4 ('RTL') (line 262858)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS EN RLO; 4 ('RTL') (line 262859)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS EN PDF; 4 ('RTL') (line 262860)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS EN BN; 4 ('RTL') (line 262861)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS AN LRE; 4 ('RTL') (line 262862)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0660, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS AN LRO; 4 ('RTL') (line 262863)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0660, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS AN RLE; 4 ('RTL') (line 262864)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0660, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS AN RLO; 4 ('RTL') (line 262865)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0660, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_034)
{

    expected_levels = { 1, 3, 4, -1 };

    {
        // RLI CS AN PDF; 4 ('RTL') (line 262866)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0660, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI CS AN BN; 4 ('RTL') (line 262867)
        std::vector<uint32_t> const cps = { 0x2067, 0x002C, 0x0660, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM L LRE; 4 ('RTL') (line 262868)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM L LRO; 4 ('RTL') (line 262869)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM L RLE; 4 ('RTL') (line 262870)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM L RLO; 4 ('RTL') (line 262871)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM L PDF; 4 ('RTL') (line 262872)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM L BN; 4 ('RTL') (line 262873)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM EN LRE; 4 ('RTL') (line 262874)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM EN LRO; 4 ('RTL') (line 262875)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM EN RLE; 4 ('RTL') (line 262876)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM EN RLO; 4 ('RTL') (line 262877)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM EN PDF; 4 ('RTL') (line 262878)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM EN BN; 4 ('RTL') (line 262879)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM AN LRE; 4 ('RTL') (line 262880)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0660, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM AN LRO; 4 ('RTL') (line 262881)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0660, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM AN RLE; 4 ('RTL') (line 262882)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0660, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM AN RLO; 4 ('RTL') (line 262883)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0660, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM AN PDF; 4 ('RTL') (line 262884)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0660, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI NSM AN BN; 4 ('RTL') (line 262885)
        std::vector<uint32_t> const cps = { 0x2067, 0x0300, 0x0660, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS L LRE; 4 ('RTL') (line 262886)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS L LRO; 4 ('RTL') (line 262887)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS L RLE; 4 ('RTL') (line 262888)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS L RLO; 4 ('RTL') (line 262889)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS L PDF; 4 ('RTL') (line 262890)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_035)
{

    expected_levels = { 1, 3, 4, -1 };

    {
        // RLI WS L BN; 4 ('RTL') (line 262891)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS EN LRE; 4 ('RTL') (line 262892)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS EN LRO; 4 ('RTL') (line 262893)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS EN RLE; 4 ('RTL') (line 262894)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS EN RLO; 4 ('RTL') (line 262895)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS EN PDF; 4 ('RTL') (line 262896)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS EN BN; 4 ('RTL') (line 262897)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS AN LRE; 4 ('RTL') (line 262898)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0660, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS AN LRO; 4 ('RTL') (line 262899)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0660, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS AN RLE; 4 ('RTL') (line 262900)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0660, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS AN RLO; 4 ('RTL') (line 262901)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0660, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS AN PDF; 4 ('RTL') (line 262902)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0660, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI WS AN BN; 4 ('RTL') (line 262903)
        std::vector<uint32_t> const cps = { 0x2067, 0x0020, 0x0660, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON L LRE; 4 ('RTL') (line 262904)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON L LRO; 4 ('RTL') (line 262905)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON L RLE; 4 ('RTL') (line 262906)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON L RLO; 4 ('RTL') (line 262907)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON L PDF; 4 ('RTL') (line 262908)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON L BN; 4 ('RTL') (line 262909)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON EN LRE; 4 ('RTL') (line 262910)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON EN LRO; 4 ('RTL') (line 262911)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON EN RLE; 4 ('RTL') (line 262912)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON EN RLO; 4 ('RTL') (line 262913)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON EN PDF; 4 ('RTL') (line 262914)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON EN BN; 4 ('RTL') (line 262915)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_036)
{

    expected_levels = { 1, 3, 4, -1 };

    {
        // RLI ON AN LRE; 4 ('RTL') (line 262916)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0660, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON AN LRO; 4 ('RTL') (line 262917)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0660, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON AN RLE; 4 ('RTL') (line 262918)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0660, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON AN RLO; 4 ('RTL') (line 262919)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0660, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON AN PDF; 4 ('RTL') (line 262920)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0660, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI ON AN BN; 4 ('RTL') (line 262921)
        std::vector<uint32_t> const cps = { 0x2067, 0x0021, 0x0660, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI L LRE; 4 ('RTL') (line 262922)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI L LRO; 4 ('RTL') (line 262923)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI L RLE; 4 ('RTL') (line 262924)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI L RLO; 4 ('RTL') (line 262925)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI L PDF; 4 ('RTL') (line 262926)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI L BN; 4 ('RTL') (line 262927)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI EN LRE; 4 ('RTL') (line 262928)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI EN LRO; 4 ('RTL') (line 262929)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI EN RLE; 4 ('RTL') (line 262930)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI EN RLO; 4 ('RTL') (line 262931)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI EN PDF; 4 ('RTL') (line 262932)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI EN BN; 4 ('RTL') (line 262933)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI ES LRE; 4 ('RTL') (line 262934)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI ES LRO; 4 ('RTL') (line 262935)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI ES RLE; 4 ('RTL') (line 262936)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI ES RLO; 4 ('RTL') (line 262937)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI ES PDF; 4 ('RTL') (line 262938)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI ES BN; 4 ('RTL') (line 262939)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI ET LRE; 4 ('RTL') (line 262940)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_037)
{

    expected_levels = { 1, 3, 4, -1 };

    {
        // RLI LRI ET LRO; 4 ('RTL') (line 262941)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI ET RLE; 4 ('RTL') (line 262942)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI ET RLO; 4 ('RTL') (line 262943)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI ET PDF; 4 ('RTL') (line 262944)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI ET BN; 4 ('RTL') (line 262945)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI CS LRE; 4 ('RTL') (line 262946)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI CS LRO; 4 ('RTL') (line 262947)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI CS RLE; 4 ('RTL') (line 262948)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI CS RLO; 4 ('RTL') (line 262949)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI CS PDF; 4 ('RTL') (line 262950)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI CS BN; 4 ('RTL') (line 262951)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI NSM LRE; 4 ('RTL') (line 262952)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI NSM LRO; 4 ('RTL') (line 262953)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI NSM RLE; 4 ('RTL') (line 262954)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI NSM RLO; 4 ('RTL') (line 262955)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI NSM PDF; 4 ('RTL') (line 262956)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI NSM BN; 4 ('RTL') (line 262957)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI ON LRE; 4 ('RTL') (line 262958)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI ON LRO; 4 ('RTL') (line 262959)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x0021, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI ON RLE; 4 ('RTL') (line 262960)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x0021, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI ON RLO; 4 ('RTL') (line 262961)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x0021, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI ON PDF; 4 ('RTL') (line 262962)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x0021, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI LRI ON BN; 4 ('RTL') (line 262963)
        std::vector<uint32_t> const cps = { 0x2067, 0x2066, 0x0021, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI L LRE; 4 ('RTL') (line 262964)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x0041, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI L LRO; 4 ('RTL') (line 262965)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x0041, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_038)
{

    expected_levels = { 1, 3, 4, -1 };

    {
        // RLI FSI L RLE; 4 ('RTL') (line 262966)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x0041, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI L RLO; 4 ('RTL') (line 262967)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x0041, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI L PDF; 4 ('RTL') (line 262968)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x0041, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI L BN; 4 ('RTL') (line 262969)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x0041, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI EN LRE; 4 ('RTL') (line 262970)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x0030, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI EN LRO; 4 ('RTL') (line 262971)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x0030, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI EN RLE; 4 ('RTL') (line 262972)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x0030, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI EN RLO; 4 ('RTL') (line 262973)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x0030, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI EN PDF; 4 ('RTL') (line 262974)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x0030, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI EN BN; 4 ('RTL') (line 262975)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x0030, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI ES LRE; 4 ('RTL') (line 262976)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x002B, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI ES LRO; 4 ('RTL') (line 262977)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x002B, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI ES RLE; 4 ('RTL') (line 262978)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x002B, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI ES RLO; 4 ('RTL') (line 262979)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x002B, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI ES PDF; 4 ('RTL') (line 262980)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x002B, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI ES BN; 4 ('RTL') (line 262981)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x002B, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI ET LRE; 4 ('RTL') (line 262982)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x0023, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI ET LRO; 4 ('RTL') (line 262983)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x0023, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI ET RLE; 4 ('RTL') (line 262984)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x0023, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI ET RLO; 4 ('RTL') (line 262985)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x0023, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI ET PDF; 4 ('RTL') (line 262986)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x0023, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI ET BN; 4 ('RTL') (line 262987)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x0023, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI CS LRE; 4 ('RTL') (line 262988)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x002C, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI CS LRO; 4 ('RTL') (line 262989)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x002C, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI CS RLE; 4 ('RTL') (line 262990)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x002C, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }
}

TEST(bidi, bidi_262_039)
{

    expected_levels = { 1, 3, 4, -1 };

    {
        // RLI FSI CS RLO; 4 ('RTL') (line 262991)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x002C, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI CS PDF; 4 ('RTL') (line 262992)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x002C, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI CS BN; 4 ('RTL') (line 262993)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x002C, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI NSM LRE; 4 ('RTL') (line 262994)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x0300, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI NSM LRO; 4 ('RTL') (line 262995)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x0300, 0x202D };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI NSM RLE; 4 ('RTL') (line 262996)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x0300, 0x202B };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI NSM RLO; 4 ('RTL') (line 262997)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x0300, 0x202E };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI NSM PDF; 4 ('RTL') (line 262998)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x0300, 0x202C };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI NSM BN; 4 ('RTL') (line 262999)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x0300, 0x00AD };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

    {
        // RLI FSI ON LRE; 4 ('RTL') (line 263000)
        std::vector<uint32_t> const cps = { 0x2067, 0x2068, 0x0021, 0x202A };
        std::vector<int> const levels =
            bidi_levels(&*cps.begin(), &*cps.end(), 1);
        int i = 0;
        for (int l : expected_levels) {
            if (0 <= l) {
                EXPECT_EQ(levels[i], l) << "i=" << i;
                ++i;
            }
        }
        EXPECT_EQ((int)levels.size(), i);
    }

}
