// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_378_000)
{
    // 47CC 003F;	
    // (䟌) CJK UNIFIED IDEOGRAPH-47CC	[FB80 C7CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47CC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_001)
{
    // 47CC 0061;	
    // (䟌) CJK UNIFIED IDEOGRAPH-47CC	[FB80 C7CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47CC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_002)
{
    // 47CC 0041;	
    // (䟌) CJK UNIFIED IDEOGRAPH-47CC	[FB80 C7CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47CC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_003)
{
    // 47CC 0062;	
    // (䟌) CJK UNIFIED IDEOGRAPH-47CC	[FB80 C7CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47CC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_004)
{
    // 47CD 0021;	
    // (䟍) CJK UNIFIED IDEOGRAPH-47CD	[FB80 C7CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47CD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_005)
{
    // 47CD 003F;	
    // (䟍) CJK UNIFIED IDEOGRAPH-47CD	[FB80 C7CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47CD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_006)
{
    // 47CD 0061;	
    // (䟍) CJK UNIFIED IDEOGRAPH-47CD	[FB80 C7CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47CD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_007)
{
    // 47CD 0041;	
    // (䟍) CJK UNIFIED IDEOGRAPH-47CD	[FB80 C7CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47CD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_008)
{
    // 47CD 0062;	
    // (䟍) CJK UNIFIED IDEOGRAPH-47CD	[FB80 C7CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47CD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_009)
{
    // 47CE 0021;	
    // (䟎) CJK UNIFIED IDEOGRAPH-47CE	[FB80 C7CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47CE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_010)
{
    // 47CE 003F;	
    // (䟎) CJK UNIFIED IDEOGRAPH-47CE	[FB80 C7CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47CE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_011)
{
    // 47CE 0061;	
    // (䟎) CJK UNIFIED IDEOGRAPH-47CE	[FB80 C7CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47CE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_012)
{
    // 47CE 0041;	
    // (䟎) CJK UNIFIED IDEOGRAPH-47CE	[FB80 C7CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47CE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_013)
{
    // 47CE 0062;	
    // (䟎) CJK UNIFIED IDEOGRAPH-47CE	[FB80 C7CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47CE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_014)
{
    // 47CF 0021;	
    // (䟏) CJK UNIFIED IDEOGRAPH-47CF	[FB80 C7CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47CF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_015)
{
    // 47CF 003F;	
    // (䟏) CJK UNIFIED IDEOGRAPH-47CF	[FB80 C7CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47CF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_016)
{
    // 47CF 0061;	
    // (䟏) CJK UNIFIED IDEOGRAPH-47CF	[FB80 C7CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47CF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_017)
{
    // 47CF 0041;	
    // (䟏) CJK UNIFIED IDEOGRAPH-47CF	[FB80 C7CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47CF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_018)
{
    // 47CF 0062;	
    // (䟏) CJK UNIFIED IDEOGRAPH-47CF	[FB80 C7CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47CF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_019)
{
    // 47D0 0021;	
    // (䟐) CJK UNIFIED IDEOGRAPH-47D0	[FB80 C7D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_020)
{
    // 47D0 003F;	
    // (䟐) CJK UNIFIED IDEOGRAPH-47D0	[FB80 C7D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_021)
{
    // 47D0 0061;	
    // (䟐) CJK UNIFIED IDEOGRAPH-47D0	[FB80 C7D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_022)
{
    // 47D0 0041;	
    // (䟐) CJK UNIFIED IDEOGRAPH-47D0	[FB80 C7D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47D0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_023)
{
    // 47D0 0062;	
    // (䟐) CJK UNIFIED IDEOGRAPH-47D0	[FB80 C7D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_024)
{
    // 47D1 0021;	
    // (䟑) CJK UNIFIED IDEOGRAPH-47D1	[FB80 C7D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_025)
{
    // 47D1 003F;	
    // (䟑) CJK UNIFIED IDEOGRAPH-47D1	[FB80 C7D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_026)
{
    // 47D1 0061;	
    // (䟑) CJK UNIFIED IDEOGRAPH-47D1	[FB80 C7D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_027)
{
    // 47D1 0041;	
    // (䟑) CJK UNIFIED IDEOGRAPH-47D1	[FB80 C7D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47D1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_028)
{
    // 47D1 0062;	
    // (䟑) CJK UNIFIED IDEOGRAPH-47D1	[FB80 C7D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_029)
{
    // 47D2 0021;	
    // (䟒) CJK UNIFIED IDEOGRAPH-47D2	[FB80 C7D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_030)
{
    // 47D2 003F;	
    // (䟒) CJK UNIFIED IDEOGRAPH-47D2	[FB80 C7D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_031)
{
    // 47D2 0061;	
    // (䟒) CJK UNIFIED IDEOGRAPH-47D2	[FB80 C7D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_032)
{
    // 47D2 0041;	
    // (䟒) CJK UNIFIED IDEOGRAPH-47D2	[FB80 C7D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47D2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_033)
{
    // 47D2 0062;	
    // (䟒) CJK UNIFIED IDEOGRAPH-47D2	[FB80 C7D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_034)
{
    // 47D3 0021;	
    // (䟓) CJK UNIFIED IDEOGRAPH-47D3	[FB80 C7D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_035)
{
    // 47D3 003F;	
    // (䟓) CJK UNIFIED IDEOGRAPH-47D3	[FB80 C7D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_036)
{
    // 47D3 0061;	
    // (䟓) CJK UNIFIED IDEOGRAPH-47D3	[FB80 C7D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_037)
{
    // 47D3 0041;	
    // (䟓) CJK UNIFIED IDEOGRAPH-47D3	[FB80 C7D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47D3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_038)
{
    // 47D3 0062;	
    // (䟓) CJK UNIFIED IDEOGRAPH-47D3	[FB80 C7D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_039)
{
    // 47D4 0021;	
    // (䟔) CJK UNIFIED IDEOGRAPH-47D4	[FB80 C7D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_040)
{
    // 47D4 003F;	
    // (䟔) CJK UNIFIED IDEOGRAPH-47D4	[FB80 C7D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_041)
{
    // 47D4 0061;	
    // (䟔) CJK UNIFIED IDEOGRAPH-47D4	[FB80 C7D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_042)
{
    // 47D4 0041;	
    // (䟔) CJK UNIFIED IDEOGRAPH-47D4	[FB80 C7D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47D4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_043)
{
    // 47D4 0062;	
    // (䟔) CJK UNIFIED IDEOGRAPH-47D4	[FB80 C7D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_044)
{
    // 47D5 0021;	
    // (䟕) CJK UNIFIED IDEOGRAPH-47D5	[FB80 C7D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_045)
{
    // 47D5 003F;	
    // (䟕) CJK UNIFIED IDEOGRAPH-47D5	[FB80 C7D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_046)
{
    // 47D5 0061;	
    // (䟕) CJK UNIFIED IDEOGRAPH-47D5	[FB80 C7D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_047)
{
    // 47D5 0041;	
    // (䟕) CJK UNIFIED IDEOGRAPH-47D5	[FB80 C7D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47D5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_048)
{
    // 47D5 0062;	
    // (䟕) CJK UNIFIED IDEOGRAPH-47D5	[FB80 C7D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_049)
{
    // 47D6 0021;	
    // (䟖) CJK UNIFIED IDEOGRAPH-47D6	[FB80 C7D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_050)
{
    // 47D6 003F;	
    // (䟖) CJK UNIFIED IDEOGRAPH-47D6	[FB80 C7D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_051)
{
    // 47D6 0061;	
    // (䟖) CJK UNIFIED IDEOGRAPH-47D6	[FB80 C7D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_052)
{
    // 47D6 0041;	
    // (䟖) CJK UNIFIED IDEOGRAPH-47D6	[FB80 C7D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47D6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_053)
{
    // 47D6 0062;	
    // (䟖) CJK UNIFIED IDEOGRAPH-47D6	[FB80 C7D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_054)
{
    // 47D7 0021;	
    // (䟗) CJK UNIFIED IDEOGRAPH-47D7	[FB80 C7D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_055)
{
    // 47D7 003F;	
    // (䟗) CJK UNIFIED IDEOGRAPH-47D7	[FB80 C7D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_056)
{
    // 47D7 0061;	
    // (䟗) CJK UNIFIED IDEOGRAPH-47D7	[FB80 C7D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_057)
{
    // 47D7 0041;	
    // (䟗) CJK UNIFIED IDEOGRAPH-47D7	[FB80 C7D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47D7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_058)
{
    // 47D7 0062;	
    // (䟗) CJK UNIFIED IDEOGRAPH-47D7	[FB80 C7D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_059)
{
    // 47D8 0021;	
    // (䟘) CJK UNIFIED IDEOGRAPH-47D8	[FB80 C7D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_060)
{
    // 47D8 003F;	
    // (䟘) CJK UNIFIED IDEOGRAPH-47D8	[FB80 C7D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_061)
{
    // 47D8 0061;	
    // (䟘) CJK UNIFIED IDEOGRAPH-47D8	[FB80 C7D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_062)
{
    // 47D8 0041;	
    // (䟘) CJK UNIFIED IDEOGRAPH-47D8	[FB80 C7D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47D8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_063)
{
    // 47D8 0062;	
    // (䟘) CJK UNIFIED IDEOGRAPH-47D8	[FB80 C7D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_064)
{
    // 47D9 0021;	
    // (䟙) CJK UNIFIED IDEOGRAPH-47D9	[FB80 C7D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_065)
{
    // 47D9 003F;	
    // (䟙) CJK UNIFIED IDEOGRAPH-47D9	[FB80 C7D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_066)
{
    // 47D9 0061;	
    // (䟙) CJK UNIFIED IDEOGRAPH-47D9	[FB80 C7D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_067)
{
    // 47D9 0041;	
    // (䟙) CJK UNIFIED IDEOGRAPH-47D9	[FB80 C7D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47D9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_068)
{
    // 47D9 0062;	
    // (䟙) CJK UNIFIED IDEOGRAPH-47D9	[FB80 C7D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47D9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_069)
{
    // 47DA 0021;	
    // (䟚) CJK UNIFIED IDEOGRAPH-47DA	[FB80 C7DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47DA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_070)
{
    // 47DA 003F;	
    // (䟚) CJK UNIFIED IDEOGRAPH-47DA	[FB80 C7DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47DA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_071)
{
    // 47DA 0061;	
    // (䟚) CJK UNIFIED IDEOGRAPH-47DA	[FB80 C7DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47DA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_072)
{
    // 47DA 0041;	
    // (䟚) CJK UNIFIED IDEOGRAPH-47DA	[FB80 C7DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47DA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_073)
{
    // 47DA 0062;	
    // (䟚) CJK UNIFIED IDEOGRAPH-47DA	[FB80 C7DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47DA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_074)
{
    // 47DB 0021;	
    // (䟛) CJK UNIFIED IDEOGRAPH-47DB	[FB80 C7DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47DB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_075)
{
    // 47DB 003F;	
    // (䟛) CJK UNIFIED IDEOGRAPH-47DB	[FB80 C7DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47DB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_076)
{
    // 47DB 0061;	
    // (䟛) CJK UNIFIED IDEOGRAPH-47DB	[FB80 C7DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47DB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_077)
{
    // 47DB 0041;	
    // (䟛) CJK UNIFIED IDEOGRAPH-47DB	[FB80 C7DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47DB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_078)
{
    // 47DB 0062;	
    // (䟛) CJK UNIFIED IDEOGRAPH-47DB	[FB80 C7DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47DB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_079)
{
    // 47DC 0021;	
    // (䟜) CJK UNIFIED IDEOGRAPH-47DC	[FB80 C7DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47DC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_080)
{
    // 47DC 003F;	
    // (䟜) CJK UNIFIED IDEOGRAPH-47DC	[FB80 C7DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47DC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_081)
{
    // 47DC 0061;	
    // (䟜) CJK UNIFIED IDEOGRAPH-47DC	[FB80 C7DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47DC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_082)
{
    // 47DC 0041;	
    // (䟜) CJK UNIFIED IDEOGRAPH-47DC	[FB80 C7DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47DC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_083)
{
    // 47DC 0062;	
    // (䟜) CJK UNIFIED IDEOGRAPH-47DC	[FB80 C7DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47DC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_084)
{
    // 47DD 0021;	
    // (䟝) CJK UNIFIED IDEOGRAPH-47DD	[FB80 C7DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47DD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_085)
{
    // 47DD 003F;	
    // (䟝) CJK UNIFIED IDEOGRAPH-47DD	[FB80 C7DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47DD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_086)
{
    // 47DD 0061;	
    // (䟝) CJK UNIFIED IDEOGRAPH-47DD	[FB80 C7DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47DD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_087)
{
    // 47DD 0041;	
    // (䟝) CJK UNIFIED IDEOGRAPH-47DD	[FB80 C7DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47DD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_088)
{
    // 47DD 0062;	
    // (䟝) CJK UNIFIED IDEOGRAPH-47DD	[FB80 C7DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47DD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_089)
{
    // 47DE 0021;	
    // (䟞) CJK UNIFIED IDEOGRAPH-47DE	[FB80 C7DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47DE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_090)
{
    // 47DE 003F;	
    // (䟞) CJK UNIFIED IDEOGRAPH-47DE	[FB80 C7DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47DE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_091)
{
    // 47DE 0061;	
    // (䟞) CJK UNIFIED IDEOGRAPH-47DE	[FB80 C7DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47DE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_092)
{
    // 47DE 0041;	
    // (䟞) CJK UNIFIED IDEOGRAPH-47DE	[FB80 C7DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47DE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_093)
{
    // 47DE 0062;	
    // (䟞) CJK UNIFIED IDEOGRAPH-47DE	[FB80 C7DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47DE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_094)
{
    // 47DF 0021;	
    // (䟟) CJK UNIFIED IDEOGRAPH-47DF	[FB80 C7DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47DF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_095)
{
    // 47DF 003F;	
    // (䟟) CJK UNIFIED IDEOGRAPH-47DF	[FB80 C7DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47DF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_096)
{
    // 47DF 0061;	
    // (䟟) CJK UNIFIED IDEOGRAPH-47DF	[FB80 C7DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47DF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_097)
{
    // 47DF 0041;	
    // (䟟) CJK UNIFIED IDEOGRAPH-47DF	[FB80 C7DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47DF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_098)
{
    // 47DF 0062;	
    // (䟟) CJK UNIFIED IDEOGRAPH-47DF	[FB80 C7DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47DF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_099)
{
    // 47E0 0021;	
    // (䟠) CJK UNIFIED IDEOGRAPH-47E0	[FB80 C7E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_100)
{
    // 47E0 003F;	
    // (䟠) CJK UNIFIED IDEOGRAPH-47E0	[FB80 C7E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_101)
{
    // 47E0 0061;	
    // (䟠) CJK UNIFIED IDEOGRAPH-47E0	[FB80 C7E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_102)
{
    // 47E0 0041;	
    // (䟠) CJK UNIFIED IDEOGRAPH-47E0	[FB80 C7E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47E0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_103)
{
    // 47E0 0062;	
    // (䟠) CJK UNIFIED IDEOGRAPH-47E0	[FB80 C7E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_104)
{
    // 47E1 0021;	
    // (䟡) CJK UNIFIED IDEOGRAPH-47E1	[FB80 C7E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_105)
{
    // 47E1 003F;	
    // (䟡) CJK UNIFIED IDEOGRAPH-47E1	[FB80 C7E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_106)
{
    // 47E1 0061;	
    // (䟡) CJK UNIFIED IDEOGRAPH-47E1	[FB80 C7E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_107)
{
    // 47E1 0041;	
    // (䟡) CJK UNIFIED IDEOGRAPH-47E1	[FB80 C7E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47E1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_108)
{
    // 47E1 0062;	
    // (䟡) CJK UNIFIED IDEOGRAPH-47E1	[FB80 C7E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_109)
{
    // 47E2 0021;	
    // (䟢) CJK UNIFIED IDEOGRAPH-47E2	[FB80 C7E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_110)
{
    // 47E2 003F;	
    // (䟢) CJK UNIFIED IDEOGRAPH-47E2	[FB80 C7E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_111)
{
    // 47E2 0061;	
    // (䟢) CJK UNIFIED IDEOGRAPH-47E2	[FB80 C7E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_112)
{
    // 47E2 0041;	
    // (䟢) CJK UNIFIED IDEOGRAPH-47E2	[FB80 C7E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47E2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_113)
{
    // 47E2 0062;	
    // (䟢) CJK UNIFIED IDEOGRAPH-47E2	[FB80 C7E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_114)
{
    // 47E3 0021;	
    // (䟣) CJK UNIFIED IDEOGRAPH-47E3	[FB80 C7E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_115)
{
    // 47E3 003F;	
    // (䟣) CJK UNIFIED IDEOGRAPH-47E3	[FB80 C7E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_116)
{
    // 47E3 0061;	
    // (䟣) CJK UNIFIED IDEOGRAPH-47E3	[FB80 C7E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_117)
{
    // 47E3 0041;	
    // (䟣) CJK UNIFIED IDEOGRAPH-47E3	[FB80 C7E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47E3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_118)
{
    // 47E3 0062;	
    // (䟣) CJK UNIFIED IDEOGRAPH-47E3	[FB80 C7E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_119)
{
    // 47E4 0021;	
    // (䟤) CJK UNIFIED IDEOGRAPH-47E4	[FB80 C7E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_120)
{
    // 47E4 003F;	
    // (䟤) CJK UNIFIED IDEOGRAPH-47E4	[FB80 C7E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_121)
{
    // 47E4 0061;	
    // (䟤) CJK UNIFIED IDEOGRAPH-47E4	[FB80 C7E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_122)
{
    // 47E4 0041;	
    // (䟤) CJK UNIFIED IDEOGRAPH-47E4	[FB80 C7E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47E4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_123)
{
    // 47E4 0062;	
    // (䟤) CJK UNIFIED IDEOGRAPH-47E4	[FB80 C7E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_124)
{
    // 47E5 0021;	
    // (䟥) CJK UNIFIED IDEOGRAPH-47E5	[FB80 C7E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_125)
{
    // 47E5 003F;	
    // (䟥) CJK UNIFIED IDEOGRAPH-47E5	[FB80 C7E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_126)
{
    // 47E5 0061;	
    // (䟥) CJK UNIFIED IDEOGRAPH-47E5	[FB80 C7E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_127)
{
    // 47E5 0041;	
    // (䟥) CJK UNIFIED IDEOGRAPH-47E5	[FB80 C7E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47E5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_128)
{
    // 47E5 0062;	
    // (䟥) CJK UNIFIED IDEOGRAPH-47E5	[FB80 C7E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_129)
{
    // 47E6 0021;	
    // (䟦) CJK UNIFIED IDEOGRAPH-47E6	[FB80 C7E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_130)
{
    // 47E6 003F;	
    // (䟦) CJK UNIFIED IDEOGRAPH-47E6	[FB80 C7E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_131)
{
    // 47E6 0061;	
    // (䟦) CJK UNIFIED IDEOGRAPH-47E6	[FB80 C7E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_132)
{
    // 47E6 0041;	
    // (䟦) CJK UNIFIED IDEOGRAPH-47E6	[FB80 C7E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47E6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_133)
{
    // 47E6 0062;	
    // (䟦) CJK UNIFIED IDEOGRAPH-47E6	[FB80 C7E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_134)
{
    // 47E7 0021;	
    // (䟧) CJK UNIFIED IDEOGRAPH-47E7	[FB80 C7E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_135)
{
    // 47E7 003F;	
    // (䟧) CJK UNIFIED IDEOGRAPH-47E7	[FB80 C7E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_136)
{
    // 47E7 0061;	
    // (䟧) CJK UNIFIED IDEOGRAPH-47E7	[FB80 C7E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_137)
{
    // 47E7 0041;	
    // (䟧) CJK UNIFIED IDEOGRAPH-47E7	[FB80 C7E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47E7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_138)
{
    // 47E7 0062;	
    // (䟧) CJK UNIFIED IDEOGRAPH-47E7	[FB80 C7E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_139)
{
    // 47E8 0021;	
    // (䟨) CJK UNIFIED IDEOGRAPH-47E8	[FB80 C7E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_140)
{
    // 47E8 003F;	
    // (䟨) CJK UNIFIED IDEOGRAPH-47E8	[FB80 C7E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_141)
{
    // 47E8 0061;	
    // (䟨) CJK UNIFIED IDEOGRAPH-47E8	[FB80 C7E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_142)
{
    // 47E8 0041;	
    // (䟨) CJK UNIFIED IDEOGRAPH-47E8	[FB80 C7E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47E8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_143)
{
    // 47E8 0062;	
    // (䟨) CJK UNIFIED IDEOGRAPH-47E8	[FB80 C7E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_144)
{
    // 47E9 0021;	
    // (䟩) CJK UNIFIED IDEOGRAPH-47E9	[FB80 C7E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_145)
{
    // 47E9 003F;	
    // (䟩) CJK UNIFIED IDEOGRAPH-47E9	[FB80 C7E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_146)
{
    // 47E9 0061;	
    // (䟩) CJK UNIFIED IDEOGRAPH-47E9	[FB80 C7E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_147)
{
    // 47E9 0041;	
    // (䟩) CJK UNIFIED IDEOGRAPH-47E9	[FB80 C7E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47E9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_148)
{
    // 47E9 0062;	
    // (䟩) CJK UNIFIED IDEOGRAPH-47E9	[FB80 C7E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47E9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_149)
{
    // 47EA 0021;	
    // (䟪) CJK UNIFIED IDEOGRAPH-47EA	[FB80 C7EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47EA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_150)
{
    // 47EA 003F;	
    // (䟪) CJK UNIFIED IDEOGRAPH-47EA	[FB80 C7EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47EA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_151)
{
    // 47EA 0061;	
    // (䟪) CJK UNIFIED IDEOGRAPH-47EA	[FB80 C7EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47EA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_152)
{
    // 47EA 0041;	
    // (䟪) CJK UNIFIED IDEOGRAPH-47EA	[FB80 C7EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47EA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_153)
{
    // 47EA 0062;	
    // (䟪) CJK UNIFIED IDEOGRAPH-47EA	[FB80 C7EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47EA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_154)
{
    // 47EB 0021;	
    // (䟫) CJK UNIFIED IDEOGRAPH-47EB	[FB80 C7EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47EB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_155)
{
    // 47EB 003F;	
    // (䟫) CJK UNIFIED IDEOGRAPH-47EB	[FB80 C7EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47EB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_156)
{
    // 47EB 0061;	
    // (䟫) CJK UNIFIED IDEOGRAPH-47EB	[FB80 C7EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47EB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_157)
{
    // 47EB 0041;	
    // (䟫) CJK UNIFIED IDEOGRAPH-47EB	[FB80 C7EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47EB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_158)
{
    // 47EB 0062;	
    // (䟫) CJK UNIFIED IDEOGRAPH-47EB	[FB80 C7EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47EB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_159)
{
    // 47EC 0021;	
    // (䟬) CJK UNIFIED IDEOGRAPH-47EC	[FB80 C7EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47EC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_160)
{
    // 47EC 003F;	
    // (䟬) CJK UNIFIED IDEOGRAPH-47EC	[FB80 C7EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47EC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_161)
{
    // 47EC 0061;	
    // (䟬) CJK UNIFIED IDEOGRAPH-47EC	[FB80 C7EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47EC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_162)
{
    // 47EC 0041;	
    // (䟬) CJK UNIFIED IDEOGRAPH-47EC	[FB80 C7EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47EC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_163)
{
    // 47EC 0062;	
    // (䟬) CJK UNIFIED IDEOGRAPH-47EC	[FB80 C7EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47EC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_164)
{
    // 47ED 0021;	
    // (䟭) CJK UNIFIED IDEOGRAPH-47ED	[FB80 C7ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47ED, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_165)
{
    // 47ED 003F;	
    // (䟭) CJK UNIFIED IDEOGRAPH-47ED	[FB80 C7ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47ED, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_166)
{
    // 47ED 0061;	
    // (䟭) CJK UNIFIED IDEOGRAPH-47ED	[FB80 C7ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47ED, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_167)
{
    // 47ED 0041;	
    // (䟭) CJK UNIFIED IDEOGRAPH-47ED	[FB80 C7ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47ED, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_168)
{
    // 47ED 0062;	
    // (䟭) CJK UNIFIED IDEOGRAPH-47ED	[FB80 C7ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47ED, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_169)
{
    // 47EE 0021;	
    // (䟮) CJK UNIFIED IDEOGRAPH-47EE	[FB80 C7EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47EE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_170)
{
    // 47EE 003F;	
    // (䟮) CJK UNIFIED IDEOGRAPH-47EE	[FB80 C7EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47EE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_171)
{
    // 47EE 0061;	
    // (䟮) CJK UNIFIED IDEOGRAPH-47EE	[FB80 C7EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47EE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_172)
{
    // 47EE 0041;	
    // (䟮) CJK UNIFIED IDEOGRAPH-47EE	[FB80 C7EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47EE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_173)
{
    // 47EE 0062;	
    // (䟮) CJK UNIFIED IDEOGRAPH-47EE	[FB80 C7EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47EE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_174)
{
    // 47EF 0021;	
    // (䟯) CJK UNIFIED IDEOGRAPH-47EF	[FB80 C7EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47EF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_175)
{
    // 47EF 003F;	
    // (䟯) CJK UNIFIED IDEOGRAPH-47EF	[FB80 C7EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47EF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_176)
{
    // 47EF 0061;	
    // (䟯) CJK UNIFIED IDEOGRAPH-47EF	[FB80 C7EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47EF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_177)
{
    // 47EF 0041;	
    // (䟯) CJK UNIFIED IDEOGRAPH-47EF	[FB80 C7EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47EF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_178)
{
    // 47EF 0062;	
    // (䟯) CJK UNIFIED IDEOGRAPH-47EF	[FB80 C7EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47EF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_179)
{
    // 47F0 0021;	
    // (䟰) CJK UNIFIED IDEOGRAPH-47F0	[FB80 C7F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_180)
{
    // 47F0 003F;	
    // (䟰) CJK UNIFIED IDEOGRAPH-47F0	[FB80 C7F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_181)
{
    // 47F0 0061;	
    // (䟰) CJK UNIFIED IDEOGRAPH-47F0	[FB80 C7F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_182)
{
    // 47F0 0041;	
    // (䟰) CJK UNIFIED IDEOGRAPH-47F0	[FB80 C7F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47F0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_183)
{
    // 47F0 0062;	
    // (䟰) CJK UNIFIED IDEOGRAPH-47F0	[FB80 C7F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_184)
{
    // 47F1 0021;	
    // (䟱) CJK UNIFIED IDEOGRAPH-47F1	[FB80 C7F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_185)
{
    // 47F1 003F;	
    // (䟱) CJK UNIFIED IDEOGRAPH-47F1	[FB80 C7F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_186)
{
    // 47F1 0061;	
    // (䟱) CJK UNIFIED IDEOGRAPH-47F1	[FB80 C7F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_187)
{
    // 47F1 0041;	
    // (䟱) CJK UNIFIED IDEOGRAPH-47F1	[FB80 C7F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47F1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_188)
{
    // 47F1 0062;	
    // (䟱) CJK UNIFIED IDEOGRAPH-47F1	[FB80 C7F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_189)
{
    // 47F2 0021;	
    // (䟲) CJK UNIFIED IDEOGRAPH-47F2	[FB80 C7F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_190)
{
    // 47F2 003F;	
    // (䟲) CJK UNIFIED IDEOGRAPH-47F2	[FB80 C7F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_191)
{
    // 47F2 0061;	
    // (䟲) CJK UNIFIED IDEOGRAPH-47F2	[FB80 C7F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_192)
{
    // 47F2 0041;	
    // (䟲) CJK UNIFIED IDEOGRAPH-47F2	[FB80 C7F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47F2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_193)
{
    // 47F2 0062;	
    // (䟲) CJK UNIFIED IDEOGRAPH-47F2	[FB80 C7F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_194)
{
    // 47F3 0021;	
    // (䟳) CJK UNIFIED IDEOGRAPH-47F3	[FB80 C7F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_195)
{
    // 47F3 003F;	
    // (䟳) CJK UNIFIED IDEOGRAPH-47F3	[FB80 C7F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_196)
{
    // 47F3 0061;	
    // (䟳) CJK UNIFIED IDEOGRAPH-47F3	[FB80 C7F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_197)
{
    // 47F3 0041;	
    // (䟳) CJK UNIFIED IDEOGRAPH-47F3	[FB80 C7F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47F3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_198)
{
    // 47F3 0062;	
    // (䟳) CJK UNIFIED IDEOGRAPH-47F3	[FB80 C7F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_199)
{
    // 47F4 0021;	
    // (䟴) CJK UNIFIED IDEOGRAPH-47F4	[FB80 C7F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_200)
{
    // 47F4 003F;	
    // (䟴) CJK UNIFIED IDEOGRAPH-47F4	[FB80 C7F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_201)
{
    // 47F4 0061;	
    // (䟴) CJK UNIFIED IDEOGRAPH-47F4	[FB80 C7F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_202)
{
    // 47F4 0041;	
    // (䟴) CJK UNIFIED IDEOGRAPH-47F4	[FB80 C7F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47F4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_203)
{
    // 47F4 0062;	
    // (䟴) CJK UNIFIED IDEOGRAPH-47F4	[FB80 C7F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_204)
{
    // 47F5 0021;	
    // (䟵) CJK UNIFIED IDEOGRAPH-47F5	[FB80 C7F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_205)
{
    // 47F5 003F;	
    // (䟵) CJK UNIFIED IDEOGRAPH-47F5	[FB80 C7F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_206)
{
    // 47F5 0061;	
    // (䟵) CJK UNIFIED IDEOGRAPH-47F5	[FB80 C7F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_207)
{
    // 47F5 0041;	
    // (䟵) CJK UNIFIED IDEOGRAPH-47F5	[FB80 C7F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47F5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_208)
{
    // 47F5 0062;	
    // (䟵) CJK UNIFIED IDEOGRAPH-47F5	[FB80 C7F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_209)
{
    // 47F6 0021;	
    // (䟶) CJK UNIFIED IDEOGRAPH-47F6	[FB80 C7F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_210)
{
    // 47F6 003F;	
    // (䟶) CJK UNIFIED IDEOGRAPH-47F6	[FB80 C7F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_211)
{
    // 47F6 0061;	
    // (䟶) CJK UNIFIED IDEOGRAPH-47F6	[FB80 C7F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_212)
{
    // 47F6 0041;	
    // (䟶) CJK UNIFIED IDEOGRAPH-47F6	[FB80 C7F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47F6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_213)
{
    // 47F6 0062;	
    // (䟶) CJK UNIFIED IDEOGRAPH-47F6	[FB80 C7F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_214)
{
    // 47F7 0021;	
    // (䟷) CJK UNIFIED IDEOGRAPH-47F7	[FB80 C7F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_215)
{
    // 47F7 003F;	
    // (䟷) CJK UNIFIED IDEOGRAPH-47F7	[FB80 C7F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_216)
{
    // 47F7 0061;	
    // (䟷) CJK UNIFIED IDEOGRAPH-47F7	[FB80 C7F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_217)
{
    // 47F7 0041;	
    // (䟷) CJK UNIFIED IDEOGRAPH-47F7	[FB80 C7F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47F7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_218)
{
    // 47F7 0062;	
    // (䟷) CJK UNIFIED IDEOGRAPH-47F7	[FB80 C7F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_219)
{
    // 47F8 0021;	
    // (䟸) CJK UNIFIED IDEOGRAPH-47F8	[FB80 C7F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_220)
{
    // 47F8 003F;	
    // (䟸) CJK UNIFIED IDEOGRAPH-47F8	[FB80 C7F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_221)
{
    // 47F8 0061;	
    // (䟸) CJK UNIFIED IDEOGRAPH-47F8	[FB80 C7F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_222)
{
    // 47F8 0041;	
    // (䟸) CJK UNIFIED IDEOGRAPH-47F8	[FB80 C7F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47F8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_223)
{
    // 47F8 0062;	
    // (䟸) CJK UNIFIED IDEOGRAPH-47F8	[FB80 C7F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_224)
{
    // 47F9 0021;	
    // (䟹) CJK UNIFIED IDEOGRAPH-47F9	[FB80 C7F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_225)
{
    // 47F9 003F;	
    // (䟹) CJK UNIFIED IDEOGRAPH-47F9	[FB80 C7F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_226)
{
    // 47F9 0061;	
    // (䟹) CJK UNIFIED IDEOGRAPH-47F9	[FB80 C7F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_227)
{
    // 47F9 0041;	
    // (䟹) CJK UNIFIED IDEOGRAPH-47F9	[FB80 C7F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47F9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_228)
{
    // 47F9 0062;	
    // (䟹) CJK UNIFIED IDEOGRAPH-47F9	[FB80 C7F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47F9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_229)
{
    // 47FA 0021;	
    // (䟺) CJK UNIFIED IDEOGRAPH-47FA	[FB80 C7FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47FA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_230)
{
    // 47FA 003F;	
    // (䟺) CJK UNIFIED IDEOGRAPH-47FA	[FB80 C7FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47FA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_231)
{
    // 47FA 0061;	
    // (䟺) CJK UNIFIED IDEOGRAPH-47FA	[FB80 C7FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47FA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_232)
{
    // 47FA 0041;	
    // (䟺) CJK UNIFIED IDEOGRAPH-47FA	[FB80 C7FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47FA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_233)
{
    // 47FA 0062;	
    // (䟺) CJK UNIFIED IDEOGRAPH-47FA	[FB80 C7FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47FA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_234)
{
    // 47FB 0021;	
    // (䟻) CJK UNIFIED IDEOGRAPH-47FB	[FB80 C7FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47FB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_235)
{
    // 47FB 003F;	
    // (䟻) CJK UNIFIED IDEOGRAPH-47FB	[FB80 C7FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47FB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_236)
{
    // 47FB 0061;	
    // (䟻) CJK UNIFIED IDEOGRAPH-47FB	[FB80 C7FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47FB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_237)
{
    // 47FB 0041;	
    // (䟻) CJK UNIFIED IDEOGRAPH-47FB	[FB80 C7FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47FB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_238)
{
    // 47FB 0062;	
    // (䟻) CJK UNIFIED IDEOGRAPH-47FB	[FB80 C7FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47FB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_239)
{
    // 47FC 0021;	
    // (䟼) CJK UNIFIED IDEOGRAPH-47FC	[FB80 C7FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47FC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_240)
{
    // 47FC 003F;	
    // (䟼) CJK UNIFIED IDEOGRAPH-47FC	[FB80 C7FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47FC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_241)
{
    // 47FC 0061;	
    // (䟼) CJK UNIFIED IDEOGRAPH-47FC	[FB80 C7FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47FC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_242)
{
    // 47FC 0041;	
    // (䟼) CJK UNIFIED IDEOGRAPH-47FC	[FB80 C7FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47FC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_243)
{
    // 47FC 0062;	
    // (䟼) CJK UNIFIED IDEOGRAPH-47FC	[FB80 C7FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47FC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_244)
{
    // 47FD 0021;	
    // (䟽) CJK UNIFIED IDEOGRAPH-47FD	[FB80 C7FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47FD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_245)
{
    // 47FD 003F;	
    // (䟽) CJK UNIFIED IDEOGRAPH-47FD	[FB80 C7FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47FD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_246)
{
    // 47FD 0061;	
    // (䟽) CJK UNIFIED IDEOGRAPH-47FD	[FB80 C7FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47FD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_247)
{
    // 47FD 0041;	
    // (䟽) CJK UNIFIED IDEOGRAPH-47FD	[FB80 C7FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47FD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_248)
{
    // 47FD 0062;	
    // (䟽) CJK UNIFIED IDEOGRAPH-47FD	[FB80 C7FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47FD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_249)
{
    // 47FE 0021;	
    // (䟾) CJK UNIFIED IDEOGRAPH-47FE	[FB80 C7FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47FE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_250)
{
    // 47FE 003F;	
    // (䟾) CJK UNIFIED IDEOGRAPH-47FE	[FB80 C7FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47FE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_251)
{
    // 47FE 0061;	
    // (䟾) CJK UNIFIED IDEOGRAPH-47FE	[FB80 C7FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47FE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_252)
{
    // 47FE 0041;	
    // (䟾) CJK UNIFIED IDEOGRAPH-47FE	[FB80 C7FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47FE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_253)
{
    // 47FE 0062;	
    // (䟾) CJK UNIFIED IDEOGRAPH-47FE	[FB80 C7FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47FE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_254)
{
    // 47FF 0021;	
    // (䟿) CJK UNIFIED IDEOGRAPH-47FF	[FB80 C7FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47FF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC7FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_255)
{
    // 47FF 003F;	
    // (䟿) CJK UNIFIED IDEOGRAPH-47FF	[FB80 C7FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47FF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC7FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_256)
{
    // 47FF 0061;	
    // (䟿) CJK UNIFIED IDEOGRAPH-47FF	[FB80 C7FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47FF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC7FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_257)
{
    // 47FF 0041;	
    // (䟿) CJK UNIFIED IDEOGRAPH-47FF	[FB80 C7FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x47FF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC7FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_258)
{
    // 47FF 0062;	
    // (䟿) CJK UNIFIED IDEOGRAPH-47FF	[FB80 C7FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x47FF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC7FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_259)
{
    // 4800 0021;	
    // (䠀) CJK UNIFIED IDEOGRAPH-4800	[FB80 C800 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4800, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC800, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_260)
{
    // 4800 003F;	
    // (䠀) CJK UNIFIED IDEOGRAPH-4800	[FB80 C800 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4800, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC800, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_261)
{
    // 4800 0061;	
    // (䠀) CJK UNIFIED IDEOGRAPH-4800	[FB80 C800 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4800, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC800, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_262)
{
    // 4800 0041;	
    // (䠀) CJK UNIFIED IDEOGRAPH-4800	[FB80 C800 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4800, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC800, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_263)
{
    // 4800 0062;	
    // (䠀) CJK UNIFIED IDEOGRAPH-4800	[FB80 C800 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4800, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC800, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_264)
{
    // 4801 0021;	
    // (䠁) CJK UNIFIED IDEOGRAPH-4801	[FB80 C801 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4801, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC801, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_265)
{
    // 4801 003F;	
    // (䠁) CJK UNIFIED IDEOGRAPH-4801	[FB80 C801 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4801, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC801, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_266)
{
    // 4801 0061;	
    // (䠁) CJK UNIFIED IDEOGRAPH-4801	[FB80 C801 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4801, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC801, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_267)
{
    // 4801 0041;	
    // (䠁) CJK UNIFIED IDEOGRAPH-4801	[FB80 C801 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4801, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC801, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_268)
{
    // 4801 0062;	
    // (䠁) CJK UNIFIED IDEOGRAPH-4801	[FB80 C801 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4801, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC801, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_269)
{
    // 4802 0021;	
    // (䠂) CJK UNIFIED IDEOGRAPH-4802	[FB80 C802 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4802, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC802, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_270)
{
    // 4802 003F;	
    // (䠂) CJK UNIFIED IDEOGRAPH-4802	[FB80 C802 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4802, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC802, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_271)
{
    // 4802 0061;	
    // (䠂) CJK UNIFIED IDEOGRAPH-4802	[FB80 C802 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4802, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC802, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_272)
{
    // 4802 0041;	
    // (䠂) CJK UNIFIED IDEOGRAPH-4802	[FB80 C802 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4802, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC802, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_273)
{
    // 4802 0062;	
    // (䠂) CJK UNIFIED IDEOGRAPH-4802	[FB80 C802 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4802, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC802, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_274)
{
    // 4803 0021;	
    // (䠃) CJK UNIFIED IDEOGRAPH-4803	[FB80 C803 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4803, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC803, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_275)
{
    // 4803 003F;	
    // (䠃) CJK UNIFIED IDEOGRAPH-4803	[FB80 C803 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4803, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC803, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_276)
{
    // 4803 0061;	
    // (䠃) CJK UNIFIED IDEOGRAPH-4803	[FB80 C803 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4803, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC803, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_277)
{
    // 4803 0041;	
    // (䠃) CJK UNIFIED IDEOGRAPH-4803	[FB80 C803 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4803, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC803, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_278)
{
    // 4803 0062;	
    // (䠃) CJK UNIFIED IDEOGRAPH-4803	[FB80 C803 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4803, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC803, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_279)
{
    // 4804 0021;	
    // (䠄) CJK UNIFIED IDEOGRAPH-4804	[FB80 C804 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4804, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC804, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_280)
{
    // 4804 003F;	
    // (䠄) CJK UNIFIED IDEOGRAPH-4804	[FB80 C804 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4804, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC804, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_281)
{
    // 4804 0061;	
    // (䠄) CJK UNIFIED IDEOGRAPH-4804	[FB80 C804 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4804, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC804, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_282)
{
    // 4804 0041;	
    // (䠄) CJK UNIFIED IDEOGRAPH-4804	[FB80 C804 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4804, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC804, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_283)
{
    // 4804 0062;	
    // (䠄) CJK UNIFIED IDEOGRAPH-4804	[FB80 C804 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4804, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC804, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_284)
{
    // 4805 0021;	
    // (䠅) CJK UNIFIED IDEOGRAPH-4805	[FB80 C805 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4805, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC805, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_285)
{
    // 4805 003F;	
    // (䠅) CJK UNIFIED IDEOGRAPH-4805	[FB80 C805 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4805, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC805, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_286)
{
    // 4805 0061;	
    // (䠅) CJK UNIFIED IDEOGRAPH-4805	[FB80 C805 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4805, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC805, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_287)
{
    // 4805 0041;	
    // (䠅) CJK UNIFIED IDEOGRAPH-4805	[FB80 C805 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4805, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC805, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_288)
{
    // 4805 0062;	
    // (䠅) CJK UNIFIED IDEOGRAPH-4805	[FB80 C805 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4805, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC805, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_289)
{
    // 4806 0021;	
    // (䠆) CJK UNIFIED IDEOGRAPH-4806	[FB80 C806 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4806, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC806, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_290)
{
    // 4806 003F;	
    // (䠆) CJK UNIFIED IDEOGRAPH-4806	[FB80 C806 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4806, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC806, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_291)
{
    // 4806 0061;	
    // (䠆) CJK UNIFIED IDEOGRAPH-4806	[FB80 C806 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4806, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC806, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_292)
{
    // 4806 0041;	
    // (䠆) CJK UNIFIED IDEOGRAPH-4806	[FB80 C806 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4806, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC806, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_293)
{
    // 4806 0062;	
    // (䠆) CJK UNIFIED IDEOGRAPH-4806	[FB80 C806 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4806, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC806, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_294)
{
    // 4807 0021;	
    // (䠇) CJK UNIFIED IDEOGRAPH-4807	[FB80 C807 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4807, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC807, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_295)
{
    // 4807 003F;	
    // (䠇) CJK UNIFIED IDEOGRAPH-4807	[FB80 C807 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4807, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC807, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_296)
{
    // 4807 0061;	
    // (䠇) CJK UNIFIED IDEOGRAPH-4807	[FB80 C807 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4807, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC807, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_297)
{
    // 4807 0041;	
    // (䠇) CJK UNIFIED IDEOGRAPH-4807	[FB80 C807 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4807, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC807, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_298)
{
    // 4807 0062;	
    // (䠇) CJK UNIFIED IDEOGRAPH-4807	[FB80 C807 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4807, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC807, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_299)
{
    // 4808 0021;	
    // (䠈) CJK UNIFIED IDEOGRAPH-4808	[FB80 C808 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4808, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC808, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_300)
{
    // 4808 003F;	
    // (䠈) CJK UNIFIED IDEOGRAPH-4808	[FB80 C808 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4808, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC808, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_301)
{
    // 4808 0061;	
    // (䠈) CJK UNIFIED IDEOGRAPH-4808	[FB80 C808 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4808, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC808, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_302)
{
    // 4808 0041;	
    // (䠈) CJK UNIFIED IDEOGRAPH-4808	[FB80 C808 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4808, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC808, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_303)
{
    // 4808 0062;	
    // (䠈) CJK UNIFIED IDEOGRAPH-4808	[FB80 C808 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4808, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC808, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_304)
{
    // 4809 0021;	
    // (䠉) CJK UNIFIED IDEOGRAPH-4809	[FB80 C809 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4809, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC809, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_305)
{
    // 4809 003F;	
    // (䠉) CJK UNIFIED IDEOGRAPH-4809	[FB80 C809 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4809, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC809, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_306)
{
    // 4809 0061;	
    // (䠉) CJK UNIFIED IDEOGRAPH-4809	[FB80 C809 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4809, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC809, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_307)
{
    // 4809 0041;	
    // (䠉) CJK UNIFIED IDEOGRAPH-4809	[FB80 C809 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4809, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC809, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_308)
{
    // 4809 0062;	
    // (䠉) CJK UNIFIED IDEOGRAPH-4809	[FB80 C809 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4809, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC809, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_309)
{
    // 480A 0021;	
    // (䠊) CJK UNIFIED IDEOGRAPH-480A	[FB80 C80A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x480A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC80A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_310)
{
    // 480A 003F;	
    // (䠊) CJK UNIFIED IDEOGRAPH-480A	[FB80 C80A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x480A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC80A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_311)
{
    // 480A 0061;	
    // (䠊) CJK UNIFIED IDEOGRAPH-480A	[FB80 C80A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x480A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC80A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_312)
{
    // 480A 0041;	
    // (䠊) CJK UNIFIED IDEOGRAPH-480A	[FB80 C80A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x480A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC80A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_313)
{
    // 480A 0062;	
    // (䠊) CJK UNIFIED IDEOGRAPH-480A	[FB80 C80A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x480A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC80A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_314)
{
    // 480B 0021;	
    // (䠋) CJK UNIFIED IDEOGRAPH-480B	[FB80 C80B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x480B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC80B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_315)
{
    // 480B 003F;	
    // (䠋) CJK UNIFIED IDEOGRAPH-480B	[FB80 C80B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x480B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC80B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_316)
{
    // 480B 0061;	
    // (䠋) CJK UNIFIED IDEOGRAPH-480B	[FB80 C80B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x480B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC80B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_317)
{
    // 480B 0041;	
    // (䠋) CJK UNIFIED IDEOGRAPH-480B	[FB80 C80B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x480B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC80B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_318)
{
    // 480B 0062;	
    // (䠋) CJK UNIFIED IDEOGRAPH-480B	[FB80 C80B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x480B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC80B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_319)
{
    // 480C 0021;	
    // (䠌) CJK UNIFIED IDEOGRAPH-480C	[FB80 C80C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x480C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC80C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_320)
{
    // 480C 003F;	
    // (䠌) CJK UNIFIED IDEOGRAPH-480C	[FB80 C80C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x480C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC80C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_321)
{
    // 480C 0061;	
    // (䠌) CJK UNIFIED IDEOGRAPH-480C	[FB80 C80C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x480C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC80C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_322)
{
    // 480C 0041;	
    // (䠌) CJK UNIFIED IDEOGRAPH-480C	[FB80 C80C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x480C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC80C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_323)
{
    // 480C 0062;	
    // (䠌) CJK UNIFIED IDEOGRAPH-480C	[FB80 C80C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x480C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC80C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_324)
{
    // 480D 0021;	
    // (䠍) CJK UNIFIED IDEOGRAPH-480D	[FB80 C80D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x480D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC80D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_325)
{
    // 480D 003F;	
    // (䠍) CJK UNIFIED IDEOGRAPH-480D	[FB80 C80D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x480D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC80D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_326)
{
    // 480D 0061;	
    // (䠍) CJK UNIFIED IDEOGRAPH-480D	[FB80 C80D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x480D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC80D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_327)
{
    // 480D 0041;	
    // (䠍) CJK UNIFIED IDEOGRAPH-480D	[FB80 C80D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x480D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC80D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_328)
{
    // 480D 0062;	
    // (䠍) CJK UNIFIED IDEOGRAPH-480D	[FB80 C80D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x480D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC80D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_329)
{
    // 480E 0021;	
    // (䠎) CJK UNIFIED IDEOGRAPH-480E	[FB80 C80E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x480E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC80E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_330)
{
    // 480E 003F;	
    // (䠎) CJK UNIFIED IDEOGRAPH-480E	[FB80 C80E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x480E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC80E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_331)
{
    // 480E 0061;	
    // (䠎) CJK UNIFIED IDEOGRAPH-480E	[FB80 C80E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x480E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC80E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_332)
{
    // 480E 0041;	
    // (䠎) CJK UNIFIED IDEOGRAPH-480E	[FB80 C80E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x480E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC80E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_333)
{
    // 480E 0062;	
    // (䠎) CJK UNIFIED IDEOGRAPH-480E	[FB80 C80E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x480E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC80E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_334)
{
    // 480F 0021;	
    // (䠏) CJK UNIFIED IDEOGRAPH-480F	[FB80 C80F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x480F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC80F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_335)
{
    // 480F 003F;	
    // (䠏) CJK UNIFIED IDEOGRAPH-480F	[FB80 C80F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x480F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC80F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_336)
{
    // 480F 0061;	
    // (䠏) CJK UNIFIED IDEOGRAPH-480F	[FB80 C80F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x480F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC80F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_337)
{
    // 480F 0041;	
    // (䠏) CJK UNIFIED IDEOGRAPH-480F	[FB80 C80F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x480F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC80F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_338)
{
    // 480F 0062;	
    // (䠏) CJK UNIFIED IDEOGRAPH-480F	[FB80 C80F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x480F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC80F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_339)
{
    // 4810 0021;	
    // (䠐) CJK UNIFIED IDEOGRAPH-4810	[FB80 C810 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4810, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC810, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_340)
{
    // 4810 003F;	
    // (䠐) CJK UNIFIED IDEOGRAPH-4810	[FB80 C810 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4810, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC810, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_341)
{
    // 4810 0061;	
    // (䠐) CJK UNIFIED IDEOGRAPH-4810	[FB80 C810 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4810, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC810, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_342)
{
    // 4810 0041;	
    // (䠐) CJK UNIFIED IDEOGRAPH-4810	[FB80 C810 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4810, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC810, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_343)
{
    // 4810 0062;	
    // (䠐) CJK UNIFIED IDEOGRAPH-4810	[FB80 C810 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4810, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC810, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_344)
{
    // 4811 0021;	
    // (䠑) CJK UNIFIED IDEOGRAPH-4811	[FB80 C811 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4811, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC811, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_345)
{
    // 4811 003F;	
    // (䠑) CJK UNIFIED IDEOGRAPH-4811	[FB80 C811 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4811, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC811, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_346)
{
    // 4811 0061;	
    // (䠑) CJK UNIFIED IDEOGRAPH-4811	[FB80 C811 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4811, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC811, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_347)
{
    // 4811 0041;	
    // (䠑) CJK UNIFIED IDEOGRAPH-4811	[FB80 C811 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4811, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC811, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_348)
{
    // 4811 0062;	
    // (䠑) CJK UNIFIED IDEOGRAPH-4811	[FB80 C811 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4811, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC811, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_349)
{
    // 4812 0021;	
    // (䠒) CJK UNIFIED IDEOGRAPH-4812	[FB80 C812 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4812, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC812, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_350)
{
    // 4812 003F;	
    // (䠒) CJK UNIFIED IDEOGRAPH-4812	[FB80 C812 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4812, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC812, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_351)
{
    // 4812 0061;	
    // (䠒) CJK UNIFIED IDEOGRAPH-4812	[FB80 C812 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4812, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC812, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_352)
{
    // 4812 0041;	
    // (䠒) CJK UNIFIED IDEOGRAPH-4812	[FB80 C812 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4812, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC812, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_353)
{
    // 4812 0062;	
    // (䠒) CJK UNIFIED IDEOGRAPH-4812	[FB80 C812 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4812, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC812, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_354)
{
    // 4813 0021;	
    // (䠓) CJK UNIFIED IDEOGRAPH-4813	[FB80 C813 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4813, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC813, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_355)
{
    // 4813 003F;	
    // (䠓) CJK UNIFIED IDEOGRAPH-4813	[FB80 C813 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4813, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC813, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_356)
{
    // 4813 0061;	
    // (䠓) CJK UNIFIED IDEOGRAPH-4813	[FB80 C813 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4813, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC813, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_357)
{
    // 4813 0041;	
    // (䠓) CJK UNIFIED IDEOGRAPH-4813	[FB80 C813 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4813, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC813, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_358)
{
    // 4813 0062;	
    // (䠓) CJK UNIFIED IDEOGRAPH-4813	[FB80 C813 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4813, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC813, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_359)
{
    // 4814 0021;	
    // (䠔) CJK UNIFIED IDEOGRAPH-4814	[FB80 C814 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4814, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC814, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_360)
{
    // 4814 003F;	
    // (䠔) CJK UNIFIED IDEOGRAPH-4814	[FB80 C814 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4814, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC814, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_361)
{
    // 4814 0061;	
    // (䠔) CJK UNIFIED IDEOGRAPH-4814	[FB80 C814 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4814, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC814, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_362)
{
    // 4814 0041;	
    // (䠔) CJK UNIFIED IDEOGRAPH-4814	[FB80 C814 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4814, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC814, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_363)
{
    // 4814 0062;	
    // (䠔) CJK UNIFIED IDEOGRAPH-4814	[FB80 C814 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4814, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC814, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_364)
{
    // 4815 0021;	
    // (䠕) CJK UNIFIED IDEOGRAPH-4815	[FB80 C815 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4815, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC815, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_365)
{
    // 4815 003F;	
    // (䠕) CJK UNIFIED IDEOGRAPH-4815	[FB80 C815 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4815, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC815, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_366)
{
    // 4815 0061;	
    // (䠕) CJK UNIFIED IDEOGRAPH-4815	[FB80 C815 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4815, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC815, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_367)
{
    // 4815 0041;	
    // (䠕) CJK UNIFIED IDEOGRAPH-4815	[FB80 C815 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4815, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC815, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_368)
{
    // 4815 0062;	
    // (䠕) CJK UNIFIED IDEOGRAPH-4815	[FB80 C815 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4815, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC815, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_369)
{
    // 4816 0021;	
    // (䠖) CJK UNIFIED IDEOGRAPH-4816	[FB80 C816 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4816, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC816, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_370)
{
    // 4816 003F;	
    // (䠖) CJK UNIFIED IDEOGRAPH-4816	[FB80 C816 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4816, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC816, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_371)
{
    // 4816 0061;	
    // (䠖) CJK UNIFIED IDEOGRAPH-4816	[FB80 C816 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4816, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC816, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_372)
{
    // 4816 0041;	
    // (䠖) CJK UNIFIED IDEOGRAPH-4816	[FB80 C816 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4816, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC816, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_373)
{
    // 4816 0062;	
    // (䠖) CJK UNIFIED IDEOGRAPH-4816	[FB80 C816 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4816, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC816, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_374)
{
    // 4817 0021;	
    // (䠗) CJK UNIFIED IDEOGRAPH-4817	[FB80 C817 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4817, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC817, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_375)
{
    // 4817 003F;	
    // (䠗) CJK UNIFIED IDEOGRAPH-4817	[FB80 C817 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4817, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC817, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_376)
{
    // 4817 0061;	
    // (䠗) CJK UNIFIED IDEOGRAPH-4817	[FB80 C817 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4817, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC817, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_377)
{
    // 4817 0041;	
    // (䠗) CJK UNIFIED IDEOGRAPH-4817	[FB80 C817 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4817, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC817, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_378)
{
    // 4817 0062;	
    // (䠗) CJK UNIFIED IDEOGRAPH-4817	[FB80 C817 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4817, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC817, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_379)
{
    // 4818 0021;	
    // (䠘) CJK UNIFIED IDEOGRAPH-4818	[FB80 C818 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4818, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC818, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_380)
{
    // 4818 003F;	
    // (䠘) CJK UNIFIED IDEOGRAPH-4818	[FB80 C818 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4818, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC818, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_381)
{
    // 4818 0061;	
    // (䠘) CJK UNIFIED IDEOGRAPH-4818	[FB80 C818 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4818, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC818, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_382)
{
    // 4818 0041;	
    // (䠘) CJK UNIFIED IDEOGRAPH-4818	[FB80 C818 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4818, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC818, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_383)
{
    // 4818 0062;	
    // (䠘) CJK UNIFIED IDEOGRAPH-4818	[FB80 C818 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4818, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC818, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_384)
{
    // 4819 0021;	
    // (䠙) CJK UNIFIED IDEOGRAPH-4819	[FB80 C819 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4819, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC819, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_385)
{
    // 4819 003F;	
    // (䠙) CJK UNIFIED IDEOGRAPH-4819	[FB80 C819 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4819, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC819, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_386)
{
    // 4819 0061;	
    // (䠙) CJK UNIFIED IDEOGRAPH-4819	[FB80 C819 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4819, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC819, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_387)
{
    // 4819 0041;	
    // (䠙) CJK UNIFIED IDEOGRAPH-4819	[FB80 C819 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4819, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC819, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_388)
{
    // 4819 0062;	
    // (䠙) CJK UNIFIED IDEOGRAPH-4819	[FB80 C819 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4819, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC819, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_389)
{
    // 481A 0021;	
    // (䠚) CJK UNIFIED IDEOGRAPH-481A	[FB80 C81A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x481A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC81A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_390)
{
    // 481A 003F;	
    // (䠚) CJK UNIFIED IDEOGRAPH-481A	[FB80 C81A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x481A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC81A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_391)
{
    // 481A 0061;	
    // (䠚) CJK UNIFIED IDEOGRAPH-481A	[FB80 C81A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x481A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC81A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_392)
{
    // 481A 0041;	
    // (䠚) CJK UNIFIED IDEOGRAPH-481A	[FB80 C81A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x481A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC81A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_393)
{
    // 481A 0062;	
    // (䠚) CJK UNIFIED IDEOGRAPH-481A	[FB80 C81A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x481A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC81A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_394)
{
    // 481B 0021;	
    // (䠛) CJK UNIFIED IDEOGRAPH-481B	[FB80 C81B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x481B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC81B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_395)
{
    // 481B 003F;	
    // (䠛) CJK UNIFIED IDEOGRAPH-481B	[FB80 C81B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x481B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC81B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_396)
{
    // 481B 0061;	
    // (䠛) CJK UNIFIED IDEOGRAPH-481B	[FB80 C81B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x481B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC81B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_397)
{
    // 481B 0041;	
    // (䠛) CJK UNIFIED IDEOGRAPH-481B	[FB80 C81B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x481B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC81B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_398)
{
    // 481B 0062;	
    // (䠛) CJK UNIFIED IDEOGRAPH-481B	[FB80 C81B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x481B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC81B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_399)
{
    // 481C 0021;	
    // (䠜) CJK UNIFIED IDEOGRAPH-481C	[FB80 C81C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x481C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC81C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_400)
{
    // 481C 003F;	
    // (䠜) CJK UNIFIED IDEOGRAPH-481C	[FB80 C81C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x481C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC81C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_401)
{
    // 481C 0061;	
    // (䠜) CJK UNIFIED IDEOGRAPH-481C	[FB80 C81C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x481C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC81C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_402)
{
    // 481C 0041;	
    // (䠜) CJK UNIFIED IDEOGRAPH-481C	[FB80 C81C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x481C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC81C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_403)
{
    // 481C 0062;	
    // (䠜) CJK UNIFIED IDEOGRAPH-481C	[FB80 C81C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x481C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC81C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_404)
{
    // 481D 0021;	
    // (䠝) CJK UNIFIED IDEOGRAPH-481D	[FB80 C81D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x481D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC81D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_405)
{
    // 481D 003F;	
    // (䠝) CJK UNIFIED IDEOGRAPH-481D	[FB80 C81D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x481D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC81D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_406)
{
    // 481D 0061;	
    // (䠝) CJK UNIFIED IDEOGRAPH-481D	[FB80 C81D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x481D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC81D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_407)
{
    // 481D 0041;	
    // (䠝) CJK UNIFIED IDEOGRAPH-481D	[FB80 C81D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x481D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC81D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_408)
{
    // 481D 0062;	
    // (䠝) CJK UNIFIED IDEOGRAPH-481D	[FB80 C81D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x481D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC81D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_409)
{
    // 481E 0021;	
    // (䠞) CJK UNIFIED IDEOGRAPH-481E	[FB80 C81E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x481E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC81E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_410)
{
    // 481E 003F;	
    // (䠞) CJK UNIFIED IDEOGRAPH-481E	[FB80 C81E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x481E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC81E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_411)
{
    // 481E 0061;	
    // (䠞) CJK UNIFIED IDEOGRAPH-481E	[FB80 C81E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x481E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC81E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_412)
{
    // 481E 0041;	
    // (䠞) CJK UNIFIED IDEOGRAPH-481E	[FB80 C81E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x481E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC81E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_413)
{
    // 481E 0062;	
    // (䠞) CJK UNIFIED IDEOGRAPH-481E	[FB80 C81E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x481E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC81E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_414)
{
    // 481F 0021;	
    // (䠟) CJK UNIFIED IDEOGRAPH-481F	[FB80 C81F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x481F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC81F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_415)
{
    // 481F 003F;	
    // (䠟) CJK UNIFIED IDEOGRAPH-481F	[FB80 C81F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x481F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC81F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_416)
{
    // 481F 0061;	
    // (䠟) CJK UNIFIED IDEOGRAPH-481F	[FB80 C81F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x481F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC81F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_417)
{
    // 481F 0041;	
    // (䠟) CJK UNIFIED IDEOGRAPH-481F	[FB80 C81F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x481F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC81F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_418)
{
    // 481F 0062;	
    // (䠟) CJK UNIFIED IDEOGRAPH-481F	[FB80 C81F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x481F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC81F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_419)
{
    // 4820 0021;	
    // (䠠) CJK UNIFIED IDEOGRAPH-4820	[FB80 C820 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4820, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC820, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_420)
{
    // 4820 003F;	
    // (䠠) CJK UNIFIED IDEOGRAPH-4820	[FB80 C820 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4820, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC820, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_421)
{
    // 4820 0061;	
    // (䠠) CJK UNIFIED IDEOGRAPH-4820	[FB80 C820 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4820, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC820, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_422)
{
    // 4820 0041;	
    // (䠠) CJK UNIFIED IDEOGRAPH-4820	[FB80 C820 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4820, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC820, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_423)
{
    // 4820 0062;	
    // (䠠) CJK UNIFIED IDEOGRAPH-4820	[FB80 C820 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4820, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC820, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_424)
{
    // 4821 0021;	
    // (䠡) CJK UNIFIED IDEOGRAPH-4821	[FB80 C821 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4821, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC821, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_425)
{
    // 4821 003F;	
    // (䠡) CJK UNIFIED IDEOGRAPH-4821	[FB80 C821 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4821, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC821, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_426)
{
    // 4821 0061;	
    // (䠡) CJK UNIFIED IDEOGRAPH-4821	[FB80 C821 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4821, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC821, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_427)
{
    // 4821 0041;	
    // (䠡) CJK UNIFIED IDEOGRAPH-4821	[FB80 C821 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4821, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC821, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_428)
{
    // 4821 0062;	
    // (䠡) CJK UNIFIED IDEOGRAPH-4821	[FB80 C821 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4821, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC821, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_429)
{
    // 4822 0021;	
    // (䠢) CJK UNIFIED IDEOGRAPH-4822	[FB80 C822 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4822, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC822, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_430)
{
    // 4822 003F;	
    // (䠢) CJK UNIFIED IDEOGRAPH-4822	[FB80 C822 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4822, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC822, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_431)
{
    // 4822 0061;	
    // (䠢) CJK UNIFIED IDEOGRAPH-4822	[FB80 C822 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4822, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC822, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_432)
{
    // 4822 0041;	
    // (䠢) CJK UNIFIED IDEOGRAPH-4822	[FB80 C822 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4822, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC822, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_433)
{
    // 4822 0062;	
    // (䠢) CJK UNIFIED IDEOGRAPH-4822	[FB80 C822 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4822, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC822, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_434)
{
    // 4823 0021;	
    // (䠣) CJK UNIFIED IDEOGRAPH-4823	[FB80 C823 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4823, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC823, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_435)
{
    // 4823 003F;	
    // (䠣) CJK UNIFIED IDEOGRAPH-4823	[FB80 C823 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4823, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC823, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_436)
{
    // 4823 0061;	
    // (䠣) CJK UNIFIED IDEOGRAPH-4823	[FB80 C823 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4823, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC823, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_437)
{
    // 4823 0041;	
    // (䠣) CJK UNIFIED IDEOGRAPH-4823	[FB80 C823 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4823, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC823, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_438)
{
    // 4823 0062;	
    // (䠣) CJK UNIFIED IDEOGRAPH-4823	[FB80 C823 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4823, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC823, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_439)
{
    // 4824 0021;	
    // (䠤) CJK UNIFIED IDEOGRAPH-4824	[FB80 C824 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4824, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC824, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_440)
{
    // 4824 003F;	
    // (䠤) CJK UNIFIED IDEOGRAPH-4824	[FB80 C824 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4824, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC824, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_441)
{
    // 4824 0061;	
    // (䠤) CJK UNIFIED IDEOGRAPH-4824	[FB80 C824 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4824, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC824, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_442)
{
    // 4824 0041;	
    // (䠤) CJK UNIFIED IDEOGRAPH-4824	[FB80 C824 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4824, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC824, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_443)
{
    // 4824 0062;	
    // (䠤) CJK UNIFIED IDEOGRAPH-4824	[FB80 C824 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4824, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC824, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_444)
{
    // 4825 0021;	
    // (䠥) CJK UNIFIED IDEOGRAPH-4825	[FB80 C825 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4825, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC825, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_445)
{
    // 4825 003F;	
    // (䠥) CJK UNIFIED IDEOGRAPH-4825	[FB80 C825 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4825, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC825, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_446)
{
    // 4825 0061;	
    // (䠥) CJK UNIFIED IDEOGRAPH-4825	[FB80 C825 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4825, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC825, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_447)
{
    // 4825 0041;	
    // (䠥) CJK UNIFIED IDEOGRAPH-4825	[FB80 C825 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4825, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC825, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_448)
{
    // 4825 0062;	
    // (䠥) CJK UNIFIED IDEOGRAPH-4825	[FB80 C825 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4825, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC825, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_449)
{
    // 4826 0021;	
    // (䠦) CJK UNIFIED IDEOGRAPH-4826	[FB80 C826 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4826, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC826, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_450)
{
    // 4826 003F;	
    // (䠦) CJK UNIFIED IDEOGRAPH-4826	[FB80 C826 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4826, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC826, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_451)
{
    // 4826 0061;	
    // (䠦) CJK UNIFIED IDEOGRAPH-4826	[FB80 C826 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4826, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC826, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_452)
{
    // 4826 0041;	
    // (䠦) CJK UNIFIED IDEOGRAPH-4826	[FB80 C826 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4826, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC826, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_453)
{
    // 4826 0062;	
    // (䠦) CJK UNIFIED IDEOGRAPH-4826	[FB80 C826 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4826, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC826, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_454)
{
    // 4827 0021;	
    // (䠧) CJK UNIFIED IDEOGRAPH-4827	[FB80 C827 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4827, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC827, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_455)
{
    // 4827 003F;	
    // (䠧) CJK UNIFIED IDEOGRAPH-4827	[FB80 C827 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4827, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC827, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_456)
{
    // 4827 0061;	
    // (䠧) CJK UNIFIED IDEOGRAPH-4827	[FB80 C827 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4827, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC827, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_457)
{
    // 4827 0041;	
    // (䠧) CJK UNIFIED IDEOGRAPH-4827	[FB80 C827 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4827, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC827, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_458)
{
    // 4827 0062;	
    // (䠧) CJK UNIFIED IDEOGRAPH-4827	[FB80 C827 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4827, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC827, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_459)
{
    // 4828 0021;	
    // (䠨) CJK UNIFIED IDEOGRAPH-4828	[FB80 C828 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4828, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC828, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_460)
{
    // 4828 003F;	
    // (䠨) CJK UNIFIED IDEOGRAPH-4828	[FB80 C828 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4828, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC828, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_461)
{
    // 4828 0061;	
    // (䠨) CJK UNIFIED IDEOGRAPH-4828	[FB80 C828 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4828, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC828, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_462)
{
    // 4828 0041;	
    // (䠨) CJK UNIFIED IDEOGRAPH-4828	[FB80 C828 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4828, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC828, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_463)
{
    // 4828 0062;	
    // (䠨) CJK UNIFIED IDEOGRAPH-4828	[FB80 C828 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4828, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC828, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_464)
{
    // 4829 0021;	
    // (䠩) CJK UNIFIED IDEOGRAPH-4829	[FB80 C829 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4829, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC829, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_465)
{
    // 4829 003F;	
    // (䠩) CJK UNIFIED IDEOGRAPH-4829	[FB80 C829 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4829, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC829, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_466)
{
    // 4829 0061;	
    // (䠩) CJK UNIFIED IDEOGRAPH-4829	[FB80 C829 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4829, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC829, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_467)
{
    // 4829 0041;	
    // (䠩) CJK UNIFIED IDEOGRAPH-4829	[FB80 C829 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4829, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC829, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_468)
{
    // 4829 0062;	
    // (䠩) CJK UNIFIED IDEOGRAPH-4829	[FB80 C829 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4829, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC829, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_469)
{
    // 482A 0021;	
    // (䠪) CJK UNIFIED IDEOGRAPH-482A	[FB80 C82A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x482A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC82A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_470)
{
    // 482A 003F;	
    // (䠪) CJK UNIFIED IDEOGRAPH-482A	[FB80 C82A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x482A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC82A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_471)
{
    // 482A 0061;	
    // (䠪) CJK UNIFIED IDEOGRAPH-482A	[FB80 C82A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x482A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC82A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_472)
{
    // 482A 0041;	
    // (䠪) CJK UNIFIED IDEOGRAPH-482A	[FB80 C82A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x482A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC82A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_473)
{
    // 482A 0062;	
    // (䠪) CJK UNIFIED IDEOGRAPH-482A	[FB80 C82A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x482A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC82A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_474)
{
    // 482B 0021;	
    // (䠫) CJK UNIFIED IDEOGRAPH-482B	[FB80 C82B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x482B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC82B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_475)
{
    // 482B 003F;	
    // (䠫) CJK UNIFIED IDEOGRAPH-482B	[FB80 C82B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x482B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC82B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_476)
{
    // 482B 0061;	
    // (䠫) CJK UNIFIED IDEOGRAPH-482B	[FB80 C82B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x482B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC82B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_477)
{
    // 482B 0041;	
    // (䠫) CJK UNIFIED IDEOGRAPH-482B	[FB80 C82B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x482B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC82B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_478)
{
    // 482B 0062;	
    // (䠫) CJK UNIFIED IDEOGRAPH-482B	[FB80 C82B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x482B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC82B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_479)
{
    // 482C 0021;	
    // (䠬) CJK UNIFIED IDEOGRAPH-482C	[FB80 C82C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x482C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC82C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_480)
{
    // 482C 003F;	
    // (䠬) CJK UNIFIED IDEOGRAPH-482C	[FB80 C82C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x482C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC82C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_481)
{
    // 482C 0061;	
    // (䠬) CJK UNIFIED IDEOGRAPH-482C	[FB80 C82C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x482C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC82C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_482)
{
    // 482C 0041;	
    // (䠬) CJK UNIFIED IDEOGRAPH-482C	[FB80 C82C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x482C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC82C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_483)
{
    // 482C 0062;	
    // (䠬) CJK UNIFIED IDEOGRAPH-482C	[FB80 C82C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x482C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC82C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_484)
{
    // 482D 0021;	
    // (䠭) CJK UNIFIED IDEOGRAPH-482D	[FB80 C82D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x482D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC82D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_485)
{
    // 482D 003F;	
    // (䠭) CJK UNIFIED IDEOGRAPH-482D	[FB80 C82D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x482D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC82D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_486)
{
    // 482D 0061;	
    // (䠭) CJK UNIFIED IDEOGRAPH-482D	[FB80 C82D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x482D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC82D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_487)
{
    // 482D 0041;	
    // (䠭) CJK UNIFIED IDEOGRAPH-482D	[FB80 C82D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x482D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC82D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_488)
{
    // 482D 0062;	
    // (䠭) CJK UNIFIED IDEOGRAPH-482D	[FB80 C82D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x482D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC82D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_489)
{
    // 482E 0021;	
    // (䠮) CJK UNIFIED IDEOGRAPH-482E	[FB80 C82E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x482E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC82E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_490)
{
    // 482E 003F;	
    // (䠮) CJK UNIFIED IDEOGRAPH-482E	[FB80 C82E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x482E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC82E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_491)
{
    // 482E 0061;	
    // (䠮) CJK UNIFIED IDEOGRAPH-482E	[FB80 C82E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x482E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC82E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_492)
{
    // 482E 0041;	
    // (䠮) CJK UNIFIED IDEOGRAPH-482E	[FB80 C82E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x482E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC82E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_493)
{
    // 482E 0062;	
    // (䠮) CJK UNIFIED IDEOGRAPH-482E	[FB80 C82E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x482E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC82E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_494)
{
    // 482F 0021;	
    // (䠯) CJK UNIFIED IDEOGRAPH-482F	[FB80 C82F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x482F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC82F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_495)
{
    // 482F 003F;	
    // (䠯) CJK UNIFIED IDEOGRAPH-482F	[FB80 C82F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x482F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC82F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_496)
{
    // 482F 0061;	
    // (䠯) CJK UNIFIED IDEOGRAPH-482F	[FB80 C82F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x482F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC82F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_497)
{
    // 482F 0041;	
    // (䠯) CJK UNIFIED IDEOGRAPH-482F	[FB80 C82F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x482F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC82F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_498)
{
    // 482F 0062;	
    // (䠯) CJK UNIFIED IDEOGRAPH-482F	[FB80 C82F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x482F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC82F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_378_499)
{
    // 4830 0021;	
    // (䠰) CJK UNIFIED IDEOGRAPH-4830	[FB80 C830 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4830, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC830, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

