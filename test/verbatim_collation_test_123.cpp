// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, verbatim_123_000)
{
    uint32_t const cps[2] = { 0xAB51, 0x0062 };

    // AB51 0062;	
    // (ꭑ) LATIN SMALL LETTER TURNED UI	[1F25 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F25, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB51 0062;	
    // (ꭑ) LATIN SMALL LETTER TURNED UI	[1F25 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F25, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_001)
{
    uint32_t const cps[2] = { 0x0289, 0x0021 };

    // 0289 0021;	
    // (ʉ) LATIN SMALL LETTER U BAR	[1F26 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F26, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0289 0021;	
    // (ʉ) LATIN SMALL LETTER U BAR	[1F26 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F26, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_002)
{
    uint32_t const cps[2] = { 0x0244, 0x0021 };

    // 0244 0021;	
    // (Ʉ) LATIN CAPITAL LETTER U BAR	[1F26 0261 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F26, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0244 0021;	
    // (Ʉ) LATIN CAPITAL LETTER U BAR	[1F26 | 0020 | 0008 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F26, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_003)
{
    uint32_t const cps[2] = { 0x1DB6, 0x0021 };

    // 1DB6 0021;	
    // (ᶶ) MODIFIER LETTER SMALL U BAR	[1F26 0261 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F26, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DB6 0021;	
    // (ᶶ) MODIFIER LETTER SMALL U BAR	[1F26 | 0020 | 0014 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F26, 0x0000, 0x0020, 0x0000, 0x0014, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_004)
{
    uint32_t const cps[2] = { 0x0289, 0x003F };

    // 0289 003F;	
    // (ʉ) LATIN SMALL LETTER U BAR	[1F26 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F26, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0289 003F;	
    // (ʉ) LATIN SMALL LETTER U BAR	[1F26 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F26, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_005)
{
    uint32_t const cps[2] = { 0x0244, 0x003F };

    // 0244 003F;	
    // (Ʉ) LATIN CAPITAL LETTER U BAR	[1F26 0267 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F26, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0244 003F;	
    // (Ʉ) LATIN CAPITAL LETTER U BAR	[1F26 | 0020 | 0008 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F26, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_006)
{
    uint32_t const cps[2] = { 0x1DB6, 0x003F };

    // 1DB6 003F;	
    // (ᶶ) MODIFIER LETTER SMALL U BAR	[1F26 0267 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F26, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DB6 003F;	
    // (ᶶ) MODIFIER LETTER SMALL U BAR	[1F26 | 0020 | 0014 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F26, 0x0000, 0x0020, 0x0000, 0x0014, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_007)
{
    uint32_t const cps[2] = { 0x0289, 0x0061 };

    // 0289 0061;	
    // (ʉ) LATIN SMALL LETTER U BAR	[1F26 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0289 0061;	
    // (ʉ) LATIN SMALL LETTER U BAR	[1F26 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_008)
{
    uint32_t const cps[2] = { 0x0289, 0x0041 };

    // 0289 0041;	
    // (ʉ) LATIN SMALL LETTER U BAR	[1F26 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0289 0041;	
    // (ʉ) LATIN SMALL LETTER U BAR	[1F26 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_009)
{
    uint32_t const cps[2] = { 0x0244, 0x0061 };

    // 0244 0061;	
    // (Ʉ) LATIN CAPITAL LETTER U BAR	[1F26 1CAD | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0244 0061;	
    // (Ʉ) LATIN CAPITAL LETTER U BAR	[1F26 1CAD | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_010)
{
    uint32_t const cps[2] = { 0x0244, 0x0041 };

    // 0244 0041;	
    // (Ʉ) LATIN CAPITAL LETTER U BAR	[1F26 1CAD | 0020 0020 | 0008 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0244 0041;	
    // (Ʉ) LATIN CAPITAL LETTER U BAR	[1F26 1CAD | 0020 0020 | 0008 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_011)
{
    uint32_t const cps[2] = { 0x1DB6, 0x0061 };

    // 1DB6 0061;	
    // (ᶶ) MODIFIER LETTER SMALL U BAR	[1F26 1CAD | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DB6 0061;	
    // (ᶶ) MODIFIER LETTER SMALL U BAR	[1F26 1CAD | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_012)
{
    uint32_t const cps[2] = { 0x1DB6, 0x0041 };

    // 1DB6 0041;	
    // (ᶶ) MODIFIER LETTER SMALL U BAR	[1F26 1CAD | 0020 0020 | 0014 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DB6 0041;	
    // (ᶶ) MODIFIER LETTER SMALL U BAR	[1F26 1CAD | 0020 0020 | 0014 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_013)
{
    uint32_t const cps[2] = { 0x0289, 0x0062 };

    // 0289 0062;	
    // (ʉ) LATIN SMALL LETTER U BAR	[1F26 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0289 0062;	
    // (ʉ) LATIN SMALL LETTER U BAR	[1F26 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_014)
{
    uint32_t const cps[2] = { 0x0244, 0x0062 };

    // 0244 0062;	
    // (Ʉ) LATIN CAPITAL LETTER U BAR	[1F26 1CC6 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0244 0062;	
    // (Ʉ) LATIN CAPITAL LETTER U BAR	[1F26 1CC6 | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_015)
{
    uint32_t const cps[2] = { 0x1DB6, 0x0062 };

    // 1DB6 0062;	
    // (ᶶ) MODIFIER LETTER SMALL U BAR	[1F26 1CC6 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DB6 0062;	
    // (ᶶ) MODIFIER LETTER SMALL U BAR	[1F26 1CC6 | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_016)
{
    uint32_t const cps[2] = { 0xAB4F, 0x0021 };

    // AB4F 0021;	
    // (ꭏ) LATIN SMALL LETTER U BAR WITH SHORT RIGHT LEG	[1F2A 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB4F 0021;	
    // (ꭏ) LATIN SMALL LETTER U BAR WITH SHORT RIGHT LEG	[1F2A | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F2A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_017)
{
    uint32_t const cps[2] = { 0xAB4F, 0x003F };

    // AB4F 003F;	
    // (ꭏ) LATIN SMALL LETTER U BAR WITH SHORT RIGHT LEG	[1F2A 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB4F 003F;	
    // (ꭏ) LATIN SMALL LETTER U BAR WITH SHORT RIGHT LEG	[1F2A | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F2A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_018)
{
    uint32_t const cps[2] = { 0xAB4F, 0x0061 };

    // AB4F 0061;	
    // (ꭏ) LATIN SMALL LETTER U BAR WITH SHORT RIGHT LEG	[1F2A 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB4F 0061;	
    // (ꭏ) LATIN SMALL LETTER U BAR WITH SHORT RIGHT LEG	[1F2A 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_019)
{
    uint32_t const cps[2] = { 0xAB4F, 0x0041 };

    // AB4F 0041;	
    // (ꭏ) LATIN SMALL LETTER U BAR WITH SHORT RIGHT LEG	[1F2A 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB4F 0041;	
    // (ꭏ) LATIN SMALL LETTER U BAR WITH SHORT RIGHT LEG	[1F2A 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_020)
{
    uint32_t const cps[2] = { 0xAB4F, 0x0062 };

    // AB4F 0062;	
    // (ꭏ) LATIN SMALL LETTER U BAR WITH SHORT RIGHT LEG	[1F2A 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB4F 0062;	
    // (ꭏ) LATIN SMALL LETTER U BAR WITH SHORT RIGHT LEG	[1F2A 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F2A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_021)
{
    uint32_t const cps[2] = { 0x1D7E, 0x0021 };

    // 1D7E 0021;	
    // (ᵾ) LATIN SMALL CAPITAL LETTER U WITH STROKE	[1F2B 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7E 0021;	
    // (ᵾ) LATIN SMALL CAPITAL LETTER U WITH STROKE	[1F2B | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F2B, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_022)
{
    uint32_t const cps[2] = { 0x1D7E, 0x003F };

    // 1D7E 003F;	
    // (ᵾ) LATIN SMALL CAPITAL LETTER U WITH STROKE	[1F2B 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7E 003F;	
    // (ᵾ) LATIN SMALL CAPITAL LETTER U WITH STROKE	[1F2B | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F2B, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_023)
{
    uint32_t const cps[2] = { 0x1D7E, 0x0061 };

    // 1D7E 0061;	
    // (ᵾ) LATIN SMALL CAPITAL LETTER U WITH STROKE	[1F2B 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7E 0061;	
    // (ᵾ) LATIN SMALL CAPITAL LETTER U WITH STROKE	[1F2B 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_024)
{
    uint32_t const cps[2] = { 0x1D7E, 0x0041 };

    // 1D7E 0041;	
    // (ᵾ) LATIN SMALL CAPITAL LETTER U WITH STROKE	[1F2B 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7E 0041;	
    // (ᵾ) LATIN SMALL CAPITAL LETTER U WITH STROKE	[1F2B 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_025)
{
    uint32_t const cps[2] = { 0x1D7E, 0x0062 };

    // 1D7E 0062;	
    // (ᵾ) LATIN SMALL CAPITAL LETTER U WITH STROKE	[1F2B 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7E 0062;	
    // (ᵾ) LATIN SMALL CAPITAL LETTER U WITH STROKE	[1F2B 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F2B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_026)
{
    uint32_t const cps[2] = { 0x1D99, 0x0021 };

    // 1D99 0021;	
    // (ᶙ) LATIN SMALL LETTER U WITH RETROFLEX HOOK	[1F2C 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D99 0021;	
    // (ᶙ) LATIN SMALL LETTER U WITH RETROFLEX HOOK	[1F2C | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F2C, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_027)
{
    uint32_t const cps[2] = { 0x1D99, 0x003F };

    // 1D99 003F;	
    // (ᶙ) LATIN SMALL LETTER U WITH RETROFLEX HOOK	[1F2C 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D99 003F;	
    // (ᶙ) LATIN SMALL LETTER U WITH RETROFLEX HOOK	[1F2C | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F2C, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_028)
{
    uint32_t const cps[2] = { 0x1D99, 0x0061 };

    // 1D99 0061;	
    // (ᶙ) LATIN SMALL LETTER U WITH RETROFLEX HOOK	[1F2C 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D99 0061;	
    // (ᶙ) LATIN SMALL LETTER U WITH RETROFLEX HOOK	[1F2C 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_029)
{
    uint32_t const cps[2] = { 0x1D99, 0x0041 };

    // 1D99 0041;	
    // (ᶙ) LATIN SMALL LETTER U WITH RETROFLEX HOOK	[1F2C 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D99 0041;	
    // (ᶙ) LATIN SMALL LETTER U WITH RETROFLEX HOOK	[1F2C 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_030)
{
    uint32_t const cps[2] = { 0x1D99, 0x0062 };

    // 1D99 0062;	
    // (ᶙ) LATIN SMALL LETTER U WITH RETROFLEX HOOK	[1F2C 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D99 0062;	
    // (ᶙ) LATIN SMALL LETTER U WITH RETROFLEX HOOK	[1F2C 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F2C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_031)
{
    uint32_t const cps[2] = { 0xAB52, 0x0021 };

    // AB52 0021;	
    // (ꭒ) LATIN SMALL LETTER U WITH LEFT HOOK	[1F2D 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB52 0021;	
    // (ꭒ) LATIN SMALL LETTER U WITH LEFT HOOK	[1F2D | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F2D, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_032)
{
    uint32_t const cps[2] = { 0xAB5F, 0x0021 };

    // AB5F 0021;	
    // (ꭟ) MODIFIER LETTER SMALL U WITH LEFT HOOK	[1F2D 0261 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB5F 0021;	
    // (ꭟ) MODIFIER LETTER SMALL U WITH LEFT HOOK	[1F2D | 0020 | 0014 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F2D, 0x0000, 0x0020, 0x0000, 0x0014, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_033)
{
    uint32_t const cps[2] = { 0xAB52, 0x003F };

    // AB52 003F;	
    // (ꭒ) LATIN SMALL LETTER U WITH LEFT HOOK	[1F2D 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB52 003F;	
    // (ꭒ) LATIN SMALL LETTER U WITH LEFT HOOK	[1F2D | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F2D, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_034)
{
    uint32_t const cps[2] = { 0xAB5F, 0x003F };

    // AB5F 003F;	
    // (ꭟ) MODIFIER LETTER SMALL U WITH LEFT HOOK	[1F2D 0267 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB5F 003F;	
    // (ꭟ) MODIFIER LETTER SMALL U WITH LEFT HOOK	[1F2D | 0020 | 0014 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F2D, 0x0000, 0x0020, 0x0000, 0x0014, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_035)
{
    uint32_t const cps[2] = { 0xAB52, 0x0061 };

    // AB52 0061;	
    // (ꭒ) LATIN SMALL LETTER U WITH LEFT HOOK	[1F2D 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB52 0061;	
    // (ꭒ) LATIN SMALL LETTER U WITH LEFT HOOK	[1F2D 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_036)
{
    uint32_t const cps[2] = { 0xAB52, 0x0041 };

    // AB52 0041;	
    // (ꭒ) LATIN SMALL LETTER U WITH LEFT HOOK	[1F2D 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB52 0041;	
    // (ꭒ) LATIN SMALL LETTER U WITH LEFT HOOK	[1F2D 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_037)
{
    uint32_t const cps[2] = { 0xAB5F, 0x0061 };

    // AB5F 0061;	
    // (ꭟ) MODIFIER LETTER SMALL U WITH LEFT HOOK	[1F2D 1CAD | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB5F 0061;	
    // (ꭟ) MODIFIER LETTER SMALL U WITH LEFT HOOK	[1F2D 1CAD | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_038)
{
    uint32_t const cps[2] = { 0xAB5F, 0x0041 };

    // AB5F 0041;	
    // (ꭟ) MODIFIER LETTER SMALL U WITH LEFT HOOK	[1F2D 1CAD | 0020 0020 | 0014 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB5F 0041;	
    // (ꭟ) MODIFIER LETTER SMALL U WITH LEFT HOOK	[1F2D 1CAD | 0020 0020 | 0014 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_039)
{
    uint32_t const cps[2] = { 0xAB52, 0x0062 };

    // AB52 0062;	
    // (ꭒ) LATIN SMALL LETTER U WITH LEFT HOOK	[1F2D 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB52 0062;	
    // (ꭒ) LATIN SMALL LETTER U WITH LEFT HOOK	[1F2D 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_040)
{
    uint32_t const cps[2] = { 0xAB5F, 0x0062 };

    // AB5F 0062;	
    // (ꭟ) MODIFIER LETTER SMALL U WITH LEFT HOOK	[1F2D 1CC6 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // AB5F 0062;	
    // (ꭟ) MODIFIER LETTER SMALL U WITH LEFT HOOK	[1F2D 1CC6 | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_041)
{
    uint32_t const cps[2] = { 0x0265, 0x0021 };

    // 0265 0021;	
    // (ɥ) LATIN SMALL LETTER TURNED H	[1F2E 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0265 0021;	
    // (ɥ) LATIN SMALL LETTER TURNED H	[1F2E | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F2E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_042)
{
    uint32_t const cps[2] = { 0xA78D, 0x0021 };

    // A78D 0021;	
    // (Ɥ) LATIN CAPITAL LETTER TURNED H	[1F2E 0261 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A78D 0021;	
    // (Ɥ) LATIN CAPITAL LETTER TURNED H	[1F2E | 0020 | 0008 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F2E, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_043)
{
    uint32_t const cps[2] = { 0x1DA3, 0x0021 };

    // 1DA3 0021;	
    // (ᶣ) MODIFIER LETTER SMALL TURNED H	[1F2E 0261 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA3 0021;	
    // (ᶣ) MODIFIER LETTER SMALL TURNED H	[1F2E | 0020 | 0014 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F2E, 0x0000, 0x0020, 0x0000, 0x0014, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_044)
{
    uint32_t const cps[2] = { 0x0265, 0x003F };

    // 0265 003F;	
    // (ɥ) LATIN SMALL LETTER TURNED H	[1F2E 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0265 003F;	
    // (ɥ) LATIN SMALL LETTER TURNED H	[1F2E | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F2E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_045)
{
    uint32_t const cps[2] = { 0xA78D, 0x003F };

    // A78D 003F;	
    // (Ɥ) LATIN CAPITAL LETTER TURNED H	[1F2E 0267 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A78D 003F;	
    // (Ɥ) LATIN CAPITAL LETTER TURNED H	[1F2E | 0020 | 0008 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F2E, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_046)
{
    uint32_t const cps[2] = { 0x1DA3, 0x003F };

    // 1DA3 003F;	
    // (ᶣ) MODIFIER LETTER SMALL TURNED H	[1F2E 0267 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA3 003F;	
    // (ᶣ) MODIFIER LETTER SMALL TURNED H	[1F2E | 0020 | 0014 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F2E, 0x0000, 0x0020, 0x0000, 0x0014, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_047)
{
    uint32_t const cps[2] = { 0x0265, 0x0061 };

    // 0265 0061;	
    // (ɥ) LATIN SMALL LETTER TURNED H	[1F2E 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0265 0061;	
    // (ɥ) LATIN SMALL LETTER TURNED H	[1F2E 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_048)
{
    uint32_t const cps[2] = { 0x0265, 0x0041 };

    // 0265 0041;	
    // (ɥ) LATIN SMALL LETTER TURNED H	[1F2E 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0265 0041;	
    // (ɥ) LATIN SMALL LETTER TURNED H	[1F2E 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_049)
{
    uint32_t const cps[2] = { 0xA78D, 0x0061 };

    // A78D 0061;	
    // (Ɥ) LATIN CAPITAL LETTER TURNED H	[1F2E 1CAD | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A78D 0061;	
    // (Ɥ) LATIN CAPITAL LETTER TURNED H	[1F2E 1CAD | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_050)
{
    uint32_t const cps[2] = { 0xA78D, 0x0041 };

    // A78D 0041;	
    // (Ɥ) LATIN CAPITAL LETTER TURNED H	[1F2E 1CAD | 0020 0020 | 0008 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A78D 0041;	
    // (Ɥ) LATIN CAPITAL LETTER TURNED H	[1F2E 1CAD | 0020 0020 | 0008 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_051)
{
    uint32_t const cps[2] = { 0x1DA3, 0x0061 };

    // 1DA3 0061;	
    // (ᶣ) MODIFIER LETTER SMALL TURNED H	[1F2E 1CAD | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA3 0061;	
    // (ᶣ) MODIFIER LETTER SMALL TURNED H	[1F2E 1CAD | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_052)
{
    uint32_t const cps[2] = { 0x1DA3, 0x0041 };

    // 1DA3 0041;	
    // (ᶣ) MODIFIER LETTER SMALL TURNED H	[1F2E 1CAD | 0020 0020 | 0014 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA3 0041;	
    // (ᶣ) MODIFIER LETTER SMALL TURNED H	[1F2E 1CAD | 0020 0020 | 0014 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_053)
{
    uint32_t const cps[2] = { 0x0265, 0x0062 };

    // 0265 0062;	
    // (ɥ) LATIN SMALL LETTER TURNED H	[1F2E 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0265 0062;	
    // (ɥ) LATIN SMALL LETTER TURNED H	[1F2E 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F2E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_054)
{
    uint32_t const cps[2] = { 0xA78D, 0x0062 };

    // A78D 0062;	
    // (Ɥ) LATIN CAPITAL LETTER TURNED H	[1F2E 1CC6 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A78D 0062;	
    // (Ɥ) LATIN CAPITAL LETTER TURNED H	[1F2E 1CC6 | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F2E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_055)
{
    uint32_t const cps[2] = { 0x1DA3, 0x0062 };

    // 1DA3 0062;	
    // (ᶣ) MODIFIER LETTER SMALL TURNED H	[1F2E 1CC6 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F2E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA3 0062;	
    // (ᶣ) MODIFIER LETTER SMALL TURNED H	[1F2E 1CC6 | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F2E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_056)
{
    uint32_t const cps[2] = { 0x02AE, 0x0021 };

    // 02AE 0021;	
    // (ʮ) LATIN SMALL LETTER TURNED H WITH FISHHOOK	[1F32 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F32, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 02AE 0021;	
    // (ʮ) LATIN SMALL LETTER TURNED H WITH FISHHOOK	[1F32 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F32, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_057)
{
    uint32_t const cps[2] = { 0x02AE, 0x003F };

    // 02AE 003F;	
    // (ʮ) LATIN SMALL LETTER TURNED H WITH FISHHOOK	[1F32 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F32, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 02AE 003F;	
    // (ʮ) LATIN SMALL LETTER TURNED H WITH FISHHOOK	[1F32 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F32, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_058)
{
    uint32_t const cps[2] = { 0x02AE, 0x0061 };

    // 02AE 0061;	
    // (ʮ) LATIN SMALL LETTER TURNED H WITH FISHHOOK	[1F32 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 02AE 0061;	
    // (ʮ) LATIN SMALL LETTER TURNED H WITH FISHHOOK	[1F32 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_059)
{
    uint32_t const cps[2] = { 0x02AE, 0x0041 };

    // 02AE 0041;	
    // (ʮ) LATIN SMALL LETTER TURNED H WITH FISHHOOK	[1F32 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 02AE 0041;	
    // (ʮ) LATIN SMALL LETTER TURNED H WITH FISHHOOK	[1F32 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_060)
{
    uint32_t const cps[2] = { 0x02AE, 0x0062 };

    // 02AE 0062;	
    // (ʮ) LATIN SMALL LETTER TURNED H WITH FISHHOOK	[1F32 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F32, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 02AE 0062;	
    // (ʮ) LATIN SMALL LETTER TURNED H WITH FISHHOOK	[1F32 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F32, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_061)
{
    uint32_t const cps[2] = { 0x02AF, 0x0021 };

    // 02AF 0021;	
    // (ʯ) LATIN SMALL LETTER TURNED H WITH FISHHOOK AND TAIL	[1F36 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F36, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 02AF 0021;	
    // (ʯ) LATIN SMALL LETTER TURNED H WITH FISHHOOK AND TAIL	[1F36 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F36, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_062)
{
    uint32_t const cps[2] = { 0x02AF, 0x003F };

    // 02AF 003F;	
    // (ʯ) LATIN SMALL LETTER TURNED H WITH FISHHOOK AND TAIL	[1F36 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F36, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 02AF 003F;	
    // (ʯ) LATIN SMALL LETTER TURNED H WITH FISHHOOK AND TAIL	[1F36 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F36, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_063)
{
    uint32_t const cps[2] = { 0x02AF, 0x0061 };

    // 02AF 0061;	
    // (ʯ) LATIN SMALL LETTER TURNED H WITH FISHHOOK AND TAIL	[1F36 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 02AF 0061;	
    // (ʯ) LATIN SMALL LETTER TURNED H WITH FISHHOOK AND TAIL	[1F36 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_064)
{
    uint32_t const cps[2] = { 0x02AF, 0x0041 };

    // 02AF 0041;	
    // (ʯ) LATIN SMALL LETTER TURNED H WITH FISHHOOK AND TAIL	[1F36 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 02AF 0041;	
    // (ʯ) LATIN SMALL LETTER TURNED H WITH FISHHOOK AND TAIL	[1F36 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_065)
{
    uint32_t const cps[2] = { 0x02AF, 0x0062 };

    // 02AF 0062;	
    // (ʯ) LATIN SMALL LETTER TURNED H WITH FISHHOOK AND TAIL	[1F36 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F36, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 02AF 0062;	
    // (ʯ) LATIN SMALL LETTER TURNED H WITH FISHHOOK AND TAIL	[1F36 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F36, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_066)
{
    uint32_t const cps[2] = { 0x026F, 0x0021 };

    // 026F 0021;	
    // (ɯ) LATIN SMALL LETTER TURNED M	[1F3A 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 026F 0021;	
    // (ɯ) LATIN SMALL LETTER TURNED M	[1F3A | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F3A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_067)
{
    uint32_t const cps[2] = { 0x019C, 0x0021 };

    // 019C 0021;	
    // (Ɯ) LATIN CAPITAL LETTER TURNED M	[1F3A 0261 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 019C 0021;	
    // (Ɯ) LATIN CAPITAL LETTER TURNED M	[1F3A | 0020 | 0008 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F3A, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_068)
{
    uint32_t const cps[2] = { 0x1D5A, 0x0021 };

    // 1D5A 0021;	
    // (ᵚ) MODIFIER LETTER SMALL TURNED M	[1F3A 0261 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5A 0021;	
    // (ᵚ) MODIFIER LETTER SMALL TURNED M	[1F3A | 0020 | 0014 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F3A, 0x0000, 0x0020, 0x0000, 0x0014, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_069)
{
    uint32_t const cps[2] = { 0x026F, 0x003F };

    // 026F 003F;	
    // (ɯ) LATIN SMALL LETTER TURNED M	[1F3A 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 026F 003F;	
    // (ɯ) LATIN SMALL LETTER TURNED M	[1F3A | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F3A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_070)
{
    uint32_t const cps[2] = { 0x019C, 0x003F };

    // 019C 003F;	
    // (Ɯ) LATIN CAPITAL LETTER TURNED M	[1F3A 0267 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 019C 003F;	
    // (Ɯ) LATIN CAPITAL LETTER TURNED M	[1F3A | 0020 | 0008 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F3A, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_071)
{
    uint32_t const cps[2] = { 0x1D5A, 0x003F };

    // 1D5A 003F;	
    // (ᵚ) MODIFIER LETTER SMALL TURNED M	[1F3A 0267 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5A 003F;	
    // (ᵚ) MODIFIER LETTER SMALL TURNED M	[1F3A | 0020 | 0014 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F3A, 0x0000, 0x0020, 0x0000, 0x0014, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_072)
{
    uint32_t const cps[2] = { 0x026F, 0x0061 };

    // 026F 0061;	
    // (ɯ) LATIN SMALL LETTER TURNED M	[1F3A 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 026F 0061;	
    // (ɯ) LATIN SMALL LETTER TURNED M	[1F3A 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_073)
{
    uint32_t const cps[2] = { 0x026F, 0x0041 };

    // 026F 0041;	
    // (ɯ) LATIN SMALL LETTER TURNED M	[1F3A 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 026F 0041;	
    // (ɯ) LATIN SMALL LETTER TURNED M	[1F3A 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_074)
{
    uint32_t const cps[2] = { 0x019C, 0x0061 };

    // 019C 0061;	
    // (Ɯ) LATIN CAPITAL LETTER TURNED M	[1F3A 1CAD | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 019C 0061;	
    // (Ɯ) LATIN CAPITAL LETTER TURNED M	[1F3A 1CAD | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_075)
{
    uint32_t const cps[2] = { 0x019C, 0x0041 };

    // 019C 0041;	
    // (Ɯ) LATIN CAPITAL LETTER TURNED M	[1F3A 1CAD | 0020 0020 | 0008 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 019C 0041;	
    // (Ɯ) LATIN CAPITAL LETTER TURNED M	[1F3A 1CAD | 0020 0020 | 0008 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_076)
{
    uint32_t const cps[2] = { 0x1D5A, 0x0061 };

    // 1D5A 0061;	
    // (ᵚ) MODIFIER LETTER SMALL TURNED M	[1F3A 1CAD | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5A 0061;	
    // (ᵚ) MODIFIER LETTER SMALL TURNED M	[1F3A 1CAD | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_077)
{
    uint32_t const cps[2] = { 0x1D5A, 0x0041 };

    // 1D5A 0041;	
    // (ᵚ) MODIFIER LETTER SMALL TURNED M	[1F3A 1CAD | 0020 0020 | 0014 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5A 0041;	
    // (ᵚ) MODIFIER LETTER SMALL TURNED M	[1F3A 1CAD | 0020 0020 | 0014 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_078)
{
    uint32_t const cps[2] = { 0x026F, 0x0062 };

    // 026F 0062;	
    // (ɯ) LATIN SMALL LETTER TURNED M	[1F3A 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 026F 0062;	
    // (ɯ) LATIN SMALL LETTER TURNED M	[1F3A 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_079)
{
    uint32_t const cps[2] = { 0x019C, 0x0062 };

    // 019C 0062;	
    // (Ɯ) LATIN CAPITAL LETTER TURNED M	[1F3A 1CC6 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 019C 0062;	
    // (Ɯ) LATIN CAPITAL LETTER TURNED M	[1F3A 1CC6 | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_080)
{
    uint32_t const cps[2] = { 0x1D5A, 0x0062 };

    // 1D5A 0062;	
    // (ᵚ) MODIFIER LETTER SMALL TURNED M	[1F3A 1CC6 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5A 0062;	
    // (ᵚ) MODIFIER LETTER SMALL TURNED M	[1F3A 1CC6 | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_081)
{
    uint32_t const cps[2] = { 0xA7FA, 0x0021 };

    // A7FA 0021;	
    // (ꟺ) LATIN LETTER SMALL CAPITAL TURNED M	[1F3E 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A7FA 0021;	
    // (ꟺ) LATIN LETTER SMALL CAPITAL TURNED M	[1F3E | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F3E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_082)
{
    uint32_t const cps[2] = { 0xA7FA, 0x003F };

    // A7FA 003F;	
    // (ꟺ) LATIN LETTER SMALL CAPITAL TURNED M	[1F3E 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A7FA 003F;	
    // (ꟺ) LATIN LETTER SMALL CAPITAL TURNED M	[1F3E | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F3E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_083)
{
    uint32_t const cps[2] = { 0xA7FA, 0x0061 };

    // A7FA 0061;	
    // (ꟺ) LATIN LETTER SMALL CAPITAL TURNED M	[1F3E 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A7FA 0061;	
    // (ꟺ) LATIN LETTER SMALL CAPITAL TURNED M	[1F3E 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_084)
{
    uint32_t const cps[2] = { 0xA7FA, 0x0041 };

    // A7FA 0041;	
    // (ꟺ) LATIN LETTER SMALL CAPITAL TURNED M	[1F3E 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A7FA 0041;	
    // (ꟺ) LATIN LETTER SMALL CAPITAL TURNED M	[1F3E 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_085)
{
    uint32_t const cps[2] = { 0xA7FA, 0x0062 };

    // A7FA 0062;	
    // (ꟺ) LATIN LETTER SMALL CAPITAL TURNED M	[1F3E 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A7FA 0062;	
    // (ꟺ) LATIN LETTER SMALL CAPITAL TURNED M	[1F3E 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_086)
{
    uint32_t const cps[2] = { 0x1D1F, 0x0021 };

    // 1D1F 0021;	
    // (ᴟ) LATIN SMALL LETTER SIDEWAYS TURNED M	[1F3F 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F3F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D1F 0021;	
    // (ᴟ) LATIN SMALL LETTER SIDEWAYS TURNED M	[1F3F | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F3F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_087)
{
    uint32_t const cps[2] = { 0x1D1F, 0x003F };

    // 1D1F 003F;	
    // (ᴟ) LATIN SMALL LETTER SIDEWAYS TURNED M	[1F3F 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F3F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D1F 003F;	
    // (ᴟ) LATIN SMALL LETTER SIDEWAYS TURNED M	[1F3F | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F3F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_088)
{
    uint32_t const cps[2] = { 0x1D1F, 0x0061 };

    // 1D1F 0061;	
    // (ᴟ) LATIN SMALL LETTER SIDEWAYS TURNED M	[1F3F 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D1F 0061;	
    // (ᴟ) LATIN SMALL LETTER SIDEWAYS TURNED M	[1F3F 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_089)
{
    uint32_t const cps[2] = { 0x1D1F, 0x0041 };

    // 1D1F 0041;	
    // (ᴟ) LATIN SMALL LETTER SIDEWAYS TURNED M	[1F3F 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D1F 0041;	
    // (ᴟ) LATIN SMALL LETTER SIDEWAYS TURNED M	[1F3F 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_090)
{
    uint32_t const cps[2] = { 0x1D1F, 0x0062 };

    // 1D1F 0062;	
    // (ᴟ) LATIN SMALL LETTER SIDEWAYS TURNED M	[1F3F 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F3F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D1F 0062;	
    // (ᴟ) LATIN SMALL LETTER SIDEWAYS TURNED M	[1F3F 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F3F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_091)
{
    uint32_t const cps[2] = { 0x0270, 0x0021 };

    // 0270 0021;	
    // (ɰ) LATIN SMALL LETTER TURNED M WITH LONG LEG	[1F40 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F40, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0270 0021;	
    // (ɰ) LATIN SMALL LETTER TURNED M WITH LONG LEG	[1F40 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F40, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_092)
{
    uint32_t const cps[2] = { 0x1DAD, 0x0021 };

    // 1DAD 0021;	
    // (ᶭ) MODIFIER LETTER SMALL TURNED M WITH LONG LEG	[1F40 0261 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F40, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAD 0021;	
    // (ᶭ) MODIFIER LETTER SMALL TURNED M WITH LONG LEG	[1F40 | 0020 | 0014 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F40, 0x0000, 0x0020, 0x0000, 0x0014, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_093)
{
    uint32_t const cps[2] = { 0x0270, 0x003F };

    // 0270 003F;	
    // (ɰ) LATIN SMALL LETTER TURNED M WITH LONG LEG	[1F40 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F40, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0270 003F;	
    // (ɰ) LATIN SMALL LETTER TURNED M WITH LONG LEG	[1F40 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F40, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_094)
{
    uint32_t const cps[2] = { 0x1DAD, 0x003F };

    // 1DAD 003F;	
    // (ᶭ) MODIFIER LETTER SMALL TURNED M WITH LONG LEG	[1F40 0267 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F40, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAD 003F;	
    // (ᶭ) MODIFIER LETTER SMALL TURNED M WITH LONG LEG	[1F40 | 0020 | 0014 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F40, 0x0000, 0x0020, 0x0000, 0x0014, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_095)
{
    uint32_t const cps[2] = { 0x0270, 0x0061 };

    // 0270 0061;	
    // (ɰ) LATIN SMALL LETTER TURNED M WITH LONG LEG	[1F40 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0270 0061;	
    // (ɰ) LATIN SMALL LETTER TURNED M WITH LONG LEG	[1F40 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_096)
{
    uint32_t const cps[2] = { 0x0270, 0x0041 };

    // 0270 0041;	
    // (ɰ) LATIN SMALL LETTER TURNED M WITH LONG LEG	[1F40 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0270 0041;	
    // (ɰ) LATIN SMALL LETTER TURNED M WITH LONG LEG	[1F40 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_097)
{
    uint32_t const cps[2] = { 0x1DAD, 0x0061 };

    // 1DAD 0061;	
    // (ᶭ) MODIFIER LETTER SMALL TURNED M WITH LONG LEG	[1F40 1CAD | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAD 0061;	
    // (ᶭ) MODIFIER LETTER SMALL TURNED M WITH LONG LEG	[1F40 1CAD | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_098)
{
    uint32_t const cps[2] = { 0x1DAD, 0x0041 };

    // 1DAD 0041;	
    // (ᶭ) MODIFIER LETTER SMALL TURNED M WITH LONG LEG	[1F40 1CAD | 0020 0020 | 0014 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAD 0041;	
    // (ᶭ) MODIFIER LETTER SMALL TURNED M WITH LONG LEG	[1F40 1CAD | 0020 0020 | 0014 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_099)
{
    uint32_t const cps[2] = { 0x0270, 0x0062 };

    // 0270 0062;	
    // (ɰ) LATIN SMALL LETTER TURNED M WITH LONG LEG	[1F40 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F40, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0270 0062;	
    // (ɰ) LATIN SMALL LETTER TURNED M WITH LONG LEG	[1F40 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F40, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_100)
{
    uint32_t const cps[2] = { 0x1DAD, 0x0062 };

    // 1DAD 0062;	
    // (ᶭ) MODIFIER LETTER SMALL TURNED M WITH LONG LEG	[1F40 1CC6 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F40, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAD 0062;	
    // (ᶭ) MODIFIER LETTER SMALL TURNED M WITH LONG LEG	[1F40 1CC6 | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F40, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_101)
{
    uint32_t const cps[2] = { 0x028A, 0x0021 };

    // 028A 0021;	
    // (ʊ) LATIN SMALL LETTER UPSILON	[1F44 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F44, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 028A 0021;	
    // (ʊ) LATIN SMALL LETTER UPSILON	[1F44 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F44, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_102)
{
    uint32_t const cps[2] = { 0x01B1, 0x0021 };

    // 01B1 0021;	
    // (Ʊ) LATIN CAPITAL LETTER UPSILON	[1F44 0261 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F44, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01B1 0021;	
    // (Ʊ) LATIN CAPITAL LETTER UPSILON	[1F44 | 0020 | 0008 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F44, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_103)
{
    uint32_t const cps[2] = { 0x1DB7, 0x0021 };

    // 1DB7 0021;	
    // (ᶷ) MODIFIER LETTER SMALL UPSILON	[1F44 0261 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F44, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DB7 0021;	
    // (ᶷ) MODIFIER LETTER SMALL UPSILON	[1F44 | 0020 | 0014 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F44, 0x0000, 0x0020, 0x0000, 0x0014, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_104)
{
    uint32_t const cps[2] = { 0x028A, 0x003F };

    // 028A 003F;	
    // (ʊ) LATIN SMALL LETTER UPSILON	[1F44 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F44, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 028A 003F;	
    // (ʊ) LATIN SMALL LETTER UPSILON	[1F44 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F44, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_105)
{
    uint32_t const cps[2] = { 0x01B1, 0x003F };

    // 01B1 003F;	
    // (Ʊ) LATIN CAPITAL LETTER UPSILON	[1F44 0267 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F44, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01B1 003F;	
    // (Ʊ) LATIN CAPITAL LETTER UPSILON	[1F44 | 0020 | 0008 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F44, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_106)
{
    uint32_t const cps[2] = { 0x1DB7, 0x003F };

    // 1DB7 003F;	
    // (ᶷ) MODIFIER LETTER SMALL UPSILON	[1F44 0267 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F44, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DB7 003F;	
    // (ᶷ) MODIFIER LETTER SMALL UPSILON	[1F44 | 0020 | 0014 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F44, 0x0000, 0x0020, 0x0000, 0x0014, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_107)
{
    uint32_t const cps[2] = { 0x028A, 0x0061 };

    // 028A 0061;	
    // (ʊ) LATIN SMALL LETTER UPSILON	[1F44 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 028A 0061;	
    // (ʊ) LATIN SMALL LETTER UPSILON	[1F44 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_108)
{
    uint32_t const cps[2] = { 0x028A, 0x0041 };

    // 028A 0041;	
    // (ʊ) LATIN SMALL LETTER UPSILON	[1F44 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 028A 0041;	
    // (ʊ) LATIN SMALL LETTER UPSILON	[1F44 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_109)
{
    uint32_t const cps[2] = { 0x01B1, 0x0061 };

    // 01B1 0061;	
    // (Ʊ) LATIN CAPITAL LETTER UPSILON	[1F44 1CAD | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01B1 0061;	
    // (Ʊ) LATIN CAPITAL LETTER UPSILON	[1F44 1CAD | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_110)
{
    uint32_t const cps[2] = { 0x01B1, 0x0041 };

    // 01B1 0041;	
    // (Ʊ) LATIN CAPITAL LETTER UPSILON	[1F44 1CAD | 0020 0020 | 0008 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01B1 0041;	
    // (Ʊ) LATIN CAPITAL LETTER UPSILON	[1F44 1CAD | 0020 0020 | 0008 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_111)
{
    uint32_t const cps[2] = { 0x1DB7, 0x0061 };

    // 1DB7 0061;	
    // (ᶷ) MODIFIER LETTER SMALL UPSILON	[1F44 1CAD | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DB7 0061;	
    // (ᶷ) MODIFIER LETTER SMALL UPSILON	[1F44 1CAD | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_112)
{
    uint32_t const cps[2] = { 0x1DB7, 0x0041 };

    // 1DB7 0041;	
    // (ᶷ) MODIFIER LETTER SMALL UPSILON	[1F44 1CAD | 0020 0020 | 0014 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DB7 0041;	
    // (ᶷ) MODIFIER LETTER SMALL UPSILON	[1F44 1CAD | 0020 0020 | 0014 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_113)
{
    uint32_t const cps[2] = { 0x028A, 0x0062 };

    // 028A 0062;	
    // (ʊ) LATIN SMALL LETTER UPSILON	[1F44 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F44, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 028A 0062;	
    // (ʊ) LATIN SMALL LETTER UPSILON	[1F44 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F44, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_114)
{
    uint32_t const cps[2] = { 0x01B1, 0x0062 };

    // 01B1 0062;	
    // (Ʊ) LATIN CAPITAL LETTER UPSILON	[1F44 1CC6 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F44, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01B1 0062;	
    // (Ʊ) LATIN CAPITAL LETTER UPSILON	[1F44 1CC6 | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F44, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_115)
{
    uint32_t const cps[2] = { 0x1DB7, 0x0062 };

    // 1DB7 0062;	
    // (ᶷ) MODIFIER LETTER SMALL UPSILON	[1F44 1CC6 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F44, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DB7 0062;	
    // (ᶷ) MODIFIER LETTER SMALL UPSILON	[1F44 1CC6 | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F44, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_116)
{
    uint32_t const cps[2] = { 0x1D7F, 0x0021 };

    // 1D7F 0021;	
    // (ᵿ) LATIN SMALL LETTER UPSILON WITH STROKE	[1F48 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F48, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7F 0021;	
    // (ᵿ) LATIN SMALL LETTER UPSILON WITH STROKE	[1F48 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F48, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_117)
{
    uint32_t const cps[2] = { 0x1D7F, 0x003F };

    // 1D7F 003F;	
    // (ᵿ) LATIN SMALL LETTER UPSILON WITH STROKE	[1F48 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F48, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7F 003F;	
    // (ᵿ) LATIN SMALL LETTER UPSILON WITH STROKE	[1F48 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F48, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_118)
{
    uint32_t const cps[2] = { 0x1D7F, 0x0061 };

    // 1D7F 0061;	
    // (ᵿ) LATIN SMALL LETTER UPSILON WITH STROKE	[1F48 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7F 0061;	
    // (ᵿ) LATIN SMALL LETTER UPSILON WITH STROKE	[1F48 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_119)
{
    uint32_t const cps[2] = { 0x1D7F, 0x0041 };

    // 1D7F 0041;	
    // (ᵿ) LATIN SMALL LETTER UPSILON WITH STROKE	[1F48 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7F 0041;	
    // (ᵿ) LATIN SMALL LETTER UPSILON WITH STROKE	[1F48 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_120)
{
    uint32_t const cps[2] = { 0x1D7F, 0x0062 };

    // 1D7F 0062;	
    // (ᵿ) LATIN SMALL LETTER UPSILON WITH STROKE	[1F48 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F48, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D7F 0062;	
    // (ᵿ) LATIN SMALL LETTER UPSILON WITH STROKE	[1F48 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F48, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_121)
{
    uint32_t const cps[3] = { 0x0076, 0x0303, 0x0334 };

    // 0076 0303 0334;	
    // (ṽ) LATIN SMALL LETTER V, COMBINING TILDE	[1F49 | 0020 004A 002D | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1F49, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0076 0303 0334;	
    // (ṽ) LATIN SMALL LETTER V, COMBINING TILDE	[1F49 | 0020 004A 002D | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1F49, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_122)
{
    uint32_t const cps[3] = { 0x0076, 0x0334, 0x0303 };

    // 0076 0334 0303;	
    // (v̴) LATIN SMALL LETTER V, COMBINING TILDE OVERLAY	[1F49 | 0020 004A 002D | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1F49, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0076 0334 0303;	
    // (v̴) LATIN SMALL LETTER V, COMBINING TILDE OVERLAY	[1F49 | 0020 004A 002D | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1F49, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_123)
{
    uint32_t const cps[2] = { 0x1E7D, 0x0334 };

    // 1E7D 0334;	
    // (ṽ) LATIN SMALL LETTER V WITH TILDE	[1F49 | 0020 004A 002D | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1F49, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E7D 0334;	
    // (ṽ) LATIN SMALL LETTER V WITH TILDE	[1F49 | 0020 004A 002D | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1F49, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_124)
{
    uint32_t const cps[3] = { 0x0056, 0x0303, 0x0334 };

    // 0056 0303 0334;	
    // (Ṽ) LATIN CAPITAL LETTER V, COMBINING TILDE	[1F49 | 0020 004A 002D | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1F49, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0056 0303 0334;	
    // (Ṽ) LATIN CAPITAL LETTER V, COMBINING TILDE	[1F49 | 0020 004A 002D | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1F49, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_125)
{
    uint32_t const cps[3] = { 0x0056, 0x0334, 0x0303 };

    // 0056 0334 0303;	
    // (V̴) LATIN CAPITAL LETTER V, COMBINING TILDE OVERLAY	[1F49 | 0020 004A 002D | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1F49, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0056 0334 0303;	
    // (V̴) LATIN CAPITAL LETTER V, COMBINING TILDE OVERLAY	[1F49 | 0020 004A 002D | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1F49, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_126)
{
    uint32_t const cps[2] = { 0x1E7C, 0x0334 };

    // 1E7C 0334;	
    // (Ṽ) LATIN CAPITAL LETTER V WITH TILDE	[1F49 | 0020 004A 002D | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1F49, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E7C 0334;	
    // (Ṽ) LATIN CAPITAL LETTER V WITH TILDE	[1F49 | 0020 004A 002D | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1F49, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_127)
{
    uint32_t const cps[3] = { 0x0076, 0x0323, 0x0334 };

    // 0076 0323 0334;	
    // (ṿ) LATIN SMALL LETTER V, COMBINING DOT BELOW	[1F49 | 0020 004A 0042 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1F49, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0076 0323 0334;	
    // (ṿ) LATIN SMALL LETTER V, COMBINING DOT BELOW	[1F49 | 0020 004A 0042 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1F49, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_128)
{
    uint32_t const cps[3] = { 0x0076, 0x0334, 0x0323 };

    // 0076 0334 0323;	
    // (v̴) LATIN SMALL LETTER V, COMBINING TILDE OVERLAY	[1F49 | 0020 004A 0042 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1F49, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0076 0334 0323;	
    // (v̴) LATIN SMALL LETTER V, COMBINING TILDE OVERLAY	[1F49 | 0020 004A 0042 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1F49, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_129)
{
    uint32_t const cps[2] = { 0x1E7F, 0x0334 };

    // 1E7F 0334;	
    // (ṿ) LATIN SMALL LETTER V WITH DOT BELOW	[1F49 | 0020 004A 0042 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1F49, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E7F 0334;	
    // (ṿ) LATIN SMALL LETTER V WITH DOT BELOW	[1F49 | 0020 004A 0042 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1F49, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_130)
{
    uint32_t const cps[3] = { 0x0056, 0x0323, 0x0334 };

    // 0056 0323 0334;	
    // (Ṿ) LATIN CAPITAL LETTER V, COMBINING DOT BELOW	[1F49 | 0020 004A 0042 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1F49, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0056 0323 0334;	
    // (Ṿ) LATIN CAPITAL LETTER V, COMBINING DOT BELOW	[1F49 | 0020 004A 0042 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1F49, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_131)
{
    uint32_t const cps[3] = { 0x0056, 0x0334, 0x0323 };

    // 0056 0334 0323;	
    // (V̴) LATIN CAPITAL LETTER V, COMBINING TILDE OVERLAY	[1F49 | 0020 004A 0042 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1F49, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0056 0334 0323;	
    // (V̴) LATIN CAPITAL LETTER V, COMBINING TILDE OVERLAY	[1F49 | 0020 004A 0042 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1F49, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_132)
{
    uint32_t const cps[2] = { 0x1E7E, 0x0334 };

    // 1E7E 0334;	
    // (Ṿ) LATIN CAPITAL LETTER V WITH DOT BELOW	[1F49 | 0020 004A 0042 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1F49, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E7E 0334;	
    // (Ṿ) LATIN CAPITAL LETTER V WITH DOT BELOW	[1F49 | 0020 004A 0042 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1F49, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_133)
{
    uint32_t const cps[2] = { 0x0334, 0x036E };

    // 0334 036E;	
    // (ͮ) COMBINING LATIN SMALL LETTER V	[1F49 | 004A 0020 | 0002 0004 |]
    uint32_t const ces_non_ignorable[8] = { 0x1F49, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0334 036E;	
    // (ͮ) COMBINING LATIN SMALL LETTER V	[1F49 | 004A 0020 | 0002 0004 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1F49, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_134)
{
    uint32_t const cps[2] = { 0x036E, 0x0334 };

    // 036E 0334;	
    // (ͮ) COMBINING LATIN SMALL LETTER V	[1F49 | 004A 0020 | 0002 0004 |]
    uint32_t const ces_non_ignorable[8] = { 0x1F49, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 036E 0334;	
    // (ͮ) COMBINING LATIN SMALL LETTER V	[1F49 | 004A 0020 | 0002 0004 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1F49, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_135)
{
    uint32_t const cps[2] = { 0x0076, 0x0021 };

    // 0076 0021;	
    // (v) LATIN SMALL LETTER V	[1F49 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0076 0021;	
    // (v) LATIN SMALL LETTER V	[1F49 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_136)
{
    uint32_t const cps[2] = { 0xFF56, 0x0021 };

    // FF56 0021;	
    // (ｖ) FULLWIDTH LATIN SMALL LETTER V	[1F49 0261 | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF56 0021;	
    // (ｖ) FULLWIDTH LATIN SMALL LETTER V	[1F49 | 0020 | 0003 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0003, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_137)
{
    uint32_t const cps[2] = { 0x036E, 0x0021 };

    // 036E 0021;	
    // (ͮ) COMBINING LATIN SMALL LETTER V	[1F49 0261 | 0020 0020 | 0004 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 036E 0021;	
    // (ͮ) COMBINING LATIN SMALL LETTER V	[1F49 | 0020 | 0004 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_138)
{
    uint32_t const cps[2] = { 0x2174, 0x0021 };

    // 2174 0021;	
    // (ⅴ) SMALL ROMAN NUMERAL FIVE	[1F49 0261 | 0020 0020 | 0004 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2174 0021;	
    // (ⅴ) SMALL ROMAN NUMERAL FIVE	[1F49 | 0020 | 0004 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_139)
{
    uint32_t const cps[2] = { 0x1D42F, 0x0021 };

    // 1D42F 0021;	
    // (𝐯) MATHEMATICAL BOLD SMALL V	[1F49 0261 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D42F 0021;	
    // (𝐯) MATHEMATICAL BOLD SMALL V	[1F49 | 0020 | 0005 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_140)
{
    uint32_t const cps[2] = { 0x1D463, 0x0021 };

    // 1D463 0021;	
    // (𝑣) MATHEMATICAL ITALIC SMALL V	[1F49 0261 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D463 0021;	
    // (𝑣) MATHEMATICAL ITALIC SMALL V	[1F49 | 0020 | 0005 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_141)
{
    uint32_t const cps[2] = { 0x1D497, 0x0021 };

    // 1D497 0021;	
    // (𝒗) MATHEMATICAL BOLD ITALIC SMALL V	[1F49 0261 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D497 0021;	
    // (𝒗) MATHEMATICAL BOLD ITALIC SMALL V	[1F49 | 0020 | 0005 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_142)
{
    uint32_t const cps[2] = { 0x1D4CB, 0x0021 };

    // 1D4CB 0021;	
    // (𝓋) MATHEMATICAL SCRIPT SMALL V	[1F49 0261 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4CB 0021;	
    // (𝓋) MATHEMATICAL SCRIPT SMALL V	[1F49 | 0020 | 0005 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_143)
{
    uint32_t const cps[2] = { 0x1D4FF, 0x0021 };

    // 1D4FF 0021;	
    // (𝓿) MATHEMATICAL BOLD SCRIPT SMALL V	[1F49 0261 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4FF 0021;	
    // (𝓿) MATHEMATICAL BOLD SCRIPT SMALL V	[1F49 | 0020 | 0005 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_144)
{
    uint32_t const cps[2] = { 0x1D533, 0x0021 };

    // 1D533 0021;	
    // (𝔳) MATHEMATICAL FRAKTUR SMALL V	[1F49 0261 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D533 0021;	
    // (𝔳) MATHEMATICAL FRAKTUR SMALL V	[1F49 | 0020 | 0005 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_145)
{
    uint32_t const cps[2] = { 0x1D567, 0x0021 };

    // 1D567 0021;	
    // (𝕧) MATHEMATICAL DOUBLE-STRUCK SMALL V	[1F49 0261 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D567 0021;	
    // (𝕧) MATHEMATICAL DOUBLE-STRUCK SMALL V	[1F49 | 0020 | 0005 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_146)
{
    uint32_t const cps[2] = { 0x1D59B, 0x0021 };

    // 1D59B 0021;	
    // (𝖛) MATHEMATICAL BOLD FRAKTUR SMALL V	[1F49 0261 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D59B 0021;	
    // (𝖛) MATHEMATICAL BOLD FRAKTUR SMALL V	[1F49 | 0020 | 0005 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_147)
{
    uint32_t const cps[2] = { 0x1D5CF, 0x0021 };

    // 1D5CF 0021;	
    // (𝗏) MATHEMATICAL SANS-SERIF SMALL V	[1F49 0261 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5CF 0021;	
    // (𝗏) MATHEMATICAL SANS-SERIF SMALL V	[1F49 | 0020 | 0005 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_148)
{
    uint32_t const cps[2] = { 0x1D603, 0x0021 };

    // 1D603 0021;	
    // (𝘃) MATHEMATICAL SANS-SERIF BOLD SMALL V	[1F49 0261 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D603 0021;	
    // (𝘃) MATHEMATICAL SANS-SERIF BOLD SMALL V	[1F49 | 0020 | 0005 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_149)
{
    uint32_t const cps[2] = { 0x1D637, 0x0021 };

    // 1D637 0021;	
    // (𝘷) MATHEMATICAL SANS-SERIF ITALIC SMALL V	[1F49 0261 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D637 0021;	
    // (𝘷) MATHEMATICAL SANS-SERIF ITALIC SMALL V	[1F49 | 0020 | 0005 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_150)
{
    uint32_t const cps[2] = { 0x1D66B, 0x0021 };

    // 1D66B 0021;	
    // (𝙫) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL V	[1F49 0261 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D66B 0021;	
    // (𝙫) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL V	[1F49 | 0020 | 0005 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_151)
{
    uint32_t const cps[2] = { 0x1D69F, 0x0021 };

    // 1D69F 0021;	
    // (𝚟) MATHEMATICAL MONOSPACE SMALL V	[1F49 0261 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D69F 0021;	
    // (𝚟) MATHEMATICAL MONOSPACE SMALL V	[1F49 | 0020 | 0005 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_152)
{
    uint32_t const cps[2] = { 0x24E5, 0x0021 };

    // 24E5 0021;	
    // (ⓥ) CIRCLED LATIN SMALL LETTER V	[1F49 0261 | 0020 0020 | 0006 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24E5 0021;	
    // (ⓥ) CIRCLED LATIN SMALL LETTER V	[1F49 | 0020 | 0006 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0006, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_153)
{
    uint32_t const cps[2] = { 0x0056, 0x0021 };

    // 0056 0021;	
    // (V) LATIN CAPITAL LETTER V	[1F49 0261 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0056 0021;	
    // (V) LATIN CAPITAL LETTER V	[1F49 | 0020 | 0008 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_154)
{
    uint32_t const cps[2] = { 0xFF36, 0x0021 };

    // FF36 0021;	
    // (Ｖ) FULLWIDTH LATIN CAPITAL LETTER V	[1F49 0261 | 0020 0020 | 0009 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF36 0021;	
    // (Ｖ) FULLWIDTH LATIN CAPITAL LETTER V	[1F49 | 0020 | 0009 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0009, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_155)
{
    uint32_t const cps[2] = { 0x2164, 0x0021 };

    // 2164 0021;	
    // (Ⅴ) ROMAN NUMERAL FIVE	[1F49 0261 | 0020 0020 | 000A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2164 0021;	
    // (Ⅴ) ROMAN NUMERAL FIVE	[1F49 | 0020 | 000A | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_156)
{
    uint32_t const cps[2] = { 0x1D415, 0x0021 };

    // 1D415 0021;	
    // (𝐕) MATHEMATICAL BOLD CAPITAL V	[1F49 0261 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D415 0021;	
    // (𝐕) MATHEMATICAL BOLD CAPITAL V	[1F49 | 0020 | 000B | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_157)
{
    uint32_t const cps[2] = { 0x1D449, 0x0021 };

    // 1D449 0021;	
    // (𝑉) MATHEMATICAL ITALIC CAPITAL V	[1F49 0261 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D449 0021;	
    // (𝑉) MATHEMATICAL ITALIC CAPITAL V	[1F49 | 0020 | 000B | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_158)
{
    uint32_t const cps[2] = { 0x1D47D, 0x0021 };

    // 1D47D 0021;	
    // (𝑽) MATHEMATICAL BOLD ITALIC CAPITAL V	[1F49 0261 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D47D 0021;	
    // (𝑽) MATHEMATICAL BOLD ITALIC CAPITAL V	[1F49 | 0020 | 000B | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_159)
{
    uint32_t const cps[2] = { 0x1D4B1, 0x0021 };

    // 1D4B1 0021;	
    // (𝒱) MATHEMATICAL SCRIPT CAPITAL V	[1F49 0261 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4B1 0021;	
    // (𝒱) MATHEMATICAL SCRIPT CAPITAL V	[1F49 | 0020 | 000B | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_160)
{
    uint32_t const cps[2] = { 0x1D4E5, 0x0021 };

    // 1D4E5 0021;	
    // (𝓥) MATHEMATICAL BOLD SCRIPT CAPITAL V	[1F49 0261 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4E5 0021;	
    // (𝓥) MATHEMATICAL BOLD SCRIPT CAPITAL V	[1F49 | 0020 | 000B | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_161)
{
    uint32_t const cps[2] = { 0x1D519, 0x0021 };

    // 1D519 0021;	
    // (𝔙) MATHEMATICAL FRAKTUR CAPITAL V	[1F49 0261 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D519 0021;	
    // (𝔙) MATHEMATICAL FRAKTUR CAPITAL V	[1F49 | 0020 | 000B | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_162)
{
    uint32_t const cps[2] = { 0x1D54D, 0x0021 };

    // 1D54D 0021;	
    // (𝕍) MATHEMATICAL DOUBLE-STRUCK CAPITAL V	[1F49 0261 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D54D 0021;	
    // (𝕍) MATHEMATICAL DOUBLE-STRUCK CAPITAL V	[1F49 | 0020 | 000B | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_163)
{
    uint32_t const cps[2] = { 0x1D581, 0x0021 };

    // 1D581 0021;	
    // (𝖁) MATHEMATICAL BOLD FRAKTUR CAPITAL V	[1F49 0261 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D581 0021;	
    // (𝖁) MATHEMATICAL BOLD FRAKTUR CAPITAL V	[1F49 | 0020 | 000B | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_164)
{
    uint32_t const cps[2] = { 0x1D5B5, 0x0021 };

    // 1D5B5 0021;	
    // (𝖵) MATHEMATICAL SANS-SERIF CAPITAL V	[1F49 0261 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5B5 0021;	
    // (𝖵) MATHEMATICAL SANS-SERIF CAPITAL V	[1F49 | 0020 | 000B | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_165)
{
    uint32_t const cps[2] = { 0x1D5E9, 0x0021 };

    // 1D5E9 0021;	
    // (𝗩) MATHEMATICAL SANS-SERIF BOLD CAPITAL V	[1F49 0261 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5E9 0021;	
    // (𝗩) MATHEMATICAL SANS-SERIF BOLD CAPITAL V	[1F49 | 0020 | 000B | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_166)
{
    uint32_t const cps[2] = { 0x1D61D, 0x0021 };

    // 1D61D 0021;	
    // (𝘝) MATHEMATICAL SANS-SERIF ITALIC CAPITAL V	[1F49 0261 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D61D 0021;	
    // (𝘝) MATHEMATICAL SANS-SERIF ITALIC CAPITAL V	[1F49 | 0020 | 000B | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_167)
{
    uint32_t const cps[2] = { 0x1D651, 0x0021 };

    // 1D651 0021;	
    // (𝙑) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL V	[1F49 0261 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D651 0021;	
    // (𝙑) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL V	[1F49 | 0020 | 000B | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_168)
{
    uint32_t const cps[2] = { 0x1D685, 0x0021 };

    // 1D685 0021;	
    // (𝚅) MATHEMATICAL MONOSPACE CAPITAL V	[1F49 0261 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D685 0021;	
    // (𝚅) MATHEMATICAL MONOSPACE CAPITAL V	[1F49 | 0020 | 000B | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_169)
{
    uint32_t const cps[2] = { 0x24CB, 0x0021 };

    // 24CB 0021;	
    // (Ⓥ) CIRCLED LATIN CAPITAL LETTER V	[1F49 0261 | 0020 0020 | 000C 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24CB 0021;	
    // (Ⓥ) CIRCLED LATIN CAPITAL LETTER V	[1F49 | 0020 | 000C | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000C, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_170)
{
    uint32_t const cps[2] = { 0x1F165, 0x0021 };

    // 1F165 0021;	
    // (🅥) NEGATIVE CIRCLED LATIN CAPITAL LETTER V	[1F49 0261 | 0020 0020 | 000C 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F165 0021;	
    // (🅥) NEGATIVE CIRCLED LATIN CAPITAL LETTER V	[1F49 | 0020 | 000C | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000C, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_171)
{
    uint32_t const cps[2] = { 0x1D5B, 0x0021 };

    // 1D5B 0021;	
    // (ᵛ) MODIFIER LETTER SMALL V	[1F49 0261 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5B 0021;	
    // (ᵛ) MODIFIER LETTER SMALL V	[1F49 | 0020 | 0014 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0014, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_172)
{
    uint32_t const cps[2] = { 0x1D65, 0x0021 };

    // 1D65 0021;	
    // (ᵥ) LATIN SUBSCRIPT SMALL LETTER V	[1F49 0261 | 0020 0020 | 0015 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D65 0021;	
    // (ᵥ) LATIN SUBSCRIPT SMALL LETTER V	[1F49 | 0020 | 0015 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0015, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_173)
{
    uint32_t const cps[2] = { 0x2C7D, 0x0021 };

    // 2C7D 0021;	
    // (ⱽ) MODIFIER LETTER CAPITAL V	[1F49 0261 | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2C7D 0021;	
    // (ⱽ) MODIFIER LETTER CAPITAL V	[1F49 | 0020 | 001D | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x001D, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_174)
{
    uint32_t const cps[2] = { 0x1F145, 0x0021 };

    // 1F145 0021;	
    // (🅅) SQUARED LATIN CAPITAL LETTER V	[1F49 0261 | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F145 0021;	
    // (🅅) SQUARED LATIN CAPITAL LETTER V	[1F49 | 0020 | 001D | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x001D, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_175)
{
    uint32_t const cps[2] = { 0x1F185, 0x0021 };

    // 1F185 0021;	
    // (🆅) NEGATIVE SQUARED LATIN CAPITAL LETTER V	[1F49 0261 | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F185 0021;	
    // (🆅) NEGATIVE SQUARED LATIN CAPITAL LETTER V	[1F49 | 0020 | 001D | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x001D, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_176)
{
    uint32_t const cps[2] = { 0x1E7D, 0x0021 };

    // 1E7D 0021;	
    // (ṽ) LATIN SMALL LETTER V WITH TILDE	[1F49 0261 | 0020 002D 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E7D 0021;	
    // (ṽ) LATIN SMALL LETTER V WITH TILDE	[1F49 | 0020 002D | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x0000, 0x0020, 0x002D, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_177)
{
    uint32_t const cps[2] = { 0x1E7C, 0x0021 };

    // 1E7C 0021;	
    // (Ṽ) LATIN CAPITAL LETTER V WITH TILDE	[1F49 0261 | 0020 002D 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E7C 0021;	
    // (Ṽ) LATIN CAPITAL LETTER V WITH TILDE	[1F49 | 0020 002D | 0008 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x0000, 0x0020, 0x002D, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_178)
{
    uint32_t const cps[2] = { 0x1E7F, 0x0021 };

    // 1E7F 0021;	
    // (ṿ) LATIN SMALL LETTER V WITH DOT BELOW	[1F49 0261 | 0020 0042 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E7F 0021;	
    // (ṿ) LATIN SMALL LETTER V WITH DOT BELOW	[1F49 | 0020 0042 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x0000, 0x0020, 0x0042, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_179)
{
    uint32_t const cps[2] = { 0x1E7E, 0x0021 };

    // 1E7E 0021;	
    // (Ṿ) LATIN CAPITAL LETTER V WITH DOT BELOW	[1F49 0261 | 0020 0042 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1F49, 0x0261, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E7E 0021;	
    // (Ṿ) LATIN CAPITAL LETTER V WITH DOT BELOW	[1F49 | 0020 0042 | 0008 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x0000, 0x0020, 0x0042, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_180)
{
    uint32_t const cps[2] = { 0x0076, 0x003F };

    // 0076 003F;	
    // (v) LATIN SMALL LETTER V	[1F49 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0076 003F;	
    // (v) LATIN SMALL LETTER V	[1F49 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_181)
{
    uint32_t const cps[2] = { 0xFF56, 0x003F };

    // FF56 003F;	
    // (ｖ) FULLWIDTH LATIN SMALL LETTER V	[1F49 0267 | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF56 003F;	
    // (ｖ) FULLWIDTH LATIN SMALL LETTER V	[1F49 | 0020 | 0003 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0003, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_182)
{
    uint32_t const cps[2] = { 0x036E, 0x003F };

    // 036E 003F;	
    // (ͮ) COMBINING LATIN SMALL LETTER V	[1F49 0267 | 0020 0020 | 0004 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 036E 003F;	
    // (ͮ) COMBINING LATIN SMALL LETTER V	[1F49 | 0020 | 0004 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_183)
{
    uint32_t const cps[2] = { 0x2174, 0x003F };

    // 2174 003F;	
    // (ⅴ) SMALL ROMAN NUMERAL FIVE	[1F49 0267 | 0020 0020 | 0004 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2174 003F;	
    // (ⅴ) SMALL ROMAN NUMERAL FIVE	[1F49 | 0020 | 0004 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_184)
{
    uint32_t const cps[2] = { 0x1D42F, 0x003F };

    // 1D42F 003F;	
    // (𝐯) MATHEMATICAL BOLD SMALL V	[1F49 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D42F 003F;	
    // (𝐯) MATHEMATICAL BOLD SMALL V	[1F49 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_185)
{
    uint32_t const cps[2] = { 0x1D463, 0x003F };

    // 1D463 003F;	
    // (𝑣) MATHEMATICAL ITALIC SMALL V	[1F49 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D463 003F;	
    // (𝑣) MATHEMATICAL ITALIC SMALL V	[1F49 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_186)
{
    uint32_t const cps[2] = { 0x1D497, 0x003F };

    // 1D497 003F;	
    // (𝒗) MATHEMATICAL BOLD ITALIC SMALL V	[1F49 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D497 003F;	
    // (𝒗) MATHEMATICAL BOLD ITALIC SMALL V	[1F49 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_187)
{
    uint32_t const cps[2] = { 0x1D4CB, 0x003F };

    // 1D4CB 003F;	
    // (𝓋) MATHEMATICAL SCRIPT SMALL V	[1F49 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4CB 003F;	
    // (𝓋) MATHEMATICAL SCRIPT SMALL V	[1F49 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_188)
{
    uint32_t const cps[2] = { 0x1D4FF, 0x003F };

    // 1D4FF 003F;	
    // (𝓿) MATHEMATICAL BOLD SCRIPT SMALL V	[1F49 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4FF 003F;	
    // (𝓿) MATHEMATICAL BOLD SCRIPT SMALL V	[1F49 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_189)
{
    uint32_t const cps[2] = { 0x1D533, 0x003F };

    // 1D533 003F;	
    // (𝔳) MATHEMATICAL FRAKTUR SMALL V	[1F49 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D533 003F;	
    // (𝔳) MATHEMATICAL FRAKTUR SMALL V	[1F49 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_190)
{
    uint32_t const cps[2] = { 0x1D567, 0x003F };

    // 1D567 003F;	
    // (𝕧) MATHEMATICAL DOUBLE-STRUCK SMALL V	[1F49 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D567 003F;	
    // (𝕧) MATHEMATICAL DOUBLE-STRUCK SMALL V	[1F49 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_191)
{
    uint32_t const cps[2] = { 0x1D59B, 0x003F };

    // 1D59B 003F;	
    // (𝖛) MATHEMATICAL BOLD FRAKTUR SMALL V	[1F49 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D59B 003F;	
    // (𝖛) MATHEMATICAL BOLD FRAKTUR SMALL V	[1F49 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_192)
{
    uint32_t const cps[2] = { 0x1D5CF, 0x003F };

    // 1D5CF 003F;	
    // (𝗏) MATHEMATICAL SANS-SERIF SMALL V	[1F49 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5CF 003F;	
    // (𝗏) MATHEMATICAL SANS-SERIF SMALL V	[1F49 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_193)
{
    uint32_t const cps[2] = { 0x1D603, 0x003F };

    // 1D603 003F;	
    // (𝘃) MATHEMATICAL SANS-SERIF BOLD SMALL V	[1F49 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D603 003F;	
    // (𝘃) MATHEMATICAL SANS-SERIF BOLD SMALL V	[1F49 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_194)
{
    uint32_t const cps[2] = { 0x1D637, 0x003F };

    // 1D637 003F;	
    // (𝘷) MATHEMATICAL SANS-SERIF ITALIC SMALL V	[1F49 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D637 003F;	
    // (𝘷) MATHEMATICAL SANS-SERIF ITALIC SMALL V	[1F49 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_195)
{
    uint32_t const cps[2] = { 0x1D66B, 0x003F };

    // 1D66B 003F;	
    // (𝙫) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL V	[1F49 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D66B 003F;	
    // (𝙫) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL V	[1F49 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_196)
{
    uint32_t const cps[2] = { 0x1D69F, 0x003F };

    // 1D69F 003F;	
    // (𝚟) MATHEMATICAL MONOSPACE SMALL V	[1F49 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D69F 003F;	
    // (𝚟) MATHEMATICAL MONOSPACE SMALL V	[1F49 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_197)
{
    uint32_t const cps[2] = { 0x24E5, 0x003F };

    // 24E5 003F;	
    // (ⓥ) CIRCLED LATIN SMALL LETTER V	[1F49 0267 | 0020 0020 | 0006 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24E5 003F;	
    // (ⓥ) CIRCLED LATIN SMALL LETTER V	[1F49 | 0020 | 0006 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0006, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_198)
{
    uint32_t const cps[2] = { 0x0056, 0x003F };

    // 0056 003F;	
    // (V) LATIN CAPITAL LETTER V	[1F49 0267 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0056 003F;	
    // (V) LATIN CAPITAL LETTER V	[1F49 | 0020 | 0008 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_199)
{
    uint32_t const cps[2] = { 0xFF36, 0x003F };

    // FF36 003F;	
    // (Ｖ) FULLWIDTH LATIN CAPITAL LETTER V	[1F49 0267 | 0020 0020 | 0009 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF36 003F;	
    // (Ｖ) FULLWIDTH LATIN CAPITAL LETTER V	[1F49 | 0020 | 0009 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0009, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_200)
{
    uint32_t const cps[2] = { 0x2164, 0x003F };

    // 2164 003F;	
    // (Ⅴ) ROMAN NUMERAL FIVE	[1F49 0267 | 0020 0020 | 000A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2164 003F;	
    // (Ⅴ) ROMAN NUMERAL FIVE	[1F49 | 0020 | 000A | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_201)
{
    uint32_t const cps[2] = { 0x1D415, 0x003F };

    // 1D415 003F;	
    // (𝐕) MATHEMATICAL BOLD CAPITAL V	[1F49 0267 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D415 003F;	
    // (𝐕) MATHEMATICAL BOLD CAPITAL V	[1F49 | 0020 | 000B | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_202)
{
    uint32_t const cps[2] = { 0x1D449, 0x003F };

    // 1D449 003F;	
    // (𝑉) MATHEMATICAL ITALIC CAPITAL V	[1F49 0267 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D449 003F;	
    // (𝑉) MATHEMATICAL ITALIC CAPITAL V	[1F49 | 0020 | 000B | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_203)
{
    uint32_t const cps[2] = { 0x1D47D, 0x003F };

    // 1D47D 003F;	
    // (𝑽) MATHEMATICAL BOLD ITALIC CAPITAL V	[1F49 0267 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D47D 003F;	
    // (𝑽) MATHEMATICAL BOLD ITALIC CAPITAL V	[1F49 | 0020 | 000B | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_204)
{
    uint32_t const cps[2] = { 0x1D4B1, 0x003F };

    // 1D4B1 003F;	
    // (𝒱) MATHEMATICAL SCRIPT CAPITAL V	[1F49 0267 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4B1 003F;	
    // (𝒱) MATHEMATICAL SCRIPT CAPITAL V	[1F49 | 0020 | 000B | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_205)
{
    uint32_t const cps[2] = { 0x1D4E5, 0x003F };

    // 1D4E5 003F;	
    // (𝓥) MATHEMATICAL BOLD SCRIPT CAPITAL V	[1F49 0267 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4E5 003F;	
    // (𝓥) MATHEMATICAL BOLD SCRIPT CAPITAL V	[1F49 | 0020 | 000B | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_206)
{
    uint32_t const cps[2] = { 0x1D519, 0x003F };

    // 1D519 003F;	
    // (𝔙) MATHEMATICAL FRAKTUR CAPITAL V	[1F49 0267 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D519 003F;	
    // (𝔙) MATHEMATICAL FRAKTUR CAPITAL V	[1F49 | 0020 | 000B | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_207)
{
    uint32_t const cps[2] = { 0x1D54D, 0x003F };

    // 1D54D 003F;	
    // (𝕍) MATHEMATICAL DOUBLE-STRUCK CAPITAL V	[1F49 0267 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D54D 003F;	
    // (𝕍) MATHEMATICAL DOUBLE-STRUCK CAPITAL V	[1F49 | 0020 | 000B | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_208)
{
    uint32_t const cps[2] = { 0x1D581, 0x003F };

    // 1D581 003F;	
    // (𝖁) MATHEMATICAL BOLD FRAKTUR CAPITAL V	[1F49 0267 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D581 003F;	
    // (𝖁) MATHEMATICAL BOLD FRAKTUR CAPITAL V	[1F49 | 0020 | 000B | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_209)
{
    uint32_t const cps[2] = { 0x1D5B5, 0x003F };

    // 1D5B5 003F;	
    // (𝖵) MATHEMATICAL SANS-SERIF CAPITAL V	[1F49 0267 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5B5 003F;	
    // (𝖵) MATHEMATICAL SANS-SERIF CAPITAL V	[1F49 | 0020 | 000B | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_210)
{
    uint32_t const cps[2] = { 0x1D5E9, 0x003F };

    // 1D5E9 003F;	
    // (𝗩) MATHEMATICAL SANS-SERIF BOLD CAPITAL V	[1F49 0267 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5E9 003F;	
    // (𝗩) MATHEMATICAL SANS-SERIF BOLD CAPITAL V	[1F49 | 0020 | 000B | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_211)
{
    uint32_t const cps[2] = { 0x1D61D, 0x003F };

    // 1D61D 003F;	
    // (𝘝) MATHEMATICAL SANS-SERIF ITALIC CAPITAL V	[1F49 0267 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D61D 003F;	
    // (𝘝) MATHEMATICAL SANS-SERIF ITALIC CAPITAL V	[1F49 | 0020 | 000B | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_212)
{
    uint32_t const cps[2] = { 0x1D651, 0x003F };

    // 1D651 003F;	
    // (𝙑) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL V	[1F49 0267 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D651 003F;	
    // (𝙑) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL V	[1F49 | 0020 | 000B | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_213)
{
    uint32_t const cps[2] = { 0x1D685, 0x003F };

    // 1D685 003F;	
    // (𝚅) MATHEMATICAL MONOSPACE CAPITAL V	[1F49 0267 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D685 003F;	
    // (𝚅) MATHEMATICAL MONOSPACE CAPITAL V	[1F49 | 0020 | 000B | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_214)
{
    uint32_t const cps[2] = { 0x24CB, 0x003F };

    // 24CB 003F;	
    // (Ⓥ) CIRCLED LATIN CAPITAL LETTER V	[1F49 0267 | 0020 0020 | 000C 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24CB 003F;	
    // (Ⓥ) CIRCLED LATIN CAPITAL LETTER V	[1F49 | 0020 | 000C | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000C, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_215)
{
    uint32_t const cps[2] = { 0x1F165, 0x003F };

    // 1F165 003F;	
    // (🅥) NEGATIVE CIRCLED LATIN CAPITAL LETTER V	[1F49 0267 | 0020 0020 | 000C 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F165 003F;	
    // (🅥) NEGATIVE CIRCLED LATIN CAPITAL LETTER V	[1F49 | 0020 | 000C | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000C, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_216)
{
    uint32_t const cps[2] = { 0x1D5B, 0x003F };

    // 1D5B 003F;	
    // (ᵛ) MODIFIER LETTER SMALL V	[1F49 0267 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5B 003F;	
    // (ᵛ) MODIFIER LETTER SMALL V	[1F49 | 0020 | 0014 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0014, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_217)
{
    uint32_t const cps[2] = { 0x1D65, 0x003F };

    // 1D65 003F;	
    // (ᵥ) LATIN SUBSCRIPT SMALL LETTER V	[1F49 0267 | 0020 0020 | 0015 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D65 003F;	
    // (ᵥ) LATIN SUBSCRIPT SMALL LETTER V	[1F49 | 0020 | 0015 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0015, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_218)
{
    uint32_t const cps[2] = { 0x2C7D, 0x003F };

    // 2C7D 003F;	
    // (ⱽ) MODIFIER LETTER CAPITAL V	[1F49 0267 | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2C7D 003F;	
    // (ⱽ) MODIFIER LETTER CAPITAL V	[1F49 | 0020 | 001D | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x001D, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_219)
{
    uint32_t const cps[2] = { 0x1F145, 0x003F };

    // 1F145 003F;	
    // (🅅) SQUARED LATIN CAPITAL LETTER V	[1F49 0267 | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F145 003F;	
    // (🅅) SQUARED LATIN CAPITAL LETTER V	[1F49 | 0020 | 001D | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x001D, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_220)
{
    uint32_t const cps[2] = { 0x1F185, 0x003F };

    // 1F185 003F;	
    // (🆅) NEGATIVE SQUARED LATIN CAPITAL LETTER V	[1F49 0267 | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F185 003F;	
    // (🆅) NEGATIVE SQUARED LATIN CAPITAL LETTER V	[1F49 | 0020 | 001D | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x001D, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_221)
{
    uint32_t const cps[2] = { 0x1E7D, 0x003F };

    // 1E7D 003F;	
    // (ṽ) LATIN SMALL LETTER V WITH TILDE	[1F49 0267 | 0020 002D 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E7D 003F;	
    // (ṽ) LATIN SMALL LETTER V WITH TILDE	[1F49 | 0020 002D | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x0000, 0x0020, 0x002D, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_222)
{
    uint32_t const cps[2] = { 0x1E7C, 0x003F };

    // 1E7C 003F;	
    // (Ṽ) LATIN CAPITAL LETTER V WITH TILDE	[1F49 0267 | 0020 002D 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E7C 003F;	
    // (Ṽ) LATIN CAPITAL LETTER V WITH TILDE	[1F49 | 0020 002D | 0008 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x0000, 0x0020, 0x002D, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_223)
{
    uint32_t const cps[2] = { 0x1E7F, 0x003F };

    // 1E7F 003F;	
    // (ṿ) LATIN SMALL LETTER V WITH DOT BELOW	[1F49 0267 | 0020 0042 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E7F 003F;	
    // (ṿ) LATIN SMALL LETTER V WITH DOT BELOW	[1F49 | 0020 0042 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x0000, 0x0020, 0x0042, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_224)
{
    uint32_t const cps[2] = { 0x1E7E, 0x003F };

    // 1E7E 003F;	
    // (Ṿ) LATIN CAPITAL LETTER V WITH DOT BELOW	[1F49 0267 | 0020 0042 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1F49, 0x0267, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E7E 003F;	
    // (Ṿ) LATIN CAPITAL LETTER V WITH DOT BELOW	[1F49 | 0020 0042 | 0008 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x0000, 0x0020, 0x0042, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_225)
{
    uint32_t const cps[2] = { 0x33DE, 0x0021 };

    // 33DE 0021;	
    // (㏞) SQUARE V OVER M	[1F49 063B 1E10 0261 | 0020 0020 0020 0020 | 001D 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x1F49, 0x063B, 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 33DE 0021;	
    // (㏞) SQUARE V OVER M	[1F49 1E10 | 0020 0020 | 001D 001C | FFFF 063B FFFF 0261 |]
    uint32_t const ces_shifted[14] = { 0x1F49, 0x1E10, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x001C, 0x0000, 0xFFFF, 0x063B, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_226)
{
    uint32_t const cps[2] = { 0x33DE, 0x003F };

    // 33DE 003F;	
    // (㏞) SQUARE V OVER M	[1F49 063B 1E10 0267 | 0020 0020 0020 0020 | 001D 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x1F49, 0x063B, 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 33DE 003F;	
    // (㏞) SQUARE V OVER M	[1F49 1E10 | 0020 0020 | 001D 001C | FFFF 063B FFFF 0267 |]
    uint32_t const ces_shifted[14] = { 0x1F49, 0x1E10, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x001C, 0x0000, 0xFFFF, 0x063B, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_227)
{
    uint32_t const cps[2] = { 0x33DE, 0x0061 };

    // 33DE 0061;	
    // (㏞) SQUARE V OVER M	[1F49 063B 1E10 1CAD | 0020 0020 0020 0020 | 001D 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x1F49, 0x063B, 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 33DE 0061;	
    // (㏞) SQUARE V OVER M	[1F49 1E10 1CAD | 0020 0020 0020 | 001D 001C 0002 | FFFF 063B FFFF FFFF |]
    uint32_t const ces_shifted[17] = { 0x1F49, 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001C, 0x0002, 0x0000, 0xFFFF, 0x063B, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_228)
{
    uint32_t const cps[2] = { 0x33DE, 0x0041 };

    // 33DE 0041;	
    // (㏞) SQUARE V OVER M	[1F49 063B 1E10 1CAD | 0020 0020 0020 0020 | 001D 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x1F49, 0x063B, 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 33DE 0041;	
    // (㏞) SQUARE V OVER M	[1F49 1E10 1CAD | 0020 0020 0020 | 001D 001C 0008 | FFFF 063B FFFF FFFF |]
    uint32_t const ces_shifted[17] = { 0x1F49, 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001C, 0x0008, 0x0000, 0xFFFF, 0x063B, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_229)
{
    uint32_t const cps[2] = { 0x33DE, 0x0062 };

    // 33DE 0062;	
    // (㏞) SQUARE V OVER M	[1F49 063B 1E10 1CC6 | 0020 0020 0020 0020 | 001D 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x1F49, 0x063B, 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 33DE 0062;	
    // (㏞) SQUARE V OVER M	[1F49 1E10 1CC6 | 0020 0020 0020 | 001D 001C 0002 | FFFF 063B FFFF FFFF |]
    uint32_t const ces_shifted[17] = { 0x1F49, 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001C, 0x0002, 0x0000, 0xFFFF, 0x063B, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_230)
{
    uint32_t const cps[2] = { 0x0076, 0x0061 };

    // 0076 0061;	
    // (v) LATIN SMALL LETTER V	[1F49 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0076 0061;	
    // (v) LATIN SMALL LETTER V	[1F49 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_231)
{
    uint32_t const cps[2] = { 0x0076, 0x0041 };

    // 0076 0041;	
    // (v) LATIN SMALL LETTER V	[1F49 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0076 0041;	
    // (v) LATIN SMALL LETTER V	[1F49 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_232)
{
    uint32_t const cps[2] = { 0xFF56, 0x0061 };

    // FF56 0061;	
    // (ｖ) FULLWIDTH LATIN SMALL LETTER V	[1F49 1CAD | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF56 0061;	
    // (ｖ) FULLWIDTH LATIN SMALL LETTER V	[1F49 1CAD | 0020 0020 | 0003 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_233)
{
    uint32_t const cps[2] = { 0xFF56, 0x0041 };

    // FF56 0041;	
    // (ｖ) FULLWIDTH LATIN SMALL LETTER V	[1F49 1CAD | 0020 0020 | 0003 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF56 0041;	
    // (ｖ) FULLWIDTH LATIN SMALL LETTER V	[1F49 1CAD | 0020 0020 | 0003 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_234)
{
    uint32_t const cps[2] = { 0x036E, 0x0061 };

    // 036E 0061;	
    // (ͮ) COMBINING LATIN SMALL LETTER V	[1F49 1CAD | 0020 0020 | 0004 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 036E 0061;	
    // (ͮ) COMBINING LATIN SMALL LETTER V	[1F49 1CAD | 0020 0020 | 0004 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_235)
{
    uint32_t const cps[2] = { 0x2174, 0x0061 };

    // 2174 0061;	
    // (ⅴ) SMALL ROMAN NUMERAL FIVE	[1F49 1CAD | 0020 0020 | 0004 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2174 0061;	
    // (ⅴ) SMALL ROMAN NUMERAL FIVE	[1F49 1CAD | 0020 0020 | 0004 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_236)
{
    uint32_t const cps[2] = { 0x036E, 0x0041 };

    // 036E 0041;	
    // (ͮ) COMBINING LATIN SMALL LETTER V	[1F49 1CAD | 0020 0020 | 0004 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 036E 0041;	
    // (ͮ) COMBINING LATIN SMALL LETTER V	[1F49 1CAD | 0020 0020 | 0004 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_237)
{
    uint32_t const cps[2] = { 0x2174, 0x0041 };

    // 2174 0041;	
    // (ⅴ) SMALL ROMAN NUMERAL FIVE	[1F49 1CAD | 0020 0020 | 0004 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2174 0041;	
    // (ⅴ) SMALL ROMAN NUMERAL FIVE	[1F49 1CAD | 0020 0020 | 0004 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_238)
{
    uint32_t const cps[2] = { 0x1D42F, 0x0061 };

    // 1D42F 0061;	
    // (𝐯) MATHEMATICAL BOLD SMALL V	[1F49 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D42F 0061;	
    // (𝐯) MATHEMATICAL BOLD SMALL V	[1F49 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_239)
{
    uint32_t const cps[2] = { 0x1D463, 0x0061 };

    // 1D463 0061;	
    // (𝑣) MATHEMATICAL ITALIC SMALL V	[1F49 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D463 0061;	
    // (𝑣) MATHEMATICAL ITALIC SMALL V	[1F49 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_240)
{
    uint32_t const cps[2] = { 0x1D497, 0x0061 };

    // 1D497 0061;	
    // (𝒗) MATHEMATICAL BOLD ITALIC SMALL V	[1F49 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D497 0061;	
    // (𝒗) MATHEMATICAL BOLD ITALIC SMALL V	[1F49 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_241)
{
    uint32_t const cps[2] = { 0x1D4CB, 0x0061 };

    // 1D4CB 0061;	
    // (𝓋) MATHEMATICAL SCRIPT SMALL V	[1F49 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4CB 0061;	
    // (𝓋) MATHEMATICAL SCRIPT SMALL V	[1F49 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_242)
{
    uint32_t const cps[2] = { 0x1D4FF, 0x0061 };

    // 1D4FF 0061;	
    // (𝓿) MATHEMATICAL BOLD SCRIPT SMALL V	[1F49 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4FF 0061;	
    // (𝓿) MATHEMATICAL BOLD SCRIPT SMALL V	[1F49 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_243)
{
    uint32_t const cps[2] = { 0x1D533, 0x0061 };

    // 1D533 0061;	
    // (𝔳) MATHEMATICAL FRAKTUR SMALL V	[1F49 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D533 0061;	
    // (𝔳) MATHEMATICAL FRAKTUR SMALL V	[1F49 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_244)
{
    uint32_t const cps[2] = { 0x1D567, 0x0061 };

    // 1D567 0061;	
    // (𝕧) MATHEMATICAL DOUBLE-STRUCK SMALL V	[1F49 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D567 0061;	
    // (𝕧) MATHEMATICAL DOUBLE-STRUCK SMALL V	[1F49 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_245)
{
    uint32_t const cps[2] = { 0x1D59B, 0x0061 };

    // 1D59B 0061;	
    // (𝖛) MATHEMATICAL BOLD FRAKTUR SMALL V	[1F49 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D59B 0061;	
    // (𝖛) MATHEMATICAL BOLD FRAKTUR SMALL V	[1F49 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_246)
{
    uint32_t const cps[2] = { 0x1D5CF, 0x0061 };

    // 1D5CF 0061;	
    // (𝗏) MATHEMATICAL SANS-SERIF SMALL V	[1F49 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5CF 0061;	
    // (𝗏) MATHEMATICAL SANS-SERIF SMALL V	[1F49 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_247)
{
    uint32_t const cps[2] = { 0x1D603, 0x0061 };

    // 1D603 0061;	
    // (𝘃) MATHEMATICAL SANS-SERIF BOLD SMALL V	[1F49 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D603 0061;	
    // (𝘃) MATHEMATICAL SANS-SERIF BOLD SMALL V	[1F49 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_248)
{
    uint32_t const cps[2] = { 0x1D637, 0x0061 };

    // 1D637 0061;	
    // (𝘷) MATHEMATICAL SANS-SERIF ITALIC SMALL V	[1F49 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D637 0061;	
    // (𝘷) MATHEMATICAL SANS-SERIF ITALIC SMALL V	[1F49 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_249)
{
    uint32_t const cps[2] = { 0x1D66B, 0x0061 };

    // 1D66B 0061;	
    // (𝙫) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL V	[1F49 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D66B 0061;	
    // (𝙫) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL V	[1F49 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_250)
{
    uint32_t const cps[2] = { 0x1D69F, 0x0061 };

    // 1D69F 0061;	
    // (𝚟) MATHEMATICAL MONOSPACE SMALL V	[1F49 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D69F 0061;	
    // (𝚟) MATHEMATICAL MONOSPACE SMALL V	[1F49 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_251)
{
    uint32_t const cps[2] = { 0x1D42F, 0x0041 };

    // 1D42F 0041;	
    // (𝐯) MATHEMATICAL BOLD SMALL V	[1F49 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D42F 0041;	
    // (𝐯) MATHEMATICAL BOLD SMALL V	[1F49 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_252)
{
    uint32_t const cps[2] = { 0x1D463, 0x0041 };

    // 1D463 0041;	
    // (𝑣) MATHEMATICAL ITALIC SMALL V	[1F49 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D463 0041;	
    // (𝑣) MATHEMATICAL ITALIC SMALL V	[1F49 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_253)
{
    uint32_t const cps[2] = { 0x1D497, 0x0041 };

    // 1D497 0041;	
    // (𝒗) MATHEMATICAL BOLD ITALIC SMALL V	[1F49 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D497 0041;	
    // (𝒗) MATHEMATICAL BOLD ITALIC SMALL V	[1F49 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_254)
{
    uint32_t const cps[2] = { 0x1D4CB, 0x0041 };

    // 1D4CB 0041;	
    // (𝓋) MATHEMATICAL SCRIPT SMALL V	[1F49 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4CB 0041;	
    // (𝓋) MATHEMATICAL SCRIPT SMALL V	[1F49 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_255)
{
    uint32_t const cps[2] = { 0x1D4FF, 0x0041 };

    // 1D4FF 0041;	
    // (𝓿) MATHEMATICAL BOLD SCRIPT SMALL V	[1F49 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4FF 0041;	
    // (𝓿) MATHEMATICAL BOLD SCRIPT SMALL V	[1F49 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_256)
{
    uint32_t const cps[2] = { 0x1D533, 0x0041 };

    // 1D533 0041;	
    // (𝔳) MATHEMATICAL FRAKTUR SMALL V	[1F49 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D533 0041;	
    // (𝔳) MATHEMATICAL FRAKTUR SMALL V	[1F49 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_257)
{
    uint32_t const cps[2] = { 0x1D567, 0x0041 };

    // 1D567 0041;	
    // (𝕧) MATHEMATICAL DOUBLE-STRUCK SMALL V	[1F49 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D567 0041;	
    // (𝕧) MATHEMATICAL DOUBLE-STRUCK SMALL V	[1F49 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_258)
{
    uint32_t const cps[2] = { 0x1D59B, 0x0041 };

    // 1D59B 0041;	
    // (𝖛) MATHEMATICAL BOLD FRAKTUR SMALL V	[1F49 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D59B 0041;	
    // (𝖛) MATHEMATICAL BOLD FRAKTUR SMALL V	[1F49 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_259)
{
    uint32_t const cps[2] = { 0x1D5CF, 0x0041 };

    // 1D5CF 0041;	
    // (𝗏) MATHEMATICAL SANS-SERIF SMALL V	[1F49 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5CF 0041;	
    // (𝗏) MATHEMATICAL SANS-SERIF SMALL V	[1F49 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_260)
{
    uint32_t const cps[2] = { 0x1D603, 0x0041 };

    // 1D603 0041;	
    // (𝘃) MATHEMATICAL SANS-SERIF BOLD SMALL V	[1F49 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D603 0041;	
    // (𝘃) MATHEMATICAL SANS-SERIF BOLD SMALL V	[1F49 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_261)
{
    uint32_t const cps[2] = { 0x1D637, 0x0041 };

    // 1D637 0041;	
    // (𝘷) MATHEMATICAL SANS-SERIF ITALIC SMALL V	[1F49 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D637 0041;	
    // (𝘷) MATHEMATICAL SANS-SERIF ITALIC SMALL V	[1F49 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_262)
{
    uint32_t const cps[2] = { 0x1D66B, 0x0041 };

    // 1D66B 0041;	
    // (𝙫) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL V	[1F49 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D66B 0041;	
    // (𝙫) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL V	[1F49 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_263)
{
    uint32_t const cps[2] = { 0x1D69F, 0x0041 };

    // 1D69F 0041;	
    // (𝚟) MATHEMATICAL MONOSPACE SMALL V	[1F49 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D69F 0041;	
    // (𝚟) MATHEMATICAL MONOSPACE SMALL V	[1F49 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_264)
{
    uint32_t const cps[2] = { 0x24E5, 0x0061 };

    // 24E5 0061;	
    // (ⓥ) CIRCLED LATIN SMALL LETTER V	[1F49 1CAD | 0020 0020 | 0006 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24E5 0061;	
    // (ⓥ) CIRCLED LATIN SMALL LETTER V	[1F49 1CAD | 0020 0020 | 0006 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_265)
{
    uint32_t const cps[2] = { 0x24E5, 0x0041 };

    // 24E5 0041;	
    // (ⓥ) CIRCLED LATIN SMALL LETTER V	[1F49 1CAD | 0020 0020 | 0006 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24E5 0041;	
    // (ⓥ) CIRCLED LATIN SMALL LETTER V	[1F49 1CAD | 0020 0020 | 0006 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_266)
{
    uint32_t const cps[2] = { 0x0056, 0x0061 };

    // 0056 0061;	
    // (V) LATIN CAPITAL LETTER V	[1F49 1CAD | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0056 0061;	
    // (V) LATIN CAPITAL LETTER V	[1F49 1CAD | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_267)
{
    uint32_t const cps[2] = { 0x0056, 0x0041 };

    // 0056 0041;	
    // (V) LATIN CAPITAL LETTER V	[1F49 1CAD | 0020 0020 | 0008 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0056 0041;	
    // (V) LATIN CAPITAL LETTER V	[1F49 1CAD | 0020 0020 | 0008 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_268)
{
    uint32_t const cps[2] = { 0xFF36, 0x0061 };

    // FF36 0061;	
    // (Ｖ) FULLWIDTH LATIN CAPITAL LETTER V	[1F49 1CAD | 0020 0020 | 0009 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF36 0061;	
    // (Ｖ) FULLWIDTH LATIN CAPITAL LETTER V	[1F49 1CAD | 0020 0020 | 0009 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_269)
{
    uint32_t const cps[2] = { 0xFF36, 0x0041 };

    // FF36 0041;	
    // (Ｖ) FULLWIDTH LATIN CAPITAL LETTER V	[1F49 1CAD | 0020 0020 | 0009 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF36 0041;	
    // (Ｖ) FULLWIDTH LATIN CAPITAL LETTER V	[1F49 1CAD | 0020 0020 | 0009 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_270)
{
    uint32_t const cps[2] = { 0x2164, 0x0061 };

    // 2164 0061;	
    // (Ⅴ) ROMAN NUMERAL FIVE	[1F49 1CAD | 0020 0020 | 000A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2164 0061;	
    // (Ⅴ) ROMAN NUMERAL FIVE	[1F49 1CAD | 0020 0020 | 000A 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_271)
{
    uint32_t const cps[2] = { 0x2164, 0x0041 };

    // 2164 0041;	
    // (Ⅴ) ROMAN NUMERAL FIVE	[1F49 1CAD | 0020 0020 | 000A 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2164 0041;	
    // (Ⅴ) ROMAN NUMERAL FIVE	[1F49 1CAD | 0020 0020 | 000A 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_272)
{
    uint32_t const cps[2] = { 0x1D415, 0x0061 };

    // 1D415 0061;	
    // (𝐕) MATHEMATICAL BOLD CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D415 0061;	
    // (𝐕) MATHEMATICAL BOLD CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_273)
{
    uint32_t const cps[2] = { 0x1D449, 0x0061 };

    // 1D449 0061;	
    // (𝑉) MATHEMATICAL ITALIC CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D449 0061;	
    // (𝑉) MATHEMATICAL ITALIC CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_274)
{
    uint32_t const cps[2] = { 0x1D47D, 0x0061 };

    // 1D47D 0061;	
    // (𝑽) MATHEMATICAL BOLD ITALIC CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D47D 0061;	
    // (𝑽) MATHEMATICAL BOLD ITALIC CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_275)
{
    uint32_t const cps[2] = { 0x1D4B1, 0x0061 };

    // 1D4B1 0061;	
    // (𝒱) MATHEMATICAL SCRIPT CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4B1 0061;	
    // (𝒱) MATHEMATICAL SCRIPT CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_276)
{
    uint32_t const cps[2] = { 0x1D4E5, 0x0061 };

    // 1D4E5 0061;	
    // (𝓥) MATHEMATICAL BOLD SCRIPT CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4E5 0061;	
    // (𝓥) MATHEMATICAL BOLD SCRIPT CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_277)
{
    uint32_t const cps[2] = { 0x1D519, 0x0061 };

    // 1D519 0061;	
    // (𝔙) MATHEMATICAL FRAKTUR CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D519 0061;	
    // (𝔙) MATHEMATICAL FRAKTUR CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_278)
{
    uint32_t const cps[2] = { 0x1D54D, 0x0061 };

    // 1D54D 0061;	
    // (𝕍) MATHEMATICAL DOUBLE-STRUCK CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D54D 0061;	
    // (𝕍) MATHEMATICAL DOUBLE-STRUCK CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_279)
{
    uint32_t const cps[2] = { 0x1D581, 0x0061 };

    // 1D581 0061;	
    // (𝖁) MATHEMATICAL BOLD FRAKTUR CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D581 0061;	
    // (𝖁) MATHEMATICAL BOLD FRAKTUR CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_280)
{
    uint32_t const cps[2] = { 0x1D5B5, 0x0061 };

    // 1D5B5 0061;	
    // (𝖵) MATHEMATICAL SANS-SERIF CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5B5 0061;	
    // (𝖵) MATHEMATICAL SANS-SERIF CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_281)
{
    uint32_t const cps[2] = { 0x1D5E9, 0x0061 };

    // 1D5E9 0061;	
    // (𝗩) MATHEMATICAL SANS-SERIF BOLD CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5E9 0061;	
    // (𝗩) MATHEMATICAL SANS-SERIF BOLD CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_282)
{
    uint32_t const cps[2] = { 0x1D61D, 0x0061 };

    // 1D61D 0061;	
    // (𝘝) MATHEMATICAL SANS-SERIF ITALIC CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D61D 0061;	
    // (𝘝) MATHEMATICAL SANS-SERIF ITALIC CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_283)
{
    uint32_t const cps[2] = { 0x1D651, 0x0061 };

    // 1D651 0061;	
    // (𝙑) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D651 0061;	
    // (𝙑) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_284)
{
    uint32_t const cps[2] = { 0x1D685, 0x0061 };

    // 1D685 0061;	
    // (𝚅) MATHEMATICAL MONOSPACE CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D685 0061;	
    // (𝚅) MATHEMATICAL MONOSPACE CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_285)
{
    uint32_t const cps[2] = { 0x1D415, 0x0041 };

    // 1D415 0041;	
    // (𝐕) MATHEMATICAL BOLD CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D415 0041;	
    // (𝐕) MATHEMATICAL BOLD CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_286)
{
    uint32_t const cps[2] = { 0x1D449, 0x0041 };

    // 1D449 0041;	
    // (𝑉) MATHEMATICAL ITALIC CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D449 0041;	
    // (𝑉) MATHEMATICAL ITALIC CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_287)
{
    uint32_t const cps[2] = { 0x1D47D, 0x0041 };

    // 1D47D 0041;	
    // (𝑽) MATHEMATICAL BOLD ITALIC CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D47D 0041;	
    // (𝑽) MATHEMATICAL BOLD ITALIC CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_288)
{
    uint32_t const cps[2] = { 0x1D4B1, 0x0041 };

    // 1D4B1 0041;	
    // (𝒱) MATHEMATICAL SCRIPT CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4B1 0041;	
    // (𝒱) MATHEMATICAL SCRIPT CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_289)
{
    uint32_t const cps[2] = { 0x1D4E5, 0x0041 };

    // 1D4E5 0041;	
    // (𝓥) MATHEMATICAL BOLD SCRIPT CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4E5 0041;	
    // (𝓥) MATHEMATICAL BOLD SCRIPT CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_290)
{
    uint32_t const cps[2] = { 0x1D519, 0x0041 };

    // 1D519 0041;	
    // (𝔙) MATHEMATICAL FRAKTUR CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D519 0041;	
    // (𝔙) MATHEMATICAL FRAKTUR CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_291)
{
    uint32_t const cps[2] = { 0x1D54D, 0x0041 };

    // 1D54D 0041;	
    // (𝕍) MATHEMATICAL DOUBLE-STRUCK CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D54D 0041;	
    // (𝕍) MATHEMATICAL DOUBLE-STRUCK CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_292)
{
    uint32_t const cps[2] = { 0x1D581, 0x0041 };

    // 1D581 0041;	
    // (𝖁) MATHEMATICAL BOLD FRAKTUR CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D581 0041;	
    // (𝖁) MATHEMATICAL BOLD FRAKTUR CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_293)
{
    uint32_t const cps[2] = { 0x1D5B5, 0x0041 };

    // 1D5B5 0041;	
    // (𝖵) MATHEMATICAL SANS-SERIF CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5B5 0041;	
    // (𝖵) MATHEMATICAL SANS-SERIF CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_294)
{
    uint32_t const cps[2] = { 0x1D5E9, 0x0041 };

    // 1D5E9 0041;	
    // (𝗩) MATHEMATICAL SANS-SERIF BOLD CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5E9 0041;	
    // (𝗩) MATHEMATICAL SANS-SERIF BOLD CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_295)
{
    uint32_t const cps[2] = { 0x1D61D, 0x0041 };

    // 1D61D 0041;	
    // (𝘝) MATHEMATICAL SANS-SERIF ITALIC CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D61D 0041;	
    // (𝘝) MATHEMATICAL SANS-SERIF ITALIC CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_296)
{
    uint32_t const cps[2] = { 0x1D651, 0x0041 };

    // 1D651 0041;	
    // (𝙑) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D651 0041;	
    // (𝙑) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_297)
{
    uint32_t const cps[2] = { 0x1D685, 0x0041 };

    // 1D685 0041;	
    // (𝚅) MATHEMATICAL MONOSPACE CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D685 0041;	
    // (𝚅) MATHEMATICAL MONOSPACE CAPITAL V	[1F49 1CAD | 0020 0020 | 000B 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_298)
{
    uint32_t const cps[2] = { 0x24CB, 0x0061 };

    // 24CB 0061;	
    // (Ⓥ) CIRCLED LATIN CAPITAL LETTER V	[1F49 1CAD | 0020 0020 | 000C 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24CB 0061;	
    // (Ⓥ) CIRCLED LATIN CAPITAL LETTER V	[1F49 1CAD | 0020 0020 | 000C 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_299)
{
    uint32_t const cps[2] = { 0x1F165, 0x0061 };

    // 1F165 0061;	
    // (🅥) NEGATIVE CIRCLED LATIN CAPITAL LETTER V	[1F49 1CAD | 0020 0020 | 000C 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F165 0061;	
    // (🅥) NEGATIVE CIRCLED LATIN CAPITAL LETTER V	[1F49 1CAD | 0020 0020 | 000C 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_300)
{
    uint32_t const cps[2] = { 0x24CB, 0x0041 };

    // 24CB 0041;	
    // (Ⓥ) CIRCLED LATIN CAPITAL LETTER V	[1F49 1CAD | 0020 0020 | 000C 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24CB 0041;	
    // (Ⓥ) CIRCLED LATIN CAPITAL LETTER V	[1F49 1CAD | 0020 0020 | 000C 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_301)
{
    uint32_t const cps[2] = { 0x1F165, 0x0041 };

    // 1F165 0041;	
    // (🅥) NEGATIVE CIRCLED LATIN CAPITAL LETTER V	[1F49 1CAD | 0020 0020 | 000C 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F165 0041;	
    // (🅥) NEGATIVE CIRCLED LATIN CAPITAL LETTER V	[1F49 1CAD | 0020 0020 | 000C 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_302)
{
    uint32_t const cps[2] = { 0x1D5B, 0x0061 };

    // 1D5B 0061;	
    // (ᵛ) MODIFIER LETTER SMALL V	[1F49 1CAD | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5B 0061;	
    // (ᵛ) MODIFIER LETTER SMALL V	[1F49 1CAD | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_303)
{
    uint32_t const cps[2] = { 0x1D5B, 0x0041 };

    // 1D5B 0041;	
    // (ᵛ) MODIFIER LETTER SMALL V	[1F49 1CAD | 0020 0020 | 0014 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5B 0041;	
    // (ᵛ) MODIFIER LETTER SMALL V	[1F49 1CAD | 0020 0020 | 0014 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_304)
{
    uint32_t const cps[2] = { 0x1D65, 0x0061 };

    // 1D65 0061;	
    // (ᵥ) LATIN SUBSCRIPT SMALL LETTER V	[1F49 1CAD | 0020 0020 | 0015 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D65 0061;	
    // (ᵥ) LATIN SUBSCRIPT SMALL LETTER V	[1F49 1CAD | 0020 0020 | 0015 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_305)
{
    uint32_t const cps[2] = { 0x1D65, 0x0041 };

    // 1D65 0041;	
    // (ᵥ) LATIN SUBSCRIPT SMALL LETTER V	[1F49 1CAD | 0020 0020 | 0015 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D65 0041;	
    // (ᵥ) LATIN SUBSCRIPT SMALL LETTER V	[1F49 1CAD | 0020 0020 | 0015 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_306)
{
    uint32_t const cps[2] = { 0x2C7D, 0x0061 };

    // 2C7D 0061;	
    // (ⱽ) MODIFIER LETTER CAPITAL V	[1F49 1CAD | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2C7D 0061;	
    // (ⱽ) MODIFIER LETTER CAPITAL V	[1F49 1CAD | 0020 0020 | 001D 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_307)
{
    uint32_t const cps[2] = { 0x1F145, 0x0061 };

    // 1F145 0061;	
    // (🅅) SQUARED LATIN CAPITAL LETTER V	[1F49 1CAD | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F145 0061;	
    // (🅅) SQUARED LATIN CAPITAL LETTER V	[1F49 1CAD | 0020 0020 | 001D 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_308)
{
    uint32_t const cps[2] = { 0x1F185, 0x0061 };

    // 1F185 0061;	
    // (🆅) NEGATIVE SQUARED LATIN CAPITAL LETTER V	[1F49 1CAD | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F185 0061;	
    // (🆅) NEGATIVE SQUARED LATIN CAPITAL LETTER V	[1F49 1CAD | 0020 0020 | 001D 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_309)
{
    uint32_t const cps[2] = { 0x2C7D, 0x0041 };

    // 2C7D 0041;	
    // (ⱽ) MODIFIER LETTER CAPITAL V	[1F49 1CAD | 0020 0020 | 001D 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2C7D 0041;	
    // (ⱽ) MODIFIER LETTER CAPITAL V	[1F49 1CAD | 0020 0020 | 001D 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_310)
{
    uint32_t const cps[2] = { 0x1F145, 0x0041 };

    // 1F145 0041;	
    // (🅅) SQUARED LATIN CAPITAL LETTER V	[1F49 1CAD | 0020 0020 | 001D 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F145 0041;	
    // (🅅) SQUARED LATIN CAPITAL LETTER V	[1F49 1CAD | 0020 0020 | 001D 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_311)
{
    uint32_t const cps[2] = { 0x1F185, 0x0041 };

    // 1F185 0041;	
    // (🆅) NEGATIVE SQUARED LATIN CAPITAL LETTER V	[1F49 1CAD | 0020 0020 | 001D 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F185 0041;	
    // (🆅) NEGATIVE SQUARED LATIN CAPITAL LETTER V	[1F49 1CAD | 0020 0020 | 001D 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_312)
{
    uint32_t const cps[2] = { 0x1E7D, 0x0061 };

    // 1E7D 0061;	
    // (ṽ) LATIN SMALL LETTER V WITH TILDE	[1F49 1CAD | 0020 002D 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E7D 0061;	
    // (ṽ) LATIN SMALL LETTER V WITH TILDE	[1F49 1CAD | 0020 002D 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_313)
{
    uint32_t const cps[2] = { 0x1E7D, 0x0041 };

    // 1E7D 0041;	
    // (ṽ) LATIN SMALL LETTER V WITH TILDE	[1F49 1CAD | 0020 002D 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E7D 0041;	
    // (ṽ) LATIN SMALL LETTER V WITH TILDE	[1F49 1CAD | 0020 002D 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_314)
{
    uint32_t const cps[2] = { 0x1E7C, 0x0061 };

    // 1E7C 0061;	
    // (Ṽ) LATIN CAPITAL LETTER V WITH TILDE	[1F49 1CAD | 0020 002D 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E7C 0061;	
    // (Ṽ) LATIN CAPITAL LETTER V WITH TILDE	[1F49 1CAD | 0020 002D 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_315)
{
    uint32_t const cps[2] = { 0x1E7C, 0x0041 };

    // 1E7C 0041;	
    // (Ṽ) LATIN CAPITAL LETTER V WITH TILDE	[1F49 1CAD | 0020 002D 0020 | 0008 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E7C 0041;	
    // (Ṽ) LATIN CAPITAL LETTER V WITH TILDE	[1F49 1CAD | 0020 002D 0020 | 0008 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_316)
{
    uint32_t const cps[2] = { 0x1E7F, 0x0061 };

    // 1E7F 0061;	
    // (ṿ) LATIN SMALL LETTER V WITH DOT BELOW	[1F49 1CAD | 0020 0042 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E7F 0061;	
    // (ṿ) LATIN SMALL LETTER V WITH DOT BELOW	[1F49 1CAD | 0020 0042 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_317)
{
    uint32_t const cps[2] = { 0x1E7F, 0x0041 };

    // 1E7F 0041;	
    // (ṿ) LATIN SMALL LETTER V WITH DOT BELOW	[1F49 1CAD | 0020 0042 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E7F 0041;	
    // (ṿ) LATIN SMALL LETTER V WITH DOT BELOW	[1F49 1CAD | 0020 0042 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_318)
{
    uint32_t const cps[2] = { 0x1E7E, 0x0061 };

    // 1E7E 0061;	
    // (Ṿ) LATIN CAPITAL LETTER V WITH DOT BELOW	[1F49 1CAD | 0020 0042 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E7E 0061;	
    // (Ṿ) LATIN CAPITAL LETTER V WITH DOT BELOW	[1F49 1CAD | 0020 0042 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_319)
{
    uint32_t const cps[2] = { 0x1E7E, 0x0041 };

    // 1E7E 0041;	
    // (Ṿ) LATIN CAPITAL LETTER V WITH DOT BELOW	[1F49 1CAD | 0020 0042 0020 | 0008 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E7E 0041;	
    // (Ṿ) LATIN CAPITAL LETTER V WITH DOT BELOW	[1F49 1CAD | 0020 0042 0020 | 0008 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_320)
{
    uint32_t const cps[2] = { 0x0076, 0x0062 };

    // 0076 0062;	
    // (v) LATIN SMALL LETTER V	[1F49 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0076 0062;	
    // (v) LATIN SMALL LETTER V	[1F49 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_321)
{
    uint32_t const cps[2] = { 0xFF56, 0x0062 };

    // FF56 0062;	
    // (ｖ) FULLWIDTH LATIN SMALL LETTER V	[1F49 1CC6 | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF56 0062;	
    // (ｖ) FULLWIDTH LATIN SMALL LETTER V	[1F49 1CC6 | 0020 0020 | 0003 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_322)
{
    uint32_t const cps[2] = { 0x036E, 0x0062 };

    // 036E 0062;	
    // (ͮ) COMBINING LATIN SMALL LETTER V	[1F49 1CC6 | 0020 0020 | 0004 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 036E 0062;	
    // (ͮ) COMBINING LATIN SMALL LETTER V	[1F49 1CC6 | 0020 0020 | 0004 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_323)
{
    uint32_t const cps[2] = { 0x2174, 0x0062 };

    // 2174 0062;	
    // (ⅴ) SMALL ROMAN NUMERAL FIVE	[1F49 1CC6 | 0020 0020 | 0004 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2174 0062;	
    // (ⅴ) SMALL ROMAN NUMERAL FIVE	[1F49 1CC6 | 0020 0020 | 0004 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_324)
{
    uint32_t const cps[2] = { 0x1D42F, 0x0062 };

    // 1D42F 0062;	
    // (𝐯) MATHEMATICAL BOLD SMALL V	[1F49 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D42F 0062;	
    // (𝐯) MATHEMATICAL BOLD SMALL V	[1F49 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_325)
{
    uint32_t const cps[2] = { 0x1D463, 0x0062 };

    // 1D463 0062;	
    // (𝑣) MATHEMATICAL ITALIC SMALL V	[1F49 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D463 0062;	
    // (𝑣) MATHEMATICAL ITALIC SMALL V	[1F49 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_326)
{
    uint32_t const cps[2] = { 0x1D497, 0x0062 };

    // 1D497 0062;	
    // (𝒗) MATHEMATICAL BOLD ITALIC SMALL V	[1F49 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D497 0062;	
    // (𝒗) MATHEMATICAL BOLD ITALIC SMALL V	[1F49 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_327)
{
    uint32_t const cps[2] = { 0x1D4CB, 0x0062 };

    // 1D4CB 0062;	
    // (𝓋) MATHEMATICAL SCRIPT SMALL V	[1F49 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4CB 0062;	
    // (𝓋) MATHEMATICAL SCRIPT SMALL V	[1F49 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_328)
{
    uint32_t const cps[2] = { 0x1D4FF, 0x0062 };

    // 1D4FF 0062;	
    // (𝓿) MATHEMATICAL BOLD SCRIPT SMALL V	[1F49 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4FF 0062;	
    // (𝓿) MATHEMATICAL BOLD SCRIPT SMALL V	[1F49 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_329)
{
    uint32_t const cps[2] = { 0x1D533, 0x0062 };

    // 1D533 0062;	
    // (𝔳) MATHEMATICAL FRAKTUR SMALL V	[1F49 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D533 0062;	
    // (𝔳) MATHEMATICAL FRAKTUR SMALL V	[1F49 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_330)
{
    uint32_t const cps[2] = { 0x1D567, 0x0062 };

    // 1D567 0062;	
    // (𝕧) MATHEMATICAL DOUBLE-STRUCK SMALL V	[1F49 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D567 0062;	
    // (𝕧) MATHEMATICAL DOUBLE-STRUCK SMALL V	[1F49 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_331)
{
    uint32_t const cps[2] = { 0x1D59B, 0x0062 };

    // 1D59B 0062;	
    // (𝖛) MATHEMATICAL BOLD FRAKTUR SMALL V	[1F49 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D59B 0062;	
    // (𝖛) MATHEMATICAL BOLD FRAKTUR SMALL V	[1F49 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_332)
{
    uint32_t const cps[2] = { 0x1D5CF, 0x0062 };

    // 1D5CF 0062;	
    // (𝗏) MATHEMATICAL SANS-SERIF SMALL V	[1F49 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5CF 0062;	
    // (𝗏) MATHEMATICAL SANS-SERIF SMALL V	[1F49 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_333)
{
    uint32_t const cps[2] = { 0x1D603, 0x0062 };

    // 1D603 0062;	
    // (𝘃) MATHEMATICAL SANS-SERIF BOLD SMALL V	[1F49 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D603 0062;	
    // (𝘃) MATHEMATICAL SANS-SERIF BOLD SMALL V	[1F49 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_334)
{
    uint32_t const cps[2] = { 0x1D637, 0x0062 };

    // 1D637 0062;	
    // (𝘷) MATHEMATICAL SANS-SERIF ITALIC SMALL V	[1F49 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D637 0062;	
    // (𝘷) MATHEMATICAL SANS-SERIF ITALIC SMALL V	[1F49 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_335)
{
    uint32_t const cps[2] = { 0x1D66B, 0x0062 };

    // 1D66B 0062;	
    // (𝙫) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL V	[1F49 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D66B 0062;	
    // (𝙫) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL V	[1F49 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_336)
{
    uint32_t const cps[2] = { 0x1D69F, 0x0062 };

    // 1D69F 0062;	
    // (𝚟) MATHEMATICAL MONOSPACE SMALL V	[1F49 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D69F 0062;	
    // (𝚟) MATHEMATICAL MONOSPACE SMALL V	[1F49 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_337)
{
    uint32_t const cps[2] = { 0x24E5, 0x0062 };

    // 24E5 0062;	
    // (ⓥ) CIRCLED LATIN SMALL LETTER V	[1F49 1CC6 | 0020 0020 | 0006 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24E5 0062;	
    // (ⓥ) CIRCLED LATIN SMALL LETTER V	[1F49 1CC6 | 0020 0020 | 0006 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_338)
{
    uint32_t const cps[2] = { 0x0056, 0x0062 };

    // 0056 0062;	
    // (V) LATIN CAPITAL LETTER V	[1F49 1CC6 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0056 0062;	
    // (V) LATIN CAPITAL LETTER V	[1F49 1CC6 | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_339)
{
    uint32_t const cps[2] = { 0xFF36, 0x0062 };

    // FF36 0062;	
    // (Ｖ) FULLWIDTH LATIN CAPITAL LETTER V	[1F49 1CC6 | 0020 0020 | 0009 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF36 0062;	
    // (Ｖ) FULLWIDTH LATIN CAPITAL LETTER V	[1F49 1CC6 | 0020 0020 | 0009 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_340)
{
    uint32_t const cps[2] = { 0x2164, 0x0062 };

    // 2164 0062;	
    // (Ⅴ) ROMAN NUMERAL FIVE	[1F49 1CC6 | 0020 0020 | 000A 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2164 0062;	
    // (Ⅴ) ROMAN NUMERAL FIVE	[1F49 1CC6 | 0020 0020 | 000A 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_341)
{
    uint32_t const cps[2] = { 0x1D415, 0x0062 };

    // 1D415 0062;	
    // (𝐕) MATHEMATICAL BOLD CAPITAL V	[1F49 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D415 0062;	
    // (𝐕) MATHEMATICAL BOLD CAPITAL V	[1F49 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_342)
{
    uint32_t const cps[2] = { 0x1D449, 0x0062 };

    // 1D449 0062;	
    // (𝑉) MATHEMATICAL ITALIC CAPITAL V	[1F49 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D449 0062;	
    // (𝑉) MATHEMATICAL ITALIC CAPITAL V	[1F49 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_343)
{
    uint32_t const cps[2] = { 0x1D47D, 0x0062 };

    // 1D47D 0062;	
    // (𝑽) MATHEMATICAL BOLD ITALIC CAPITAL V	[1F49 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D47D 0062;	
    // (𝑽) MATHEMATICAL BOLD ITALIC CAPITAL V	[1F49 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_344)
{
    uint32_t const cps[2] = { 0x1D4B1, 0x0062 };

    // 1D4B1 0062;	
    // (𝒱) MATHEMATICAL SCRIPT CAPITAL V	[1F49 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4B1 0062;	
    // (𝒱) MATHEMATICAL SCRIPT CAPITAL V	[1F49 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_345)
{
    uint32_t const cps[2] = { 0x1D4E5, 0x0062 };

    // 1D4E5 0062;	
    // (𝓥) MATHEMATICAL BOLD SCRIPT CAPITAL V	[1F49 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4E5 0062;	
    // (𝓥) MATHEMATICAL BOLD SCRIPT CAPITAL V	[1F49 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_346)
{
    uint32_t const cps[2] = { 0x1D519, 0x0062 };

    // 1D519 0062;	
    // (𝔙) MATHEMATICAL FRAKTUR CAPITAL V	[1F49 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D519 0062;	
    // (𝔙) MATHEMATICAL FRAKTUR CAPITAL V	[1F49 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_347)
{
    uint32_t const cps[2] = { 0x1D54D, 0x0062 };

    // 1D54D 0062;	
    // (𝕍) MATHEMATICAL DOUBLE-STRUCK CAPITAL V	[1F49 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D54D 0062;	
    // (𝕍) MATHEMATICAL DOUBLE-STRUCK CAPITAL V	[1F49 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_348)
{
    uint32_t const cps[2] = { 0x1D581, 0x0062 };

    // 1D581 0062;	
    // (𝖁) MATHEMATICAL BOLD FRAKTUR CAPITAL V	[1F49 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D581 0062;	
    // (𝖁) MATHEMATICAL BOLD FRAKTUR CAPITAL V	[1F49 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_349)
{
    uint32_t const cps[2] = { 0x1D5B5, 0x0062 };

    // 1D5B5 0062;	
    // (𝖵) MATHEMATICAL SANS-SERIF CAPITAL V	[1F49 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5B5 0062;	
    // (𝖵) MATHEMATICAL SANS-SERIF CAPITAL V	[1F49 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_350)
{
    uint32_t const cps[2] = { 0x1D5E9, 0x0062 };

    // 1D5E9 0062;	
    // (𝗩) MATHEMATICAL SANS-SERIF BOLD CAPITAL V	[1F49 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5E9 0062;	
    // (𝗩) MATHEMATICAL SANS-SERIF BOLD CAPITAL V	[1F49 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_351)
{
    uint32_t const cps[2] = { 0x1D61D, 0x0062 };

    // 1D61D 0062;	
    // (𝘝) MATHEMATICAL SANS-SERIF ITALIC CAPITAL V	[1F49 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D61D 0062;	
    // (𝘝) MATHEMATICAL SANS-SERIF ITALIC CAPITAL V	[1F49 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_352)
{
    uint32_t const cps[2] = { 0x1D651, 0x0062 };

    // 1D651 0062;	
    // (𝙑) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL V	[1F49 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D651 0062;	
    // (𝙑) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL V	[1F49 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_353)
{
    uint32_t const cps[2] = { 0x1D685, 0x0062 };

    // 1D685 0062;	
    // (𝚅) MATHEMATICAL MONOSPACE CAPITAL V	[1F49 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D685 0062;	
    // (𝚅) MATHEMATICAL MONOSPACE CAPITAL V	[1F49 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_354)
{
    uint32_t const cps[2] = { 0x24CB, 0x0062 };

    // 24CB 0062;	
    // (Ⓥ) CIRCLED LATIN CAPITAL LETTER V	[1F49 1CC6 | 0020 0020 | 000C 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24CB 0062;	
    // (Ⓥ) CIRCLED LATIN CAPITAL LETTER V	[1F49 1CC6 | 0020 0020 | 000C 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_355)
{
    uint32_t const cps[2] = { 0x1F165, 0x0062 };

    // 1F165 0062;	
    // (🅥) NEGATIVE CIRCLED LATIN CAPITAL LETTER V	[1F49 1CC6 | 0020 0020 | 000C 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F165 0062;	
    // (🅥) NEGATIVE CIRCLED LATIN CAPITAL LETTER V	[1F49 1CC6 | 0020 0020 | 000C 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_356)
{
    uint32_t const cps[2] = { 0x1D5B, 0x0062 };

    // 1D5B 0062;	
    // (ᵛ) MODIFIER LETTER SMALL V	[1F49 1CC6 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5B 0062;	
    // (ᵛ) MODIFIER LETTER SMALL V	[1F49 1CC6 | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_357)
{
    uint32_t const cps[2] = { 0x1D65, 0x0062 };

    // 1D65 0062;	
    // (ᵥ) LATIN SUBSCRIPT SMALL LETTER V	[1F49 1CC6 | 0020 0020 | 0015 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D65 0062;	
    // (ᵥ) LATIN SUBSCRIPT SMALL LETTER V	[1F49 1CC6 | 0020 0020 | 0015 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_358)
{
    uint32_t const cps[2] = { 0x2C7D, 0x0062 };

    // 2C7D 0062;	
    // (ⱽ) MODIFIER LETTER CAPITAL V	[1F49 1CC6 | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2C7D 0062;	
    // (ⱽ) MODIFIER LETTER CAPITAL V	[1F49 1CC6 | 0020 0020 | 001D 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_359)
{
    uint32_t const cps[2] = { 0x1F145, 0x0062 };

    // 1F145 0062;	
    // (🅅) SQUARED LATIN CAPITAL LETTER V	[1F49 1CC6 | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F145 0062;	
    // (🅅) SQUARED LATIN CAPITAL LETTER V	[1F49 1CC6 | 0020 0020 | 001D 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_360)
{
    uint32_t const cps[2] = { 0x1F185, 0x0062 };

    // 1F185 0062;	
    // (🆅) NEGATIVE SQUARED LATIN CAPITAL LETTER V	[1F49 1CC6 | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F185 0062;	
    // (🆅) NEGATIVE SQUARED LATIN CAPITAL LETTER V	[1F49 1CC6 | 0020 0020 | 001D 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_361)
{
    uint32_t const cps[2] = { 0x1E7D, 0x0062 };

    // 1E7D 0062;	
    // (ṽ) LATIN SMALL LETTER V WITH TILDE	[1F49 1CC6 | 0020 002D 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E7D 0062;	
    // (ṽ) LATIN SMALL LETTER V WITH TILDE	[1F49 1CC6 | 0020 002D 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_362)
{
    uint32_t const cps[2] = { 0x1E7C, 0x0062 };

    // 1E7C 0062;	
    // (Ṽ) LATIN CAPITAL LETTER V WITH TILDE	[1F49 1CC6 | 0020 002D 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E7C 0062;	
    // (Ṽ) LATIN CAPITAL LETTER V WITH TILDE	[1F49 1CC6 | 0020 002D 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_363)
{
    uint32_t const cps[2] = { 0x1E7F, 0x0062 };

    // 1E7F 0062;	
    // (ṿ) LATIN SMALL LETTER V WITH DOT BELOW	[1F49 1CC6 | 0020 0042 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E7F 0062;	
    // (ṿ) LATIN SMALL LETTER V WITH DOT BELOW	[1F49 1CC6 | 0020 0042 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_364)
{
    uint32_t const cps[2] = { 0x1E7E, 0x0062 };

    // 1E7E 0062;	
    // (Ṿ) LATIN CAPITAL LETTER V WITH DOT BELOW	[1F49 1CC6 | 0020 0042 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E7E 0062;	
    // (Ṿ) LATIN CAPITAL LETTER V WITH DOT BELOW	[1F49 1CC6 | 0020 0042 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_365)
{
    uint32_t const cps[2] = { 0x2175, 0x0021 };

    // 2175 0021;	
    // (ⅵ) SMALL ROMAN NUMERAL SIX	[1F49 1D98 0261 | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1F49, 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2175 0021;	
    // (ⅵ) SMALL ROMAN NUMERAL SIX	[1F49 1D98 | 0020 0020 | 0004 0004 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x1F49, 0x1D98, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_366)
{
    uint32_t const cps[2] = { 0x2165, 0x0021 };

    // 2165 0021;	
    // (Ⅵ) ROMAN NUMERAL SIX	[1F49 1D98 0261 | 0020 0020 0020 | 000A 000A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1F49, 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2165 0021;	
    // (Ⅵ) ROMAN NUMERAL SIX	[1F49 1D98 | 0020 0020 | 000A 000A | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x1F49, 0x1D98, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_367)
{
    uint32_t const cps[2] = { 0x2175, 0x003F };

    // 2175 003F;	
    // (ⅵ) SMALL ROMAN NUMERAL SIX	[1F49 1D98 0267 | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1F49, 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2175 003F;	
    // (ⅵ) SMALL ROMAN NUMERAL SIX	[1F49 1D98 | 0020 0020 | 0004 0004 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x1F49, 0x1D98, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_368)
{
    uint32_t const cps[2] = { 0x2165, 0x003F };

    // 2165 003F;	
    // (Ⅵ) ROMAN NUMERAL SIX	[1F49 1D98 0267 | 0020 0020 0020 | 000A 000A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1F49, 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2165 003F;	
    // (Ⅵ) ROMAN NUMERAL SIX	[1F49 1D98 | 0020 0020 | 000A 000A | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x1F49, 0x1D98, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_369)
{
    uint32_t const cps[2] = { 0x2175, 0x0061 };

    // 2175 0061;	
    // (ⅵ) SMALL ROMAN NUMERAL SIX	[1F49 1D98 1CAD | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1F49, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2175 0061;	
    // (ⅵ) SMALL ROMAN NUMERAL SIX	[1F49 1D98 1CAD | 0020 0020 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1F49, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_370)
{
    uint32_t const cps[2] = { 0x2175, 0x0041 };

    // 2175 0041;	
    // (ⅵ) SMALL ROMAN NUMERAL SIX	[1F49 1D98 1CAD | 0020 0020 0020 | 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x1F49, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2175 0041;	
    // (ⅵ) SMALL ROMAN NUMERAL SIX	[1F49 1D98 1CAD | 0020 0020 0020 | 0004 0004 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1F49, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_371)
{
    uint32_t const cps[2] = { 0x2165, 0x0061 };

    // 2165 0061;	
    // (Ⅵ) ROMAN NUMERAL SIX	[1F49 1D98 1CAD | 0020 0020 0020 | 000A 000A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1F49, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2165 0061;	
    // (Ⅵ) ROMAN NUMERAL SIX	[1F49 1D98 1CAD | 0020 0020 0020 | 000A 000A 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1F49, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_372)
{
    uint32_t const cps[2] = { 0x2165, 0x0041 };

    // 2165 0041;	
    // (Ⅵ) ROMAN NUMERAL SIX	[1F49 1D98 1CAD | 0020 0020 0020 | 000A 000A 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x1F49, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2165 0041;	
    // (Ⅵ) ROMAN NUMERAL SIX	[1F49 1D98 1CAD | 0020 0020 0020 | 000A 000A 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1F49, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_373)
{
    uint32_t const cps[2] = { 0x2175, 0x0062 };

    // 2175 0062;	
    // (ⅵ) SMALL ROMAN NUMERAL SIX	[1F49 1D98 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1F49, 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2175 0062;	
    // (ⅵ) SMALL ROMAN NUMERAL SIX	[1F49 1D98 1CC6 | 0020 0020 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1F49, 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_374)
{
    uint32_t const cps[2] = { 0x2165, 0x0062 };

    // 2165 0062;	
    // (Ⅵ) ROMAN NUMERAL SIX	[1F49 1D98 1CC6 | 0020 0020 0020 | 000A 000A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1F49, 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2165 0062;	
    // (Ⅵ) ROMAN NUMERAL SIX	[1F49 1D98 1CC6 | 0020 0020 0020 | 000A 000A 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1F49, 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_375)
{
    uint32_t const cps[2] = { 0x2176, 0x0021 };

    // 2176 0021;	
    // (ⅶ) SMALL ROMAN NUMERAL SEVEN	[1F49 1D98 1D98 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x1F49, 0x1D98, 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2176 0021;	
    // (ⅶ) SMALL ROMAN NUMERAL SEVEN	[1F49 1D98 1D98 | 0020 0020 0020 | 0004 0004 0004 | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[17] = { 0x1F49, 0x1D98, 0x1D98, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_376)
{
    uint32_t const cps[2] = { 0x2166, 0x0021 };

    // 2166 0021;	
    // (Ⅶ) ROMAN NUMERAL SEVEN	[1F49 1D98 1D98 0261 | 0020 0020 0020 0020 | 000A 000A 000A 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x1F49, 0x1D98, 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2166 0021;	
    // (Ⅶ) ROMAN NUMERAL SEVEN	[1F49 1D98 1D98 | 0020 0020 0020 | 000A 000A 000A | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[17] = { 0x1F49, 0x1D98, 0x1D98, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_377)
{
    uint32_t const cps[2] = { 0x2176, 0x003F };

    // 2176 003F;	
    // (ⅶ) SMALL ROMAN NUMERAL SEVEN	[1F49 1D98 1D98 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x1F49, 0x1D98, 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2176 003F;	
    // (ⅶ) SMALL ROMAN NUMERAL SEVEN	[1F49 1D98 1D98 | 0020 0020 0020 | 0004 0004 0004 | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[17] = { 0x1F49, 0x1D98, 0x1D98, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_378)
{
    uint32_t const cps[2] = { 0x2166, 0x003F };

    // 2166 003F;	
    // (Ⅶ) ROMAN NUMERAL SEVEN	[1F49 1D98 1D98 0267 | 0020 0020 0020 0020 | 000A 000A 000A 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x1F49, 0x1D98, 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2166 003F;	
    // (Ⅶ) ROMAN NUMERAL SEVEN	[1F49 1D98 1D98 | 0020 0020 0020 | 000A 000A 000A | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[17] = { 0x1F49, 0x1D98, 0x1D98, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_379)
{
    uint32_t const cps[2] = { 0x2176, 0x0061 };

    // 2176 0061;	
    // (ⅶ) SMALL ROMAN NUMERAL SEVEN	[1F49 1D98 1D98 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x1F49, 0x1D98, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2176 0061;	
    // (ⅶ) SMALL ROMAN NUMERAL SEVEN	[1F49 1D98 1D98 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x1F49, 0x1D98, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_380)
{
    uint32_t const cps[2] = { 0x2176, 0x0041 };

    // 2176 0041;	
    // (ⅶ) SMALL ROMAN NUMERAL SEVEN	[1F49 1D98 1D98 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x1F49, 0x1D98, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2176 0041;	
    // (ⅶ) SMALL ROMAN NUMERAL SEVEN	[1F49 1D98 1D98 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x1F49, 0x1D98, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_381)
{
    uint32_t const cps[2] = { 0x2166, 0x0061 };

    // 2166 0061;	
    // (Ⅶ) ROMAN NUMERAL SEVEN	[1F49 1D98 1D98 1CAD | 0020 0020 0020 0020 | 000A 000A 000A 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x1F49, 0x1D98, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2166 0061;	
    // (Ⅶ) ROMAN NUMERAL SEVEN	[1F49 1D98 1D98 1CAD | 0020 0020 0020 0020 | 000A 000A 000A 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x1F49, 0x1D98, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_382)
{
    uint32_t const cps[2] = { 0x2166, 0x0041 };

    // 2166 0041;	
    // (Ⅶ) ROMAN NUMERAL SEVEN	[1F49 1D98 1D98 1CAD | 0020 0020 0020 0020 | 000A 000A 000A 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x1F49, 0x1D98, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2166 0041;	
    // (Ⅶ) ROMAN NUMERAL SEVEN	[1F49 1D98 1D98 1CAD | 0020 0020 0020 0020 | 000A 000A 000A 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x1F49, 0x1D98, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_383)
{
    uint32_t const cps[2] = { 0x2176, 0x0062 };

    // 2176 0062;	
    // (ⅶ) SMALL ROMAN NUMERAL SEVEN	[1F49 1D98 1D98 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x1F49, 0x1D98, 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2176 0062;	
    // (ⅶ) SMALL ROMAN NUMERAL SEVEN	[1F49 1D98 1D98 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x1F49, 0x1D98, 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_384)
{
    uint32_t const cps[2] = { 0x2166, 0x0062 };

    // 2166 0062;	
    // (Ⅶ) ROMAN NUMERAL SEVEN	[1F49 1D98 1D98 1CC6 | 0020 0020 0020 0020 | 000A 000A 000A 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x1F49, 0x1D98, 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2166 0062;	
    // (Ⅶ) ROMAN NUMERAL SEVEN	[1F49 1D98 1D98 1CC6 | 0020 0020 0020 0020 | 000A 000A 000A 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x1F49, 0x1D98, 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_385)
{
    uint32_t const cps[2] = { 0x2177, 0x0021 };

    // 2177 0021;	
    // (ⅷ) SMALL ROMAN NUMERAL EIGHT	[1F49 1D98 1D98 1D98 0261 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x1F49, 0x1D98, 0x1D98, 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2177 0021;	
    // (ⅷ) SMALL ROMAN NUMERAL EIGHT	[1F49 1D98 1D98 1D98 | 0020 0020 0020 0020 | 0004 0004 0004 0004 | FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[21] = { 0x1F49, 0x1D98, 0x1D98, 0x1D98, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 21);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 21))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_386)
{
    uint32_t const cps[2] = { 0x2167, 0x0021 };

    // 2167 0021;	
    // (Ⅷ) ROMAN NUMERAL EIGHT	[1F49 1D98 1D98 1D98 0261 | 0020 0020 0020 0020 0020 | 000A 000A 000A 000A 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x1F49, 0x1D98, 0x1D98, 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2167 0021;	
    // (Ⅷ) ROMAN NUMERAL EIGHT	[1F49 1D98 1D98 1D98 | 0020 0020 0020 0020 | 000A 000A 000A 000A | FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[21] = { 0x1F49, 0x1D98, 0x1D98, 0x1D98, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x000A, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 21);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 21))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_387)
{
    uint32_t const cps[2] = { 0x2177, 0x003F };

    // 2177 003F;	
    // (ⅷ) SMALL ROMAN NUMERAL EIGHT	[1F49 1D98 1D98 1D98 0267 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x1F49, 0x1D98, 0x1D98, 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2177 003F;	
    // (ⅷ) SMALL ROMAN NUMERAL EIGHT	[1F49 1D98 1D98 1D98 | 0020 0020 0020 0020 | 0004 0004 0004 0004 | FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[21] = { 0x1F49, 0x1D98, 0x1D98, 0x1D98, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 21);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 21))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_388)
{
    uint32_t const cps[2] = { 0x2167, 0x003F };

    // 2167 003F;	
    // (Ⅷ) ROMAN NUMERAL EIGHT	[1F49 1D98 1D98 1D98 0267 | 0020 0020 0020 0020 0020 | 000A 000A 000A 000A 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x1F49, 0x1D98, 0x1D98, 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2167 003F;	
    // (Ⅷ) ROMAN NUMERAL EIGHT	[1F49 1D98 1D98 1D98 | 0020 0020 0020 0020 | 000A 000A 000A 000A | FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[21] = { 0x1F49, 0x1D98, 0x1D98, 0x1D98, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x000A, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 21);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 21))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_389)
{
    uint32_t const cps[2] = { 0x2177, 0x0061 };

    // 2177 0061;	
    // (ⅷ) SMALL ROMAN NUMERAL EIGHT	[1F49 1D98 1D98 1D98 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x1F49, 0x1D98, 0x1D98, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2177 0061;	
    // (ⅷ) SMALL ROMAN NUMERAL EIGHT	[1F49 1D98 1D98 1D98 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[24] = { 0x1F49, 0x1D98, 0x1D98, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_390)
{
    uint32_t const cps[2] = { 0x2177, 0x0041 };

    // 2177 0041;	
    // (ⅷ) SMALL ROMAN NUMERAL EIGHT	[1F49 1D98 1D98 1D98 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[18] = { 0x1F49, 0x1D98, 0x1D98, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2177 0041;	
    // (ⅷ) SMALL ROMAN NUMERAL EIGHT	[1F49 1D98 1D98 1D98 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0008 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[24] = { 0x1F49, 0x1D98, 0x1D98, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_391)
{
    uint32_t const cps[2] = { 0x2167, 0x0061 };

    // 2167 0061;	
    // (Ⅷ) ROMAN NUMERAL EIGHT	[1F49 1D98 1D98 1D98 1CAD | 0020 0020 0020 0020 0020 | 000A 000A 000A 000A 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x1F49, 0x1D98, 0x1D98, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2167 0061;	
    // (Ⅷ) ROMAN NUMERAL EIGHT	[1F49 1D98 1D98 1D98 1CAD | 0020 0020 0020 0020 0020 | 000A 000A 000A 000A 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[24] = { 0x1F49, 0x1D98, 0x1D98, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x000A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_392)
{
    uint32_t const cps[2] = { 0x2167, 0x0041 };

    // 2167 0041;	
    // (Ⅷ) ROMAN NUMERAL EIGHT	[1F49 1D98 1D98 1D98 1CAD | 0020 0020 0020 0020 0020 | 000A 000A 000A 000A 0008 |]
    uint32_t const ces_non_ignorable[18] = { 0x1F49, 0x1D98, 0x1D98, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x000A, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2167 0041;	
    // (Ⅷ) ROMAN NUMERAL EIGHT	[1F49 1D98 1D98 1D98 1CAD | 0020 0020 0020 0020 0020 | 000A 000A 000A 000A 0008 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[24] = { 0x1F49, 0x1D98, 0x1D98, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x000A, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_393)
{
    uint32_t const cps[2] = { 0x2177, 0x0062 };

    // 2177 0062;	
    // (ⅷ) SMALL ROMAN NUMERAL EIGHT	[1F49 1D98 1D98 1D98 1CC6 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x1F49, 0x1D98, 0x1D98, 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2177 0062;	
    // (ⅷ) SMALL ROMAN NUMERAL EIGHT	[1F49 1D98 1D98 1D98 1CC6 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[24] = { 0x1F49, 0x1D98, 0x1D98, 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_394)
{
    uint32_t const cps[2] = { 0x2167, 0x0062 };

    // 2167 0062;	
    // (Ⅷ) ROMAN NUMERAL EIGHT	[1F49 1D98 1D98 1D98 1CC6 | 0020 0020 0020 0020 0020 | 000A 000A 000A 000A 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x1F49, 0x1D98, 0x1D98, 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2167 0062;	
    // (Ⅷ) ROMAN NUMERAL EIGHT	[1F49 1D98 1D98 1D98 1CC6 | 0020 0020 0020 0020 0020 | 000A 000A 000A 000A 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[24] = { 0x1F49, 0x1D98, 0x1D98, 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x000A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_395)
{
    uint32_t const cps[2] = { 0x1F1AC, 0x0021 };

    // 1F1AC 0021;	
    // (🆬) SQUARED VOD	[1F49 1E43 1CF5 0261 | 0020 0020 0020 0020 | 001D 001D 001D 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x1F49, 0x1E43, 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F1AC 0021;	
    // (🆬) SQUARED VOD	[1F49 1E43 1CF5 | 0020 0020 0020 | 001D 001D 001D | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[17] = { 0x1F49, 0x1E43, 0x1CF5, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_396)
{
    uint32_t const cps[2] = { 0x1F1AC, 0x003F };

    // 1F1AC 003F;	
    // (🆬) SQUARED VOD	[1F49 1E43 1CF5 0267 | 0020 0020 0020 0020 | 001D 001D 001D 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x1F49, 0x1E43, 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F1AC 003F;	
    // (🆬) SQUARED VOD	[1F49 1E43 1CF5 | 0020 0020 0020 | 001D 001D 001D | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[17] = { 0x1F49, 0x1E43, 0x1CF5, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_397)
{
    uint32_t const cps[2] = { 0x1F1AC, 0x0061 };

    // 1F1AC 0061;	
    // (🆬) SQUARED VOD	[1F49 1E43 1CF5 1CAD | 0020 0020 0020 0020 | 001D 001D 001D 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x1F49, 0x1E43, 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F1AC 0061;	
    // (🆬) SQUARED VOD	[1F49 1E43 1CF5 1CAD | 0020 0020 0020 0020 | 001D 001D 001D 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x1F49, 0x1E43, 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_398)
{
    uint32_t const cps[2] = { 0x1F1AC, 0x0041 };

    // 1F1AC 0041;	
    // (🆬) SQUARED VOD	[1F49 1E43 1CF5 1CAD | 0020 0020 0020 0020 | 001D 001D 001D 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x1F49, 0x1E43, 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F1AC 0041;	
    // (🆬) SQUARED VOD	[1F49 1E43 1CF5 1CAD | 0020 0020 0020 0020 | 001D 001D 001D 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x1F49, 0x1E43, 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_399)
{
    uint32_t const cps[2] = { 0x1F1AC, 0x0062 };

    // 1F1AC 0062;	
    // (🆬) SQUARED VOD	[1F49 1E43 1CF5 1CC6 | 0020 0020 0020 0020 | 001D 001D 001D 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x1F49, 0x1E43, 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F1AC 0062;	
    // (🆬) SQUARED VOD	[1F49 1E43 1CF5 1CC6 | 0020 0020 0020 0020 | 001D 001D 001D 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x1F49, 0x1E43, 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x001D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_400)
{
    uint32_t const cps[2] = { 0x1F19A, 0x0021 };

    // 1F19A 0021;	
    // (🆚) SQUARED VS	[1F49 1ED7 0261 | 0020 0020 0020 | 001D 001D 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1F49, 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F19A 0021;	
    // (🆚) SQUARED VS	[1F49 1ED7 | 0020 0020 | 001D 001D | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x1F49, 0x1ED7, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_401)
{
    uint32_t const cps[2] = { 0x1F19A, 0x003F };

    // 1F19A 003F;	
    // (🆚) SQUARED VS	[1F49 1ED7 0267 | 0020 0020 0020 | 001D 001D 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1F49, 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F19A 003F;	
    // (🆚) SQUARED VS	[1F49 1ED7 | 0020 0020 | 001D 001D | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x1F49, 0x1ED7, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_402)
{
    uint32_t const cps[2] = { 0x1F19A, 0x0061 };

    // 1F19A 0061;	
    // (🆚) SQUARED VS	[1F49 1ED7 1CAD | 0020 0020 0020 | 001D 001D 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1F49, 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F19A 0061;	
    // (🆚) SQUARED VS	[1F49 1ED7 1CAD | 0020 0020 0020 | 001D 001D 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1F49, 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_403)
{
    uint32_t const cps[2] = { 0x1F19A, 0x0041 };

    // 1F19A 0041;	
    // (🆚) SQUARED VS	[1F49 1ED7 1CAD | 0020 0020 0020 | 001D 001D 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x1F49, 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F19A 0041;	
    // (🆚) SQUARED VS	[1F49 1ED7 1CAD | 0020 0020 0020 | 001D 001D 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1F49, 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_404)
{
    uint32_t const cps[2] = { 0x1F19A, 0x0062 };

    // 1F19A 0062;	
    // (🆚) SQUARED VS	[1F49 1ED7 1CC6 | 0020 0020 0020 | 001D 001D 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1F49, 0x1ED7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F19A 0062;	
    // (🆚) SQUARED VS	[1F49 1ED7 1CC6 | 0020 0020 0020 | 001D 001D 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1F49, 0x1ED7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_405)
{
    uint32_t const cps[2] = { 0xA761, 0x0021 };

    // A761 0021;	
    // (ꝡ) LATIN SMALL LETTER VY	[1F49 1F71 0261 | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1F49, 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A761 0021;	
    // (ꝡ) LATIN SMALL LETTER VY	[1F49 1F71 | 0020 0020 | 0004 0004 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x1F49, 0x1F71, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_406)
{
    uint32_t const cps[2] = { 0xA760, 0x0021 };

    // A760 0021;	
    // (Ꝡ) LATIN CAPITAL LETTER VY	[1F49 1F71 0261 | 0020 0020 0020 | 000A 000A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1F49, 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A760 0021;	
    // (Ꝡ) LATIN CAPITAL LETTER VY	[1F49 1F71 | 0020 0020 | 000A 000A | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x1F49, 0x1F71, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_407)
{
    uint32_t const cps[2] = { 0xA761, 0x003F };

    // A761 003F;	
    // (ꝡ) LATIN SMALL LETTER VY	[1F49 1F71 0267 | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1F49, 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A761 003F;	
    // (ꝡ) LATIN SMALL LETTER VY	[1F49 1F71 | 0020 0020 | 0004 0004 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x1F49, 0x1F71, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_408)
{
    uint32_t const cps[2] = { 0xA760, 0x003F };

    // A760 003F;	
    // (Ꝡ) LATIN CAPITAL LETTER VY	[1F49 1F71 0267 | 0020 0020 0020 | 000A 000A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1F49, 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A760 003F;	
    // (Ꝡ) LATIN CAPITAL LETTER VY	[1F49 1F71 | 0020 0020 | 000A 000A | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x1F49, 0x1F71, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_409)
{
    uint32_t const cps[2] = { 0xA761, 0x0061 };

    // A761 0061;	
    // (ꝡ) LATIN SMALL LETTER VY	[1F49 1F71 1CAD | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1F49, 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A761 0061;	
    // (ꝡ) LATIN SMALL LETTER VY	[1F49 1F71 1CAD | 0020 0020 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1F49, 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_410)
{
    uint32_t const cps[2] = { 0xA761, 0x0041 };

    // A761 0041;	
    // (ꝡ) LATIN SMALL LETTER VY	[1F49 1F71 1CAD | 0020 0020 0020 | 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x1F49, 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A761 0041;	
    // (ꝡ) LATIN SMALL LETTER VY	[1F49 1F71 1CAD | 0020 0020 0020 | 0004 0004 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1F49, 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_411)
{
    uint32_t const cps[2] = { 0xA760, 0x0061 };

    // A760 0061;	
    // (Ꝡ) LATIN CAPITAL LETTER VY	[1F49 1F71 1CAD | 0020 0020 0020 | 000A 000A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1F49, 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A760 0061;	
    // (Ꝡ) LATIN CAPITAL LETTER VY	[1F49 1F71 1CAD | 0020 0020 0020 | 000A 000A 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1F49, 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_412)
{
    uint32_t const cps[2] = { 0xA760, 0x0041 };

    // A760 0041;	
    // (Ꝡ) LATIN CAPITAL LETTER VY	[1F49 1F71 1CAD | 0020 0020 0020 | 000A 000A 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x1F49, 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A760 0041;	
    // (Ꝡ) LATIN CAPITAL LETTER VY	[1F49 1F71 1CAD | 0020 0020 0020 | 000A 000A 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1F49, 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_413)
{
    uint32_t const cps[2] = { 0xA761, 0x0062 };

    // A761 0062;	
    // (ꝡ) LATIN SMALL LETTER VY	[1F49 1F71 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1F49, 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A761 0062;	
    // (ꝡ) LATIN SMALL LETTER VY	[1F49 1F71 1CC6 | 0020 0020 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1F49, 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_414)
{
    uint32_t const cps[2] = { 0xA760, 0x0062 };

    // A760 0062;	
    // (Ꝡ) LATIN CAPITAL LETTER VY	[1F49 1F71 1CC6 | 0020 0020 0020 | 000A 000A 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x1F49, 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A760 0062;	
    // (Ꝡ) LATIN CAPITAL LETTER VY	[1F49 1F71 1CC6 | 0020 0020 0020 | 000A 000A 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1F49, 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_415)
{
    uint32_t const cps[2] = { 0x1D20, 0x0021 };

    // 1D20 0021;	
    // (ᴠ) LATIN LETTER SMALL CAPITAL V	[1F4D 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F4D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D20 0021;	
    // (ᴠ) LATIN LETTER SMALL CAPITAL V	[1F4D | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F4D, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_416)
{
    uint32_t const cps[2] = { 0x1D20, 0x003F };

    // 1D20 003F;	
    // (ᴠ) LATIN LETTER SMALL CAPITAL V	[1F4D 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F4D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D20 003F;	
    // (ᴠ) LATIN LETTER SMALL CAPITAL V	[1F4D | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F4D, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_417)
{
    uint32_t const cps[2] = { 0x1D20, 0x0061 };

    // 1D20 0061;	
    // (ᴠ) LATIN LETTER SMALL CAPITAL V	[1F4D 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D20 0061;	
    // (ᴠ) LATIN LETTER SMALL CAPITAL V	[1F4D 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_418)
{
    uint32_t const cps[2] = { 0x1D20, 0x0041 };

    // 1D20 0041;	
    // (ᴠ) LATIN LETTER SMALL CAPITAL V	[1F4D 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D20 0041;	
    // (ᴠ) LATIN LETTER SMALL CAPITAL V	[1F4D 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_419)
{
    uint32_t const cps[2] = { 0x1D20, 0x0062 };

    // 1D20 0062;	
    // (ᴠ) LATIN LETTER SMALL CAPITAL V	[1F4D 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F4D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D20 0062;	
    // (ᴠ) LATIN LETTER SMALL CAPITAL V	[1F4D 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F4D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_420)
{
    uint32_t const cps[2] = { 0xA75F, 0x0021 };

    // A75F 0021;	
    // (ꝟ) LATIN SMALL LETTER V WITH DIAGONAL STROKE	[1F4E 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F4E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A75F 0021;	
    // (ꝟ) LATIN SMALL LETTER V WITH DIAGONAL STROKE	[1F4E | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F4E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_421)
{
    uint32_t const cps[2] = { 0xA75E, 0x0021 };

    // A75E 0021;	
    // (Ꝟ) LATIN CAPITAL LETTER V WITH DIAGONAL STROKE	[1F4E 0261 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F4E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A75E 0021;	
    // (Ꝟ) LATIN CAPITAL LETTER V WITH DIAGONAL STROKE	[1F4E | 0020 | 0008 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F4E, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_422)
{
    uint32_t const cps[2] = { 0xA75F, 0x003F };

    // A75F 003F;	
    // (ꝟ) LATIN SMALL LETTER V WITH DIAGONAL STROKE	[1F4E 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F4E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A75F 003F;	
    // (ꝟ) LATIN SMALL LETTER V WITH DIAGONAL STROKE	[1F4E | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F4E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_423)
{
    uint32_t const cps[2] = { 0xA75E, 0x003F };

    // A75E 003F;	
    // (Ꝟ) LATIN CAPITAL LETTER V WITH DIAGONAL STROKE	[1F4E 0267 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F4E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A75E 003F;	
    // (Ꝟ) LATIN CAPITAL LETTER V WITH DIAGONAL STROKE	[1F4E | 0020 | 0008 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F4E, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_424)
{
    uint32_t const cps[2] = { 0xA75F, 0x0061 };

    // A75F 0061;	
    // (ꝟ) LATIN SMALL LETTER V WITH DIAGONAL STROKE	[1F4E 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A75F 0061;	
    // (ꝟ) LATIN SMALL LETTER V WITH DIAGONAL STROKE	[1F4E 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_425)
{
    uint32_t const cps[2] = { 0xA75F, 0x0041 };

    // A75F 0041;	
    // (ꝟ) LATIN SMALL LETTER V WITH DIAGONAL STROKE	[1F4E 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A75F 0041;	
    // (ꝟ) LATIN SMALL LETTER V WITH DIAGONAL STROKE	[1F4E 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_426)
{
    uint32_t const cps[2] = { 0xA75E, 0x0061 };

    // A75E 0061;	
    // (Ꝟ) LATIN CAPITAL LETTER V WITH DIAGONAL STROKE	[1F4E 1CAD | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A75E 0061;	
    // (Ꝟ) LATIN CAPITAL LETTER V WITH DIAGONAL STROKE	[1F4E 1CAD | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_427)
{
    uint32_t const cps[2] = { 0xA75E, 0x0041 };

    // A75E 0041;	
    // (Ꝟ) LATIN CAPITAL LETTER V WITH DIAGONAL STROKE	[1F4E 1CAD | 0020 0020 | 0008 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A75E 0041;	
    // (Ꝟ) LATIN CAPITAL LETTER V WITH DIAGONAL STROKE	[1F4E 1CAD | 0020 0020 | 0008 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_428)
{
    uint32_t const cps[2] = { 0xA75F, 0x0062 };

    // A75F 0062;	
    // (ꝟ) LATIN SMALL LETTER V WITH DIAGONAL STROKE	[1F4E 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A75F 0062;	
    // (ꝟ) LATIN SMALL LETTER V WITH DIAGONAL STROKE	[1F4E 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_429)
{
    uint32_t const cps[2] = { 0xA75E, 0x0062 };

    // A75E 0062;	
    // (Ꝟ) LATIN CAPITAL LETTER V WITH DIAGONAL STROKE	[1F4E 1CC6 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A75E 0062;	
    // (Ꝟ) LATIN CAPITAL LETTER V WITH DIAGONAL STROKE	[1F4E 1CC6 | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_430)
{
    uint32_t const cps[2] = { 0x1D8C, 0x0021 };

    // 1D8C 0021;	
    // (ᶌ) LATIN SMALL LETTER V WITH PALATAL HOOK	[1F4F 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F4F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D8C 0021;	
    // (ᶌ) LATIN SMALL LETTER V WITH PALATAL HOOK	[1F4F | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F4F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_431)
{
    uint32_t const cps[2] = { 0x1D8C, 0x003F };

    // 1D8C 003F;	
    // (ᶌ) LATIN SMALL LETTER V WITH PALATAL HOOK	[1F4F 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F4F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D8C 003F;	
    // (ᶌ) LATIN SMALL LETTER V WITH PALATAL HOOK	[1F4F | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F4F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_432)
{
    uint32_t const cps[2] = { 0x1D8C, 0x0061 };

    // 1D8C 0061;	
    // (ᶌ) LATIN SMALL LETTER V WITH PALATAL HOOK	[1F4F 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D8C 0061;	
    // (ᶌ) LATIN SMALL LETTER V WITH PALATAL HOOK	[1F4F 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_433)
{
    uint32_t const cps[2] = { 0x1D8C, 0x0041 };

    // 1D8C 0041;	
    // (ᶌ) LATIN SMALL LETTER V WITH PALATAL HOOK	[1F4F 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D8C 0041;	
    // (ᶌ) LATIN SMALL LETTER V WITH PALATAL HOOK	[1F4F 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_434)
{
    uint32_t const cps[2] = { 0x1D8C, 0x0062 };

    // 1D8C 0062;	
    // (ᶌ) LATIN SMALL LETTER V WITH PALATAL HOOK	[1F4F 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F4F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D8C 0062;	
    // (ᶌ) LATIN SMALL LETTER V WITH PALATAL HOOK	[1F4F 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F4F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_435)
{
    uint32_t const cps[2] = { 0x028B, 0x0021 };

    // 028B 0021;	
    // (ʋ) LATIN SMALL LETTER V WITH HOOK	[1F50 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 028B 0021;	
    // (ʋ) LATIN SMALL LETTER V WITH HOOK	[1F50 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F50, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_436)
{
    uint32_t const cps[2] = { 0x01B2, 0x0021 };

    // 01B2 0021;	
    // (Ʋ) LATIN CAPITAL LETTER V WITH HOOK	[1F50 0261 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01B2 0021;	
    // (Ʋ) LATIN CAPITAL LETTER V WITH HOOK	[1F50 | 0020 | 0008 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F50, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_437)
{
    uint32_t const cps[2] = { 0x1DB9, 0x0021 };

    // 1DB9 0021;	
    // (ᶹ) MODIFIER LETTER SMALL V WITH HOOK	[1F50 0261 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DB9 0021;	
    // (ᶹ) MODIFIER LETTER SMALL V WITH HOOK	[1F50 | 0020 | 0014 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F50, 0x0000, 0x0020, 0x0000, 0x0014, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_438)
{
    uint32_t const cps[2] = { 0x028B, 0x003F };

    // 028B 003F;	
    // (ʋ) LATIN SMALL LETTER V WITH HOOK	[1F50 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 028B 003F;	
    // (ʋ) LATIN SMALL LETTER V WITH HOOK	[1F50 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F50, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_439)
{
    uint32_t const cps[2] = { 0x01B2, 0x003F };

    // 01B2 003F;	
    // (Ʋ) LATIN CAPITAL LETTER V WITH HOOK	[1F50 0267 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01B2 003F;	
    // (Ʋ) LATIN CAPITAL LETTER V WITH HOOK	[1F50 | 0020 | 0008 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F50, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_440)
{
    uint32_t const cps[2] = { 0x1DB9, 0x003F };

    // 1DB9 003F;	
    // (ᶹ) MODIFIER LETTER SMALL V WITH HOOK	[1F50 0267 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DB9 003F;	
    // (ᶹ) MODIFIER LETTER SMALL V WITH HOOK	[1F50 | 0020 | 0014 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F50, 0x0000, 0x0020, 0x0000, 0x0014, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_441)
{
    uint32_t const cps[2] = { 0x028B, 0x0061 };

    // 028B 0061;	
    // (ʋ) LATIN SMALL LETTER V WITH HOOK	[1F50 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 028B 0061;	
    // (ʋ) LATIN SMALL LETTER V WITH HOOK	[1F50 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_442)
{
    uint32_t const cps[2] = { 0x028B, 0x0041 };

    // 028B 0041;	
    // (ʋ) LATIN SMALL LETTER V WITH HOOK	[1F50 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 028B 0041;	
    // (ʋ) LATIN SMALL LETTER V WITH HOOK	[1F50 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_443)
{
    uint32_t const cps[2] = { 0x01B2, 0x0061 };

    // 01B2 0061;	
    // (Ʋ) LATIN CAPITAL LETTER V WITH HOOK	[1F50 1CAD | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01B2 0061;	
    // (Ʋ) LATIN CAPITAL LETTER V WITH HOOK	[1F50 1CAD | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_444)
{
    uint32_t const cps[2] = { 0x01B2, 0x0041 };

    // 01B2 0041;	
    // (Ʋ) LATIN CAPITAL LETTER V WITH HOOK	[1F50 1CAD | 0020 0020 | 0008 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01B2 0041;	
    // (Ʋ) LATIN CAPITAL LETTER V WITH HOOK	[1F50 1CAD | 0020 0020 | 0008 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_445)
{
    uint32_t const cps[2] = { 0x1DB9, 0x0061 };

    // 1DB9 0061;	
    // (ᶹ) MODIFIER LETTER SMALL V WITH HOOK	[1F50 1CAD | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DB9 0061;	
    // (ᶹ) MODIFIER LETTER SMALL V WITH HOOK	[1F50 1CAD | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_446)
{
    uint32_t const cps[2] = { 0x1DB9, 0x0041 };

    // 1DB9 0041;	
    // (ᶹ) MODIFIER LETTER SMALL V WITH HOOK	[1F50 1CAD | 0020 0020 | 0014 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DB9 0041;	
    // (ᶹ) MODIFIER LETTER SMALL V WITH HOOK	[1F50 1CAD | 0020 0020 | 0014 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_447)
{
    uint32_t const cps[2] = { 0x028B, 0x0062 };

    // 028B 0062;	
    // (ʋ) LATIN SMALL LETTER V WITH HOOK	[1F50 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 028B 0062;	
    // (ʋ) LATIN SMALL LETTER V WITH HOOK	[1F50 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_448)
{
    uint32_t const cps[2] = { 0x01B2, 0x0062 };

    // 01B2 0062;	
    // (Ʋ) LATIN CAPITAL LETTER V WITH HOOK	[1F50 1CC6 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01B2 0062;	
    // (Ʋ) LATIN CAPITAL LETTER V WITH HOOK	[1F50 1CC6 | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_449)
{
    uint32_t const cps[2] = { 0x1DB9, 0x0062 };

    // 1DB9 0062;	
    // (ᶹ) MODIFIER LETTER SMALL V WITH HOOK	[1F50 1CC6 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DB9 0062;	
    // (ᶹ) MODIFIER LETTER SMALL V WITH HOOK	[1F50 1CC6 | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_450)
{
    uint32_t const cps[2] = { 0x2C71, 0x0021 };

    // 2C71 0021;	
    // (ⱱ) LATIN SMALL LETTER V WITH RIGHT HOOK	[1F54 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F54, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2C71 0021;	
    // (ⱱ) LATIN SMALL LETTER V WITH RIGHT HOOK	[1F54 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F54, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_451)
{
    uint32_t const cps[2] = { 0x2C71, 0x003F };

    // 2C71 003F;	
    // (ⱱ) LATIN SMALL LETTER V WITH RIGHT HOOK	[1F54 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F54, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2C71 003F;	
    // (ⱱ) LATIN SMALL LETTER V WITH RIGHT HOOK	[1F54 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F54, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_452)
{
    uint32_t const cps[2] = { 0x2C71, 0x0061 };

    // 2C71 0061;	
    // (ⱱ) LATIN SMALL LETTER V WITH RIGHT HOOK	[1F54 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2C71 0061;	
    // (ⱱ) LATIN SMALL LETTER V WITH RIGHT HOOK	[1F54 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_453)
{
    uint32_t const cps[2] = { 0x2C71, 0x0041 };

    // 2C71 0041;	
    // (ⱱ) LATIN SMALL LETTER V WITH RIGHT HOOK	[1F54 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2C71 0041;	
    // (ⱱ) LATIN SMALL LETTER V WITH RIGHT HOOK	[1F54 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_454)
{
    uint32_t const cps[2] = { 0x2C71, 0x0062 };

    // 2C71 0062;	
    // (ⱱ) LATIN SMALL LETTER V WITH RIGHT HOOK	[1F54 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2C71 0062;	
    // (ⱱ) LATIN SMALL LETTER V WITH RIGHT HOOK	[1F54 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_455)
{
    uint32_t const cps[2] = { 0x2C74, 0x0021 };

    // 2C74 0021;	
    // (ⱴ) LATIN SMALL LETTER V WITH CURL	[1F55 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F55, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2C74 0021;	
    // (ⱴ) LATIN SMALL LETTER V WITH CURL	[1F55 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F55, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_456)
{
    uint32_t const cps[2] = { 0x2C74, 0x003F };

    // 2C74 003F;	
    // (ⱴ) LATIN SMALL LETTER V WITH CURL	[1F55 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F55, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2C74 003F;	
    // (ⱴ) LATIN SMALL LETTER V WITH CURL	[1F55 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F55, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_457)
{
    uint32_t const cps[2] = { 0x2C74, 0x0061 };

    // 2C74 0061;	
    // (ⱴ) LATIN SMALL LETTER V WITH CURL	[1F55 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2C74 0061;	
    // (ⱴ) LATIN SMALL LETTER V WITH CURL	[1F55 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_458)
{
    uint32_t const cps[2] = { 0x2C74, 0x0041 };

    // 2C74 0041;	
    // (ⱴ) LATIN SMALL LETTER V WITH CURL	[1F55 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2C74 0041;	
    // (ⱴ) LATIN SMALL LETTER V WITH CURL	[1F55 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_459)
{
    uint32_t const cps[2] = { 0x2C74, 0x0062 };

    // 2C74 0062;	
    // (ⱴ) LATIN SMALL LETTER V WITH CURL	[1F55 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F55, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2C74 0062;	
    // (ⱴ) LATIN SMALL LETTER V WITH CURL	[1F55 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F55, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_460)
{
    uint32_t const cps[2] = { 0x1EFD, 0x0021 };

    // 1EFD 0021;	
    // (ỽ) LATIN SMALL LETTER MIDDLE-WELSH V	[1F56 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F56, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EFD 0021;	
    // (ỽ) LATIN SMALL LETTER MIDDLE-WELSH V	[1F56 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F56, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_461)
{
    uint32_t const cps[2] = { 0x1EFC, 0x0021 };

    // 1EFC 0021;	
    // (Ỽ) LATIN CAPITAL LETTER MIDDLE-WELSH V	[1F56 0261 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F56, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EFC 0021;	
    // (Ỽ) LATIN CAPITAL LETTER MIDDLE-WELSH V	[1F56 | 0020 | 0008 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F56, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_462)
{
    uint32_t const cps[2] = { 0x1EFD, 0x003F };

    // 1EFD 003F;	
    // (ỽ) LATIN SMALL LETTER MIDDLE-WELSH V	[1F56 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F56, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EFD 003F;	
    // (ỽ) LATIN SMALL LETTER MIDDLE-WELSH V	[1F56 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F56, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_463)
{
    uint32_t const cps[2] = { 0x1EFC, 0x003F };

    // 1EFC 003F;	
    // (Ỽ) LATIN CAPITAL LETTER MIDDLE-WELSH V	[1F56 0267 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F56, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EFC 003F;	
    // (Ỽ) LATIN CAPITAL LETTER MIDDLE-WELSH V	[1F56 | 0020 | 0008 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F56, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_464)
{
    uint32_t const cps[2] = { 0x1EFD, 0x0061 };

    // 1EFD 0061;	
    // (ỽ) LATIN SMALL LETTER MIDDLE-WELSH V	[1F56 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EFD 0061;	
    // (ỽ) LATIN SMALL LETTER MIDDLE-WELSH V	[1F56 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_465)
{
    uint32_t const cps[2] = { 0x1EFD, 0x0041 };

    // 1EFD 0041;	
    // (ỽ) LATIN SMALL LETTER MIDDLE-WELSH V	[1F56 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EFD 0041;	
    // (ỽ) LATIN SMALL LETTER MIDDLE-WELSH V	[1F56 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_466)
{
    uint32_t const cps[2] = { 0x1EFC, 0x0061 };

    // 1EFC 0061;	
    // (Ỽ) LATIN CAPITAL LETTER MIDDLE-WELSH V	[1F56 1CAD | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EFC 0061;	
    // (Ỽ) LATIN CAPITAL LETTER MIDDLE-WELSH V	[1F56 1CAD | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_467)
{
    uint32_t const cps[2] = { 0x1EFC, 0x0041 };

    // 1EFC 0041;	
    // (Ỽ) LATIN CAPITAL LETTER MIDDLE-WELSH V	[1F56 1CAD | 0020 0020 | 0008 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EFC 0041;	
    // (Ỽ) LATIN CAPITAL LETTER MIDDLE-WELSH V	[1F56 1CAD | 0020 0020 | 0008 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_468)
{
    uint32_t const cps[2] = { 0x1EFD, 0x0062 };

    // 1EFD 0062;	
    // (ỽ) LATIN SMALL LETTER MIDDLE-WELSH V	[1F56 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EFD 0062;	
    // (ỽ) LATIN SMALL LETTER MIDDLE-WELSH V	[1F56 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_469)
{
    uint32_t const cps[2] = { 0x1EFC, 0x0062 };

    // 1EFC 0062;	
    // (Ỽ) LATIN CAPITAL LETTER MIDDLE-WELSH V	[1F56 1CC6 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EFC 0062;	
    // (Ỽ) LATIN CAPITAL LETTER MIDDLE-WELSH V	[1F56 1CC6 | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_470)
{
    uint32_t const cps[2] = { 0x028C, 0x0021 };

    // 028C 0021;	
    // (ʌ) LATIN SMALL LETTER TURNED V	[1F57 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F57, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 028C 0021;	
    // (ʌ) LATIN SMALL LETTER TURNED V	[1F57 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F57, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_471)
{
    uint32_t const cps[2] = { 0x0245, 0x0021 };

    // 0245 0021;	
    // (Ʌ) LATIN CAPITAL LETTER TURNED V	[1F57 0261 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F57, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0245 0021;	
    // (Ʌ) LATIN CAPITAL LETTER TURNED V	[1F57 | 0020 | 0008 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F57, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_472)
{
    uint32_t const cps[2] = { 0x1DBA, 0x0021 };

    // 1DBA 0021;	
    // (ᶺ) MODIFIER LETTER SMALL TURNED V	[1F57 0261 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F57, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DBA 0021;	
    // (ᶺ) MODIFIER LETTER SMALL TURNED V	[1F57 | 0020 | 0014 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x1F57, 0x0000, 0x0020, 0x0000, 0x0014, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_473)
{
    uint32_t const cps[2] = { 0x028C, 0x003F };

    // 028C 003F;	
    // (ʌ) LATIN SMALL LETTER TURNED V	[1F57 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F57, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 028C 003F;	
    // (ʌ) LATIN SMALL LETTER TURNED V	[1F57 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F57, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_474)
{
    uint32_t const cps[2] = { 0x0245, 0x003F };

    // 0245 003F;	
    // (Ʌ) LATIN CAPITAL LETTER TURNED V	[1F57 0267 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F57, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0245 003F;	
    // (Ʌ) LATIN CAPITAL LETTER TURNED V	[1F57 | 0020 | 0008 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F57, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_475)
{
    uint32_t const cps[2] = { 0x1DBA, 0x003F };

    // 1DBA 003F;	
    // (ᶺ) MODIFIER LETTER SMALL TURNED V	[1F57 0267 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F57, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DBA 003F;	
    // (ᶺ) MODIFIER LETTER SMALL TURNED V	[1F57 | 0020 | 0014 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x1F57, 0x0000, 0x0020, 0x0000, 0x0014, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_476)
{
    uint32_t const cps[2] = { 0x028C, 0x0061 };

    // 028C 0061;	
    // (ʌ) LATIN SMALL LETTER TURNED V	[1F57 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 028C 0061;	
    // (ʌ) LATIN SMALL LETTER TURNED V	[1F57 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_477)
{
    uint32_t const cps[2] = { 0x028C, 0x0041 };

    // 028C 0041;	
    // (ʌ) LATIN SMALL LETTER TURNED V	[1F57 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 028C 0041;	
    // (ʌ) LATIN SMALL LETTER TURNED V	[1F57 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_478)
{
    uint32_t const cps[2] = { 0x0245, 0x0061 };

    // 0245 0061;	
    // (Ʌ) LATIN CAPITAL LETTER TURNED V	[1F57 1CAD | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0245 0061;	
    // (Ʌ) LATIN CAPITAL LETTER TURNED V	[1F57 1CAD | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_479)
{
    uint32_t const cps[2] = { 0x0245, 0x0041 };

    // 0245 0041;	
    // (Ʌ) LATIN CAPITAL LETTER TURNED V	[1F57 1CAD | 0020 0020 | 0008 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0245 0041;	
    // (Ʌ) LATIN CAPITAL LETTER TURNED V	[1F57 1CAD | 0020 0020 | 0008 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_480)
{
    uint32_t const cps[2] = { 0x1DBA, 0x0061 };

    // 1DBA 0061;	
    // (ᶺ) MODIFIER LETTER SMALL TURNED V	[1F57 1CAD | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DBA 0061;	
    // (ᶺ) MODIFIER LETTER SMALL TURNED V	[1F57 1CAD | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_481)
{
    uint32_t const cps[2] = { 0x1DBA, 0x0041 };

    // 1DBA 0041;	
    // (ᶺ) MODIFIER LETTER SMALL TURNED V	[1F57 1CAD | 0020 0020 | 0014 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DBA 0041;	
    // (ᶺ) MODIFIER LETTER SMALL TURNED V	[1F57 1CAD | 0020 0020 | 0014 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_482)
{
    uint32_t const cps[2] = { 0x028C, 0x0062 };

    // 028C 0062;	
    // (ʌ) LATIN SMALL LETTER TURNED V	[1F57 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 028C 0062;	
    // (ʌ) LATIN SMALL LETTER TURNED V	[1F57 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_483)
{
    uint32_t const cps[2] = { 0x0245, 0x0062 };

    // 0245 0062;	
    // (Ʌ) LATIN CAPITAL LETTER TURNED V	[1F57 1CC6 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0245 0062;	
    // (Ʌ) LATIN CAPITAL LETTER TURNED V	[1F57 1CC6 | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_484)
{
    uint32_t const cps[2] = { 0x1DBA, 0x0062 };

    // 1DBA 0062;	
    // (ᶺ) MODIFIER LETTER SMALL TURNED V	[1F57 1CC6 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1F57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DBA 0062;	
    // (ᶺ) MODIFIER LETTER SMALL TURNED V	[1F57 1CC6 | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x1F57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_485)
{
    uint32_t const cps[3] = { 0x0077, 0x0301, 0x0334 };

    // 0077 0301 0334;	
    // (ẃ) LATIN SMALL LETTER W, COMBINING ACUTE ACCENT	[1F5B | 0020 004A 0024 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1F5B, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0077 0301 0334;	
    // (ẃ) LATIN SMALL LETTER W, COMBINING ACUTE ACCENT	[1F5B | 0020 004A 0024 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1F5B, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_486)
{
    uint32_t const cps[3] = { 0x0077, 0x0334, 0x0301 };

    // 0077 0334 0301;	
    // (w̴) LATIN SMALL LETTER W, COMBINING TILDE OVERLAY	[1F5B | 0020 004A 0024 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1F5B, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0077 0334 0301;	
    // (w̴) LATIN SMALL LETTER W, COMBINING TILDE OVERLAY	[1F5B | 0020 004A 0024 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1F5B, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_487)
{
    uint32_t const cps[3] = { 0x0077, 0x0334, 0x0341 };

    // 0077 0334 0341;	
    // (w̴) LATIN SMALL LETTER W, COMBINING TILDE OVERLAY	[1F5B | 0020 004A 0024 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1F5B, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0077 0334 0341;	
    // (w̴) LATIN SMALL LETTER W, COMBINING TILDE OVERLAY	[1F5B | 0020 004A 0024 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1F5B, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_488)
{
    uint32_t const cps[2] = { 0x1E83, 0x0334 };

    // 1E83 0334;	
    // (ẃ) LATIN SMALL LETTER W WITH ACUTE	[1F5B | 0020 004A 0024 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1F5B, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E83 0334;	
    // (ẃ) LATIN SMALL LETTER W WITH ACUTE	[1F5B | 0020 004A 0024 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1F5B, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_489)
{
    uint32_t const cps[3] = { 0x0057, 0x0301, 0x0334 };

    // 0057 0301 0334;	
    // (Ẃ) LATIN CAPITAL LETTER W, COMBINING ACUTE ACCENT	[1F5B | 0020 004A 0024 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1F5B, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0057 0301 0334;	
    // (Ẃ) LATIN CAPITAL LETTER W, COMBINING ACUTE ACCENT	[1F5B | 0020 004A 0024 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1F5B, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_490)
{
    uint32_t const cps[3] = { 0x0057, 0x0334, 0x0301 };

    // 0057 0334 0301;	
    // (W̴) LATIN CAPITAL LETTER W, COMBINING TILDE OVERLAY	[1F5B | 0020 004A 0024 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1F5B, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0057 0334 0301;	
    // (W̴) LATIN CAPITAL LETTER W, COMBINING TILDE OVERLAY	[1F5B | 0020 004A 0024 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1F5B, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_491)
{
    uint32_t const cps[3] = { 0x0057, 0x0334, 0x0341 };

    // 0057 0334 0341;	
    // (W̴) LATIN CAPITAL LETTER W, COMBINING TILDE OVERLAY	[1F5B | 0020 004A 0024 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1F5B, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0057 0334 0341;	
    // (W̴) LATIN CAPITAL LETTER W, COMBINING TILDE OVERLAY	[1F5B | 0020 004A 0024 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1F5B, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_492)
{
    uint32_t const cps[2] = { 0x1E82, 0x0334 };

    // 1E82 0334;	
    // (Ẃ) LATIN CAPITAL LETTER W WITH ACUTE	[1F5B | 0020 004A 0024 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1F5B, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E82 0334;	
    // (Ẃ) LATIN CAPITAL LETTER W WITH ACUTE	[1F5B | 0020 004A 0024 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1F5B, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_493)
{
    uint32_t const cps[3] = { 0x0077, 0x0300, 0x0334 };

    // 0077 0300 0334;	
    // (ẁ) LATIN SMALL LETTER W, COMBINING GRAVE ACCENT	[1F5B | 0020 004A 0025 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1F5B, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0077 0300 0334;	
    // (ẁ) LATIN SMALL LETTER W, COMBINING GRAVE ACCENT	[1F5B | 0020 004A 0025 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1F5B, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_494)
{
    uint32_t const cps[3] = { 0x0077, 0x0334, 0x0300 };

    // 0077 0334 0300;	
    // (w̴) LATIN SMALL LETTER W, COMBINING TILDE OVERLAY	[1F5B | 0020 004A 0025 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1F5B, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0077 0334 0300;	
    // (w̴) LATIN SMALL LETTER W, COMBINING TILDE OVERLAY	[1F5B | 0020 004A 0025 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1F5B, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_495)
{
    uint32_t const cps[3] = { 0x0077, 0x0334, 0x0340 };

    // 0077 0334 0340;	
    // (w̴) LATIN SMALL LETTER W, COMBINING TILDE OVERLAY	[1F5B | 0020 004A 0025 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1F5B, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0077 0334 0340;	
    // (w̴) LATIN SMALL LETTER W, COMBINING TILDE OVERLAY	[1F5B | 0020 004A 0025 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1F5B, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_496)
{
    uint32_t const cps[2] = { 0x1E81, 0x0334 };

    // 1E81 0334;	
    // (ẁ) LATIN SMALL LETTER W WITH GRAVE	[1F5B | 0020 004A 0025 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1F5B, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E81 0334;	
    // (ẁ) LATIN SMALL LETTER W WITH GRAVE	[1F5B | 0020 004A 0025 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1F5B, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_497)
{
    uint32_t const cps[3] = { 0x0057, 0x0300, 0x0334 };

    // 0057 0300 0334;	
    // (Ẁ) LATIN CAPITAL LETTER W, COMBINING GRAVE ACCENT	[1F5B | 0020 004A 0025 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1F5B, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0057 0300 0334;	
    // (Ẁ) LATIN CAPITAL LETTER W, COMBINING GRAVE ACCENT	[1F5B | 0020 004A 0025 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1F5B, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_498)
{
    uint32_t const cps[3] = { 0x0057, 0x0334, 0x0300 };

    // 0057 0334 0300;	
    // (W̴) LATIN CAPITAL LETTER W, COMBINING TILDE OVERLAY	[1F5B | 0020 004A 0025 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1F5B, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0057 0334 0300;	
    // (W̴) LATIN CAPITAL LETTER W, COMBINING TILDE OVERLAY	[1F5B | 0020 004A 0025 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1F5B, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_123_499)
{
    uint32_t const cps[3] = { 0x0057, 0x0334, 0x0340 };

    // 0057 0334 0340;	
    // (W̴) LATIN CAPITAL LETTER W, COMBINING TILDE OVERLAY	[1F5B | 0020 004A 0025 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1F5B, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0057 0334 0340;	
    // (W̴) LATIN CAPITAL LETTER W, COMBINING TILDE OVERLAY	[1F5B | 0020 004A 0025 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1F5B, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

