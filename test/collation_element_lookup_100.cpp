// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_100_000)
{
    // A9B2  ; [.33E3.0020.0002] 
    // JAVANESE LETTER HA

    uint32_t const cps[1] = { 0xa9b2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x33e3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_001)
{
    // A9B3  ; [.0000.00C2.0002] 
    // JAVANESE SIGN CECAK TELU

    uint32_t const cps[1] = { 0xa9b3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_002)
{
    // A9B4  ; [.33E4.0020.0002] 
    // JAVANESE VOWEL SIGN TARUNG

    uint32_t const cps[1] = { 0xa9b4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x33e4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_003)
{
    // A9B5  ; [.33ED.0020.0002] 
    // JAVANESE VOWEL SIGN TOLONG

    uint32_t const cps[1] = { 0xa9b5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x33ed), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_004)
{
    // A9B6  ; [.33E6.0020.0002] 
    // JAVANESE VOWEL SIGN WULU

    uint32_t const cps[1] = { 0xa9b6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x33e6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_005)
{
    // A9B7  ; [.33E7.0020.0002] 
    // JAVANESE VOWEL SIGN WULU MELIK

    uint32_t const cps[1] = { 0xa9b7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x33e7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_006)
{
    // A9B8  ; [.33E8.0020.0002] 
    // JAVANESE VOWEL SIGN SUKU

    uint32_t const cps[1] = { 0xa9b8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x33e8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_007)
{
    // A9B9  ; [.33E9.0020.0002] 
    // JAVANESE VOWEL SIGN SUKU MENDUT

    uint32_t const cps[1] = { 0xa9b9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x33e9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_008)
{
    // A9BA  ; [.33EB.0020.0002] 
    // JAVANESE VOWEL SIGN TALING

    uint32_t const cps[1] = { 0xa9ba };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x33eb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_009)
{
    // A9BB  ; [.33EC.0020.0002] 
    // JAVANESE VOWEL SIGN DIRGA MURE

    uint32_t const cps[1] = { 0xa9bb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x33ec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_010)
{
    // A9BC  ; [.33E5.0020.0002] 
    // JAVANESE VOWEL SIGN PEPET

    uint32_t const cps[1] = { 0xa9bc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x33e5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_011)
{
    // A9BD  ; [.33EA.0020.0002] 
    // JAVANESE CONSONANT SIGN KERET

    uint32_t const cps[1] = { 0xa9bd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x33ea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_012)
{
    // A9BE  ; [.33DB.0020.0002] 
    // JAVANESE CONSONANT SIGN PENGKAL

    uint32_t const cps[1] = { 0xa9be };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x33db), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_013)
{
    // A9BF  ; [.33DD.0020.0002] 
    // JAVANESE CONSONANT SIGN CAKRA

    uint32_t const cps[1] = { 0xa9bf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x33dd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_014)
{
    // A9C0  ; [.33EE.0020.0002] 
    // JAVANESE PANGKON

    uint32_t const cps[1] = { 0xa9c0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x33ee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_015)
{
    // A9C1  ; [*02CE.0020.0002] 
    // JAVANESE LEFT RERENGGAN

    uint32_t const cps[1] = { 0xa9c1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2ce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_016)
{
    // A9C2  ; [*02CF.0020.0002] 
    // JAVANESE RIGHT RERENGGAN

    uint32_t const cps[1] = { 0xa9c2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2cf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_017)
{
    // A9C3  ; [*02D0.0020.0002] 
    // JAVANESE PADA ANDAP

    uint32_t const cps[1] = { 0xa9c3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2d0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_018)
{
    // A9C4  ; [*02D1.0020.0002] 
    // JAVANESE PADA MADYA

    uint32_t const cps[1] = { 0xa9c4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2d1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_019)
{
    // A9C5  ; [*02D2.0020.0002] 
    // JAVANESE PADA LUHUR

    uint32_t const cps[1] = { 0xa9c5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2d2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_020)
{
    // A9C6  ; [*02D3.0020.0002] 
    // JAVANESE PADA WINDU

    uint32_t const cps[1] = { 0xa9c6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2d3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_021)
{
    // A9C7  ; [*025C.0020.0002] 
    // JAVANESE PADA PANGKAT

    uint32_t const cps[1] = { 0xa9c7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x25c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_022)
{
    // A9C8  ; [*02A4.0020.0002] 
    // JAVANESE PADA LINGSA

    uint32_t const cps[1] = { 0xa9c8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2a4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_023)
{
    // A9C9  ; [*02A5.0020.0002] 
    // JAVANESE PADA LUNGSI

    uint32_t const cps[1] = { 0xa9c9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2a5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_024)
{
    // A9CA  ; [*02D4.0020.0002] 
    // JAVANESE PADA ADEG

    uint32_t const cps[1] = { 0xa9ca };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2d4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_025)
{
    // A9CB  ; [*02D5.0020.0002] 
    // JAVANESE PADA ADEG ADEG

    uint32_t const cps[1] = { 0xa9cb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2d5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_026)
{
    // A9CC  ; [*02D6.0020.0002] 
    // JAVANESE PADA PISELEH

    uint32_t const cps[1] = { 0xa9cc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2d6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_027)
{
    // A9CD  ; [*02D7.0020.0002] 
    // JAVANESE TURNED PADA PISELEH

    uint32_t const cps[1] = { 0xa9cd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2d7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_028)
{
    // A9CF  ; [.1C63.0020.0002] 
    // JAVANESE PANGRANGKEP

    uint32_t const cps[1] = { 0xa9cf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c63), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_029)
{
    // A9D0  ; [.1CA3.0020.0002] 
    // JAVANESE DIGIT ZERO

    uint32_t const cps[1] = { 0xa9d0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_030)
{
    // A9D1  ; [.1CA4.0020.0002] 
    // JAVANESE DIGIT ONE

    uint32_t const cps[1] = { 0xa9d1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_031)
{
    // A9D2  ; [.1CA5.0020.0002] 
    // JAVANESE DIGIT TWO

    uint32_t const cps[1] = { 0xa9d2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_032)
{
    // A9D3  ; [.1CA6.0020.0002] 
    // JAVANESE DIGIT THREE

    uint32_t const cps[1] = { 0xa9d3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_033)
{
    // A9D4  ; [.1CA7.0020.0002] 
    // JAVANESE DIGIT FOUR

    uint32_t const cps[1] = { 0xa9d4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_034)
{
    // A9D5  ; [.1CA8.0020.0002] 
    // JAVANESE DIGIT FIVE

    uint32_t const cps[1] = { 0xa9d5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_035)
{
    // A9D6  ; [.1CA9.0020.0002] 
    // JAVANESE DIGIT SIX

    uint32_t const cps[1] = { 0xa9d6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_036)
{
    // A9D7  ; [.1CAA.0020.0002] 
    // JAVANESE DIGIT SEVEN

    uint32_t const cps[1] = { 0xa9d7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_037)
{
    // A9D8  ; [.1CAB.0020.0002] 
    // JAVANESE DIGIT EIGHT

    uint32_t const cps[1] = { 0xa9d8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_038)
{
    // A9D9  ; [.1CAC.0020.0002] 
    // JAVANESE DIGIT NINE

    uint32_t const cps[1] = { 0xa9d9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_039)
{
    // A9DE  ; [*0445.0020.0002] 
    // JAVANESE PADA TIRTA TUMETES

    uint32_t const cps[1] = { 0xa9de };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x445), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_040)
{
    // A9DF  ; [*0446.0020.0002] 
    // JAVANESE PADA ISEN-ISEN

    uint32_t const cps[1] = { 0xa9df };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x446), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_041)
{
    // A9E0  ; [.3155.0020.0002] 
    // MYANMAR LETTER SHAN GHA

    uint32_t const cps[1] = { 0xa9e0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3155), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_042)
{
    // A9E1  ; [.315D.0020.0002] 
    // MYANMAR LETTER SHAN CHA

    uint32_t const cps[1] = { 0xa9e1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x315d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_043)
{
    // A9E2  ; [.3167.0020.0002] 
    // MYANMAR LETTER SHAN JHA

    uint32_t const cps[1] = { 0xa9e2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3167), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_044)
{
    // A9E3  ; [.317D.0020.0002] 
    // MYANMAR LETTER SHAN NNA

    uint32_t const cps[1] = { 0xa9e3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x317d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_045)
{
    // A9E4  ; [.3196.0020.0002] 
    // MYANMAR LETTER SHAN BHA

    uint32_t const cps[1] = { 0xa9e4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3196), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_046)
{
    // A9E5  ; [.31E0.0020.0002] 
    // MYANMAR SIGN SHAN SAW

    uint32_t const cps[1] = { 0xa9e5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x31e0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_047)
{
    // A9E6  ; [.1C64.0020.0002] 
    // MYANMAR MODIFIER LETTER SHAN REDUPLICATION

    uint32_t const cps[1] = { 0xa9e6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1c64), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_048)
{
    // A9E7  ; [.316F.0020.0002] 
    // MYANMAR LETTER TAI LAING NYA

    uint32_t const cps[1] = { 0xa9e7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x316f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_049)
{
    // A9E8  ; [.3191.0020.0002] 
    // MYANMAR LETTER TAI LAING FA

    uint32_t const cps[1] = { 0xa9e8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3191), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_050)
{
    // A9E9  ; [.3153.0020.0002] 
    // MYANMAR LETTER TAI LAING GA

    uint32_t const cps[1] = { 0xa9e9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3153), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_051)
{
    // A9EA  ; [.3156.0020.0002] 
    // MYANMAR LETTER TAI LAING GHA

    uint32_t const cps[1] = { 0xa9ea };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3156), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_052)
{
    // A9EB  ; [.3162.0020.0002] 
    // MYANMAR LETTER TAI LAING JA

    uint32_t const cps[1] = { 0xa9eb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3162), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_053)
{
    // A9EC  ; [.3169.0020.0002] 
    // MYANMAR LETTER TAI LAING JHA

    uint32_t const cps[1] = { 0xa9ec };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3169), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_054)
{
    // A9ED  ; [.3177.0020.0002] 
    // MYANMAR LETTER TAI LAING DDA

    uint32_t const cps[1] = { 0xa9ed };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3177), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_055)
{
    // A9EE  ; [.317A.0020.0002] 
    // MYANMAR LETTER TAI LAING DDHA

    uint32_t const cps[1] = { 0xa9ee };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x317a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_056)
{
    // A9EF  ; [.317E.0020.0002] 
    // MYANMAR LETTER TAI LAING NNA

    uint32_t const cps[1] = { 0xa9ef };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x317e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_057)
{
    // A9F0  ; [.1CA3.0020.0002] 
    // MYANMAR TAI LAING DIGIT ZERO

    uint32_t const cps[1] = { 0xa9f0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_058)
{
    // A9F1  ; [.1CA4.0020.0002] 
    // MYANMAR TAI LAING DIGIT ONE

    uint32_t const cps[1] = { 0xa9f1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_059)
{
    // A9F2  ; [.1CA5.0020.0002] 
    // MYANMAR TAI LAING DIGIT TWO

    uint32_t const cps[1] = { 0xa9f2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_060)
{
    // A9F3  ; [.1CA6.0020.0002] 
    // MYANMAR TAI LAING DIGIT THREE

    uint32_t const cps[1] = { 0xa9f3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_061)
{
    // A9F4  ; [.1CA7.0020.0002] 
    // MYANMAR TAI LAING DIGIT FOUR

    uint32_t const cps[1] = { 0xa9f4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_062)
{
    // A9F5  ; [.1CA8.0020.0002] 
    // MYANMAR TAI LAING DIGIT FIVE

    uint32_t const cps[1] = { 0xa9f5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_063)
{
    // A9F6  ; [.1CA9.0020.0002] 
    // MYANMAR TAI LAING DIGIT SIX

    uint32_t const cps[1] = { 0xa9f6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_064)
{
    // A9F7  ; [.1CAA.0020.0002] 
    // MYANMAR TAI LAING DIGIT SEVEN

    uint32_t const cps[1] = { 0xa9f7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_065)
{
    // A9F8  ; [.1CAB.0020.0002] 
    // MYANMAR TAI LAING DIGIT EIGHT

    uint32_t const cps[1] = { 0xa9f8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_066)
{
    // A9F9  ; [.1CAC.0020.0002] 
    // MYANMAR TAI LAING DIGIT NINE

    uint32_t const cps[1] = { 0xa9f9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_067)
{
    // A9FA  ; [.31B2.0020.0002] 
    // MYANMAR LETTER TAI LAING LLA

    uint32_t const cps[1] = { 0xa9fa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x31b2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_068)
{
    // A9FB  ; [.3183.0020.0002] 
    // MYANMAR LETTER TAI LAING DA

    uint32_t const cps[1] = { 0xa9fb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3183), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_069)
{
    // A9FC  ; [.3186.0020.0002] 
    // MYANMAR LETTER TAI LAING DHA

    uint32_t const cps[1] = { 0xa9fc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3186), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_070)
{
    // A9FD  ; [.3194.0020.0002] 
    // MYANMAR LETTER TAI LAING BA

    uint32_t const cps[1] = { 0xa9fd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3194), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_071)
{
    // A9FE  ; [.3197.0020.0002] 
    // MYANMAR LETTER TAI LAING BHA

    uint32_t const cps[1] = { 0xa9fe };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3197), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_072)
{
    // AA00  ; [.3329.0020.0002] 
    // CHAM LETTER A

    uint32_t const cps[1] = { 0xaa00 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3329), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_073)
{
    // AA01  ; [.332A.0020.0002] 
    // CHAM LETTER I

    uint32_t const cps[1] = { 0xaa01 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x332a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_074)
{
    // AA02  ; [.332B.0020.0002] 
    // CHAM LETTER U

    uint32_t const cps[1] = { 0xaa02 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x332b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_075)
{
    // AA03  ; [.332C.0020.0002] 
    // CHAM LETTER E

    uint32_t const cps[1] = { 0xaa03 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x332c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_076)
{
    // AA04  ; [.332D.0020.0002] 
    // CHAM LETTER AI

    uint32_t const cps[1] = { 0xaa04 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x332d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_077)
{
    // AA05  ; [.332E.0020.0002] 
    // CHAM LETTER O

    uint32_t const cps[1] = { 0xaa05 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x332e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_078)
{
    // AA06  ; [.332F.0020.0002] 
    // CHAM LETTER KA

    uint32_t const cps[1] = { 0xaa06 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x332f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_079)
{
    // AA07  ; [.3330.0020.0002] 
    // CHAM LETTER KHA

    uint32_t const cps[1] = { 0xaa07 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3330), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_080)
{
    // AA08  ; [.3331.0020.0002] 
    // CHAM LETTER GA

    uint32_t const cps[1] = { 0xaa08 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3331), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_081)
{
    // AA09  ; [.3332.0020.0002] 
    // CHAM LETTER GHA

    uint32_t const cps[1] = { 0xaa09 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3332), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_082)
{
    // AA0A  ; [.3333.0020.0002] 
    // CHAM LETTER NGUE

    uint32_t const cps[1] = { 0xaa0a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3333), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_083)
{
    // AA0B  ; [.3334.0020.0002] 
    // CHAM LETTER NGA

    uint32_t const cps[1] = { 0xaa0b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3334), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_084)
{
    // AA0C  ; [.3335.0020.0002] 
    // CHAM LETTER CHA

    uint32_t const cps[1] = { 0xaa0c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3335), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_085)
{
    // AA0D  ; [.3336.0020.0002] 
    // CHAM LETTER CHHA

    uint32_t const cps[1] = { 0xaa0d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3336), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_086)
{
    // AA0E  ; [.3337.0020.0002] 
    // CHAM LETTER JA

    uint32_t const cps[1] = { 0xaa0e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3337), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_087)
{
    // AA0F  ; [.3338.0020.0002] 
    // CHAM LETTER JHA

    uint32_t const cps[1] = { 0xaa0f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3338), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_088)
{
    // AA10  ; [.3339.0020.0002] 
    // CHAM LETTER NHUE

    uint32_t const cps[1] = { 0xaa10 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3339), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_089)
{
    // AA11  ; [.333A.0020.0002] 
    // CHAM LETTER NHA

    uint32_t const cps[1] = { 0xaa11 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x333a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_090)
{
    // AA12  ; [.333B.0020.0002] 
    // CHAM LETTER NHJA

    uint32_t const cps[1] = { 0xaa12 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x333b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_091)
{
    // AA13  ; [.333C.0020.0002] 
    // CHAM LETTER TA

    uint32_t const cps[1] = { 0xaa13 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x333c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_092)
{
    // AA14  ; [.333D.0020.0002] 
    // CHAM LETTER THA

    uint32_t const cps[1] = { 0xaa14 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x333d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_093)
{
    // AA15  ; [.333E.0020.0002] 
    // CHAM LETTER DA

    uint32_t const cps[1] = { 0xaa15 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x333e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_094)
{
    // AA16  ; [.333F.0020.0002] 
    // CHAM LETTER DHA

    uint32_t const cps[1] = { 0xaa16 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x333f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_095)
{
    // AA17  ; [.3340.0020.0002] 
    // CHAM LETTER NUE

    uint32_t const cps[1] = { 0xaa17 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3340), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_096)
{
    // AA18  ; [.3341.0020.0002] 
    // CHAM LETTER NA

    uint32_t const cps[1] = { 0xaa18 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3341), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_097)
{
    // AA19  ; [.3342.0020.0002] 
    // CHAM LETTER DDA

    uint32_t const cps[1] = { 0xaa19 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3342), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_098)
{
    // AA1A  ; [.3343.0020.0002] 
    // CHAM LETTER PA

    uint32_t const cps[1] = { 0xaa1a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3343), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_099)
{
    // AA1B  ; [.3344.0020.0002] 
    // CHAM LETTER PPA

    uint32_t const cps[1] = { 0xaa1b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3344), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_100)
{
    // AA1C  ; [.3345.0020.0002] 
    // CHAM LETTER PHA

    uint32_t const cps[1] = { 0xaa1c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3345), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_101)
{
    // AA1D  ; [.3346.0020.0002] 
    // CHAM LETTER BA

    uint32_t const cps[1] = { 0xaa1d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3346), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_102)
{
    // AA1E  ; [.3347.0020.0002] 
    // CHAM LETTER BHA

    uint32_t const cps[1] = { 0xaa1e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3347), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_103)
{
    // AA1F  ; [.3348.0020.0002] 
    // CHAM LETTER MUE

    uint32_t const cps[1] = { 0xaa1f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3348), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_104)
{
    // AA20  ; [.3349.0020.0002] 
    // CHAM LETTER MA

    uint32_t const cps[1] = { 0xaa20 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3349), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_105)
{
    // AA21  ; [.334A.0020.0002] 
    // CHAM LETTER BBA

    uint32_t const cps[1] = { 0xaa21 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x334a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_106)
{
    // AA22  ; [.334B.0020.0002] 
    // CHAM LETTER YA

    uint32_t const cps[1] = { 0xaa22 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x334b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_107)
{
    // AA23  ; [.334C.0020.0002] 
    // CHAM LETTER RA

    uint32_t const cps[1] = { 0xaa23 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x334c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_108)
{
    // AA24  ; [.334D.0020.0002] 
    // CHAM LETTER LA

    uint32_t const cps[1] = { 0xaa24 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x334d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_109)
{
    // AA25  ; [.334E.0020.0002] 
    // CHAM LETTER VA

    uint32_t const cps[1] = { 0xaa25 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x334e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_110)
{
    // AA26  ; [.334F.0020.0002] 
    // CHAM LETTER SSA

    uint32_t const cps[1] = { 0xaa26 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x334f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_111)
{
    // AA27  ; [.3350.0020.0002] 
    // CHAM LETTER SA

    uint32_t const cps[1] = { 0xaa27 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3350), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_112)
{
    // AA28  ; [.3351.0020.0002] 
    // CHAM LETTER HA

    uint32_t const cps[1] = { 0xaa28 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3351), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_113)
{
    // AA29  ; [.3356.0020.0002] 
    // CHAM VOWEL SIGN AA

    uint32_t const cps[1] = { 0xaa29 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3356), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_114)
{
    // AA2A  ; [.3357.0020.0002] 
    // CHAM VOWEL SIGN I

    uint32_t const cps[1] = { 0xaa2a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3357), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_115)
{
    // AA2B  ; [.3358.0020.0002] 
    // CHAM VOWEL SIGN II

    uint32_t const cps[1] = { 0xaa2b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3358), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_116)
{
    // AA2C  ; [.3359.0020.0002] 
    // CHAM VOWEL SIGN EI

    uint32_t const cps[1] = { 0xaa2c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3359), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_117)
{
    // AA2D  ; [.335A.0020.0002] 
    // CHAM VOWEL SIGN U

    uint32_t const cps[1] = { 0xaa2d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x335a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_118)
{
    // AA2E  ; [.335B.0020.0002] 
    // CHAM VOWEL SIGN OE

    uint32_t const cps[1] = { 0xaa2e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x335b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_119)
{
    // AA2F  ; [.335C.0020.0002] 
    // CHAM VOWEL SIGN O

    uint32_t const cps[1] = { 0xaa2f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x335c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_120)
{
    // AA30  ; [.335D.0020.0002] 
    // CHAM VOWEL SIGN AI

    uint32_t const cps[1] = { 0xaa30 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x335d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_121)
{
    // AA31  ; [.335E.0020.0002] 
    // CHAM VOWEL SIGN AU

    uint32_t const cps[1] = { 0xaa31 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x335e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_122)
{
    // AA32  ; [.335F.0020.0002] 
    // CHAM VOWEL SIGN UE

    uint32_t const cps[1] = { 0xaa32 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x335f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_123)
{
    // AA33  ; [.3352.0020.0002] 
    // CHAM CONSONANT SIGN YA

    uint32_t const cps[1] = { 0xaa33 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3352), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_124)
{
    // AA34  ; [.3353.0020.0002] 
    // CHAM CONSONANT SIGN RA

    uint32_t const cps[1] = { 0xaa34 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3353), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_125)
{
    // AA35  ; [.3354.0020.0002] 
    // CHAM CONSONANT SIGN LA

    uint32_t const cps[1] = { 0xaa35 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3354), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_126)
{
    // AA36  ; [.3355.0020.0002] 
    // CHAM CONSONANT SIGN WA

    uint32_t const cps[1] = { 0xaa36 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3355), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_127)
{
    // AA40  ; [.3360.0020.0002] 
    // CHAM LETTER FINAL K

    uint32_t const cps[1] = { 0xaa40 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3360), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_128)
{
    // AA41  ; [.3361.0020.0002] 
    // CHAM LETTER FINAL G

    uint32_t const cps[1] = { 0xaa41 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3361), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_129)
{
    // AA42  ; [.3362.0020.0002] 
    // CHAM LETTER FINAL NG

    uint32_t const cps[1] = { 0xaa42 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3362), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_130)
{
    // AA43  ; [.3363.0020.0002] 
    // CHAM CONSONANT SIGN FINAL NG

    uint32_t const cps[1] = { 0xaa43 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3363), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_131)
{
    // AA44  ; [.3364.0020.0002] 
    // CHAM LETTER FINAL CH

    uint32_t const cps[1] = { 0xaa44 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3364), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_132)
{
    // AA45  ; [.3365.0020.0002] 
    // CHAM LETTER FINAL T

    uint32_t const cps[1] = { 0xaa45 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3365), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_133)
{
    // AA46  ; [.3366.0020.0002] 
    // CHAM LETTER FINAL N

    uint32_t const cps[1] = { 0xaa46 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3366), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_134)
{
    // AA47  ; [.3367.0020.0002] 
    // CHAM LETTER FINAL P

    uint32_t const cps[1] = { 0xaa47 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3367), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_135)
{
    // AA48  ; [.3368.0020.0002] 
    // CHAM LETTER FINAL Y

    uint32_t const cps[1] = { 0xaa48 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3368), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_136)
{
    // AA49  ; [.3369.0020.0002] 
    // CHAM LETTER FINAL R

    uint32_t const cps[1] = { 0xaa49 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3369), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_137)
{
    // AA4A  ; [.336A.0020.0002] 
    // CHAM LETTER FINAL L

    uint32_t const cps[1] = { 0xaa4a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x336a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_138)
{
    // AA4B  ; [.336B.0020.0002] 
    // CHAM LETTER FINAL SS

    uint32_t const cps[1] = { 0xaa4b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x336b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_139)
{
    // AA4C  ; [.336C.0020.0002] 
    // CHAM CONSONANT SIGN FINAL M

    uint32_t const cps[1] = { 0xaa4c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x336c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_140)
{
    // AA4D  ; [.336D.0020.0002] 
    // CHAM CONSONANT SIGN FINAL H

    uint32_t const cps[1] = { 0xaa4d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x336d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_141)
{
    // AA50  ; [.1CA3.0020.0002] 
    // CHAM DIGIT ZERO

    uint32_t const cps[1] = { 0xaa50 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_142)
{
    // AA51  ; [.1CA4.0020.0002] 
    // CHAM DIGIT ONE

    uint32_t const cps[1] = { 0xaa51 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_143)
{
    // AA52  ; [.1CA5.0020.0002] 
    // CHAM DIGIT TWO

    uint32_t const cps[1] = { 0xaa52 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_144)
{
    // AA53  ; [.1CA6.0020.0002] 
    // CHAM DIGIT THREE

    uint32_t const cps[1] = { 0xaa53 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_145)
{
    // AA54  ; [.1CA7.0020.0002] 
    // CHAM DIGIT FOUR

    uint32_t const cps[1] = { 0xaa54 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_146)
{
    // AA55  ; [.1CA8.0020.0002] 
    // CHAM DIGIT FIVE

    uint32_t const cps[1] = { 0xaa55 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_147)
{
    // AA56  ; [.1CA9.0020.0002] 
    // CHAM DIGIT SIX

    uint32_t const cps[1] = { 0xaa56 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_148)
{
    // AA57  ; [.1CAA.0020.0002] 
    // CHAM DIGIT SEVEN

    uint32_t const cps[1] = { 0xaa57 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_100_149)
{
    // AA58  ; [.1CAB.0020.0002] 
    // CHAM DIGIT EIGHT

    uint32_t const cps[1] = { 0xaa58 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

