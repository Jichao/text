// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_187_000)
{
    // 1E830 ; [.3C55.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M021 SU

    uint32_t const cps[1] = { 0x1e830 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c55), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_001)
{
    // 1E831 ; [.3C56.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M162 SEE

    uint32_t const cps[1] = { 0x1e831 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c56), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_002)
{
    // 1E832 ; [.3C57.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M116 SE

    uint32_t const cps[1] = { 0x1e832 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c57), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_003)
{
    // 1E833 ; [.3C58.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M136 SOO

    uint32_t const cps[1] = { 0x1e833 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c58), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_004)
{
    // 1E834 ; [.3C59.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M079 SO

    uint32_t const cps[1] = { 0x1e834 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c59), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_005)
{
    // 1E835 ; [.3C5A.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M196 SIA

    uint32_t const cps[1] = { 0x1e835 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c5a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_006)
{
    // 1E836 ; [.3C5B.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M025 LI

    uint32_t const cps[1] = { 0x1e836 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c5b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_007)
{
    // 1E837 ; [.3C5C.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M026 LA

    uint32_t const cps[1] = { 0x1e837 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c5c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_008)
{
    // 1E838 ; [.3C5D.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M027 LU

    uint32_t const cps[1] = { 0x1e838 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c5d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_009)
{
    // 1E839 ; [.3C5E.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M084 LEE

    uint32_t const cps[1] = { 0x1e839 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c5e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_010)
{
    // 1E83A ; [.3C5F.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M073 LE

    uint32_t const cps[1] = { 0x1e83a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c5f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_011)
{
    // 1E83B ; [.3C60.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M054 LOO

    uint32_t const cps[1] = { 0x1e83b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c60), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_012)
{
    // 1E83C ; [.3C61.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M153 LO

    uint32_t const cps[1] = { 0x1e83c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c61), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_013)
{
    // 1E83D ; [.3C62.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M110 LONG LE

    uint32_t const cps[1] = { 0x1e83d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c62), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_014)
{
    // 1E83E ; [.3C63.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M016 DI

    uint32_t const cps[1] = { 0x1e83e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c63), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_015)
{
    // 1E83F ; [.3C64.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M017 DA

    uint32_t const cps[1] = { 0x1e83f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c64), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_016)
{
    // 1E840 ; [.3C65.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M018 DU

    uint32_t const cps[1] = { 0x1e840 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c65), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_017)
{
    // 1E841 ; [.3C66.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M089 DEE

    uint32_t const cps[1] = { 0x1e841 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c66), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_018)
{
    // 1E842 ; [.3C67.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M180 DOO

    uint32_t const cps[1] = { 0x1e842 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c67), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_019)
{
    // 1E843 ; [.3C68.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M181 DO

    uint32_t const cps[1] = { 0x1e843 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c68), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_020)
{
    // 1E844 ; [.3C69.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M022 TI

    uint32_t const cps[1] = { 0x1e844 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c69), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_021)
{
    // 1E845 ; [.3C6A.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M023 TA

    uint32_t const cps[1] = { 0x1e845 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c6a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_022)
{
    // 1E846 ; [.3C6B.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M024 TU

    uint32_t const cps[1] = { 0x1e846 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c6b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_023)
{
    // 1E847 ; [.3C6C.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M091 TEE

    uint32_t const cps[1] = { 0x1e847 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c6c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_024)
{
    // 1E848 ; [.3C6D.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M055 TE

    uint32_t const cps[1] = { 0x1e848 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c6d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_025)
{
    // 1E849 ; [.3C6E.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M104 TOO

    uint32_t const cps[1] = { 0x1e849 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c6e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_026)
{
    // 1E84A ; [.3C6F.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M069 TO

    uint32_t const cps[1] = { 0x1e84a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c6f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_027)
{
    // 1E84B ; [.3C70.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M028 JI

    uint32_t const cps[1] = { 0x1e84b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c70), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_028)
{
    // 1E84C ; [.3C71.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M029 JA

    uint32_t const cps[1] = { 0x1e84c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c71), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_029)
{
    // 1E84D ; [.3C72.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M030 JU

    uint32_t const cps[1] = { 0x1e84d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c72), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_030)
{
    // 1E84E ; [.3C73.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M157 JEE

    uint32_t const cps[1] = { 0x1e84e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c73), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_031)
{
    // 1E84F ; [.3C74.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M113 JE

    uint32_t const cps[1] = { 0x1e84f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c74), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_032)
{
    // 1E850 ; [.3C75.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M160 JOO

    uint32_t const cps[1] = { 0x1e850 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c75), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_033)
{
    // 1E851 ; [.3C76.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M063 JO

    uint32_t const cps[1] = { 0x1e851 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c76), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_034)
{
    // 1E852 ; [.3C77.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M175 LONG JO

    uint32_t const cps[1] = { 0x1e852 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c77), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_035)
{
    // 1E853 ; [.3C78.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M031 YI

    uint32_t const cps[1] = { 0x1e853 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c78), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_036)
{
    // 1E854 ; [.3C79.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M032 YA

    uint32_t const cps[1] = { 0x1e854 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c79), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_037)
{
    // 1E855 ; [.3C7A.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M033 YU

    uint32_t const cps[1] = { 0x1e855 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c7a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_038)
{
    // 1E856 ; [.3C7B.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M109 YEE

    uint32_t const cps[1] = { 0x1e856 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c7b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_039)
{
    // 1E857 ; [.3C7C.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M080 YE

    uint32_t const cps[1] = { 0x1e857 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c7c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_040)
{
    // 1E858 ; [.3C7D.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M141 YOO

    uint32_t const cps[1] = { 0x1e858 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c7d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_041)
{
    // 1E859 ; [.3C7E.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M121 YO

    uint32_t const cps[1] = { 0x1e859 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c7e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_042)
{
    // 1E85A ; [.3C7F.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M034 FI

    uint32_t const cps[1] = { 0x1e85a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c7f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_043)
{
    // 1E85B ; [.3C80.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M035 FA

    uint32_t const cps[1] = { 0x1e85b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c80), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_044)
{
    // 1E85C ; [.3C81.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M036 FU

    uint32_t const cps[1] = { 0x1e85c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c81), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_045)
{
    // 1E85D ; [.3C82.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M078 FEE

    uint32_t const cps[1] = { 0x1e85d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c82), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_046)
{
    // 1E85E ; [.3C83.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M075 FE

    uint32_t const cps[1] = { 0x1e85e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c83), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_047)
{
    // 1E85F ; [.3C84.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M133 FOO

    uint32_t const cps[1] = { 0x1e85f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c84), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_048)
{
    // 1E860 ; [.3C85.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M088 FO

    uint32_t const cps[1] = { 0x1e860 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c85), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_049)
{
    // 1E861 ; [.3C86.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M197 FUA

    uint32_t const cps[1] = { 0x1e861 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c86), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_050)
{
    // 1E862 ; [.3C87.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M101 FAN

    uint32_t const cps[1] = { 0x1e862 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c87), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_051)
{
    // 1E863 ; [.3C88.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M037 NIN

    uint32_t const cps[1] = { 0x1e863 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c88), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_052)
{
    // 1E864 ; [.3C89.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M038 NAN

    uint32_t const cps[1] = { 0x1e864 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c89), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_053)
{
    // 1E865 ; [.3C8A.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M039 NUN

    uint32_t const cps[1] = { 0x1e865 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c8a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_054)
{
    // 1E866 ; [.3C8B.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M117 NEN

    uint32_t const cps[1] = { 0x1e866 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_055)
{
    // 1E867 ; [.3C8C.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M169 NON

    uint32_t const cps[1] = { 0x1e867 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_056)
{
    // 1E868 ; [.3C8D.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M176 HI

    uint32_t const cps[1] = { 0x1e868 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_057)
{
    // 1E869 ; [.3C8E.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M041 HA

    uint32_t const cps[1] = { 0x1e869 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_058)
{
    // 1E86A ; [.3C8F.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M186 HU

    uint32_t const cps[1] = { 0x1e86a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_059)
{
    // 1E86B ; [.3C90.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M040 HEE

    uint32_t const cps[1] = { 0x1e86b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c90), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_060)
{
    // 1E86C ; [.3C91.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M096 HE

    uint32_t const cps[1] = { 0x1e86c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c91), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_061)
{
    // 1E86D ; [.3C92.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M042 HOO

    uint32_t const cps[1] = { 0x1e86d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c92), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_062)
{
    // 1E86E ; [.3C93.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M140 HO

    uint32_t const cps[1] = { 0x1e86e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c93), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_063)
{
    // 1E86F ; [.3C94.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M083 HEEI

    uint32_t const cps[1] = { 0x1e86f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c94), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_064)
{
    // 1E870 ; [.3C95.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M128 HOOU

    uint32_t const cps[1] = { 0x1e870 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c95), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_065)
{
    // 1E871 ; [.3C96.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M053 HIN

    uint32_t const cps[1] = { 0x1e871 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c96), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_066)
{
    // 1E872 ; [.3C97.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M130 HAN

    uint32_t const cps[1] = { 0x1e872 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c97), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_067)
{
    // 1E873 ; [.3C98.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M087 HUN

    uint32_t const cps[1] = { 0x1e873 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c98), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_068)
{
    // 1E874 ; [.3C99.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M052 HEN

    uint32_t const cps[1] = { 0x1e874 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c99), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_069)
{
    // 1E875 ; [.3C9A.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M193 HON

    uint32_t const cps[1] = { 0x1e875 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c9a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_070)
{
    // 1E876 ; [.3C9B.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M046 HUAN

    uint32_t const cps[1] = { 0x1e876 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c9b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_071)
{
    // 1E877 ; [.3C9C.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M090 NGGI

    uint32_t const cps[1] = { 0x1e877 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c9c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_072)
{
    // 1E878 ; [.3C9D.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M043 NGGA

    uint32_t const cps[1] = { 0x1e878 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c9d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_073)
{
    // 1E879 ; [.3C9E.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M082 NGGU

    uint32_t const cps[1] = { 0x1e879 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c9e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_074)
{
    // 1E87A ; [.3C9F.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M115 NGGEE

    uint32_t const cps[1] = { 0x1e87a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3c9f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_075)
{
    // 1E87B ; [.3CA0.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M146 NGGE

    uint32_t const cps[1] = { 0x1e87b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ca0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_076)
{
    // 1E87C ; [.3CA1.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M156 NGGOO

    uint32_t const cps[1] = { 0x1e87c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ca1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_077)
{
    // 1E87D ; [.3CA2.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M120 NGGO

    uint32_t const cps[1] = { 0x1e87d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ca2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_078)
{
    // 1E87E ; [.3CA3.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M159 NGGAA

    uint32_t const cps[1] = { 0x1e87e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ca3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_079)
{
    // 1E87F ; [.3CA4.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M127 NGGUA

    uint32_t const cps[1] = { 0x1e87f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_080)
{
    // 1E880 ; [.3CA5.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M086 LONG NGGE

    uint32_t const cps[1] = { 0x1e880 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_081)
{
    // 1E881 ; [.3CA6.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M106 LONG NGGOO

    uint32_t const cps[1] = { 0x1e881 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_082)
{
    // 1E882 ; [.3CA7.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M183 LONG NGGO

    uint32_t const cps[1] = { 0x1e882 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_083)
{
    // 1E883 ; [.3CA8.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M155 GI

    uint32_t const cps[1] = { 0x1e883 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_084)
{
    // 1E884 ; [.3CA9.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M111 GA

    uint32_t const cps[1] = { 0x1e884 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_085)
{
    // 1E885 ; [.3CAA.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M168 GU

    uint32_t const cps[1] = { 0x1e885 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3caa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_086)
{
    // 1E886 ; [.3CAB.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M190 GEE

    uint32_t const cps[1] = { 0x1e886 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_087)
{
    // 1E887 ; [.3CAC.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M166 GUEI

    uint32_t const cps[1] = { 0x1e887 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_088)
{
    // 1E888 ; [.3CAD.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M167 GUAN

    uint32_t const cps[1] = { 0x1e888 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cad), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_089)
{
    // 1E889 ; [.3CAE.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M184 NGEN

    uint32_t const cps[1] = { 0x1e889 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cae), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_090)
{
    // 1E88A ; [.3CAF.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M057 NGON

    uint32_t const cps[1] = { 0x1e88a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3caf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_091)
{
    // 1E88B ; [.3CB0.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M177 NGUAN

    uint32_t const cps[1] = { 0x1e88b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cb0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_092)
{
    // 1E88C ; [.3CB1.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M068 PI

    uint32_t const cps[1] = { 0x1e88c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cb1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_093)
{
    // 1E88D ; [.3CB2.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M099 PA

    uint32_t const cps[1] = { 0x1e88d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cb2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_094)
{
    // 1E88E ; [.3CB3.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M050 PU

    uint32_t const cps[1] = { 0x1e88e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cb3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_095)
{
    // 1E88F ; [.3CB4.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M081 PEE

    uint32_t const cps[1] = { 0x1e88f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cb4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_096)
{
    // 1E890 ; [.3CB5.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M051 PE

    uint32_t const cps[1] = { 0x1e890 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cb5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_097)
{
    // 1E891 ; [.3CB6.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M102 POO

    uint32_t const cps[1] = { 0x1e891 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cb6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_098)
{
    // 1E892 ; [.3CB7.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M066 PO

    uint32_t const cps[1] = { 0x1e892 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cb7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_099)
{
    // 1E893 ; [.3CB8.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M145 MBI

    uint32_t const cps[1] = { 0x1e893 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cb8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_100)
{
    // 1E894 ; [.3CB9.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M062 MBA

    uint32_t const cps[1] = { 0x1e894 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cb9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_101)
{
    // 1E895 ; [.3CBA.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M122 MBU

    uint32_t const cps[1] = { 0x1e895 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cba), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_102)
{
    // 1E896 ; [.3CBB.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M047 MBEE

    uint32_t const cps[1] = { 0x1e896 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cbb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_103)
{
    // 1E897 ; [.3CBC.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M188 MBEE

    uint32_t const cps[1] = { 0x1e897 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cbc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_104)
{
    // 1E898 ; [.3CBD.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M072 MBE

    uint32_t const cps[1] = { 0x1e898 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cbd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_105)
{
    // 1E899 ; [.3CBE.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M172 MBOO

    uint32_t const cps[1] = { 0x1e899 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cbe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_106)
{
    // 1E89A ; [.3CBF.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M174 MBO

    uint32_t const cps[1] = { 0x1e89a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cbf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_107)
{
    // 1E89B ; [.3CC0.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M187 MBUU

    uint32_t const cps[1] = { 0x1e89b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cc0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_108)
{
    // 1E89C ; [.3CC1.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M161 LONG MBE

    uint32_t const cps[1] = { 0x1e89c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cc1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_109)
{
    // 1E89D ; [.3CC2.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M105 LONG MBOO

    uint32_t const cps[1] = { 0x1e89d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cc2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_110)
{
    // 1E89E ; [.3CC3.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M142 LONG MBO

    uint32_t const cps[1] = { 0x1e89e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cc3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_111)
{
    // 1E89F ; [.3CC4.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M132 KPI

    uint32_t const cps[1] = { 0x1e89f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cc4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_112)
{
    // 1E8A0 ; [.3CC5.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M092 KPA

    uint32_t const cps[1] = { 0x1e8a0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cc5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_113)
{
    // 1E8A1 ; [.3CC6.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M074 KPU

    uint32_t const cps[1] = { 0x1e8a1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cc6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_114)
{
    // 1E8A2 ; [.3CC7.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M044 KPEE

    uint32_t const cps[1] = { 0x1e8a2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cc7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_115)
{
    // 1E8A3 ; [.3CC8.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M108 KPE

    uint32_t const cps[1] = { 0x1e8a3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cc8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_116)
{
    // 1E8A4 ; [.3CC9.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M112 KPOO

    uint32_t const cps[1] = { 0x1e8a4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cc9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_117)
{
    // 1E8A5 ; [.3CCA.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M158 KPO

    uint32_t const cps[1] = { 0x1e8a5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_118)
{
    // 1E8A6 ; [.3CCB.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M124 GBI

    uint32_t const cps[1] = { 0x1e8a6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ccb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_119)
{
    // 1E8A7 ; [.3CCC.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M056 GBA

    uint32_t const cps[1] = { 0x1e8a7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ccc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_120)
{
    // 1E8A8 ; [.3CCD.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M148 GBU

    uint32_t const cps[1] = { 0x1e8a8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ccd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_121)
{
    // 1E8A9 ; [.3CCE.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M093 GBEE

    uint32_t const cps[1] = { 0x1e8a9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_122)
{
    // 1E8AA ; [.3CCF.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M107 GBE

    uint32_t const cps[1] = { 0x1e8aa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ccf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_123)
{
    // 1E8AB ; [.3CD0.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M071 GBOO

    uint32_t const cps[1] = { 0x1e8ab };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cd0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_124)
{
    // 1E8AC ; [.3CD1.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M070 GBO

    uint32_t const cps[1] = { 0x1e8ac };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cd1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_125)
{
    // 1E8AD ; [.3CD2.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M171 RA

    uint32_t const cps[1] = { 0x1e8ad };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cd2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_126)
{
    // 1E8AE ; [.3CD3.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M123 NDI

    uint32_t const cps[1] = { 0x1e8ae };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cd3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_127)
{
    // 1E8AF ; [.3CD4.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M129 NDA

    uint32_t const cps[1] = { 0x1e8af };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cd4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_128)
{
    // 1E8B0 ; [.3CD5.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M125 NDU

    uint32_t const cps[1] = { 0x1e8b0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cd5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_129)
{
    // 1E8B1 ; [.3CD6.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M191 NDEE

    uint32_t const cps[1] = { 0x1e8b1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cd6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_130)
{
    // 1E8B2 ; [.3CD7.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M119 NDE

    uint32_t const cps[1] = { 0x1e8b2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cd7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_131)
{
    // 1E8B3 ; [.3CD8.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M067 NDOO

    uint32_t const cps[1] = { 0x1e8b3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cd8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_132)
{
    // 1E8B4 ; [.3CD9.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M064 NDO

    uint32_t const cps[1] = { 0x1e8b4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cd9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_133)
{
    // 1E8B5 ; [.3CDA.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M152 NJA

    uint32_t const cps[1] = { 0x1e8b5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cda), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_134)
{
    // 1E8B6 ; [.3CDB.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M192 NJU

    uint32_t const cps[1] = { 0x1e8b6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cdb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_135)
{
    // 1E8B7 ; [.3CDC.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M149 NJEE

    uint32_t const cps[1] = { 0x1e8b7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cdc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_136)
{
    // 1E8B8 ; [.3CDD.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M134 NJOO

    uint32_t const cps[1] = { 0x1e8b8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cdd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_137)
{
    // 1E8B9 ; [.3CDE.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M182 VI

    uint32_t const cps[1] = { 0x1e8b9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cde), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_138)
{
    // 1E8BA ; [.3CDF.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M185 VA

    uint32_t const cps[1] = { 0x1e8ba };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3cdf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_139)
{
    // 1E8BB ; [.3CE0.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M151 VU

    uint32_t const cps[1] = { 0x1e8bb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ce0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_140)
{
    // 1E8BC ; [.3CE1.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M173 VEE

    uint32_t const cps[1] = { 0x1e8bc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ce1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_141)
{
    // 1E8BD ; [.3CE2.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M085 VE

    uint32_t const cps[1] = { 0x1e8bd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ce2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_142)
{
    // 1E8BE ; [.3CE3.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M144 VOO

    uint32_t const cps[1] = { 0x1e8be };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ce3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_143)
{
    // 1E8BF ; [.3CE4.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M077 VO

    uint32_t const cps[1] = { 0x1e8bf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ce4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_144)
{
    // 1E8C0 ; [.3CE5.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M164 NYIN

    uint32_t const cps[1] = { 0x1e8c0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ce5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_145)
{
    // 1E8C1 ; [.3CE6.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M058 NYAN

    uint32_t const cps[1] = { 0x1e8c1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ce6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_146)
{
    // 1E8C2 ; [.3CE7.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M170 NYUN

    uint32_t const cps[1] = { 0x1e8c2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ce7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_147)
{
    // 1E8C3 ; [.3CE8.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M098 NYEN

    uint32_t const cps[1] = { 0x1e8c3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ce8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_148)
{
    // 1E8C4 ; [.3CE9.0020.0002] 
    // MENDE KIKAKUI SYLLABLE M060 NYON

    uint32_t const cps[1] = { 0x1e8c4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ce9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_187_149)
{
    // 1E8C7 ; [.1CA4.0020.0002] 
    // MENDE KIKAKUI DIGIT ONE

    uint32_t const cps[1] = { 0x1e8c7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

